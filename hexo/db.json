{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-xiefeiji.ico","path":"images/favicon-16x16-xiefeiji.ico","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-xiefeiji.ico","path":"images/favicon-32x32-xiefeiji.ico","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/share/css/share.min.css","path":"share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/share/fonts/iconfont.eot","path":"share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/share/fonts/iconfont.svg","path":"share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/share/fonts/iconfont.ttf","path":"share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/share/fonts/iconfont.woff","path":"share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/share/js/jquery.share.min.js","path":"share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/share/js/social-share.min.js","path":"share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/Valine-1.3.4.min.js","path":"js/src/Valine-1.3.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/xiefeiji.gif","path":"images/xiefeiji.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/googled6b64f8b8a26b7b3.html","hash":"a8a38a77bdec487385a242cd2e7927ae3a5f908e","modified":1589276511269},{"_id":"source/baidu_verify_ruvyztIy26.html","hash":"c343592bd0a15c88ecdf44da907c3bebcf3df961","modified":1589277612778},{"_id":"source/robots.txt","hash":"236dfe0a7a6cdedd74fd30be9924f73419d2ce9a","modified":1589278727453},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1588036067097},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1588036067098},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1588036067101},{"_id":"themes/hexo-theme-next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1588036067112},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1588036067113},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1588036067114},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1588036067115},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1588036067116},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1588036067117},{"_id":"themes/hexo-theme-next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1588036067119},{"_id":"themes/hexo-theme-next/README.cn.md","hash":"b878b73f3fcdef47849453c94420871903d487b3","modified":1588036067120},{"_id":"themes/hexo-theme-next/_config.default.yml","hash":"cd8ec8caaf33cb7ddf7a39733b9f2a0efda7a756","modified":1588036067125},{"_id":"themes/hexo-theme-next/README.md","hash":"efcdc4b0ca791c3fc64afa28c8721e137f2d11ea","modified":1588036067123},{"_id":"themes/hexo-theme-next/_config.yml","hash":"4567d95957962dcc8c95606c1051486d83bfb4fa","modified":1595353617404},{"_id":"themes/hexo-theme-next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1588036067128},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1588036067132},{"_id":"themes/hexo-theme-next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1588036067288},{"_id":"source/_drafts/560-和为K的子数组.md","hash":"26e26d4e061504fac74d7c4521d97100c1a2805b","modified":1590937675931},{"_id":"source/_drafts/Netty面试问题.md","hash":"a9d52ea0f7d1b81d84fea5bb4f4041e9a86a1986","modified":1592395385875},{"_id":"source/_drafts/imooc在线课程实战.md","hash":"1beb4afe8b35c691209ec08d33f74787058941a6","modified":1596610463339},{"_id":"source/_drafts/tips.md","hash":"b8c95cc86b65919507446875ab3fe5c07f54e25b","modified":1590504799005},{"_id":"source/_drafts/youdw-github.md","hash":"0ec776ba888ee2c7bb436929943b68e170311941","modified":1593883912663},{"_id":"source/_drafts/一天200题.md","hash":"704d7d1f4cdfe7fe734bb1edd904f11ccac20dd8","modified":1596466849877},{"_id":"source/_drafts/技能评估平台.md","hash":"dfb41902b8b16d2bead6b2e7a5c3024f288484b2","modified":1596677037434},{"_id":"source/_drafts/毕业实习.md","hash":"3dcce99522de10e22ae858ad6f39fb2978a5baf0","modified":1595756231454},{"_id":"source/_drafts/编译原理.md","hash":"98e5724fff0dfc113e6902c8903c87fb8f19505a","modified":1595346535774},{"_id":"source/_posts/1014-最佳观光组合.md","hash":"145b510d49874262b28caefe18114d20fcda8f97","modified":1592395422775},{"_id":"source/_posts/1022-从根到叶的二进制数之和.md","hash":"5786d6ddd73ca272aececcf21dee85258473eab2","modified":1588953095532},{"_id":"source/_posts/127-单词接龙.md","hash":"ddc7460d25bb4bd84376a1ce16c14ac229f5500e","modified":1591545185227},{"_id":"source/_posts/152-乘积最大子数组.md","hash":"64f6e1ac783856d791ead563b10c218a970710ce","modified":1590409176284},{"_id":"source/_posts/153-寻找旋转排序数组中的最小值.md","hash":"b42d9e7939d079da5e72e0b6baea26c3e2ce439f","modified":1588648317653},{"_id":"source/_posts/202-快乐数.md","hash":"b87b05f51c393b5404a20a961e5ce73d50c04b96","modified":1588648317657},{"_id":"source/_posts/21-合并两个有序链表.md","hash":"2ce50509d601953f39947bfd0b6d120a996f8298","modified":1588648317662},{"_id":"source/_posts/221-最大正方形.md","hash":"7307d2ba895fb4cdf7bb9aa50d6cf326e6abef6d","modified":1588952931039},{"_id":"source/_posts/287-寻找重复数.md","hash":"90df3102d38f4ceb958d7d8fae08689ebb3e7914","modified":1590506631409},{"_id":"source/_posts/3-无重复字符的最长子串.md","hash":"c150fe9522b3150ef6bc7e98edce0fdb7a43b8ee","modified":1588648317660},{"_id":"source/_posts/33-搜索旋转排序数组.md","hash":"b516cebb51b0c4078a6987ee99e14208bd411f98","modified":1588648317668},{"_id":"source/_posts/35-搜索插入位置.md","hash":"4d748808647bf043b27787e324a733e3a373c936","modified":1588648317665},{"_id":"source/_posts/45-跳跃游戏II.md","hash":"af02931f3829de0b58023c32bd5209c9e0a7e279","modified":1588648317670},{"_id":"source/_posts/53-最大子序和.md","hash":"0b30d94e256dfc0db029aa3efdf07509b18c8ae8","modified":1588648317673},{"_id":"source/_posts/530-二叉搜索树的最小绝对差.md","hash":"045231205d47aa40f0b4712b2aeedf5d864eda5b","modified":1588953110393},{"_id":"source/_posts/538-把二叉搜索树转换为累加树.md","hash":"42a563fefd520a1b3881eee107890b0d2cbacff8","modified":1588953103879},{"_id":"source/_posts/572-另一个树的子树.md","hash":"2d3fdac5b3a770b58ec60be408808a5c27c14d13","modified":1588821792881},{"_id":"source/_posts/704-二分查找.md","hash":"54b534a3a5ae19c0407678a3aa440c5957e3d4d1","modified":1588648317675},{"_id":"source/_posts/739-每日温度.md","hash":"8adf3058890a2813fb0441cf3df364ea6505911b","modified":1592063288582},{"_id":"source/_posts/983-最低票价.md","hash":"988fbb9449d0b8bf316207a289952915b1847569","modified":1588745677400},{"_id":"source/_posts/98-验证二叉搜索树.md","hash":"de65b70859d00d9b67fa41438c59a7206d536f97","modified":1588648317678},{"_id":"source/_posts/990-等式方程的可满足性.md","hash":"a5f94d447186dd9c9852e9fa7d6d7cd51b39b2ba","modified":1595348969834},{"_id":"source/_posts/JAVA开发环境搭建.md","hash":"cbb31debdf6c34c77939a2a0a25cb3bac7cd2064","modified":1596677089620},{"_id":"source/_posts/Java基础面试总结.md","hash":"5dab000de20dea189ddfe1d0baa8aacfb97e5f36","modified":1596676616598},{"_id":"source/_posts/Leetcode周赛-187.md","hash":"735835ee0f6d1141eecdd31d3e1f67e991fe9ab9","modified":1595350153573},{"_id":"source/_posts/Java异常体系.md","hash":"b66659ef867ffcbeb1835a2dce30648e720cc588","modified":1595350113527},{"_id":"source/_posts/Redis面试问题.md","hash":"7c5bff2f376a9ee6a6d50e274aeac4c516aeac48","modified":1596676632607},{"_id":"source/_posts/SpringCloud入门.md","hash":"2fe4e780f28250ad63406bcfb135502319eace0b","modified":1595760238723},{"_id":"source/_posts/Spring家族面试问题.md","hash":"aae4e405782dd04059d28d312be2634b5ae52381","modified":1596677077229},{"_id":"source/_posts/二叉树的遍历.md","hash":"86127675b89cad723f0a4b54f894d2b83ce3c490","modified":1595349212991},{"_id":"source/_posts/剑指Offer-03数组中重复的数字.md","hash":"04242357910e4542e099ad43fde53de012983e60","modified":1588648317686},{"_id":"source/_posts/剑指Offer-04二维数组中的查找.md","hash":"752b2052d125011929bcc4ed80d8626b735741e6","modified":1588648317691},{"_id":"source/_posts/剑指Offer-05替换空格.md","hash":"ab83589605ad2a5b21e02ee4e9fbe8420acc9ea7","modified":1588648317700},{"_id":"source/_posts/剑指Offer-06从尾到头打印链表.md","hash":"b795ed6eba6d002ba765c97b52e0493e6b6dc13e","modified":1588648317695},{"_id":"source/_posts/剑指Offer-09用两个栈实现队列.md","hash":"50d014990c09ec35d2b57e51d4aa7027d567e1b0","modified":1595349958821},{"_id":"source/_posts/剑指Offer-10- I-斐波那契数列.md","hash":"1ac17510d7b5d689648e9994a27a0e80d42b930a","modified":1595349982153},{"_id":"source/_posts/剑指Offer-46把数字翻译成字符串.md","hash":"eccb023da93f40d7a2e7d4f3a015249928e99fcf","modified":1591718098738},{"_id":"source/_posts/剑指Offer-数组中数字出现的次数 I.md","hash":"a0bf77b86d4521d0e83ecc2f42b53ff3feb730cb","modified":1588648317703},{"_id":"source/_posts/剑指Offer11-旋转数组的最小数字.md","hash":"4ba4d7111cfcf184148b54c62af881c5b053cf30","modified":1588832426862},{"_id":"source/_posts/本地配置Git多账户.md","hash":"113d395bf7382a517f3cb399e8ce044dc95ee675","modified":1595349017772},{"_id":"source/_posts/数据库面试问题.md","hash":"44110332819b39311e0cbd54988e6eddb3b7480c","modified":1596676627725},{"_id":"source/_posts/程序员面试经典-04-04-检查平衡性.md","hash":"ee1bfd29e561ac55e7d8087effce242f1e3832ee","modified":1588832426857},{"_id":"source/_posts/红黑树.md","hash":"89108a6b9ea663051827579cdec910a7598ebf8d","modified":1595349456040},{"_id":"source/_posts/计算机网络面试问题.md","hash":"faa1d09c97bac0868da5e91f22740ce955561cab","modified":1596676986692},{"_id":"source/categories/index.md","hash":"e9d977b8ab3777aabcfe62761211394257ab7a0b","modified":1588069508220},{"_id":"source/about/index.md","hash":"093f82b3c1d6d37db20ca76fb5790c8f5571b045","modified":1595348866745},{"_id":"source/tags/index.md","hash":"3162a4fcca961213aae1cf976a3003e953b9d024","modified":1588305652065},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1588036067104},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1588036067105},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1588036067109},{"_id":"themes/hexo-theme-next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1588036067110},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1588036067136},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1588036067140},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1588036067142},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1588036067143},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1588036067146},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1588036067150},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1588036067152},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1588036067153},{"_id":"themes/hexo-theme-next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1588036067154},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1588036067155},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1588036067156},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1588036067157},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1588036067159},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1588036067163},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"6ef9512cf3ba9570b81dbff00970f98291253661","modified":1594971155706},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1588036067165},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"003fe7654c7d5d4bcdfb62f7f5d3e0bbee5a2d01","modified":1589332087851},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1588036067273},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1588036067275},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"732a96897f32cb1d5e3e3f03c1b8f12c7f6871f4","modified":1589201795657},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"3c0597f83bf59908a30ba50b2100794384161cf6","modified":1588069001258},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"425709732b314b859f01cf0b3946408bfacac233","modified":1588050702808},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1588036067285},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1588036067287},{"_id":"themes/hexo-theme-next/scripts/fold.js","hash":"de77af8cf556c44138c890d3862c87d01e864979","modified":1588323106405},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1588036067290},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1588036067293},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1588036067851},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1588036067852},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1588036067854},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588036067487},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1588036067171},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1588036067172},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1588036067195},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"9eca2b56863183da3c4c78afdcd28e576a7114d3","modified":1590415824179},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1588036067199},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"a7081158241d70696fabc46d40f2e01388143c02","modified":1594972511430},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1588036067203},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"20addd5c1f57fccb8b32cce913c7fabe07265bd8","modified":1588589030517},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1588036067205},{"_id":"themes/hexo-theme-next/layout/_macro/carousel.swig","hash":"1f8c4c94c7e0dda4459431c8aa3bdfdf784157af","modified":1589297771730},{"_id":"themes/hexo-theme-next/layout/_macro/passage-end-tag.swig","hash":"6dbe5cbf57ecbb0e41d037e1a1264d1b1224ac91","modified":1591500496991},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"6a2e361525515bc962c3a2b22041c471d4ec1875","modified":1589332241646},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1588036067186},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"c6254326cf618e70f3c67096b990fafa2ea87bdc","modified":1589332248168},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1588036067190},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"66e71ffdd6c0b8d08977f30effe5f00513cc1900","modified":1591718918288},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1588036067192},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1588036067220},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1588036067221},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1588036067228},{"_id":"themes/hexo-theme-next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1588036067255},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1588036067256},{"_id":"themes/hexo-theme-next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1588036067257},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1588036067258},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1588036067259},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1588036067260},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1588036067262},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1588036067296},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1588036067297},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1588036067298},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1588036067300},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1588036067301},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1588036067302},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1588036067304},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1588036067305},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1588036067306},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1588036067486},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1588036067489},{"_id":"themes/hexo-theme-next/source/images/alipay.jpg","hash":"a7b22533b61a700be036ff5c99d20bc4ee079e2c","modified":1588041536127},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1588036067490},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1588036067492},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1588036067494},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1588036067496},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1588036067497},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1588036067498},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1588036067499},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1588036067500},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1588036067501},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1588036067502},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-xiefeiji.ico","hash":"63454dc727c68c634f97f1eb18666a63e67d27ec","modified":1588037515608},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1588036067503},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-xiefeiji.ico","hash":"05b8281fec93347d5633d29f6670719b161eae06","modified":1588037534477},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1588036067503},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1588036067504},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1588036067505},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1588036067510},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1588036067508},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1588036067513},{"_id":"themes/hexo-theme-next/source/images/wechatpay.jpg","hash":"38b9c3f82d3284e8712ae5148ee391d95791eb75","modified":1588041411377},{"_id":"source/js/src/Valine-1.3.4.min.js","hash":"6979c760beb550b681a06a8f11688f2d1591a70e","modified":1594913366762},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588036067224},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588036067224},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588036067423},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588036067424},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588036067430},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588036067481},{"_id":"themes/hexo-theme-next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1588036067200},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1588036067201},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1588036067207},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1588036067208},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1588036067209},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1588036067212},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1588036067214},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1588036067216},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"64c09bb9a5098f5ad499455ad062ce9a2fd72da9","modified":1589332328098},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1588036067222},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1588036067224},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1588036067226},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1588036067230},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1588036067231},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1588036067232},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"16cb23818909f57dac1a5ada66869971c33d7bd8","modified":1588045731292},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1588036067234},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1588036067235},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1588036067235},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1588036067236},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1588036067237},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1588036067238},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1588036067239},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1588036067240},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1588036067241},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1588036067243},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1588036067245},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1588036067247},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1588036067249},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1588036067250},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1588036067250},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1588036067251},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"08ce7eeef37044640f088b256ef8fb56db6a121b","modified":1594913256481},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1588036067253},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1588036067266},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1588036067268},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1588036067269},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1588036067271},{"_id":"themes/hexo-theme-next/source/css/_custom/cus.css","hash":"a778cde7386ac7811a071a5caa3cfe73f4606cba","modified":1588587310247},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"f5ee971186fb6d2279cf06efd06fc90654b1b62d","modified":1595756944697},{"_id":"themes/hexo-theme-next/source/css/_custom/gulpfile.js","hash":"5aeaeb803e000dcf15f37aadac23e83643eeb111","modified":1588248867682},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1588036067423},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1588036067426},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1588036067429},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1588036067479},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1588036067480},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1588036067483},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"77b13fbb535634cd9999bc4136bc690de5c6a754","modified":1588062054026},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"22765439af87dc4995484ff07ab0079e587fec33","modified":1588117306160},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1588036067515},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1588036067516},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1588036067517},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1588036067518},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1588036067521},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1588036067523},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"4cb93fb5546ecf9972906d7c6cd330189bf5d1bd","modified":1588303258197},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1588036067529},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1595348189070},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1588036067530},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1588036067552},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1588036067563},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1588036067567},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1588036067569},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1588036067570},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1588036067603},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1588036067607},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1588036067605},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1588036067610},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1588036067617},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1588036067618},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1588036067619},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1588036067620},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1588036067621},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1588036067699},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1588036067707},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1588036067718},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1588036067714},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1588036067719},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1588036067720},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1588036067723},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1588036067729},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1588036067731},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1588036067733},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1588036067747},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1588036067749},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1588036067751},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1588036067753},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1588036067754},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1588036067757},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1588036067759},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1588036067763},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1588036067766},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1588036067768},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1588036067771},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1588036067776},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1588036067781},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1588036067782},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1588036067786},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1588036067787},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1588036067802},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1588036067831},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1588036067833},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1588036067841},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1588036067843},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1588036067848},{"_id":"themes/hexo-theme-next/source/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1574610540000},{"_id":"themes/hexo-theme-next/source/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1574610540000},{"_id":"themes/hexo-theme-next/source/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1574610540000},{"_id":"themes/hexo-theme-next/source/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1574610540000},{"_id":"themes/hexo-theme-next/source/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1574610540000},{"_id":"themes/hexo-theme-next/source/share/js/jquery.share.min.js","hash":"ff614988a0a4d6b68eb3f0fc95f8f65be745a5b8","modified":1574610540000},{"_id":"themes/hexo-theme-next/source/share/js/social-share.min.js","hash":"efdfa6b695ac6f0dd04cd8153d3e3a1a1edd90c2","modified":1574610540000},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1588036067520},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1588036067704},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1588036067264},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1588036067265},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1588036067310},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1588036067312},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1588036067314},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1588036067316},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1588036067317},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1588036067341},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1588036067374},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1588036067406},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1588036067408},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1588036067409},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1588036067412},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1588036067414},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1588036067415},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1588036067418},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1588036067437},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1588036067440},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1588036067442},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1588036067443},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1588036067446},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1588036067447},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1588036067448},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1588036067449},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1588036067454},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1588036067456},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1588036067457},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1588036067460},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1588036067462},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1588036067466},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1588036067470},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1588036067471},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1588036067473},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1588036067475},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1588036067476},{"_id":"themes/hexo-theme-next/source/js/src/Valine-1.3.4.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1588120797909},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1588036067526},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1588036067572},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1588036067573},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1588036067575},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1588036067577},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1588036067578},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1588036067580},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1588036067596},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1588036067599},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1588036067601},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1588036067613},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1588036067614},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1588036067623},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1588036067625},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1588036067627},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1588036067827},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1588036067829},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1588036067542},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1588036067547},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1588036067549},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1588036067551},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1588036067691},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1588036067687},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1588036067838},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1588036067319},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1588036067321},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1588036067323},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1588036067324},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1588036067326},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1588036067327},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1588036067330},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1588036067331},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1588036067333},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1588036067335},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1588036067336},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1588036067339},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1588036067337},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1588036067340},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1588036067342},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1588036067343},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1588036067347},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1588036067348},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1588036067345},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1588036067349},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1588036067350},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1588036067352},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"727cb0e6d7e2c46f265f034b8f4b5039b71d1b29","modified":1588117857770},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1588036067354},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1588036067354},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1588036067356},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1588036067355},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1588036067358},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1588036067359},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1588036067362},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1588036067363},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1588036067364},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1588036067367},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1588036067365},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1588036067368},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1588036067370},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1588036067371},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1588036067372},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1588036067373},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1588036067377},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1588036067378},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1588036067379},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1588036067384},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1588036067383},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1588036067385},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1588036067386},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1588036067387},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1588036067388},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1588036067391},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1588036067393},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1588036067396},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1588036067398},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1588036067399},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1588036067399},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1588036067400},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1588036067402},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1588036067403},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1588036067403},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1588036067451},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1588036067452},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1588036067464},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1588036067535},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1588036067537},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1588036067538},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1588036067540},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1588036067541},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1588036067582},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1588036067585},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1588036067583},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1588036067590},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1588036067587},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1588036067592},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1588036067634},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1588036067639},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1588036067685},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1588036067560},{"_id":"themes/hexo-theme-next/source/images/xiefeiji.gif","hash":"1e658e9f555d1d28ba2e11c64c50ed2955569189","modified":1588040907124},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1588036067821},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1588036067664},{"_id":"public/js/src/Valine-1.3.4.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1596677146356},{"_id":"public/baidu_urls.txt","hash":"faae8012957934d1cb86c0513c2c3f6f28950c2b","modified":1596677146356},{"_id":"public/search.xml","hash":"4de4875b73c24bf04c798792048943529ed12e7f","modified":1596677146356},{"_id":"public/baidusitemap.xml","hash":"95b2b6fed03731a40b8f44040b00ada80af9f5f7","modified":1596677146356},{"_id":"public/sitemap.xml","hash":"c4122be8b27039e490be91535bd0eaeb8a08e50b","modified":1596677146356},{"_id":"public/baidu_verify_ruvyztIy26.html","hash":"af68af821afe710c46102f1441937c563e544933","modified":1596677146356},{"_id":"public/googled6b64f8b8a26b7b3.html","hash":"afdbc798e1660718040422cdb3d33b56e6139b1d","modified":1596677146356},{"_id":"public/categories/index.html","hash":"3f745e7d05cdee5ef2c2a014a273c04d3ac6ad56","modified":1596677146356},{"_id":"public/about/index.html","hash":"edd763acfd8a6d65ef8b8865f79a6e9c11ac32a4","modified":1596677146356},{"_id":"public/tags/index.html","hash":"d96f75c5ba2d54d707461ea6d1d51c8b037511f8","modified":1596677146356},{"_id":"public/posts/a49c4b2e.html","hash":"3168699c679cddae2c5915890ae754ae9d8947ef","modified":1596677146356},{"_id":"public/posts/75890e6e.html","hash":"14a39ac38877908211bb304fcbc37e7101cd6ccc","modified":1596677146356},{"_id":"public/posts/27c7c088.html","hash":"70927454aa8ad72cfe057bc0867ff241da328be2","modified":1596677146356},{"_id":"public/posts/f885a170.html","hash":"cedc25c41c38327ff17fc1af3ee7ac91b24641f8","modified":1596677146356},{"_id":"public/posts/caab1d3c.html","hash":"cba9a27d1d568fd8cb03a831537e66d3efa8a096","modified":1596677146356},{"_id":"public/posts/372eebb7.html","hash":"47e00a0a85bbd66e04cceb81d2e72f7e7c18d796","modified":1596677146356},{"_id":"public/posts/6cc1ef4f.html","hash":"97933ef32d70748f36f7828ae837b264117214da","modified":1596677146356},{"_id":"public/posts/13cdcb1b.html","hash":"b6bb8937e0d2106457901150266ca7918d0f4243","modified":1596677146356},{"_id":"public/posts/19551cf1.html","hash":"522cd779073ce15e270fc4b907a85e5c8d488575","modified":1596677146356},{"_id":"public/posts/f2adbb58.html","hash":"34254fc670e3b05b7469ed079e590c1baf54cfff","modified":1596677146356},{"_id":"public/posts/527f7711.html","hash":"831f5e838bb173352149981a81913469c8785479","modified":1596677146356},{"_id":"public/posts/25e6dcf4.html","hash":"8e0e6c0be89bb6e4ec1148f1fabee9438ade6ebb","modified":1596677146356},{"_id":"public/posts/27e1a968.html","hash":"2876ad87ecf471872457beb2fb4c2bc057236dbf","modified":1596677146356},{"_id":"public/posts/503970b4.html","hash":"7d543c4866bcf7ed8e7e7e87d616866bef8d99ad","modified":1596677146356},{"_id":"public/posts/37cbfc16.html","hash":"4977cc3b25715f412f72c819293b7c191f83e684","modified":1596677146356},{"_id":"public/posts/39280e8c.html","hash":"7d99c49f77cfa7428b53f38e90fe94738241250f","modified":1596677146356},{"_id":"public/posts/7da63a80.html","hash":"6c6ff86686200748b44070b8d963c75cbabf13d5","modified":1596677146356},{"_id":"public/posts/56aa34eb.html","hash":"a51eaf6a104e4f7416482c6a737d807004183042","modified":1596677146356},{"_id":"public/posts/4ad52213.html","hash":"b3bbdee2107b6166cd15bfd231c73359b794669e","modified":1596677146356},{"_id":"public/posts/639f1318.html","hash":"727dc567e903a472052cae85981ae4ad0d55b837","modified":1596677146356},{"_id":"public/posts/689f55a9.html","hash":"3d0f11337e89e11699aefffd8896ae29c5a262a2","modified":1596677146356},{"_id":"public/posts/18deca0d.html","hash":"78315e59be607ab04ede4a672a4c02f371585998","modified":1596677146356},{"_id":"public/posts/dcddc4fc.html","hash":"93ecb2957fc4a1b19264e6e2b42682d7ec912dd8","modified":1596677146356},{"_id":"public/posts/ea4681d0.html","hash":"7073757af91a7ccd52b50cface37fadf1304b9c2","modified":1596677146356},{"_id":"public/posts/5e0c5aa8.html","hash":"d225c73b1791969a4a8de30c3d42569e600c6b7d","modified":1596677146356},{"_id":"public/posts/1f02b5ce.html","hash":"47c5ce454511c2a626c0770707545a3fe1c56416","modified":1596677146356},{"_id":"public/posts/9649f58.html","hash":"85583c2067545b10cb198c85f0a7f1ccadae94d0","modified":1596677146356},{"_id":"public/posts/48c165ca.html","hash":"44f01599b9ce44a67f82c0a47b23d32ac35588ec","modified":1596677146356},{"_id":"public/posts/dda4a850.html","hash":"5aa4b4280f53bf474d93d523b4fb6ca513e1982c","modified":1596677146356},{"_id":"public/posts/2f50b40c.html","hash":"d6d2adb3f07b0507df3afb255dd050b0d92edbeb","modified":1596677146356},{"_id":"public/posts/f579176b.html","hash":"50be73f7beda96b1b4826dc985f0da9c1bd95bee","modified":1596677146356},{"_id":"public/posts/2b34ab19.html","hash":"adef8fe0402de393c08740b5226624f7a894e641","modified":1596677146356},{"_id":"public/posts/a42162e0.html","hash":"adfa06d9ff3d2b43bfe0c5a217c72ac89ad48545","modified":1596677146356},{"_id":"public/posts/4bff4329.html","hash":"853401b99d7fa6c18d43cf4196e200b15c7f8dae","modified":1596677146356},{"_id":"public/posts/f4828e27.html","hash":"321e247f689fa294496e736464f7f2f62b927148","modified":1596677146356},{"_id":"public/posts/3abd6d1e.html","hash":"e8659b70867612aef0e19d1ab5ae30854fe83e88","modified":1596677146356},{"_id":"public/posts/c8c06f39.html","hash":"b1cfbf3ff83b140a101048a8df786695887e9b3c","modified":1596677146356},{"_id":"public/posts/e3f3cf8a.html","hash":"9182353a7800e8151282f76a6608c9ed1855f6ad","modified":1596677146356},{"_id":"public/posts/827e2fc4.html","hash":"6ae884a29b1b21b2c41f500eb3a444a050ddcc72","modified":1596677146356},{"_id":"public/posts/41f30363.html","hash":"260f9dc4ff6c66d0ff214bf8d3423d809087191b","modified":1596677146356},{"_id":"public/posts/a8a97330.html","hash":"7f86cc74b625c442da99598d5566701160b8590c","modified":1596677146356},{"_id":"public/posts/1f1789a9.html","hash":"ae09dbfd24d3ba4204eed37d88f7f1220f98f647","modified":1596677146356},{"_id":"public/posts/eaced0a1.html","hash":"1406fe5a5d1de7ae51338e986cf7fbcb16a29a74","modified":1596677146356},{"_id":"public/posts/e745ac01.html","hash":"694f2eff9dc1c90a5ef455f5e7f34e69148c0fd9","modified":1596677146356},{"_id":"public/archives/index.html","hash":"76ce477a59dbb7c2f8b440d04104157dc6832325","modified":1596677146356},{"_id":"public/archives/page/2/index.html","hash":"cff4ba01b26a47523db9610f1dee2ae56a682d70","modified":1596677146356},{"_id":"public/archives/page/3/index.html","hash":"eb0fc0279e9b4e0984b3b8eae4c719bb5227eee7","modified":1596677146356},{"_id":"public/archives/page/4/index.html","hash":"53ec8e799869c20cb194037b78cf2d8e3969b578","modified":1596677146356},{"_id":"public/archives/page/5/index.html","hash":"3a1617697b85b5c75ac3d67ac90f19be1d763fc7","modified":1596677146356},{"_id":"public/archives/2020/index.html","hash":"98cf2116330b7a0e43d3c1086cd5ecf8c463f81d","modified":1596677146356},{"_id":"public/archives/2020/page/2/index.html","hash":"ee446fe606147106a9e8c2331ac05193881f9511","modified":1596677146356},{"_id":"public/archives/2020/page/3/index.html","hash":"21f6ce7714a2b9d6fc9b8e7d9ea02cf54b44f628","modified":1596677146356},{"_id":"public/archives/2020/page/4/index.html","hash":"afed1a5d355fd08e06d0b47a4744ade2719c123c","modified":1596677146356},{"_id":"public/archives/2020/page/5/index.html","hash":"e22d5584e2c6026bac267e3894dfb3c49540b0b8","modified":1596677146356},{"_id":"public/archives/2020/03/index.html","hash":"e70ec20dddcc71ba8a30f42e5e97a14341571d7d","modified":1596677146356},{"_id":"public/archives/2020/04/index.html","hash":"11ab5b7c229003da6c5da835c1ebe30c9e3a4228","modified":1596677146356},{"_id":"public/archives/2020/05/index.html","hash":"2e5be21c7ec35e0b404ab1120f49c822bb3d61b6","modified":1596677146356},{"_id":"public/archives/2020/05/page/2/index.html","hash":"7baefe393a375a02a12d4a4827146cf54e5668ff","modified":1596677146356},{"_id":"public/archives/2020/05/page/3/index.html","hash":"ed6930a92b9aa3417dcb85f77964102ed6509304","modified":1596677146356},{"_id":"public/archives/2020/06/index.html","hash":"abedea6cfc7f57099294d930d678e452a4160def","modified":1596677146356},{"_id":"public/archives/2020/07/index.html","hash":"d0062b9510464daaf45db0e053fe46b6f31c8c6c","modified":1596677146356},{"_id":"public/archives/2020/08/index.html","hash":"79f0cb841b5307325b6d173ad58776edfe4085c3","modified":1596677146356},{"_id":"public/index.html","hash":"6675580ac32fa898f32b412d522909bd6885125c","modified":1596677146356},{"_id":"public/page/2/index.html","hash":"a0eb9396df591806bf01bba9e305cfebb1b3e978","modified":1596677146356},{"_id":"public/page/3/index.html","hash":"5d4c3b392bd4869e38ed4dd32e97dcc8e3aa0494","modified":1596677146356},{"_id":"public/page/4/index.html","hash":"8001e165c56495b35e908cba7b974beca3dec645","modified":1596677146356},{"_id":"public/page/5/index.html","hash":"1b69fc6e99789176881eaca563b0567bbc2c4966","modified":1596677146356},{"_id":"public/categories/Leetcode/index.html","hash":"131690e5be61adf4faf981c81f415868f543357f","modified":1596677146356},{"_id":"public/categories/Leetcode/page/2/index.html","hash":"fdb601692009f688470cb72cf256a17499b6e8fd","modified":1596677146356},{"_id":"public/categories/Leetcode/page/3/index.html","hash":"f835cb29128c34af3b6bc9dec3d67e2bc4006d59","modified":1596677146356},{"_id":"public/categories/Java后端面试/index.html","hash":"54ba5c021d13067194a48fc2cb8d53b45220baf9","modified":1596677146356},{"_id":"public/categories/Leetcode/二叉树/index.html","hash":"9955a60ec41631a35744ffc731f82f69859cd95e","modified":1596677146356},{"_id":"public/categories/Leetcode/动态规划/index.html","hash":"a1d4c19b95e0735cc3fd7f35a31475940d253208","modified":1596677146356},{"_id":"public/categories/笔记/index.html","hash":"1daf37491dd0137754ca4dbdc73487baab917348","modified":1596677146356},{"_id":"public/categories/Spring-Cloud/index.html","hash":"fec4ce1ee64a598e7513994063a55362a20ebc2d","modified":1596677146356},{"_id":"public/categories/剑指Offer/index.html","hash":"bf1ba5c8182581d5d786e40e82b238a5ebcc2880","modified":1596677146356},{"_id":"public/categories/开发环境相关/index.html","hash":"92bee14f654afc4eeea0b40237ff67c861a0b150","modified":1596677146356},{"_id":"public/categories/程序员面试经典/index.html","hash":"950463e85f9cf08fc65940e2225d421d52f0db08","modified":1596677146356},{"_id":"public/categories/数据结构/index.html","hash":"8a51f22102217c333c4ddfc298f17e17271c6c56","modified":1596677146356},{"_id":"public/categories/程序员面试经典/Leetcode/index.html","hash":"0993f7ecd831172b37e203d8b2fe96e414b20ee7","modified":1596677146356},{"_id":"public/categories/程序员面试经典/Leetcode/二叉树/index.html","hash":"ab63752a09bc7a54180d65311c05eacd32f65cc4","modified":1596677146356},{"_id":"public/tags/Leetcode/index.html","hash":"9be5ad260d51d68ada125f9db21cd7a18efe91e1","modified":1596677146356},{"_id":"public/tags/Leetcode/page/2/index.html","hash":"b9285553486aa7ca2b2cd34beb3afbe77a2f6dbe","modified":1596677146356},{"_id":"public/tags/数组/index.html","hash":"a8d04b810ceae71b0a9be911182b41cdf2077c78","modified":1596677146356},{"_id":"public/tags/哈希/index.html","hash":"95be0426004772a8829fae21710b4b29198c466f","modified":1596677146356},{"_id":"public/tags/Java后端面试/index.html","hash":"89a2d13f503a07ba44fdcd9c47418f6e4c7d7cd5","modified":1596677146356},{"_id":"public/tags/广度优先搜索/index.html","hash":"5bac7b9c9a257006be2c336fca8c319203e54b09","modified":1596677146356},{"_id":"public/tags/二叉树/index.html","hash":"e036511a2f1da09e91314250246e92e3a8465668","modified":1596677146356},{"_id":"public/tags/递归/index.html","hash":"bd79ae311636d51c9c6600c460183cc00ccc0d8d","modified":1596677146356},{"_id":"public/tags/深度优先搜索/index.html","hash":"a10837522de10671951d9ffef100cf38de9d713d","modified":1596677146356},{"_id":"public/tags/动态规划/index.html","hash":"ac53e728e8a2fb73b61d066a88c07b435aecd8b3","modified":1596677146356},{"_id":"public/tags/二分查找/index.html","hash":"386ce40d40be3830373ae9beb4cb56b0d36ccd80","modified":1596677146356},{"_id":"public/tags/归并排序/index.html","hash":"c98aebae900fd86d3a9ef797e0e9208cd3c2850c","modified":1596677146356},{"_id":"public/tags/链表/index.html","hash":"1ba8d6378ded8a49674a49709875e067b5e97c35","modified":1596677146356},{"_id":"public/tags/快慢指针/index.html","hash":"ca6497211ef23d70eaa0b25a2416510ce6cdb75a","modified":1596677146356},{"_id":"public/tags/滑动窗口/index.html","hash":"e65876ae7d34c31820638f49aa2332ab1b8dc5eb","modified":1596677146356},{"_id":"public/tags/贪心算法/index.html","hash":"00bc0dda4d7ba198ebb32b6765dd855b09eb1cf1","modified":1596677146356},{"_id":"public/tags/分治算法/index.html","hash":"503f3981ee76bce9ce1b1763832c4265af4a4f85","modified":1596677146356},{"_id":"public/tags/单调栈/index.html","hash":"fbfe289861ee175c46528e1ec37e4f2880a2e740","modified":1596677146356},{"_id":"public/tags/记忆化搜索/index.html","hash":"1ee5f24fcc34c3f5a75cd3aad836caf9772f9f54","modified":1596677146356},{"_id":"public/tags/二叉搜索树/index.html","hash":"d6df224d44d55b49097b96f2ff9c744af016653f","modified":1596677146356},{"_id":"public/tags/并查集/index.html","hash":"f69934967e645927369f62711e6e4197ded56fa5","modified":1596677146356},{"_id":"public/tags/Leetcode周赛/index.html","hash":"6955250613904c07f7f976045082749f84ec58f6","modified":1596677146356},{"_id":"public/tags/Java/index.html","hash":"28a723467ca0380c6effc287e001cd02be04bce7","modified":1596677146356},{"_id":"public/tags/Redis/index.html","hash":"6164015d9ad4ad2218b6b4f4fc41f57eac425e90","modified":1596677146356},{"_id":"public/tags/分布式锁/index.html","hash":"eced24d7c0956553e57257f4db6810fc3f5b9934","modified":1596677146356},{"_id":"public/tags/Spring-Cloud/index.html","hash":"d020a1ec2bddca53a810a1ab1f117fcd7af06d43","modified":1596677146356},{"_id":"public/tags/二叉树遍历/index.html","hash":"b8eca9f4f208949c1dbcdd15860c5c11d1bf03d0","modified":1596677146356},{"_id":"public/tags/剑指Offer/index.html","hash":"0dc59398fbe74fd797a1226d6ab485acda07ebfd","modified":1596677146356},{"_id":"public/tags/二维数组/index.html","hash":"588448bce5c63dc0e963e0af1a0a920861dcdf37","modified":1596677146356},{"_id":"public/tags/字符串/index.html","hash":"81629d9d45b63bc117f9915e59eb5cac8966bac0","modified":1596677146356},{"_id":"public/tags/栈/index.html","hash":"81d5b19b9c27c1bc9b6bb0519ec5ca4be67ebe08","modified":1596677146356},{"_id":"public/tags/队列/index.html","hash":"4ec11620226c6b1656cc6965df518d2365502dbc","modified":1596677146356},{"_id":"public/tags/位运算/index.html","hash":"84b3d44ea61ed6200cbd042c48cfdab41404889a","modified":1596677146356},{"_id":"public/tags/git/index.html","hash":"734fdeeff70ebed25f8915eff3a9fd0edba5caae","modified":1596677146356},{"_id":"public/tags/数据库/index.html","hash":"f8b1cc878bb3155992f01731553ac2b19f907110","modified":1596677146356},{"_id":"public/tags/Mysql/index.html","hash":"63509fbc71a1645f2204f81e397aaecfefbe8722","modified":1596677146356},{"_id":"public/tags/程序员面试经典/index.html","hash":"ea51083d216290ba50050dd51a9e429b55ab723b","modified":1596677146356},{"_id":"public/tags/计算机网络/index.html","hash":"c0685837e7be580d58c59936a2aa688a66c982db","modified":1596677146356},{"_id":"public/robots.txt","hash":"236dfe0a7a6cdedd74fd30be9924f73419d2ce9a","modified":1596677146356},{"_id":"public/images/alipay.jpg","hash":"a7b22533b61a700be036ff5c99d20bc4ee079e2c","modified":1596677146356},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1596677146356},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1596677146356},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1596677146356},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1596677146356},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1596677146356},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1596677146356},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1596677146356},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1596677146356},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1596677146356},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1596677146356},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1596677146356},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1596677146356},{"_id":"public/images/favicon-16x16-xiefeiji.ico","hash":"63454dc727c68c634f97f1eb18666a63e67d27ec","modified":1596677146356},{"_id":"public/images/favicon-32x32-xiefeiji.ico","hash":"05b8281fec93347d5633d29f6670719b161eae06","modified":1596677146356},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1596677146356},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1596677146356},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1596677146356},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1596677146356},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1596677146356},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1596677146356},{"_id":"public/images/wechatpay.jpg","hash":"38b9c3f82d3284e8712ae5148ee391d95791eb75","modified":1596677146356},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1596677146356},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1596677146356},{"_id":"public/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1596677146356},{"_id":"public/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1596677146356},{"_id":"public/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1596677146356},{"_id":"public/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1596677146356},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1596677146356},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1596677146356},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1596677146356},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1596677146356},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1596677146356},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1596677146356},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1596677146356},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1596677146356},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1596677146356},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1596677146356},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1596677146356},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1596677146356},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1596677146356},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1596677146356},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1596677146356},{"_id":"public/css/main.css","hash":"619cca73afdac9448ae89044085471f1d76984dd","modified":1596677146356},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1596677146356},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1596677146356},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1596677146356},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1596677146356},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1596677146356},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1596677146356},{"_id":"public/js/src/post-details.js","hash":"fc8ecbcc2df6e5d0dfed4622199651520fa1a9d4","modified":1596677146356},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1596677146356},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1596677146356},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1596677146356},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1596677146356},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1596677146356},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1596677146356},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1596677146356},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1596677146356},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1596677146356},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1596677146356},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1596677146356},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1596677146356},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1596677146356},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1596677146356},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1596677146356},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1596677146356},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1596677146356},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1596677146356},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1596677146356},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1596677146356},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1596677146356},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1596677146356},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1596677146356},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1596677146356},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1596677146356},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1596677146356},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1596677146356},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1596677146356},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1596677146356},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1596677146356},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1596677146356},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1596677146356},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1596677146356},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1596677146356},{"_id":"public/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1596677146356},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1596677146356},{"_id":"public/share/js/jquery.share.min.js","hash":"ff614988a0a4d6b68eb3f0fc95f8f65be745a5b8","modified":1596677146356},{"_id":"public/share/js/social-share.min.js","hash":"efdfa6b695ac6f0dd04cd8153d3e3a1a1edd90c2","modified":1596677146356},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1596677146356},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1596677146356},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1596677146356},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1596677146356},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1596677146356},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1596677146356},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1596677146356},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1596677146356},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1596677146356},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1596677146356},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1596677146356},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1596677146356},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1596677146356},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1596677146356},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1596677146356},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1596677146356},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1596677146356},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1596677146356},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1596677146356},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1596677146356},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1596677146356},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1596677146356},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1596677146356},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1596677146356},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1596677146356},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1596677146356},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1596677146356},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1596677146356},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1596677146356},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1596677146356},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1596677146356},{"_id":"public/images/xiefeiji.gif","hash":"1e658e9f555d1d28ba2e11c64c50ed2955569189","modified":1596677146356}],"Category":[{"name":"Leetcode","_id":"ckdi4ck1e0006z4ejds1f3q3k"},{"name":"Java后端面试","_id":"ckdi4ck1i000bz4ej9th6g1xr"},{"name":"二叉树","parent":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck1r000wz4ej8v0v7gml"},{"name":"动态规划","parent":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck1s0013z4ejfjvt5tbm"},{"name":"笔记","_id":"ckdi4ck28002lz4ej9kws5ff7"},{"name":"Spring Cloud","_id":"ckdi4ck2f0038z4ejc73ve03i"},{"name":"剑指Offer","_id":"ckdi4ck2k003rz4ejh9whancq"},{"name":"开发环境相关","_id":"ckdi4ck2q004gz4eje9yce8ao"},{"name":"程序员面试经典","_id":"ckdi4ck2s004oz4ej31e89ssx"},{"name":"数据结构","_id":"ckdi4ck2t004uz4ej1vfc2jqd"},{"name":"Leetcode","parent":"ckdi4ck2s004oz4ej31e89ssx","_id":"ckdi4ck2t0050z4ejcjp86n7r"},{"name":"二叉树","parent":"ckdi4ck2t0050z4ejcjp86n7r","_id":"ckdi4ck2v0058z4ejg606cru6"}],"Data":[],"Page":[{"_content":"google-site-verification: googled6b64f8b8a26b7b3.html","source":"googled6b64f8b8a26b7b3.html","raw":"google-site-verification: googled6b64f8b8a26b7b3.html","date":"2020-06-13T12:35:19.294Z","updated":"2020-05-12T09:41:51.269Z","path":"googled6b64f8b8a26b7b3.html","title":"","comments":1,"layout":"page","_id":"ckdi4cjzg0000z4ejf9ty1s46","content":"google-site-verification: googled6b64f8b8a26b7b3.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: googled6b64f8b8a26b7b3.html","length":52},{"_content":"ruvyztIy26","source":"baidu_verify_ruvyztIy26.html","raw":"ruvyztIy26","date":"2020-06-13T12:35:19.283Z","updated":"2020-05-12T10:00:12.778Z","path":"baidu_verify_ruvyztIy26.html","title":"","comments":1,"layout":"page","_id":"ckdi4ck020001z4eje2qa3fuf","content":"ruvyztIy26","site":{"data":{}},"excerpt":"","more":"ruvyztIy26","length":10},{"title":"文章分类","date":"2020-04-28T10:19:23.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2020-04-28 18:19:23\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-04-28T10:25:08.220Z","path":"categories/index.html","layout":"page","_id":"ckdi4ck1c0003z4ej07tca68u","content":"","site":{"data":{}},"excerpt":"","more":"","length":0},{"title":"","date":"2020-04-28T08:25:41.000Z","comments":1,"_content":"\n![关于](https://gitee.com/jingshanccc/image/raw/master/image/20200722002735.jpg)\n\n### 😃关于我\n\n{% note info %}\n\n99年，计算机科学与技术专业，JAVA后端学习者。\n\n{% endnote %}\n\n{% note success %}\n\n努力，源于热爱。\n\n{% endnote %}\n\n### 📃博客历史\n\n- 2020年07月21日，使用PicGo+Gitee搭建图床\n- 2020年05月25日，完成备案，并在百度和谷歌提交了自己的网站\n- 2020年05月11日，部署到华为云服务器，在腾讯云注册域名\n- 2020年04月28日，深感wordpress笨重，搭建Hexo+NexT博客，师从[Sanarous的博客](https://bestzuo.cn/)","source":"about/index.md","raw":"---\ntitle: \ndate: 2020-04-28 16:25:41\ncomments: true\n---\n\n![关于](https://gitee.com/jingshanccc/image/raw/master/image/20200722002735.jpg)\n\n### 😃关于我\n\n{% note info %}\n\n99年，计算机科学与技术专业，JAVA后端学习者。\n\n{% endnote %}\n\n{% note success %}\n\n努力，源于热爱。\n\n{% endnote %}\n\n### 📃博客历史\n\n- 2020年07月21日，使用PicGo+Gitee搭建图床\n- 2020年05月25日，完成备案，并在百度和谷歌提交了自己的网站\n- 2020年05月11日，部署到华为云服务器，在腾讯云注册域名\n- 2020年04月28日，深感wordpress笨重，搭建Hexo+NexT博客，师从[Sanarous的博客](https://bestzuo.cn/)","updated":"2020-07-21T16:27:46.745Z","path":"about/index.html","layout":"page","_id":"ckdi4ck1d0005z4ejclfzfhho","content":"<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722002735.jpg\" alt=\"关于\"></p>\n<h3 id=\"😃关于我\"><a href=\"#😃关于我\" class=\"headerlink\" title=\"😃关于我\"></a>😃关于我</h3><div class=\"note info\"><p>99年，计算机科学与技术专业，JAVA后端学习者。</p></div>\n\n<div class=\"note success\"><p>努力，源于热爱。</p></div>\n\n<h3 id=\"📃博客历史\"><a href=\"#📃博客历史\" class=\"headerlink\" title=\"📃博客历史\"></a>📃博客历史</h3><ul>\n<li>2020年07月21日，使用PicGo+Gitee搭建图床</li>\n<li>2020年05月25日，完成备案，并在百度和谷歌提交了自己的网站</li>\n<li>2020年05月11日，部署到华为云服务器，在腾讯云注册域名</li>\n<li>2020年04月28日，深感wordpress笨重，搭建Hexo+NexT博客，师从<a href=\"https://bestzuo.cn/\" target=\"_blank\" rel=\"noopener\">Sanarous的博客</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722002735.jpg\" alt=\"关于\"></p>\n<h3 id=\"😃关于我\"><a href=\"#😃关于我\" class=\"headerlink\" title=\"😃关于我\"></a>😃关于我</h3><div class=\"note info\"><p>99年，计算机科学与技术专业，JAVA后端学习者。</p></div>\n\n<div class=\"note success\"><p>努力，源于热爱。</p></div>\n\n<h3 id=\"📃博客历史\"><a href=\"#📃博客历史\" class=\"headerlink\" title=\"📃博客历史\"></a>📃博客历史</h3><ul>\n<li>2020年07月21日，使用PicGo+Gitee搭建图床</li>\n<li>2020年05月25日，完成备案，并在百度和谷歌提交了自己的网站</li>\n<li>2020年05月11日，部署到华为云服务器，在腾讯云注册域名</li>\n<li>2020年04月28日，深感wordpress笨重，搭建Hexo+NexT博客，师从<a href=\"https://bestzuo.cn/\" target=\"_blank\" rel=\"noopener\">Sanarous的博客</a></li>\n</ul>\n","length":188},{"title":"文章标签","date":"2020-04-28T09:43:52.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 文章标签\ndate: 2020-04-28 17:43:52\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-05-01T04:00:52.065Z","path":"tags/index.html","layout":"page","_id":"ckdi4ck68007oz4ejg702e6k8","content":"","site":{"data":{}},"excerpt":"","more":"","length":0},{"_content":"/*!\n * Valine v1.3.4\n * (c) 2017-2018 xCss\n * Released under the GPL-2.0 License.\n */\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.Valine=t():e.Valine=t()}(this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=17)}([function(e,t,n){var r,i,o;/*!\n\tautosize 4.0.2\n\tlicense: MIT\n\thttp://www.jacklmoore.com/autosize\n*/\n!function(n,a){i=[e,t],r=a,void 0!==(o=\"function\"==typeof r?r.apply(t,i):r)&&(e.exports=o)}(0,function(e,t){\"use strict\";function n(e){function t(t){var n=e.style.width;e.style.width=\"0px\",e.offsetWidth,e.style.width=n,e.style.overflowY=t}function n(e){for(var t=[];e&&e.parentNode&&e.parentNode instanceof Element;)e.parentNode.scrollTop&&t.push({node:e.parentNode,scrollTop:e.parentNode.scrollTop}),e=e.parentNode;return t}function r(){if(0!==e.scrollHeight){var t=n(e),r=document.documentElement&&document.documentElement.scrollTop;e.style.height=\"\",e.style.height=e.scrollHeight+s+\"px\",l=e.clientWidth,t.forEach(function(e){e.node.scrollTop=e.scrollTop}),r&&(document.documentElement.scrollTop=r)}}function i(){r();var n=Math.round(parseFloat(e.style.height)),i=window.getComputedStyle(e,null),o=\"content-box\"===i.boxSizing?Math.round(parseFloat(i.height)):e.offsetHeight;if(o<n?\"hidden\"===i.overflowY&&(t(\"scroll\"),r(),o=\"content-box\"===i.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight):\"hidden\"!==i.overflowY&&(t(\"hidden\"),r(),o=\"content-box\"===i.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight),c!==o){c=o;var s=a(\"autosize:resized\");try{e.dispatchEvent(s)}catch(e){}}}if(e&&e.nodeName&&\"TEXTAREA\"===e.nodeName&&!o.has(e)){var s=null,l=null,c=null,d=function(){e.clientWidth!==l&&i()},u=function(t){window.removeEventListener(\"resize\",d,!1),e.removeEventListener(\"input\",i,!1),e.removeEventListener(\"keyup\",i,!1),e.removeEventListener(\"autosize:destroy\",u,!1),e.removeEventListener(\"autosize:update\",i,!1),Object.keys(t).forEach(function(n){e.style[n]=t[n]}),o.delete(e)}.bind(e,{height:e.style.height,resize:e.style.resize,overflowY:e.style.overflowY,overflowX:e.style.overflowX,wordWrap:e.style.wordWrap});e.addEventListener(\"autosize:destroy\",u,!1),\"onpropertychange\"in e&&\"oninput\"in e&&e.addEventListener(\"keyup\",i,!1),window.addEventListener(\"resize\",d,!1),e.addEventListener(\"input\",i,!1),e.addEventListener(\"autosize:update\",i,!1),e.style.overflowX=\"hidden\",e.style.wordWrap=\"break-word\",o.set(e,{destroy:u,update:i}),function(){var t=window.getComputedStyle(e,null);\"vertical\"===t.resize?e.style.resize=\"none\":\"both\"===t.resize&&(e.style.resize=\"horizontal\"),s=\"content-box\"===t.boxSizing?-(parseFloat(t.paddingTop)+parseFloat(t.paddingBottom)):parseFloat(t.borderTopWidth)+parseFloat(t.borderBottomWidth),isNaN(s)&&(s=0),i()}()}}function r(e){var t=o.get(e);t&&t.destroy()}function i(e){var t=o.get(e);t&&t.update()}var o=\"function\"==typeof Map?new Map:function(){var e=[],t=[];return{has:function(t){return e.indexOf(t)>-1},get:function(n){return t[e.indexOf(n)]},set:function(n,r){-1===e.indexOf(n)&&(e.push(n),t.push(r))},delete:function(n){var r=e.indexOf(n);r>-1&&(e.splice(r,1),t.splice(r,1))}}}(),a=function(e){return new Event(e,{bubbles:!0})};try{new Event(\"test\")}catch(e){a=function(e){var t=document.createEvent(\"Event\");return t.initEvent(e,!0,!1),t}}var s=null;\"undefined\"==typeof window||\"function\"!=typeof window.getComputedStyle?(s=function(e){return e},s.destroy=function(e){return e},s.update=function(e){return e}):(s=function(e,t){return e&&Array.prototype.forEach.call(e.length?e:[e],function(e){return n(e)}),e},s.destroy=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],r),e},s.update=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],i),e}),t.default=s,e.exports=t.default})},function(e,t,n){\"use strict\";function r(e){var t=this;return!!e&&t.init(e),t}function i(e){return new r(e)}var o=n(9).version,a=n(6),s=n(8),l=n(0),c=n(5),d=n(3),u=n(4),p=n(2),f=n(7),h={comment:\"\",nick:\"Anonymous\",mail:\"\",link:\"\",ua:navigator.userAgent,url:\"\"},v={\"zh-cn\":{head:{nick:\"昵称\",mail:\"邮箱\",link:\"网址(http://)\"},tips:{comments:\"评论\",sofa:\"快来做第一个评论的人吧~\",busy:\"还在提交中，请稍候...\",again:\"这么简单也能错，也是没谁了.\"},ctrl:{reply:\"回复\",ok:\"好的\",sure:\"确认\",cancel:\"取消\",confirm:\"确认\",continue:\"继续\",more:\"查看更多...\",try:\"再试试?\"},error:{99:\"初始化失败，请检查init中的`el`元素.\",100:\"初始化失败，请检查你的AppId和AppKey.\",401:\"未经授权的操作，请检查你的AppId和AppKey.\",403:\"访问被api域名白名单拒绝，请检查你的安全域名设置.\"},timeago:{seconds:\"秒前\",minutes:\"分钟前\",hours:\"小时前\",days:\"天前\",now:\"刚刚\"}},en:{head:{nick:\"NickName\",mail:\"E-Mail\",link:\"Website(http://)\"},tips:{comments:\"Comments\",sofa:\"No comments yet.\",busy:\"Submit is busy, please wait...\",again:\"Sorry, this is a wrong calculation.\"},ctrl:{reply:\"Reply\",ok:\"Ok\",sure:\"Sure\",cancel:\"Cancel\",confirm:\"Confirm\",continue:\"Continue\",more:\"Load More...\",try:\"Once More?\"},error:{99:\"Initialization failed, Please check the `el` element in the init method.\",100:\"Initialization failed, Please check your appId and appKey.\",401:\"Unauthorized operation, Please check your appId and appKey.\",403:\"Access denied by api domain white list, Please check your security domain.\"},timeago:{seconds:\"seconds ago\",minutes:\"minutes ago\",hours:\"hours ago\",days:\"days ago\",now:\"just now\"}}},g={cdn:\"https://gravatar.loli.net/avatar/\",ds:[\"mp\",\"identicon\",\"monsterid\",\"wavatar\",\"robohash\",\"retro\",\"\"],params:\"\",hide:!1},m=[\"nick\",\"mail\",\"link\"],b=Storage&&localStorage&&localStorage instanceof Storage&&localStorage,x=location.pathname.replace(/index\\.html?$/,\"\");r.prototype.init=function(e){if(\"undefined\"==typeof document)return void console;var t=this;try{var n=e.lang||\"\",r=e.langMode||\"\",i=g.ds,a=e.avatar,l=e.avatarForce,c=e.avatar_cdn||\"\";n&&r&&t.installLocale(n,r),t.locale=t.locale||v[e.lang||\"zh-cn\"],t.notify=e.notify||!1,t.verify=e.verify||!1;var d=l?\"&q=\"+Math.random().toString(32).substring(2):\"\";g.params=\"?d=\"+(i.indexOf(a)>-1?a:\"mp\")+\"&v=\"+o+d,g.hide=\"hide\"===a,g.cdn=!!c&&c||g.cdn,x=e.path||x;var p=Number(e.pageSize||10);if(e.pageSize=isNaN(p)?10:p<1?10:p,s.setOptions({renderer:new s.Renderer,highlight:!1===e.highlight?null:f,gfm:!0,tables:!0,breaks:!0,pedantic:!1,sanitize:!1,smartLists:!0,smartypants:!0}),!AV)return void setTimeout(function(){t.init(e)},20);var h=e.app_id||e.appId,b=e.app_key||e.appKey,y=(e.region||\"cn\").toLowerCase(),k=[\"cn\",\"us\"];if(y=k.indexOf(y)>-1?y:k[0],!h||!b)throw 99;AV.applicationId&&delete AV._config.applicationId||(AV.applicationId=null),AV.applicationKey&&delete AV._config.applicationKey||(AV.applicationKey=null),AV.init({appId:h,appKey:b,region:y});for(var _=u.findAll(document,\".valine-comment-count\"),A=0,O=_.length;A<O;A++)!function(e,n){var r=_[e];if(r){var i=u.attr(r,\"data-xid\");i&&t.Q(i).count().then(function(e){r.innerText=e}).catch(function(e){r.innerText=0})}}(A);e.visitor&&w.add(AV.Object.extend(\"Counter\"));var S=e.el||null,$=u.findAll(document,S);if(!(S=S instanceof HTMLElement?S:$[$.length-1]||null))return;t.el=S,t.el.classList.add(\"v\"),g.hide&&t.el.classList.add(\"hide-avatar\"),e.meta=(e.guest_info||e.meta||m).filter(function(e){return m.indexOf(e)>-1});var E=(0==e.meta.length?m:e.meta).map(function(e){var n=\"mail\"==e?\"email\":\"text\";return m.indexOf(e)>-1?'<input name=\"'+e+'\" placeholder=\"'+t.locale.head[e]+'\" class=\"v'+e+' vinput\" type=\"'+n+'\">':\"\"});t.placeholder=e.placeholder||\"Just Go Go\",t.el.innerHTML='<div class=\"vwrap\"><div class=\"vheader item'+E.length+'\">'+E.join(\"\")+'</div><div class=\"vedit\"><textarea id=\"veditor\" class=\"veditor vinput\" placeholder=\"'+t.placeholder+'\"></textarea><div class=\"vctrl\"><span class=\"vemoji-btn\">Emoji</span> | <span class=\"vpreview-btn\">Preview</span></div><div class=\"vemojis\" style=\"display:none;\"></div><div class=\"vinput vpreview\" style=\"display:none;\"></div></div><div class=\"vcontrol\"><div class=\"col col-20\" title=\"Markdown is supported\"><a href=\"https://segmentfault.com/markdown\" target=\"_blank\"><svg class=\"markdown\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M14.85 3H1.15C.52 3 0 3.52 0 4.15v7.69C0 12.48.52 13 1.15 13h13.69c.64 0 1.15-.52 1.15-1.15v-7.7C16 3.52 15.48 3 14.85 3zM9 11H7V8L5.5 9.92 4 8v3H2V5h2l1.5 2L7 5h2v6zm2.99.5L9.5 8H11V5h2v3h1.5l-2.51 3.5z\"></path></svg></a></div><div class=\"col col-80 text-right\"><button type=\"button\" title=\"Cmd|Ctrl+Enter\" class=\"vsubmit vbtn\">'+t.locale.ctrl.reply+'</button></div></div><div style=\"display:none;\" class=\"vmark\"></div></div><div class=\"vinfo\" style=\"display:none;\"><div class=\"vcount col\"></div></div><div class=\"vlist\"></div><div class=\"vempty\" style=\"display:none;\"></div><div class=\"vpage txt-center\"></div><div class=\"info\"><div class=\"power txt-right\">Powered By <a href=\"https://valine.js.org\" target=\"_blank\">Valine</a><br>v'+o+\"</div></div>\";var C=u.find(t.el,\".vempty\");t.nodata={show:function(e){return C.innerHTML=e||t.locale.tips.sofa,u.attr(C,\"style\",\"display:block;\"),t},hide:function(){return u.attr(C,\"style\",\"display:none;\"),t}};var M=u.create(\"div\",\"class\",\"vloading\"),L=u.find(t.el,\".vlist\");t.loading={show:function(e){var n=u.findAll(L,\".vcard\");return e?L.insertBefore(M,n[0]):L.appendChild(M),t.nodata.hide(),t},hide:function(){var e=u.find(L,\".vloading\");return e&&u.remove(L,e),0===u.findAll(L,\".vcard\").length&&t.nodata.show(),t}};var T=u.find(t.el,\".vmark\");t.alert={show:function(e){T.innerHTML='<div class=\"valert txt-center\"><div class=\"vtext\">'+(e&&e.text||1)+'</div><div class=\"vbtns\"></div></div>';var n=u.find(T,\".vbtns\"),r='<button class=\"vcancel vbtn\">'+(e&&e.ctxt||t.locale.ctrl.cancel)+\"</button>\",i='<button class=\"vsure vbtn\">'+(e&&e.otxt||t.locale.ctrl.sure)+\"</button>\";if(n.innerHTML=\"\"+r+(e&&e.type&&i),u.on(\"click\",u.find(T,\".vcancel\"),function(e){t.alert.hide()}),u.attr(T,\"style\",\"display:block;\"),e&&e.type){var o=u.find(T,\".vsure\");u.on(\"click\",o,function(n){t.alert.hide(),e.cb&&e.cb()})}return t},hide:function(){return u.attr(T,\"style\",\"display:none;\"),t}},t.bind(e)}catch(e){t.ErrorHandler(e)}return t};var y=function(e,t){var n=new e,r=new AV.ACL;r.setPublicReadAccess(!0),r.setPublicWriteAccess(!0),n.setACL(r),n.set(\"url\",t.url),n.set(\"xid\",t.xid),n.set(\"title\",t.title),n.set(\"time\",1),n.save().then(function(e){u.find(t.el,\".leancloud-visitors-count\").innerText=1}).catch(function(e){})},w={add:function(e){var t=u.findAll(document,\".leancloud_visitors,.leancloud-visitors\");if(t.length){var n=t[0],r=u.attr(n,\"id\"),i=u.attr(n,\"data-flag-title\"),o=encodeURI(r),a={el:n,url:r,xid:o,title:i};if(decodeURI(r)===decodeURI(x)){var s=new AV.Query(e);s.equalTo(\"url\",r),s.find().then(function(t){if(t.length>0){var r=t[0];r.increment(\"time\"),r.save().then(function(e){u.find(n,\".leancloud-visitors-count\").innerText=e.get(\"time\")}).catch(function(e){})}else y(e,a)}).catch(function(t){101==t.code&&y(e,a)})}else w.show(e,t)}},show:function(e,t){u.each(t,function(e,t){var n=u.find(t,\".leancloud-visitors-count\");n&&(n.innerText=0)});var n=[];for(var r in t)t.hasOwnProperty(r)&&n.push(u.attr(t[r],\"id\"));if(n.length){var i=new AV.Query(e);i.containedIn(\"url\",n),i.find().then(function(e){e.length>0&&u.each(e,function(e,t){var n=t.get(\"url\"),r=t.get(\"time\"),i=u.find(document,'.leancloud_visitors[id=\"'+n+'\"]')||u.find(document,'.leancloud-visitors[id=\"'+n+'\"]'),o=u.find(i,\".leancloud-visitors-count\");o&&(o.innerText=r)})}).catch(function(e){})}}};r.prototype.Q=function(e){if(1==arguments.length){var t=new AV.Query(\"Comment\");t.doesNotExist(\"rid\");var n=new AV.Query(\"Comment\");n.equalTo(\"rid\",\"\");var r=AV.Query.or(t,n);return r.equalTo(\"url\",decodeURI(e)),r.addDescending(\"createdAt\"),r.addDescending(\"insertedAt\"),r}var i=JSON.stringify(arguments[1]).replace(/(\\[|\\])/g,\"\"),o=\"select * from Comment where rid in (\"+i+\") order by -createdAt,-createdAt\";return AV.Query.doCloudQuery(o)},r.prototype.ErrorHandler=function(e){var t=this;if(t.el&&t.loading.hide().nodata.hide(),\"[object Error]\"==={}.toString.call(e)){var n=e.code||\"\",r=t.locale.error[n],i=r||e.message||e.error||\"\";101==n?t.nodata.show():t.el&&t.nodata.show('<pre style=\"text-align:left;\">Code '+n+\": \"+i+\"</pre>\")||console}else t.el&&t.nodata.show('<pre style=\"text-align:left;\">'+JSON.stringify(e)+\"</pre>\")||console},r.prototype.installLocale=function(e,t){var n=this;return t=t||{},e&&(v[e]=t,n.locale=v[e]||v[\"zh-cn\"]),n},r.prototype.setPath=function(e){return x=e||x,this},r.prototype.bind=function(e){var t=this,n=u.find(t.el,\".vemojis\"),r=u.find(t.el,\".vpreview\"),i=u.find(t.el,\".vemoji-btn\"),o=u.find(t.el,\".vpreview-btn\"),f=p.data;for(var v in f)f.hasOwnProperty(v)&&function(e,r){var i=u.create(\"i\",{name:e,title:e});i.innerHTML=r,n.appendChild(i),u.on(\"click\",i,function(e){var n=u.find(t.el,\".veditor\");E(n,r),y(n)})}(v,f[v]);t.emoji={show:function(){return t.preview.hide(),u.attr(i,\"v\",1),u.removeAttr(o,\"v\"),u.attr(n,\"style\",\"display:block\"),t.emoji},hide:function(){return u.removeAttr(i,\"v\"),u.attr(n,\"style\",\"display:hide\"),t.emoji}},t.preview={show:function(){return t.emoji.hide(),u.attr(o,\"v\",1),u.removeAttr(i,\"v\"),r.innerHTML=h.comment,u.attr(r,\"style\",\"display:block\"),T(),t.preview},hide:function(){return u.removeAttr(o,\"v\"),u.attr(r,\"style\",\"display:none\"),t.preview},empty:function(){return r.innerHtml=\"\",t.preview}};var m=function(e){var t=u.create(\"div\");t.insertAdjacentHTML(\"afterbegin\",e);var n=u.findAll(t,\"*\"),r=[\"INPUT\",\"STYLE\",\"SCRIPT\",\"IFRAME\",\"FRAME\",\"AUDIO\",\"VIDEO\",\"EMBED\",\"META\",\"TITLE\",\"LINK\"],i=function(e,t){var n=u.attr(e,t);n&&u.attr(e,t,n.replace(/(javascript|eval)/gi,\"\"))};return u.each(n,function(e,n){1===n.nodeType&&(r.indexOf(n.nodeName)>-1&&(\"INPUT\"===n.nodeName&&\"checkbox\"===u.attr(n,\"type\")?u.attr(n,\"disabled\",\"disabled\"):u.remove(t,n)),\"A\"===n.nodeName&&i(n,\"href\"),u.clearAttr(n))}),t.innerHTML},y=function(e){var t=e.value||\"\";t=p.parse(t),e.value=t;var n=m(s(t));h.comment=n,r.innerHTML=n,t?l(e):l.destroy(e)};u.on(\"click\",i,function(e){u.attr(i,\"v\")?t.emoji.hide():t.emoji.show()}),u.on(\"click\",o,function(e){u.attr(o,\"v\")?t.preview.hide():t.preview.show()});for(var w=e.meta,_={},A={veditor:\"comment\"},O=0,S=w.length;O<S;O++)A[\"v\"+w[O]]=w[O];for(var $ in A)A.hasOwnProperty($)&&function(){var e=A[$],n=u.find(t.el,\".\"+$);_[e]=n,n&&u.on(\"input change blur\",n,function(t){\"comment\"===e?y(n):h[e]=u.escape(n.value.replace(/(^\\s*)|(\\s*$)/g,\"\"))})}();var E=function(e,t){if(document.selection){e.focus();document.selection.createRange().text=t,e.focus()}else if(e.selectionStart||\"0\"==e.selectionStart){var n=e.selectionStart,r=e.selectionEnd,i=e.scrollTop;e.value=e.value.substring(0,n)+t+e.value.substring(r,e.value.length),e.focus(),e.selectionStart=n+t.length,e.selectionEnd=n+t.length,e.scrollTop=i}else e.focus(),e.value+=t},C=function(e){var n=u.find(t.el,\".vh[rootid='\"+e+\"']\"),r=u.find(n,\".vquote\");return r||(r=u.create(\"div\",\"class\",\"vquote\"),n.appendChild(r)),r},M=function n(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,i=e.pageSize,o=Number(u.find(t.el,\".vnum\").innerText);t.loading.show();var a=t.Q(x);a.limit(i),a.skip((r-1)*i),a.find().then(function(e){for(var a=e.length,s=[],l=0;l<a;l++){var c=e[l];s.push(c.id),L(c,u.find(t.el,\".vlist\"),!0)}t.Q(x,s).then(function(e){for(var t=e&&e.results||[],n=0;n<t.length;n++){var r=t[n];L(r,C(r.get(\"rid\")))}});var d=u.find(t.el,\".vpage\");d.innerHTML=i*r<o?'<button type=\"button\" class=\"vmore vbtn\">'+t.locale.ctrl.more+\"</button>\":\"\";var p=u.find(d,\".vmore\");p&&u.on(\"click\",p,function(e){d.innerHTML=\"\",n(++r)}),t.loading.hide()}).catch(function(e){t.loading.hide().ErrorHandler(e)})};t.Q(x).count().then(function(e){e>0?(u.attr(u.find(t.el,\".vinfo\"),\"style\",\"display:block;\"),u.find(t.el,\".vcount\").innerHTML='<span class=\"vnum\">'+e+\"</span> \"+t.locale.tips.comments,M()):t.loading.hide()}).catch(function(e){t.ErrorHandler(e)});var L=function(e,n,r){var i=u.create(\"div\",{class:\"vcard\",id:e.id}),o=g.hide?\"\":'<img class=\"vimg\" src=\"'+(g.cdn+a(e.get(\"mail\"))+g.params)+'\">',s=e.get(\"ua\")||\"\",l=\"\";if(s){s=d(s);l='<span class=\"vsys\">'+s.browser+\" \"+s.version+\"</span>\"+\" \"+('<span class=\"vsys\">'+s.os+\" \"+s.osVersion+\"</span>\")}var p=\"\",f=e.get(\"link\")||\"\";p=f?'<a class=\"vnick\" rel=\"nofollow\" href=\"'+f+'\" target=\"_blank\" >'+e.get(\"nick\")+\"</a>\":'<span class=\"vnick\">'+e.get(\"nick\")+\"</span>\",i.innerHTML=o+'\\n            <div class=\"vh\" rootid='+(e.get(\"rid\")||e.id)+'>\\n                <div class=\"vhead\">'+p+\" \"+l+'</div>\\n                <div class=\"vmeta\">\\n                    <span class=\"vtime\">'+c(e.get(\"insertedAt\")||e.createdAt,t.locale)+'</span>\\n                    <span rid=\"'+(e.get(\"rid\")||e.id)+'\" cid=\"'+e.id+'\" at=\"@'+u.escape(e.get(\"nick\"))+'\" mail=\"'+e.get(\"mail\")+'\" class=\"vat\">'+t.locale.ctrl.reply+'</span>\\n                </div>\\n                <div class=\"vcontent\">\\n                    '+m(e.get(\"comment\"))+\"\\n                </div>\\n            </div>\";for(var h=u.find(i,\".vat\"),v=u.findAll(i,\"a\"),b=0,x=v.length;b<x;b++){var y=v[b];y&&-1==(u.attr(y,\"class\")||\"\").indexOf(\"at\")&&u.attr(y,{target:\"_blank\",rel:\"nofollow\"})}var w=u.findAll(n,\".vcard\");r?n.appendChild(i):n.insertBefore(i,w[0]);var k=u.find(i,\".vcontent\");k&&z(k),h&&B(h),T()},T=function(){setTimeout(function(){var e=e||\"\";e&&e.Hub.Queue([\"Typeset\",e.Hub])},20)},z=function(e){setTimeout(function(){e.offsetHeight>180&&(e.classList.add(\"expand\"),u.on(\"click\",e,function(t){u.attr(e,\"class\",\"vcontent\")}))})},R={},B=function(e){u.on(\"click\",e,function(t){var n=u.attr(e,\"at\"),r=u.attr(e,\"rid\"),i=u.attr(e,\"cid\"),o=u.attr(e,\"mail\");R={at:u.escape(n)+\" \",rid:r,pid:i,rmail:o},u.attr(_.comment,\"placeholder\",n),_.comment.focus()})};!function(){var e=b&&b.ValineCache;if(e){e=JSON.parse(e);var n=w;for(var r in n){var i=n[r];u.find(t.el,\".v\"+i).value=u.unescape(e[i]),h[i]=e[i]}}}();var j=function(){h.comment=\"\",_.comment.value=\"\",y(_.comment),u.attr(_.comment,\"placeholder\",t.placeholder),R={},t.preview.empty().hide()},I=u.find(t.el,\".vsubmit\"),P=function(e){if(u.attr(I,\"disabled\"))return void t.alert.show({type:0,text:t.locale.tips.busy+'ヾ(๑╹◡╹)ﾉ\"',ctxt:t.locale.ctrl.ok});if(\"\"==h.comment)return void _.comment.focus();h.nick=h.nick||\"Anonymous\";var n=k.mail(h.mail),r=k.link(h.link);h.mail=n.k?n.v:\"\",h.link=r.k?r.v:\"\",t.notify||t.verify?V(Q):Q()},U=function(){var e=new AV.ACL;return e.setPublicReadAccess(!0),e.setPublicWriteAccess(!1),e},Q=function(){u.attr(I,\"disabled\",!0),t.loading.show(!0);var e=AV.Object.extend(\"Comment\"),n=new e;if(h.url=decodeURI(x),h.insertedAt=new Date,R.rid){var r=R.pid||R.rid;n.set(\"rid\",R.rid),n.set(\"pid\",r),h.comment='<a class=\"at\" href=\"#'+r+'\">'+R.at+\"</a>\"+h.comment}for(var i in h)if(h.hasOwnProperty(i)){var o=h[i];n.set(i,o)}n.setACL(U()),n.save().then(function(e){\"Anonymous\"!=h.nick&&b&&b.setItem(\"ValineCache\",JSON.stringify({nick:h.nick,link:h.link,mail:h.mail}));var n=u.find(t.el,\".vnum\"),r=1;try{if(R.rid){var i=u.find(t.el,'.vquote[rid=\"'+R.rid+'\"]')||C(R.rid);L(e,i,!0)}else n?(r=Number(n.innerText)+1,n.innerText=r):u.find(t.el,\".vcount\").innerHTML='<span class=\"num\">1</span> '+t.locale.tips.comments,L(e,u.find(t.el,\".vlist\"));h.mail&&N({username:h.nick,mail:h.mail}),R.at&&R.rmail&&t.notify&&F({username:R.at.replace(\"@\",\"\"),mail:R.rmail}),u.removeAttr(I,\"disabled\"),t.loading.hide(),j()}catch(e){t.ErrorHandler(e)}}).catch(function(e){t.ErrorHandler(e)})},V=function e(n){var r=Math.floor(10*Math.random()+1),i=Math.floor(10*Math.random()+1),o=Math.floor(10*Math.random()+1),a=[\"+\",\"-\",\"x\"],s=a[Math.floor(3*Math.random())],l=a[Math.floor(3*Math.random())],c=\"\"+r+s+i+l+o,d=c+\" = <input class='vcode vinput' >\";t.alert.show({type:1,text:d,ctxt:t.locale.ctrl.cancel,otxt:t.locale.ctrl.ok,cb:function(){var r=+u.find(t.el,\".vcode\").value;new Function(\"return \"+c.replace(/x/g,\"*\"))()===r?n&&n():t.alert.show({type:1,text:\"(T＿T)\"+t.locale.tips.again,ctxt:t.locale.ctrl.cancel,otxt:t.locale.ctrl.try,cb:function(){e(n)}})}})},N=function(e){var t=new AV.User;return t.setUsername(e.username),t.setPassword(e.mail),t.setEmail(e.mail),t.setACL(U()),t.signUp()},F=function e(n){AV.User.requestPasswordReset(n.mail).then(function(e){}).catch(function(r){1==r.code?t.alert.show({type:0,text:\"ヾ(ｏ･ω･)ﾉ At太频繁啦，提醒功能暂时宕机。<br>\"+r.error,ctxt:t.locale.ctrl.ok}):N(n).then(function(t){e(n)}).catch(function(e){})})};u.on(\"click\",I,P),u.on(\"keydown\",document,function(e){e=event||e;var n=e.keyCode||e.which||e.charCode;if(((e.ctrlKey||e.metaKey)&&13===n&&P(),9===n)&&\"veditor\"==(document.activeElement.id||\"\")){e.preventDefault();var r=u.find(t.el,\".veditor\");E(r,\"    \")}})};var k={mail:function(e){return{k:/[\\w-\\.]+@([\\w-]+\\.)+[a-z]{2,3}/.test(e),v:e}},link:function(e){return e=e.length>0&&(/^https?/.test(e)?e:\"http://\"+e),{k:/^https?:\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/.test(e),v:e}}};e.exports=i,e.exports.default=i},function(e,t,n){\"use strict\";var r={data:n(11),parse:function(e){return String(e).replace(/:(.+?):/g,function(e,t){return r.data[t]||e})}};e.exports=r},function(e,t,n){\"use strict\";function r(e){var t=this,n={Trident:e.indexOf(\"Trident\")>-1||e.indexOf(\"NET CLR\")>-1,Presto:e.indexOf(\"Presto\")>-1,WebKit:e.indexOf(\"AppleWebKit\")>-1,Gecko:e.indexOf(\"Gecko/\")>-1,Safari:e.indexOf(\"Safari\")>-1,Chrome:e.indexOf(\"Chrome\")>-1||e.indexOf(\"CriOS\")>-1,IE:e.indexOf(\"MSIE\")>-1||e.indexOf(\"Trident\")>-1,Edge:e.indexOf(\"Edge\")>-1,Firefox:e.indexOf(\"Firefox\")>-1||e.indexOf(\"FxiOS\")>-1,\"Firefox Focus\":e.indexOf(\"Focus\")>-1,Chromium:e.indexOf(\"Chromium\")>-1,Opera:e.indexOf(\"Opera\")>-1||e.indexOf(\"OPR\")>-1,Vivaldi:e.indexOf(\"Vivaldi\")>-1,Yandex:e.indexOf(\"YaBrowser\")>-1,Kindle:e.indexOf(\"Kindle\")>-1||e.indexOf(\"Silk/\")>-1,360:e.indexOf(\"360EE\")>-1||e.indexOf(\"360SE\")>-1,UC:e.indexOf(\"UC\")>-1||e.indexOf(\" UBrowser\")>-1,QQBrowser:e.indexOf(\"QQBrowser\")>-1,QQ:e.indexOf(\"QQ/\")>-1,Baidu:e.indexOf(\"Baidu\")>-1||e.indexOf(\"BIDUBrowser\")>-1,Maxthon:e.indexOf(\"Maxthon\")>-1,Sogou:e.indexOf(\"MetaSr\")>-1||e.indexOf(\"Sogou\")>-1,LBBROWSER:e.indexOf(\"LBBROWSER\")>-1,\"2345Explorer\":e.indexOf(\"2345Explorer\")>-1,TheWorld:e.indexOf(\"TheWorld\")>-1,XiaoMi:e.indexOf(\"MiuiBrowser\")>-1,Quark:e.indexOf(\"Quark\")>-1,Qiyu:e.indexOf(\"Qiyu\")>-1,Wechat:e.indexOf(\"MicroMessenger\")>-1,Taobao:e.indexOf(\"AliApp(TB\")>-1,Alipay:e.indexOf(\"AliApp(AP\")>-1,Weibo:e.indexOf(\"Weibo\")>-1,Douban:e.indexOf(\"com.douban.frodo\")>-1,Suning:e.indexOf(\"SNEBUY-APP\")>-1,iQiYi:e.indexOf(\"IqiyiApp\")>-1,Windows:e.indexOf(\"Windows\")>-1,Linux:e.indexOf(\"Linux\")>-1||e.indexOf(\"X11\")>-1,\"Mac OS\":e.indexOf(\"Macintosh\")>-1,Android:e.indexOf(\"Android\")>-1||e.indexOf(\"Adr\")>-1,Ubuntu:e.indexOf(\"Ubuntu\")>-1,FreeBSD:e.indexOf(\"FreeBSD\")>-1,Debian:e.indexOf(\"Debian\")>-1,\"Windows Phone\":e.indexOf(\"IEMobile\")>-1||e.indexOf(\"Windows Phone\")>-1,BlackBerry:e.indexOf(\"BlackBerry\")>-1||e.indexOf(\"RIM\")>-1,MeeGo:e.indexOf(\"MeeGo\")>-1,Symbian:e.indexOf(\"Symbian\")>-1,iOS:e.indexOf(\"like Mac OS X\")>-1,\"Chrome OS\":e.indexOf(\"CrOS\")>-1,WebOS:e.indexOf(\"hpwOS\")>-1,Mobile:e.indexOf(\"Mobi\")>-1||e.indexOf(\"iPh\")>-1||e.indexOf(\"480\")>-1,Tablet:e.indexOf(\"Tablet\")>-1||e.indexOf(\"Pad\")>-1||e.indexOf(\"Nexus 7\")>-1};n.Mobile&&(n.Mobile=!(e.indexOf(\"iPad\")>-1));var r={engine:[\"WebKit\",\"Trident\",\"Gecko\",\"Presto\"],browser:[\"Safari\",\"Chrome\",\"Edge\",\"IE\",\"Firefox\",\"Firefox Focus\",\"Chromium\",\"Opera\",\"Vivaldi\",\"Yandex\",\"Kindle\",\"360\",\"UC\",\"QQBrowser\",\"QQ\",\"Baidu\",\"Maxthon\",\"Sogou\",\"LBBROWSER\",\"2345Explorer\",\"TheWorld\",\"XiaoMi\",\"Quark\",\"Qiyu\",\"Wechat\",\"Taobao\",\"Alipay\",\"Weibo\",\"Douban\",\"Suning\",\"iQiYi\"],os:[\"Windows\",\"Linux\",\"Mac OS\",\"Android\",\"Ubuntu\",\"FreeBSD\",\"Debian\",\"iOS\",\"Windows Phone\",\"BlackBerry\",\"MeeGo\",\"Symbian\",\"Chrome OS\",\"WebOS\"],device:[\"Mobile\",\"Tablet\"]};t.device=\"PC\";for(var i in r)for(var o=0;o<r[i].length;o++){var a=r[i][o];n[a]&&(t[i]=a)}var s={Windows:function(){var t=e.replace(/^.*Windows NT ([\\d.]+);.*$/,\"$1\");return{6.4:\"10\",6.3:\"8.1\",6.2:\"8\",6.1:\"7\",\"6.0\":\"Vista\",5.2:\"XP\",5.1:\"XP\",\"5.0\":\"2000\"}[t]||t},Android:function(){return e.replace(/^.*Android ([\\d.]+);.*$/,\"$1\")},iOS:function(){return e.replace(/^.*OS ([\\d_]+) like.*$/,\"$1\").replace(/_/g,\".\")},Debian:function(){return e.replace(/^.*Debian\\/([\\d.]+).*$/,\"$1\")},\"Windows Phone\":function(){return e.replace(/^.*Windows Phone( OS)? ([\\d.]+);.*$/,\"$2\")},\"Mac OS\":function(){return e.replace(/^.*Mac OS X ([\\d_]+).*$/,\"$1\").replace(/_/g,\".\")},WebOS:function(){return e.replace(/^.*hpwOS\\/([\\d.]+);.*$/,\"$1\")}};t.osVersion=\"\",s[t.os]&&(t.osVersion=s[t.os](),t.osVersion==e&&(t.osVersion=\"\"));var l={Safari:function(){return e.replace(/^.*Version\\/([\\d.]+).*$/,\"$1\")},Chrome:function(){return e.replace(/^.*Chrome\\/([\\d.]+).*$/,\"$1\").replace(/^.*CriOS\\/([\\d.]+).*$/,\"$1\")},IE:function(){return e.replace(/^.*MSIE ([\\d.]+).*$/,\"$1\").replace(/^.*rv:([\\d.]+).*$/,\"$1\")},Edge:function(){return e.replace(/^.*Edge\\/([\\d.]+).*$/,\"$1\")},Firefox:function(){return e.replace(/^.*Firefox\\/([\\d.]+).*$/,\"$1\").replace(/^.*FxiOS\\/([\\d.]+).*$/,\"$1\")},\"Firefox Focus\":function(){return e.replace(/^.*Focus\\/([\\d.]+).*$/,\"$1\")},Chromium:function(){return e.replace(/^.*Chromium\\/([\\d.]+).*$/,\"$1\")},Opera:function(){return e.replace(/^.*Opera\\/([\\d.]+).*$/,\"$1\").replace(/^.*OPR\\/([\\d.]+).*$/,\"$1\")},Vivaldi:function(){return e.replace(/^.*Vivaldi\\/([\\d.]+).*$/,\"$1\")},Yandex:function(){return e.replace(/^.*YaBrowser\\/([\\d.]+).*$/,\"$1\")},Kindle:function(){return e.replace(/^.*Version\\/([\\d.]+).*$/,\"$1\")},Maxthon:function(){return e.replace(/^.*Maxthon\\/([\\d.]+).*$/,\"$1\")},QQBrowser:function(){return e.replace(/^.*QQBrowser\\/([\\d.]+).*$/,\"$1\")},QQ:function(){return e.replace(/^.*QQ\\/([\\d.]+).*$/,\"$1\")},Baidu:function(){return e.replace(/^.*BIDUBrowser[\\s\\/]([\\d.]+).*$/,\"$1\")},UC:function(){return e.replace(/^.*UC?Browser\\/([\\d.]+).*$/,\"$1\")},Sogou:function(){return e.replace(/^.*SE ([\\d.X]+).*$/,\"$1\").replace(/^.*SogouMobileBrowser\\/([\\d.]+).*$/,\"$1\")},\"2345Explorer\":function(){return e.replace(/^.*2345Explorer\\/([\\d.]+).*$/,\"$1\")},TheWorld:function(){return e.replace(/^.*TheWorld ([\\d.]+).*$/,\"$1\")},XiaoMi:function(){return e.replace(/^.*MiuiBrowser\\/([\\d.]+).*$/,\"$1\")},Quark:function(){return e.replace(/^.*Quark\\/([\\d.]+).*$/,\"$1\")},Qiyu:function(){return e.replace(/^.*Qiyu\\/([\\d.]+).*$/,\"$1\")},Wechat:function(){return e.replace(/^.*MicroMessenger\\/([\\d.]+).*$/,\"$1\")},Taobao:function(){return e.replace(/^.*AliApp\\(TB\\/([\\d.]+).*$/,\"$1\")},Alipay:function(){return e.replace(/^.*AliApp\\(AP\\/([\\d.]+).*$/,\"$1\")},Weibo:function(){return e.replace(/^.*weibo__([\\d.]+).*$/,\"$1\")},Douban:function(){return e.replace(/^.*com.douban.frodo\\/([\\d.]+).*$/,\"$1\")},Suning:function(){return e.replace(/^.*SNEBUY-APP([\\d.]+).*$/,\"$1\")},iQiYi:function(){return e.replace(/^.*IqiyiVersion\\/([\\d.]+).*$/,\"$1\")}};t.version=\"\",l[t.browser]&&(t.version=l[t.browser](),t.version==e&&(t.version=\"\")),\"Edge\"==t.browser?t.engine=\"EdgeHTML\":\"Chrome\"==t.browser&&parseInt(t.version)>27?t.engine=\"Blink\":\"Opera\"==t.browser&&parseInt(t.version)>12?t.engine=\"Blink\":\"Yandex\"==t.browser?t.engine=\"Blink\":void 0==t.browser&&(t.browser=\"Unknow App\")}function i(e){return new r(e)}e.exports=i},function(e,t,n){\"use strict\";var r={},i={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#39;\",\"`\":\"&#x60;\",\"\\\\\":\"&#x5c;\"};for(var o in i)r[i[o]]=o;var a=/[&<>\"'`\\\\]/g,s=RegExp(a.source),l=/&(?:amp|lt|gt|quot|#39|#x60|#x5c);/g,c=RegExp(l.source),d={on:function(e,t,n,r){e=e.split(\" \");for(var i=0,o=e.length;i<o;i++)d.off(e[i],t,n,r),t.addEventListener?t.addEventListener(e[i],n,r||!1):t.attachEvent?t.attachEvent(\"on\"+e[i],n):t[\"on\"+e[i]]=n},off:function(e,t,n,r){t.removeEventListener?t.removeEventListener(e,n,r||!1):t.detachEvent?t.detachEvent(\"on\"+e,n):t[\"on\"+e]=null},escape:function(e){return e&&s.test(e)?e.replace(a,function(e){return i[e]}):e},unescape:function(e){return e&&c.test(e)?e.replace(l,function(e){return r[e]}):e},create:function(e,t,n){var r=document.createElement(e);return d.attr(r,t,n),r},find:function(e,t){return e.querySelector(t)},findAll:function(e,t){return e.querySelectorAll(t)},attr:function(e,t,n){if(void 0===e.getAttribute)return d.prop(e,t,n);if(void 0!==n)null===n?d.removeAttr(e,t):e.setAttribute(t,n);else{if(\"[object Object]\"!=={}.toString.call(t))return e.getAttribute(t);d.each(t,function(t,n){e.setAttribute(t,n)})}},prop:function(e,t,n){return void 0!==n?e[t]=n:\"[object Object]\"!=={}.toString.call(t)?e[t]:void d.each(t,function(t,n){e[t]=n})},removeAttr:function(e,t){var n=void 0,r=0,i=t&&t.match(/[^\\x20\\t\\r\\n\\f\\*\\/\\\\]+/g);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n);return e},clearAttr:function(e){var t=e.attributes,n=[\"align\",\"alt\",\"class\",\"disabled\",\"href\",\"id\",\"target\",\"title\",\"type\",\"style\",\"src\"];return d.each(t,function(t,r){var i=r.name;if(\"style\"===i){var o=r.value;d.each(o.split(\";\"),function(t,n){if(n.indexOf(\"color\")>-1)return d.attr(e,\"style\",n),!1;d.removeAttr(e,\"style\")})}n.indexOf(i)>-1||d.removeAttr(e,i)}),e},remove:function(e,t){try{t.parentNode&&t.parentNode.removeChild(t)}catch(e){}},each:function(e,t){var n=0,r=e.length,i=[\"[object Array]\",\"[object NodeList]\"],o={}.toString.call(e);if(i.indexOf(o)>-1)for(;n<r&&!1!==(t&&t.call(e[n],n,e[n]));n++);else for(n in e)if(e.hasOwnProperty(n)&&!1===(t&&t.call(e[n],n,e[n])))break;return e}};e.exports=d},function(e,t,n){\"use strict\";var r=function(e,t){if(e)try{var n=e.getTime(),r=(new Date).getTime(),o=r-n,a=Math.floor(o/864e5);if(0===a){var s=o%864e5,l=Math.floor(s/36e5);if(0===l){var c=s%36e5,d=Math.floor(c/6e4);if(0===d){var u=c%6e4;return Math.round(u/1e3)+\" \"+t.timeago.seconds}return d+\" \"+t.timeago.minutes}return l+\" \"+t.timeago.hours}return a<0?t.timeago.now:a<8?a+\" \"+t.timeago.days:i(e)}catch(e){}},i=function(e){var t=o(e.getDate(),2),n=o(e.getMonth()+1,2);return o(e.getFullYear(),2)+\"-\"+n+\"-\"+t},o=function(e,t){for(var n=e.toString();n.length<t;)n=\"0\"+n;return n};e.exports=r},function(e,t,n){var r;!function(i){\"use strict\";function o(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function a(e,t){return e<<t|e>>>32-t}function s(e,t,n,r,i,s){return o(a(o(o(t,e),o(r,s)),i),n)}function l(e,t,n,r,i,o,a){return s(t&n|~t&r,e,t,i,o,a)}function c(e,t,n,r,i,o,a){return s(t&r|n&~r,e,t,i,o,a)}function d(e,t,n,r,i,o,a){return s(t^n^r,e,t,i,o,a)}function u(e,t,n,r,i,o,a){return s(n^(t|~r),e,t,i,o,a)}function p(e,t){e[t>>5]|=128<<t%32,e[14+(t+64>>>9<<4)]=t;var n,r,i,a,s,p=1732584193,f=-271733879,h=-1732584194,v=271733878;for(n=0;n<e.length;n+=16)r=p,i=f,a=h,s=v,p=l(p,f,h,v,e[n],7,-680876936),v=l(v,p,f,h,e[n+1],12,-389564586),h=l(h,v,p,f,e[n+2],17,606105819),f=l(f,h,v,p,e[n+3],22,-1044525330),p=l(p,f,h,v,e[n+4],7,-176418897),v=l(v,p,f,h,e[n+5],12,1200080426),h=l(h,v,p,f,e[n+6],17,-1473231341),f=l(f,h,v,p,e[n+7],22,-45705983),p=l(p,f,h,v,e[n+8],7,1770035416),v=l(v,p,f,h,e[n+9],12,-1958414417),h=l(h,v,p,f,e[n+10],17,-42063),f=l(f,h,v,p,e[n+11],22,-1990404162),p=l(p,f,h,v,e[n+12],7,1804603682),v=l(v,p,f,h,e[n+13],12,-40341101),h=l(h,v,p,f,e[n+14],17,-1502002290),f=l(f,h,v,p,e[n+15],22,1236535329),p=c(p,f,h,v,e[n+1],5,-165796510),v=c(v,p,f,h,e[n+6],9,-1069501632),h=c(h,v,p,f,e[n+11],14,643717713),f=c(f,h,v,p,e[n],20,-373897302),p=c(p,f,h,v,e[n+5],5,-701558691),v=c(v,p,f,h,e[n+10],9,38016083),h=c(h,v,p,f,e[n+15],14,-660478335),f=c(f,h,v,p,e[n+4],20,-405537848),p=c(p,f,h,v,e[n+9],5,568446438),v=c(v,p,f,h,e[n+14],9,-1019803690),h=c(h,v,p,f,e[n+3],14,-187363961),f=c(f,h,v,p,e[n+8],20,1163531501),p=c(p,f,h,v,e[n+13],5,-1444681467),v=c(v,p,f,h,e[n+2],9,-51403784),h=c(h,v,p,f,e[n+7],14,1735328473),f=c(f,h,v,p,e[n+12],20,-1926607734),p=d(p,f,h,v,e[n+5],4,-378558),v=d(v,p,f,h,e[n+8],11,-2022574463),h=d(h,v,p,f,e[n+11],16,1839030562),f=d(f,h,v,p,e[n+14],23,-35309556),p=d(p,f,h,v,e[n+1],4,-1530992060),v=d(v,p,f,h,e[n+4],11,1272893353),h=d(h,v,p,f,e[n+7],16,-155497632),f=d(f,h,v,p,e[n+10],23,-1094730640),p=d(p,f,h,v,e[n+13],4,681279174),v=d(v,p,f,h,e[n],11,-358537222),h=d(h,v,p,f,e[n+3],16,-722521979),f=d(f,h,v,p,e[n+6],23,76029189),p=d(p,f,h,v,e[n+9],4,-640364487),v=d(v,p,f,h,e[n+12],11,-421815835),h=d(h,v,p,f,e[n+15],16,530742520),f=d(f,h,v,p,e[n+2],23,-995338651),p=u(p,f,h,v,e[n],6,-198630844),v=u(v,p,f,h,e[n+7],10,1126891415),h=u(h,v,p,f,e[n+14],15,-1416354905),f=u(f,h,v,p,e[n+5],21,-57434055),p=u(p,f,h,v,e[n+12],6,1700485571),v=u(v,p,f,h,e[n+3],10,-1894986606),h=u(h,v,p,f,e[n+10],15,-1051523),f=u(f,h,v,p,e[n+1],21,-2054922799),p=u(p,f,h,v,e[n+8],6,1873313359),v=u(v,p,f,h,e[n+15],10,-30611744),h=u(h,v,p,f,e[n+6],15,-1560198380),f=u(f,h,v,p,e[n+13],21,1309151649),p=u(p,f,h,v,e[n+4],6,-145523070),v=u(v,p,f,h,e[n+11],10,-1120210379),h=u(h,v,p,f,e[n+2],15,718787259),f=u(f,h,v,p,e[n+9],21,-343485551),p=o(p,r),f=o(f,i),h=o(h,a),v=o(v,s);return[p,f,h,v]}function f(e){var t,n=\"\",r=32*e.length;for(t=0;t<r;t+=8)n+=String.fromCharCode(e[t>>5]>>>t%32&255);return n}function h(e){var t,n=[];for(n[(e.length>>2)-1]=void 0,t=0;t<n.length;t+=1)n[t]=0;var r=8*e.length;for(t=0;t<r;t+=8)n[t>>5]|=(255&e.charCodeAt(t/8))<<t%32;return n}function v(e){return f(p(h(e),8*e.length))}function g(e,t){var n,r,i=h(e),o=[],a=[];for(o[15]=a[15]=void 0,i.length>16&&(i=p(i,8*e.length)),n=0;n<16;n+=1)o[n]=909522486^i[n],a[n]=1549556828^i[n];return r=p(o.concat(h(t)),512+8*t.length),f(p(a.concat(r),640))}function m(e){var t,n,r=\"0123456789abcdef\",i=\"\";for(n=0;n<e.length;n+=1)t=e.charCodeAt(n),i+=r.charAt(t>>>4&15)+r.charAt(15&t);return i}function b(e){return unescape(encodeURIComponent(e))}function x(e){return v(b(e))}function y(e){return m(x(e))}function w(e,t){return g(b(e),b(t))}function k(e,t){return m(w(e,t))}function _(e,t,n){return t?n?w(t,e):k(t,e):n?x(e):y(e)}void 0!==(r=function(){return _}.call(t,n,t,e))&&(e.exports=r)}()},function(e,t,n){!function(t,n){e.exports=n()}(0,function(){\"use strict\";function e(e){return'<span style=\"color: slategray\">'+e+\"</span>\"}var t=function(e,t){return t={exports:{}},e(t,t.exports),t.exports}(function(e){var t=e.exports=function(){return new RegExp(\"(?:\"+t.line().source+\")|(?:\"+t.block().source+\")\",\"gm\")};t.line=function(){return/(?:^|\\s)\\/\\/(.+?)$/gm},t.block=function(){return/\\/\\*([\\S\\s]*?)\\*\\//gm}}),n=[\"23AC69\",\"91C132\",\"F19726\",\"E8552D\",\"1AAB8E\",\"E1147F\",\"2980C1\",\"1BA1E6\",\"9FA0A0\",\"F19726\",\"E30B20\",\"E30B20\",\"A3338B\"];return function(r,i){void 0===i&&(i={});var o=i.colors;void 0===o&&(o=n);var a=0,s={},l=/[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af\\u0400-\\u04FF]+|\\w+/,c=/</,d=new RegExp(\"(\"+l.source+\"|\"+c.source+\")|(\"+t().source+\")\",\"gmi\");return r.replace(d,function(t,n,r){if(r)return e(r);if(\"<\"===n)return\"&lt;\";var i;s[n]?i=s[n]:(i=o[a],s[n]=i);var l='<span style=\"color: #'+i+'\">'+n+\"</span>\";return a=++a%o.length,l})}})},function(e,t,n){(function(t){!function(t){\"use strict\";function n(e){this.tokens=[],this.tokens.links={},this.options=e||h.defaults,this.rules=v.normal,this.options.pedantic?this.rules=v.pedantic:this.options.gfm&&(this.options.tables?this.rules=v.tables:this.rules=v.gfm)}function r(e,t){if(this.options=t||h.defaults,this.links=e,this.rules=g.normal,this.renderer=this.options.renderer||new i,this.renderer.options=this.options,!this.links)throw new Error(\"Tokens array requires a `links` property.\");this.options.pedantic?this.rules=g.pedantic:this.options.gfm&&(this.options.breaks?this.rules=g.breaks:this.rules=g.gfm)}function i(e){this.options=e||h.defaults}function o(){}function a(e){this.tokens=[],this.token=null,this.options=e||h.defaults,this.options.renderer=this.options.renderer||new i,this.renderer=this.options.renderer,this.renderer.options=this.options}function s(e,t){return e.replace(t?/&/g:/&(?!#?\\w+;)/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#39;\")}function l(e){return e.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/gi,function(e,t){return t=t.toLowerCase(),\"colon\"===t?\":\":\"#\"===t.charAt(0)?\"x\"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):\"\"})}function c(e,t){return e=e.source||e,t=t||\"\",{replace:function(t,n){return n=n.source||n,n=n.replace(/(^|[^\\[])\\^/g,\"$1\"),e=e.replace(t,n),this},getRegex:function(){return new RegExp(e,t)}}}function d(e,t){return m[\" \"+e]||(/^[^:]+:\\/*[^\\/]*$/.test(e)?m[\" \"+e]=e+\"/\":m[\" \"+e]=e.replace(/[^\\/]*$/,\"\")),e=m[\" \"+e],\"//\"===t.slice(0,2)?e.replace(/:[\\s\\S]*/,\":\")+t:\"/\"===t.charAt(0)?e.replace(/(:\\/*[^\\/]*)[\\s\\S]*/,\"$1\")+t:e+t}function u(){}function p(e){for(var t,n,r=1;r<arguments.length;r++){t=arguments[r];for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}function f(e,t){var n=e.replace(/([^\\\\])\\|/g,\"$1 |\").split(/ +\\| */),r=0;if(n.length>t)n.splice(t);else for(;n.length<t;)n.push(\"\");for(;r<n.length;r++)n[r]=n[r].replace(/\\\\\\|/g,\"|\");return n}function h(e,t,r){if(void 0===e||null===e)throw new Error(\"marked(): input parameter is undefined or null\");if(\"string\"!=typeof e)throw new Error(\"marked(): input parameter is of type \"+Object.prototype.toString.call(e)+\", string expected\");if(r||\"function\"==typeof t){r||(r=t,t=null),t=p({},h.defaults,t||{});var i,o,l=t.highlight,c=0;try{i=n.lex(e,t)}catch(e){return r(e)}o=i.length;var d=function(e){if(e)return t.highlight=l,r(e);var n;try{n=a.parse(i,t)}catch(t){e=t}return t.highlight=l,e?r(e):r(null,n)};if(!l||l.length<3)return d();if(delete t.highlight,!o)return d();for(;c<i.length;c++)!function(e){\"code\"!==e.type?--o||d():l(e.text,e.lang,function(t,n){return t?d(t):null==n||n===e.text?--o||d():(e.text=n,e.escaped=!0,void(--o||d()))})}(i[c])}else try{return t&&(t=p({},h.defaults,t)),a.parse(n.lex(e,t),t)}catch(e){if(e.message+=\"\\nPlease report this to https://github.com/markedjs/marked.\",(t||h.defaults).silent)return\"<p>An error occurred:</p><pre>\"+s(e.message+\"\",!0)+\"</pre>\";throw e}}var v={newline:/^\\n+/,code:/^( {4}[^\\n]+\\n*)+/,fences:u,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,heading:/^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,nptable:u,blockquote:/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,list:/^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,html:\"^ {0,3}(?:<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*|<![A-Z][\\\\s\\\\S]*?>\\\\n*|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$))\",def:/^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,table:u,lheading:/^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,paragraph:/^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/,text:/^[^\\n]+/};v._label=/(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/,v._title=/(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/,v.def=c(v.def).replace(\"label\",v._label).replace(\"title\",v._title).getRegex(),v.bullet=/(?:[*+-]|\\d+\\.)/,v.item=/^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/,v.item=c(v.item,\"gm\").replace(/bull/g,v.bullet).getRegex(),v.list=c(v.list).replace(/bull/g,v.bullet).replace(\"hr\",\"\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))\").replace(\"def\",\"\\\\n+(?=\"+v.def.source+\")\").getRegex(),v._tag=\"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\",v._comment=/<!--(?!-?>)[\\s\\S]*?-->/,v.html=c(v.html,\"i\").replace(\"comment\",v._comment).replace(\"tag\",v._tag).replace(\"attribute\",/ +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex(),v.paragraph=c(v.paragraph).replace(\"hr\",v.hr).replace(\"heading\",v.heading).replace(\"lheading\",v.lheading).replace(\"tag\",v._tag).getRegex(),v.blockquote=c(v.blockquote).replace(\"paragraph\",v.paragraph).getRegex(),v.normal=p({},v),v.gfm=p({},v.normal,{fences:/^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\n? *\\1 *(?:\\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/}),v.gfm.paragraph=c(v.paragraph).replace(\"(?!\",\"(?!\"+v.gfm.fences.source.replace(\"\\\\1\",\"\\\\2\")+\"|\"+v.list.source.replace(\"\\\\1\",\"\\\\3\")+\"|\").getRegex(),v.tables=p({},v.gfm,{nptable:/^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,table:/^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/}),v.pedantic=p({},v.normal,{html:c(\"^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\\\"[^\\\"]*\\\"|'[^']*'|\\\\s[^'\\\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))\").replace(\"comment\",v._comment).replace(/tag/g,\"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),def:/^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/}),n.rules=v,n.lex=function(e,t){return new n(t).lex(e)},n.prototype.lex=function(e){return e=e.replace(/\\r\\n|\\r/g,\"\\n\").replace(/\\t/g,\"    \").replace(/\\u00a0/g,\" \").replace(/\\u2424/g,\"\\n\"),this.token(e,!0)},n.prototype.token=function(e,t){e=e.replace(/^ +$/gm,\"\");for(var n,r,i,o,a,s,l,c,d,u,p,h,g;e;)if((i=this.rules.newline.exec(e))&&(e=e.substring(i[0].length),i[0].length>1&&this.tokens.push({type:\"space\"})),i=this.rules.code.exec(e))e=e.substring(i[0].length),i=i[0].replace(/^ {4}/gm,\"\"),this.tokens.push({type:\"code\",text:this.options.pedantic?i:i.replace(/\\n+$/,\"\")});else if(i=this.rules.fences.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"code\",lang:i[2],text:i[3]||\"\"});else if(i=this.rules.heading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"heading\",depth:i[1].length,text:i[2]});else if(t&&(i=this.rules.nptable.exec(e))&&(s={type:\"table\",header:f(i[1].replace(/^ *| *\\| *$/g,\"\")),align:i[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),cells:i[3]?i[3].replace(/\\n$/,\"\").split(\"\\n\"):[]},s.header.length===s.align.length)){for(e=e.substring(i[0].length),c=0;c<s.align.length;c++)/^ *-+: *$/.test(s.align[c])?s.align[c]=\"right\":/^ *:-+: *$/.test(s.align[c])?s.align[c]=\"center\":/^ *:-+ *$/.test(s.align[c])?s.align[c]=\"left\":s.align[c]=null;for(c=0;c<s.cells.length;c++)s.cells[c]=f(s.cells[c],s.header.length);this.tokens.push(s)}else if(i=this.rules.hr.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"hr\"});else if(i=this.rules.blockquote.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"blockquote_start\"}),i=i[0].replace(/^ *> ?/gm,\"\"),this.token(i,t),this.tokens.push({type:\"blockquote_end\"});else if(i=this.rules.list.exec(e)){for(e=e.substring(i[0].length),o=i[2],p=o.length>1,this.tokens.push({type:\"list_start\",ordered:p,start:p?+o:\"\"}),i=i[0].match(this.rules.item),n=!1,u=i.length,c=0;c<u;c++)s=i[c],l=s.length,s=s.replace(/^ *([*+-]|\\d+\\.) +/,\"\"),~s.indexOf(\"\\n \")&&(l-=s.length,s=this.options.pedantic?s.replace(/^ {1,4}/gm,\"\"):s.replace(new RegExp(\"^ {1,\"+l+\"}\",\"gm\"),\"\")),this.options.smartLists&&c!==u-1&&(a=v.bullet.exec(i[c+1])[0],o===a||o.length>1&&a.length>1||(e=i.slice(c+1).join(\"\\n\")+e,c=u-1)),r=n||/\\n\\n(?!\\s*$)/.test(s),c!==u-1&&(n=\"\\n\"===s.charAt(s.length-1),r||(r=n)),h=/^\\[[ xX]\\] /.test(s),g=void 0,h&&(g=\" \"!==s[1],s=s.replace(/^\\[[ xX]\\] +/,\"\")),this.tokens.push({type:r?\"loose_item_start\":\"list_item_start\",task:h,checked:g}),this.token(s,!1),this.tokens.push({type:\"list_item_end\"});this.tokens.push({type:\"list_end\"})}else if(i=this.rules.html.exec(e))e=e.substring(i[0].length),this.tokens.push({type:this.options.sanitize?\"paragraph\":\"html\",pre:!this.options.sanitizer&&(\"pre\"===i[1]||\"script\"===i[1]||\"style\"===i[1]),text:i[0]});else if(t&&(i=this.rules.def.exec(e)))e=e.substring(i[0].length),i[3]&&(i[3]=i[3].substring(1,i[3].length-1)),d=i[1].toLowerCase().replace(/\\s+/g,\" \"),this.tokens.links[d]||(this.tokens.links[d]={href:i[2],title:i[3]});else if(t&&(i=this.rules.table.exec(e))&&(s={type:\"table\",header:f(i[1].replace(/^ *| *\\| *$/g,\"\")),align:i[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),cells:i[3]?i[3].replace(/(?: *\\| *)?\\n$/,\"\").split(\"\\n\"):[]},s.header.length===s.align.length)){for(e=e.substring(i[0].length),c=0;c<s.align.length;c++)/^ *-+: *$/.test(s.align[c])?s.align[c]=\"right\":/^ *:-+: *$/.test(s.align[c])?s.align[c]=\"center\":/^ *:-+ *$/.test(s.align[c])?s.align[c]=\"left\":s.align[c]=null;for(c=0;c<s.cells.length;c++)s.cells[c]=f(s.cells[c].replace(/^ *\\| *| *\\| *$/g,\"\"),s.header.length);this.tokens.push(s)}else if(i=this.rules.lheading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"heading\",depth:\"=\"===i[2]?1:2,text:i[1]});else if(t&&(i=this.rules.paragraph.exec(e)))e=e.substring(i[0].length),this.tokens.push({type:\"paragraph\",text:\"\\n\"===i[1].charAt(i[1].length-1)?i[1].slice(0,-1):i[1]});else if(i=this.rules.text.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"text\",text:i[0]});else if(e)throw new Error(\"Infinite loop on byte: \"+e.charCodeAt(0));return this.tokens};var g={escape:/^\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\]\\\\^_`{|}~])/,autolink:/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,url:u,tag:\"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\",link:/^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/,reflink:/^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,nolink:/^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,strong:/^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)|^__([^\\s])__(?!_)|^\\*\\*([^\\s])\\*\\*(?!\\*)/,em:/^_([^\\s][\\s\\S]*?[^\\s_])_(?!_)|^_([^\\s_][\\s\\S]*?[^\\s])_(?!_)|^\\*([^\\s][\\s\\S]*?[^\\s*])\\*(?!\\*)|^\\*([^\\s*][\\s\\S]*?[^\\s])\\*(?!\\*)|^_([^\\s_])_(?!_)|^\\*([^\\s*])\\*(?!\\*)/,code:/^(`+)\\s*([\\s\\S]*?[^`]?)\\s*\\1(?!`)/,br:/^ {2,}\\n(?!\\s*$)/,del:u,text:/^[\\s\\S]+?(?=[\\\\<!\\[`*]|\\b_| {2,}\\n|$)/};g._escapes=/\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\]\\\\^_`{|}~])/g,g._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,g._email=/[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,g.autolink=c(g.autolink).replace(\"scheme\",g._scheme).replace(\"email\",g._email).getRegex(),g._attribute=/\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/,g.tag=c(g.tag).replace(\"comment\",v._comment).replace(\"attribute\",g._attribute).getRegex(),g._label=/(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?/,g._href=/\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|(?:\\\\[()]?|\\([^\\s\\x00-\\x1f()\\\\]*\\)|[^\\s\\x00-\\x1f()\\\\])*?)/,g._title=/\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/,g.link=c(g.link).replace(\"label\",g._label).replace(\"href\",g._href).replace(\"title\",g._title).getRegex(),g.reflink=c(g.reflink).replace(\"label\",g._label).getRegex(),g.normal=p({},g),g.pedantic=p({},g.normal,{strong:/^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,em:/^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,link:c(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\",g._label).getRegex(),reflink:c(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\",g._label).getRegex()}),g.gfm=p({},g.normal,{escape:c(g.escape).replace(\"])\",\"~|])\").getRegex(),url:c(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/).replace(\"email\",g._email).getRegex(),_backpedal:/(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^~~(?=\\S)([\\s\\S]*?\\S)~~/,text:c(g.text).replace(\"]|\",\"~]|\").replace(\"|\",\"|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&'*+/=?^_`{\\\\|}~-]+@|\").getRegex()}),g.breaks=p({},g.gfm,{br:c(g.br).replace(\"{2,}\",\"*\").getRegex(),text:c(g.gfm.text).replace(\"{2,}\",\"*\").getRegex()}),r.rules=g,r.output=function(e,t,n){return new r(t,n).output(e)},r.prototype.output=function(e){for(var t,n,i,o,a,l=\"\";e;)if(a=this.rules.escape.exec(e))e=e.substring(a[0].length),l+=a[1];else if(a=this.rules.autolink.exec(e))e=e.substring(a[0].length),\"@\"===a[2]?(n=s(this.mangle(a[1])),i=\"mailto:\"+n):(n=s(a[1]),i=n),l+=this.renderer.link(i,null,n);else if(this.inLink||!(a=this.rules.url.exec(e))){if(a=this.rules.tag.exec(e))!this.inLink&&/^<a /i.test(a[0])?this.inLink=!0:this.inLink&&/^<\\/a>/i.test(a[0])&&(this.inLink=!1),e=e.substring(a[0].length),l+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(a[0]):s(a[0]):a[0];else if(a=this.rules.link.exec(e))e=e.substring(a[0].length),this.inLink=!0,i=a[2],this.options.pedantic?(t=/^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(i),t?(i=t[1],o=t[3]):o=\"\"):o=a[3]?a[3].slice(1,-1):\"\",i=i.trim().replace(/^<([\\s\\S]*)>$/,\"$1\"),l+=this.outputLink(a,{href:r.escapes(i),title:r.escapes(o)}),this.inLink=!1;else if((a=this.rules.reflink.exec(e))||(a=this.rules.nolink.exec(e))){if(e=e.substring(a[0].length),t=(a[2]||a[1]).replace(/\\s+/g,\" \"),!(t=this.links[t.toLowerCase()])||!t.href){l+=a[0].charAt(0),e=a[0].substring(1)+e;continue}this.inLink=!0,l+=this.outputLink(a,t),this.inLink=!1}else if(a=this.rules.strong.exec(e))e=e.substring(a[0].length),l+=this.renderer.strong(this.output(a[4]||a[3]||a[2]||a[1]));else if(a=this.rules.em.exec(e))e=e.substring(a[0].length),l+=this.renderer.em(this.output(a[6]||a[5]||a[4]||a[3]||a[2]||a[1]));else if(a=this.rules.code.exec(e))e=e.substring(a[0].length),l+=this.renderer.codespan(s(a[2].trim(),!0));else if(a=this.rules.br.exec(e))e=e.substring(a[0].length),l+=this.renderer.br();else if(a=this.rules.del.exec(e))e=e.substring(a[0].length),l+=this.renderer.del(this.output(a[1]));else if(a=this.rules.text.exec(e))e=e.substring(a[0].length),l+=this.renderer.text(s(this.smartypants(a[0])));else if(e)throw new Error(\"Infinite loop on byte: \"+e.charCodeAt(0))}else a[0]=this.rules._backpedal.exec(a[0])[0],e=e.substring(a[0].length),\"@\"===a[2]?(n=s(a[0]),i=\"mailto:\"+n):(n=s(a[0]),i=\"www.\"===a[1]?\"http://\"+n:n),l+=this.renderer.link(i,null,n);return l},r.escapes=function(e){return e?e.replace(r.rules._escapes,\"$1\"):e},r.prototype.outputLink=function(e,t){var n=t.href,r=t.title?s(t.title):null;return\"!\"!==e[0].charAt(0)?this.renderer.link(n,r,this.output(e[1])):this.renderer.image(n,r,s(e[1]))},r.prototype.smartypants=function(e){return this.options.smartypants?e.replace(/---/g,\"—\").replace(/--/g,\"–\").replace(/(^|[-\\u2014\\/(\\[{\"\\s])'/g,\"$1‘\").replace(/'/g,\"’\").replace(/(^|[-\\u2014\\/(\\[{\\u2018\\s])\"/g,\"$1“\").replace(/\"/g,\"”\").replace(/\\.{3}/g,\"…\"):e},r.prototype.mangle=function(e){if(!this.options.mangle)return e;for(var t,n=\"\",r=e.length,i=0;i<r;i++)t=e.charCodeAt(i),Math.random()>.5&&(t=\"x\"+t.toString(16)),n+=\"&#\"+t+\";\";return n},i.prototype.code=function(e,t,n){if(this.options.highlight){var r=this.options.highlight(e,t);null!=r&&r!==e&&(n=!0,e=r)}return t?'<pre><code class=\"'+this.options.langPrefix+s(t,!0)+'\">'+(n?e:s(e,!0))+\"</code></pre>\\n\":\"<pre><code>\"+(n?e:s(e,!0))+\"</code></pre>\"},i.prototype.blockquote=function(e){return\"<blockquote>\\n\"+e+\"</blockquote>\\n\"},i.prototype.html=function(e){return e},i.prototype.heading=function(e,t,n){return this.options.headerIds?\"<h\"+t+' id=\"'+this.options.headerPrefix+n.toLowerCase().replace(/[^\\w]+/g,\"-\")+'\">'+e+\"</h\"+t+\">\\n\":\"<h\"+t+\">\"+e+\"</h\"+t+\">\\n\"},i.prototype.hr=function(){return this.options.xhtml?\"<hr/>\\n\":\"<hr>\\n\"},i.prototype.list=function(e,t,n){var r=t?\"ol\":\"ul\";return\"<\"+r+(t&&1!==n?' start=\"'+n+'\"':\"\")+\">\\n\"+e+\"</\"+r+\">\\n\"},i.prototype.listitem=function(e){return\"<li>\"+e+\"</li>\\n\"},i.prototype.checkbox=function(e){return\"<input \"+(e?'checked=\"\" ':\"\")+'disabled=\"\" type=\"checkbox\"'+(this.options.xhtml?\" /\":\"\")+\"> \"},i.prototype.paragraph=function(e){return\"<p>\"+e+\"</p>\\n\"},i.prototype.table=function(e,t){return t&&(t=\"<tbody>\"+t+\"</tbody>\"),\"<table>\\n<thead>\\n\"+e+\"</thead>\\n\"+t+\"</table>\\n\"},i.prototype.tablerow=function(e){return\"<tr>\\n\"+e+\"</tr>\\n\"},i.prototype.tablecell=function(e,t){var n=t.header?\"th\":\"td\";return(t.align?\"<\"+n+' align=\"'+t.align+'\">':\"<\"+n+\">\")+e+\"</\"+n+\">\\n\"},i.prototype.strong=function(e){return\"<strong>\"+e+\"</strong>\"},i.prototype.em=function(e){return\"<em>\"+e+\"</em>\"},i.prototype.codespan=function(e){return\"<code>\"+e+\"</code>\"},i.prototype.br=function(){return this.options.xhtml?\"<br/>\":\"<br>\"},i.prototype.del=function(e){return\"<del>\"+e+\"</del>\"},i.prototype.link=function(e,t,n){if(this.options.sanitize){try{var r=decodeURIComponent(l(e)).replace(/[^\\w:]/g,\"\").toLowerCase()}catch(e){return n}if(0===r.indexOf(\"javascript:\")||0===r.indexOf(\"vbscript:\")||0===r.indexOf(\"data:\"))return n}this.options.baseUrl&&!b.test(e)&&(e=d(this.options.baseUrl,e));try{e=encodeURI(e).replace(/%25/g,\"%\")}catch(e){return n}var i='<a href=\"'+s(e)+'\"';return t&&(i+=' title=\"'+t+'\"'),i+=\">\"+n+\"</a>\"},i.prototype.image=function(e,t,n){this.options.baseUrl&&!b.test(e)&&(e=d(this.options.baseUrl,e));var r='<img src=\"'+e+'\" alt=\"'+n+'\"';return t&&(r+=' title=\"'+t+'\"'),r+=this.options.xhtml?\"/>\":\">\"},i.prototype.text=function(e){return e},o.prototype.strong=o.prototype.em=o.prototype.codespan=o.prototype.del=o.prototype.text=function(e){return e},o.prototype.link=o.prototype.image=function(e,t,n){return\"\"+n},o.prototype.br=function(){return\"\"},a.parse=function(e,t){return new a(t).parse(e)},a.prototype.parse=function(e){this.inline=new r(e.links,this.options),this.inlineText=new r(e.links,p({},this.options,{renderer:new o})),this.tokens=e.reverse();for(var t=\"\";this.next();)t+=this.tok();return t},a.prototype.next=function(){return this.token=this.tokens.pop()},a.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},a.prototype.parseText=function(){for(var e=this.token.text;\"text\"===this.peek().type;)e+=\"\\n\"+this.next().text;return this.inline.output(e)},a.prototype.tok=function(){switch(this.token.type){case\"space\":return\"\";case\"hr\":return this.renderer.hr();case\"heading\":return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,l(this.inlineText.output(this.token.text)));case\"code\":return this.renderer.code(this.token.text,this.token.lang,this.token.escaped);case\"table\":var e,t,n,r,i=\"\",o=\"\";for(n=\"\",e=0;e<this.token.header.length;e++)n+=this.renderer.tablecell(this.inline.output(this.token.header[e]),{header:!0,align:this.token.align[e]});for(i+=this.renderer.tablerow(n),e=0;e<this.token.cells.length;e++){for(t=this.token.cells[e],n=\"\",r=0;r<t.length;r++)n+=this.renderer.tablecell(this.inline.output(t[r]),{header:!1,align:this.token.align[r]});o+=this.renderer.tablerow(n)}return this.renderer.table(i,o);case\"blockquote_start\":for(o=\"\";\"blockquote_end\"!==this.next().type;)o+=this.tok();return this.renderer.blockquote(o);case\"list_start\":o=\"\";for(var a=this.token.ordered,s=this.token.start;\"list_end\"!==this.next().type;)o+=this.tok();return this.renderer.list(o,a,s);case\"list_item_start\":for(o=\"\",this.token.task&&(o+=this.renderer.checkbox(this.token.checked));\"list_item_end\"!==this.next().type;)o+=\"text\"===this.token.type?this.parseText():this.tok();return this.renderer.listitem(o);case\"loose_item_start\":for(o=\"\";\"list_item_end\"!==this.next().type;)o+=this.tok();return this.renderer.listitem(o);case\"html\":return this.renderer.html(this.token.text);case\"paragraph\":return this.renderer.paragraph(this.inline.output(this.token.text));case\"text\":return this.renderer.paragraph(this.parseText())}};var m={},b=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;u.exec=u,h.options=h.setOptions=function(e){return p(h.defaults,e),h},h.getDefaults=function(){return{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:\"\",highlight:null,langPrefix:\"language-\",mangle:!0,pedantic:!1,renderer:new i,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tables:!0,xhtml:!1}},h.defaults=h.getDefaults(),h.Parser=a,h.parser=a.parse,h.Renderer=i,h.TextRenderer=o,h.Lexer=n,h.lexer=n.lex,h.InlineLexer=r,h.inlineLexer=r.output,h.parse=h,e.exports=h}(this||\"undefined\"!=typeof window&&window)}).call(t,n(10))},function(e,t){e.exports={name:\"valine\",version:\"1.3.4\",description:\"A simple comment system based on Leancloud.\",main:\"/dist/Valine.min.js\",author:\"xCss <xioveliu@gmail.com> (https://github.com/xCss)\",scripts:{test:\"webpack\",build:\"webpack\",dev:\"webpack-dev-server --env.dev\",clean:\"rm -rf dist/* \"},keywords:[\"simple\",\"easy-to-use\",\"fast-and-safe\",\"comment-system\"],license:\"GPL-2.0\",repository:{type:\"git\",url:\"git+https://github.com/xcss/Valine.git\"},homepage:\"https://github.com/xcss/Valine#readme\",devDependencies:{autoprefixer:\"^7.1.1\",autosize:\"^4.0.2\",\"babel-core\":\"^6.25.0\",\"babel-loader\":\"^7.1.1\",\"babel-polyfill\":\"^6.23.0\",\"babel-preset-es2015\":\"^6.24.1\",\"babel-preset-stage-0\":\"^6.24.1\",\"blueimp-md5\":\"^2.8.0\",\"css-loader\":\"^0.28.4\",\"exports-loader\":\"^0.6.3\",\"file-loader\":\"^0.11.2\",hanabi:\"^0.4.0\",marked:\"^0.4.0\",\"node-sass\":\"^4.9.2\",\"postcss-loader\":\"^2.0.5\",\"sass-loader\":\"^6.0.3\",\"style-loader\":\"^0.18.2\",\"url-loader\":\"^0.6.2\",webpack:\"^2.6.1\",\"webpack-dev-server\":\"^2.4.5\"}}},function(e,t){var n;n=function(){return this}();try{n=n||Function(\"return this\")()||(0,eval)(\"this\")}catch(e){\"object\"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports={grinning:\"😀\",smiley:\"😃\",smile:\"😄\",grin:\"😁\",laughing:\"😆\",sweat_smile:\"😅\",joy:\"😂\",blush:\"😊\",innocent:\"😇\",wink:\"😉\",relieved:\"😌\",heart_eyes:\"😍\",kissing_heart:\"😘\",kissing:\"😗\",kissing_smiling_eyes:\"😙\",kissing_closed_eyes:\"😚\",yum:\"😋\",stuck_out_tongue_winking_eye:\"😜\",stuck_out_tongue_closed_eyes:\"😝\",stuck_out_tongue:\"😛\",sunglasses:\"😎\",smirk:\"😏\",unamused:\"😒\",disappointed:\"😞\",pensive:\"😔\",worried:\"😟\",confused:\"😕\",persevere:\"😣\",confounded:\"😖\",tired_face:\"😫\",weary:\"😩\",angry:\"😠\",rage:\"😡\",no_mouth:\"😶\",neutral_face:\"😐\",expressionless:\"😑\",hushed:\"😯\",frowning:\"😦\",anguished:\"😧\",open_mouth:\"😮\",astonished:\"😲\",dizzy_face:\"😵\",flushed:\"😳\",scream:\"😱\",fearful:\"😨\",cold_sweat:\"😰\",cry:\"😢\",disappointed_relieved:\"😥\",sob:\"😭\",sweat:\"😓\",sleepy:\"😪\",sleeping:\"😴\",mask:\"😷\",smiling_imp:\"😈\",smiley_cat:\"😺\",smile_cat:\"😸\",joy_cat:\"😹\",heart_eyes_cat:\"😻\",smirk_cat:\"😼\",kissing_cat:\"😽\",scream_cat:\"🙀\",crying_cat_face:\"😿\",pouting_cat:\"😾\",cat:\"🐱\",mouse:\"🐭\",cow:\"🐮\",monkey_face:\"🐵\",hand:\"✋\",fist:\"✊\",v:\"✌️\",point_up:\"👆\",point_down:\"👇\",point_left:\"👈\",point_right:\"👉\",facepunch:\"👊\",wave:\"👋\",clap:\"👏\",open_hands:\"👐\",\"+1\":\"👍\",\"-1\":\"👎\",ok_hand:\"👌\",pray:\"🙏\",ear:\"👂\",eyes:\"👀\",nose:\"👃\",lips:\"👄\",tongue:\"👅\",heart:\"❤️\",cupid:\"💘\",sparkling_heart:\"💖\",star:\"⭐️\",sparkles:\"✨\",zap:\"⚡️\",sunny:\"☀️\",cloud:\"☁️\",snowflake:\"❄️\",umbrella:\"☔️\",coffee:\"☕️\",airplane:\"✈️\",anchor:\"⚓️\",watch:\"⌚️\",phone:\"☎️\",hourglass:\"⌛️\",email:\"✉️\",scissors:\"✂️\",black_nib:\"✒️\",pencil2:\"✏️\",x:\"❌\",recycle:\"♻️\",white_check_mark:\"✅\",negative_squared_cross_mark:\"❎\",m:\"Ⓜ️\",i:\"ℹ️\",tm:\"™️\",copyright:\"©️\",registered:\"®️\"}},function(e,t,n){var r=n(13);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]);var i={};i.transform=void 0;n(15)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){t=e.exports=n(14)(!1),t.push([e.i,'.v *{-webkit-box-sizing:border-box;box-sizing:border-box;line-height:2;color:#555;-webkit-transition:all .3s ease;transition:all .3s ease}.v hr{margin:.825rem 0;border-color:#f6f6f6;border-style:dashed}.v.hide-avatar .vimg{display:none}.v a{position:relative;cursor:pointer;color:#1abc9c;display:inline-block}.v a:before{content:\"\";position:absolute;width:0;right:0;bottom:0;height:1px;background:#1abc9c;-webkit-transition:width .3s ease;transition:width .3s ease}.v a:hover{color:#d7191a}.v a:hover:before{width:100%;left:0;right:auto}.v code,.v pre{background-color:#f6f6f6;color:#555;padding:.2em .4em;border-radius:3px;font-size:85%;margin:0;font-family:Source Code Pro,courier new,Input Mono,PT Mono,SFMono-Regular,Consolas,Monaco,Menlo,PingFang SC,Liberation Mono,Microsoft YaHei,Courier，monospace}.v pre{padding:10px;overflow:auto;line-height:1.45}.v pre code{padding:0;background:transparent;white-space:pre-wrap;word-break:keep-all}.v blockquote{color:#666;margin:.5rem 0;padding:0 0 0 1rem;border-left:8px solid hsla(0,0%,93%,.5)}.v .vinput{border:none;resize:none;outline:none;padding:10px 5px;max-width:100%;font-size:.775rem}.v input[type=checkbox],.v input[type=radio]{display:inline-block;vertical-align:middle;margin-top:-2px}.v .vwrap{border:1px solid #f0f0f0;border-radius:4px;margin-bottom:10px;overflow:hidden;position:relative;padding:10px}.v .vwrap input{background:transparent}.v .vwrap .vedit{position:relative;padding-top:10px}.v .vwrap .vedit .vctrl{text-align:right;font-size:12px}.v .vwrap .vedit .vctrl span{padding:10px;display:inline-block;vertical-align:middle;cursor:pointer}.v .vwrap .vedit .vemojis{display:none;font-size:18px;text-align:justify;max-height:145px;overflow:auto;margin-bottom:10px;-webkit-box-shadow:0 0 1px #f0f0f0;box-shadow:0 0 1px #f0f0f0}.v .vwrap .vedit .vemojis i{font-style:normal;padding:7px 0;width:38px;cursor:pointer;text-align:center;display:inline-block;vertical-align:middle}.v .vwrap .vedit .vpreview{padding:7px;-webkit-box-shadow:0 0 1px #f0f0f0;box-shadow:0 0 1px #f0f0f0}.v .vwrap .vedit .vpreview frame,.v .vwrap .vedit .vpreview iframe,.v .vwrap .vedit .vpreview img{max-width:100%;border:none}.v .vwrap .vheader .vinput{width:33.33%;border-bottom:1px dashed #dedede}.v .vwrap .vheader.item2 .vinput{width:50%}.v .vwrap .vheader.item1 .vinput{width:100%}.v .vwrap .vheader .vinput:focus{border-bottom-color:#eb5055}@media screen and (max-width:520px){.v .vwrap .vheader.item2 .vinput,.v .vwrap .vheader .vinput{width:100%}}.v .vwrap .vcontrol{font-size:0;padding-top:15px}.v .vwrap .vcontrol .col{display:inline-block;font-size:.725rem;vertical-align:middle;color:#ccc}.v .vwrap .vcontrol .col.text-right{text-align:right}.v .vwrap .vcontrol .col svg{margin-right:2px;overflow:hidden;fill:currentColor;vertical-align:middle}.v .vwrap .vcontrol .col.col-20{width:20%}.v .vwrap .vcontrol .col.col-40{width:40%}.v .vwrap .vcontrol .col.col-60{width:60%}.v .vwrap .vcontrol .col.col-80{width:80%}.v .vwrap .vcontrol .col.split{width:50%}.v .vwrap .vmark{position:absolute;background:rgba(0,0,0,.65);width:100%;height:100%;left:0;top:0}.v .vwrap .vmark .valert{padding-top:3rem}.v .vwrap .vmark .valert .vtext{color:#fff;padding:1rem 0}.v .vwrap .vmark .valert .vcode{width:4.6875rem;border-radius:.3125rem;padding:.5rem;background:#dedede}.v .vwrap .vmark .valert .vcode:focus{border-color:#3090e4;background-color:#fff}@media screen and (max-width:720px){.v .vwrap .vmark .valert{padding-top:5.5rem}.v .vwrap .vmark .valert .vtext{color:#fff;padding:1rem 0}}.v .power{color:#999;padding:.5rem 0}.v .power,.v .power a{font-size:.75rem}.v .vinfo{font-size:0;padding:5px}.v .vinfo .col{font-size:.875rem;display:inline-block;width:50%;vertical-align:middle}.v .vinfo .vcount .vnum{font-weight:600;font-size:1.25rem}.v a{text-decoration:none;color:#555}.v a:hover{color:#222}.v ol,.v ul{padding:0;margin-left:1.25rem}.v .txt-center{text-align:center}.v .txt-right{text-align:right}.v .pd5{padding:5px}.v .pd10{padding:10px}.v .veditor{width:100%;min-height:8.75rem;font-size:.875rem;background:transparent;resize:vertical;-webkit-transition:all .25s ease;transition:all .25s ease}.v .vbtn{-webkit-transition-duration:.4s;transition-duration:.4s;text-align:center;color:#313131;border:1px solid #ededed;border-radius:.3rem;display:inline-block;background:#ededed;margin-bottom:0;font-weight:400;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;white-space:nowrap;padding:.5rem 1.25rem;font-size:.875rem;line-height:1.42857143;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:none}.v .vbtn+.vbtn{margin-left:1.25rem}.v .vbtn:active,.v .vbtn:hover{color:#3090e4;border-color:#3090e4;background-color:#fff}.v .vempty{padding:1.25rem;text-align:center;color:#999}.v .vlist{width:100%}.v .vlist .vcard{padding-top:1.5rem;position:relative;display:block}.v .vlist .vcard:after{content:\"\";clear:both;display:block}.v .vlist .vcard .vimg{width:3.125rem;height:3.125rem;float:left;border-radius:50%;margin-right:.7525rem;border:1px solid #f5f5f5;padding:.125rem}@media screen and (max-width:720px){.v .vlist .vcard .vimg{width:2.5rem;height:2.5rem}}.v .vlist .vcard .vhead{line-height:1.5;margin-top:0}.v .vlist .vcard .vhead .vnick{position:relative;font-size:.875rem;font-weight:500;margin-right:.875rem;cursor:pointer;color:#1abc9c;text-decoration:none;display:inline-block}.v .vlist .vcard .vhead .vnick:before{content:\"\";position:absolute;width:0;right:0;bottom:0;height:1px;background:#1abc9c;-webkit-transition:width .3s ease;transition:width .3s ease}.v .vlist .vcard .vhead .vnick:hover{color:#d7191a}.v .vlist .vcard .vhead .vnick:hover:before{width:100%;left:0;right:auto}.v .vlist .vcard .vhead .vsys{display:inline-block;padding:.2rem .5rem;background:#ededed;color:#b3b1b1;font-size:.75rem;border-radius:.2rem;margin-right:.3rem}@media screen and (max-width:520px){.v .vlist .vcard .vhead .vsys{display:none}}.v .vlist .vcard .vh{overflow:hidden;padding-bottom:.5rem;border-bottom:1px dashed #f5f5f5}.v .vlist .vcard .vh .vtime{color:#b3b3b3;font-size:.75rem;margin-right:.875rem}.v .vlist .vcard .vh .vmeta{line-height:1;position:relative}.v .vlist .vcard .vh .vmeta .vat{font-size:.8125rem;color:#ef2f11;cursor:pointer;float:right}.v .vlist .vcard .vcontent{word-wrap:break-word;word-break:break-all;text-align:justify;color:#4a4a4a;font-size:.875rem;line-height:2;position:relative;margin-bottom:.75rem;padding-top:.625rem}.v .vlist .vcard .vcontent frame,.v .vlist .vcard .vcontent iframe,.v .vlist .vcard .vcontent img{max-width:100%;border:none}.v .vlist .vcard .vcontent.expand{cursor:pointer;max-height:11.25rem;overflow:hidden}.v .vlist .vcard .vcontent.expand:before{display:block;content:\"\";position:absolute;width:100%;left:0;top:0;bottom:3.15rem;pointer-events:none;background:-webkit-gradient(linear,left top,left bottom,from(hsla(0,0%,100%,0)),to(hsla(0,0%,100%,.9)));background:linear-gradient(180deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.9))}.v .vlist .vcard .vcontent.expand:after{display:block;content:\"Click on expand\";text-align:center;color:#828586;position:absolute;width:100%;height:3.15rem;line-height:3.15rem;left:0;bottom:0;pointer-events:none;background:hsla(0,0%,100%,.9)}.v .vlist .vcard .vquote{color:#666;margin-top:1rem;padding-left:1rem;border-left:1px dashed hsla(0,0%,93%,.5)}.v .vlist .vcard .vquote .vimg{width:2.225rem;height:2.225rem}.v .vpage .vmore{margin:1rem 0}.v .clear{content:\"\";display:block;clear:both}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@-webkit-keyframes pulse{50%{background:#dcdcdc}}@keyframes pulse{50%{background:#dcdcdc}}.v .vloading{position:relative;padding:20px;display:block;height:80px}.v .vloading:before{-webkit-box-sizing:border-box;box-sizing:border-box;content:\"\";position:absolute;display:inline-block;top:20px;left:50%;margin-left:-20px;width:40px;height:40px;border:6px double #a0a0a0;border-top-color:transparent;border-bottom-color:transparent;border-radius:50%;-webkit-animation:spin 1s infinite linear;animation:spin 1s infinite linear}',\"\"])},function(e,t){function n(e,t){var n=e[1]||\"\",i=e[3];if(!i)return n;if(t&&\"function\"==typeof btoa){var o=r(i);return[n].concat(i.sources.map(function(e){return\"/*# sourceURL=\"+i.sourceRoot+e+\" */\"})).concat([o]).join(\"\\n\")}return[n].join(\"\\n\")}function r(e){return\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+\" */\"}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var r=n(t,e);return t[2]?\"@media \"+t[2]+\"{\"+r+\"}\":r}).join(\"\")},t.i=function(e,n){\"string\"==typeof e&&(e=[[null,e,\"\"]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];\"number\"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var a=e[i];\"number\"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]=\"(\"+a[2]+\") and (\"+n+\")\"),t.push(a))}},t}},function(e,t,n){function r(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=h[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(d(r.parts[o],t))}else{for(var a=[],o=0;o<r.parts.length;o++)a.push(d(r.parts[o],t));h[r.id]={id:r.id,refs:1,parts:a}}}}function i(e,t){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=t.base?o[0]+t.base:o[0],s=o[1],l=o[2],c=o[3],d={css:s,media:l,sourceMap:c};r[a]?r[a].parts.push(d):n.push(r[a]={id:a,parts:[d]})}return n}function o(e,t){var n=g(e.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var r=x[x.length-1];if(\"top\"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),x.push(t);else{if(\"bottom\"!==e.insertAt)throw new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");n.appendChild(t)}}function a(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=x.indexOf(e);t>=0&&x.splice(t,1)}function s(e){var t=document.createElement(\"style\");return e.attrs.type=\"text/css\",c(t,e.attrs),o(e,t),t}function l(e){var t=document.createElement(\"link\");return e.attrs.type=\"text/css\",e.attrs.rel=\"stylesheet\",c(t,e.attrs),o(e,t),t}function c(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function d(e,t){var n,r,i,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var c=b++;n=m||(m=s(t)),r=u.bind(null,n,c,!1),i=u.bind(null,n,c,!0)}else e.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=l(t),r=f.bind(null,n,t),i=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(t),r=p.bind(null,n),i=function(){a(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}function u(e,t,n,r){var i=n?\"\":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function p(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute(\"media\",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function f(e,t,n){var r=n.css,i=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||o)&&(r=y(r)),i&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+\" */\");var a=new Blob([r],{type:\"text/css\"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}var h={},v=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),g=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e.call(this,n)),t[n]}}(function(e){return document.querySelector(e)}),m=null,b=0,x=[],y=n(16);e.exports=function(e,t){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");t=t||{},t.attrs=\"object\"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=v()),t.insertInto||(t.insertInto=\"head\"),t.insertAt||(t.insertAt=\"bottom\");var n=i(e,t);return r(n,t),function(e){for(var o=[],a=0;a<n.length;a++){var s=n[a],l=h[s.id];l.refs--,o.push(l)}if(e){r(i(e,t),t)}for(var a=0;a<o.length;a++){var l=o[a];if(0===l.refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete h[l.id]}}}};var w=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join(\"\\n\")}}()},function(e,t){e.exports=function(e){var t=\"undefined\"!=typeof window&&window.location;if(!t)throw new Error(\"fixUrls requires window.location\");if(!e||\"string\"!=typeof e)return e;var n=t.protocol+\"//\"+t.host,r=n+t.pathname.replace(/\\/[^\\/]*$/,\"/\");return e.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,function(e,t){var i=t.trim().replace(/^\"(.*)\"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(i))return e;var o;return o=0===i.indexOf(\"//\")?i:0===i.indexOf(\"/\")?n+i:r+i.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(o)+\")\"})}},function(e,t,n){n(12),e.exports=n(1)}])});","source":"js/src/Valine-1.3.4.min.js","raw":"/*!\n * Valine v1.3.4\n * (c) 2017-2018 xCss\n * Released under the GPL-2.0 License.\n */\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.Valine=t():e.Valine=t()}(this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=17)}([function(e,t,n){var r,i,o;/*!\n\tautosize 4.0.2\n\tlicense: MIT\n\thttp://www.jacklmoore.com/autosize\n*/\n!function(n,a){i=[e,t],r=a,void 0!==(o=\"function\"==typeof r?r.apply(t,i):r)&&(e.exports=o)}(0,function(e,t){\"use strict\";function n(e){function t(t){var n=e.style.width;e.style.width=\"0px\",e.offsetWidth,e.style.width=n,e.style.overflowY=t}function n(e){for(var t=[];e&&e.parentNode&&e.parentNode instanceof Element;)e.parentNode.scrollTop&&t.push({node:e.parentNode,scrollTop:e.parentNode.scrollTop}),e=e.parentNode;return t}function r(){if(0!==e.scrollHeight){var t=n(e),r=document.documentElement&&document.documentElement.scrollTop;e.style.height=\"\",e.style.height=e.scrollHeight+s+\"px\",l=e.clientWidth,t.forEach(function(e){e.node.scrollTop=e.scrollTop}),r&&(document.documentElement.scrollTop=r)}}function i(){r();var n=Math.round(parseFloat(e.style.height)),i=window.getComputedStyle(e,null),o=\"content-box\"===i.boxSizing?Math.round(parseFloat(i.height)):e.offsetHeight;if(o<n?\"hidden\"===i.overflowY&&(t(\"scroll\"),r(),o=\"content-box\"===i.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight):\"hidden\"!==i.overflowY&&(t(\"hidden\"),r(),o=\"content-box\"===i.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight),c!==o){c=o;var s=a(\"autosize:resized\");try{e.dispatchEvent(s)}catch(e){}}}if(e&&e.nodeName&&\"TEXTAREA\"===e.nodeName&&!o.has(e)){var s=null,l=null,c=null,d=function(){e.clientWidth!==l&&i()},u=function(t){window.removeEventListener(\"resize\",d,!1),e.removeEventListener(\"input\",i,!1),e.removeEventListener(\"keyup\",i,!1),e.removeEventListener(\"autosize:destroy\",u,!1),e.removeEventListener(\"autosize:update\",i,!1),Object.keys(t).forEach(function(n){e.style[n]=t[n]}),o.delete(e)}.bind(e,{height:e.style.height,resize:e.style.resize,overflowY:e.style.overflowY,overflowX:e.style.overflowX,wordWrap:e.style.wordWrap});e.addEventListener(\"autosize:destroy\",u,!1),\"onpropertychange\"in e&&\"oninput\"in e&&e.addEventListener(\"keyup\",i,!1),window.addEventListener(\"resize\",d,!1),e.addEventListener(\"input\",i,!1),e.addEventListener(\"autosize:update\",i,!1),e.style.overflowX=\"hidden\",e.style.wordWrap=\"break-word\",o.set(e,{destroy:u,update:i}),function(){var t=window.getComputedStyle(e,null);\"vertical\"===t.resize?e.style.resize=\"none\":\"both\"===t.resize&&(e.style.resize=\"horizontal\"),s=\"content-box\"===t.boxSizing?-(parseFloat(t.paddingTop)+parseFloat(t.paddingBottom)):parseFloat(t.borderTopWidth)+parseFloat(t.borderBottomWidth),isNaN(s)&&(s=0),i()}()}}function r(e){var t=o.get(e);t&&t.destroy()}function i(e){var t=o.get(e);t&&t.update()}var o=\"function\"==typeof Map?new Map:function(){var e=[],t=[];return{has:function(t){return e.indexOf(t)>-1},get:function(n){return t[e.indexOf(n)]},set:function(n,r){-1===e.indexOf(n)&&(e.push(n),t.push(r))},delete:function(n){var r=e.indexOf(n);r>-1&&(e.splice(r,1),t.splice(r,1))}}}(),a=function(e){return new Event(e,{bubbles:!0})};try{new Event(\"test\")}catch(e){a=function(e){var t=document.createEvent(\"Event\");return t.initEvent(e,!0,!1),t}}var s=null;\"undefined\"==typeof window||\"function\"!=typeof window.getComputedStyle?(s=function(e){return e},s.destroy=function(e){return e},s.update=function(e){return e}):(s=function(e,t){return e&&Array.prototype.forEach.call(e.length?e:[e],function(e){return n(e)}),e},s.destroy=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],r),e},s.update=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],i),e}),t.default=s,e.exports=t.default})},function(e,t,n){\"use strict\";function r(e){var t=this;return!!e&&t.init(e),t}function i(e){return new r(e)}var o=n(9).version,a=n(6),s=n(8),l=n(0),c=n(5),d=n(3),u=n(4),p=n(2),f=n(7),h={comment:\"\",nick:\"Anonymous\",mail:\"\",link:\"\",ua:navigator.userAgent,url:\"\"},v={\"zh-cn\":{head:{nick:\"昵称\",mail:\"邮箱\",link:\"网址(http://)\"},tips:{comments:\"评论\",sofa:\"快来做第一个评论的人吧~\",busy:\"还在提交中，请稍候...\",again:\"这么简单也能错，也是没谁了.\"},ctrl:{reply:\"回复\",ok:\"好的\",sure:\"确认\",cancel:\"取消\",confirm:\"确认\",continue:\"继续\",more:\"查看更多...\",try:\"再试试?\"},error:{99:\"初始化失败，请检查init中的`el`元素.\",100:\"初始化失败，请检查你的AppId和AppKey.\",401:\"未经授权的操作，请检查你的AppId和AppKey.\",403:\"访问被api域名白名单拒绝，请检查你的安全域名设置.\"},timeago:{seconds:\"秒前\",minutes:\"分钟前\",hours:\"小时前\",days:\"天前\",now:\"刚刚\"}},en:{head:{nick:\"NickName\",mail:\"E-Mail\",link:\"Website(http://)\"},tips:{comments:\"Comments\",sofa:\"No comments yet.\",busy:\"Submit is busy, please wait...\",again:\"Sorry, this is a wrong calculation.\"},ctrl:{reply:\"Reply\",ok:\"Ok\",sure:\"Sure\",cancel:\"Cancel\",confirm:\"Confirm\",continue:\"Continue\",more:\"Load More...\",try:\"Once More?\"},error:{99:\"Initialization failed, Please check the `el` element in the init method.\",100:\"Initialization failed, Please check your appId and appKey.\",401:\"Unauthorized operation, Please check your appId and appKey.\",403:\"Access denied by api domain white list, Please check your security domain.\"},timeago:{seconds:\"seconds ago\",minutes:\"minutes ago\",hours:\"hours ago\",days:\"days ago\",now:\"just now\"}}},g={cdn:\"https://gravatar.loli.net/avatar/\",ds:[\"mp\",\"identicon\",\"monsterid\",\"wavatar\",\"robohash\",\"retro\",\"\"],params:\"\",hide:!1},m=[\"nick\",\"mail\",\"link\"],b=Storage&&localStorage&&localStorage instanceof Storage&&localStorage,x=location.pathname.replace(/index\\.html?$/,\"\");r.prototype.init=function(e){if(\"undefined\"==typeof document)return void console;var t=this;try{var n=e.lang||\"\",r=e.langMode||\"\",i=g.ds,a=e.avatar,l=e.avatarForce,c=e.avatar_cdn||\"\";n&&r&&t.installLocale(n,r),t.locale=t.locale||v[e.lang||\"zh-cn\"],t.notify=e.notify||!1,t.verify=e.verify||!1;var d=l?\"&q=\"+Math.random().toString(32).substring(2):\"\";g.params=\"?d=\"+(i.indexOf(a)>-1?a:\"mp\")+\"&v=\"+o+d,g.hide=\"hide\"===a,g.cdn=!!c&&c||g.cdn,x=e.path||x;var p=Number(e.pageSize||10);if(e.pageSize=isNaN(p)?10:p<1?10:p,s.setOptions({renderer:new s.Renderer,highlight:!1===e.highlight?null:f,gfm:!0,tables:!0,breaks:!0,pedantic:!1,sanitize:!1,smartLists:!0,smartypants:!0}),!AV)return void setTimeout(function(){t.init(e)},20);var h=e.app_id||e.appId,b=e.app_key||e.appKey,y=(e.region||\"cn\").toLowerCase(),k=[\"cn\",\"us\"];if(y=k.indexOf(y)>-1?y:k[0],!h||!b)throw 99;AV.applicationId&&delete AV._config.applicationId||(AV.applicationId=null),AV.applicationKey&&delete AV._config.applicationKey||(AV.applicationKey=null),AV.init({appId:h,appKey:b,region:y});for(var _=u.findAll(document,\".valine-comment-count\"),A=0,O=_.length;A<O;A++)!function(e,n){var r=_[e];if(r){var i=u.attr(r,\"data-xid\");i&&t.Q(i).count().then(function(e){r.innerText=e}).catch(function(e){r.innerText=0})}}(A);e.visitor&&w.add(AV.Object.extend(\"Counter\"));var S=e.el||null,$=u.findAll(document,S);if(!(S=S instanceof HTMLElement?S:$[$.length-1]||null))return;t.el=S,t.el.classList.add(\"v\"),g.hide&&t.el.classList.add(\"hide-avatar\"),e.meta=(e.guest_info||e.meta||m).filter(function(e){return m.indexOf(e)>-1});var E=(0==e.meta.length?m:e.meta).map(function(e){var n=\"mail\"==e?\"email\":\"text\";return m.indexOf(e)>-1?'<input name=\"'+e+'\" placeholder=\"'+t.locale.head[e]+'\" class=\"v'+e+' vinput\" type=\"'+n+'\">':\"\"});t.placeholder=e.placeholder||\"Just Go Go\",t.el.innerHTML='<div class=\"vwrap\"><div class=\"vheader item'+E.length+'\">'+E.join(\"\")+'</div><div class=\"vedit\"><textarea id=\"veditor\" class=\"veditor vinput\" placeholder=\"'+t.placeholder+'\"></textarea><div class=\"vctrl\"><span class=\"vemoji-btn\">Emoji</span> | <span class=\"vpreview-btn\">Preview</span></div><div class=\"vemojis\" style=\"display:none;\"></div><div class=\"vinput vpreview\" style=\"display:none;\"></div></div><div class=\"vcontrol\"><div class=\"col col-20\" title=\"Markdown is supported\"><a href=\"https://segmentfault.com/markdown\" target=\"_blank\"><svg class=\"markdown\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M14.85 3H1.15C.52 3 0 3.52 0 4.15v7.69C0 12.48.52 13 1.15 13h13.69c.64 0 1.15-.52 1.15-1.15v-7.7C16 3.52 15.48 3 14.85 3zM9 11H7V8L5.5 9.92 4 8v3H2V5h2l1.5 2L7 5h2v6zm2.99.5L9.5 8H11V5h2v3h1.5l-2.51 3.5z\"></path></svg></a></div><div class=\"col col-80 text-right\"><button type=\"button\" title=\"Cmd|Ctrl+Enter\" class=\"vsubmit vbtn\">'+t.locale.ctrl.reply+'</button></div></div><div style=\"display:none;\" class=\"vmark\"></div></div><div class=\"vinfo\" style=\"display:none;\"><div class=\"vcount col\"></div></div><div class=\"vlist\"></div><div class=\"vempty\" style=\"display:none;\"></div><div class=\"vpage txt-center\"></div><div class=\"info\"><div class=\"power txt-right\">Powered By <a href=\"https://valine.js.org\" target=\"_blank\">Valine</a><br>v'+o+\"</div></div>\";var C=u.find(t.el,\".vempty\");t.nodata={show:function(e){return C.innerHTML=e||t.locale.tips.sofa,u.attr(C,\"style\",\"display:block;\"),t},hide:function(){return u.attr(C,\"style\",\"display:none;\"),t}};var M=u.create(\"div\",\"class\",\"vloading\"),L=u.find(t.el,\".vlist\");t.loading={show:function(e){var n=u.findAll(L,\".vcard\");return e?L.insertBefore(M,n[0]):L.appendChild(M),t.nodata.hide(),t},hide:function(){var e=u.find(L,\".vloading\");return e&&u.remove(L,e),0===u.findAll(L,\".vcard\").length&&t.nodata.show(),t}};var T=u.find(t.el,\".vmark\");t.alert={show:function(e){T.innerHTML='<div class=\"valert txt-center\"><div class=\"vtext\">'+(e&&e.text||1)+'</div><div class=\"vbtns\"></div></div>';var n=u.find(T,\".vbtns\"),r='<button class=\"vcancel vbtn\">'+(e&&e.ctxt||t.locale.ctrl.cancel)+\"</button>\",i='<button class=\"vsure vbtn\">'+(e&&e.otxt||t.locale.ctrl.sure)+\"</button>\";if(n.innerHTML=\"\"+r+(e&&e.type&&i),u.on(\"click\",u.find(T,\".vcancel\"),function(e){t.alert.hide()}),u.attr(T,\"style\",\"display:block;\"),e&&e.type){var o=u.find(T,\".vsure\");u.on(\"click\",o,function(n){t.alert.hide(),e.cb&&e.cb()})}return t},hide:function(){return u.attr(T,\"style\",\"display:none;\"),t}},t.bind(e)}catch(e){t.ErrorHandler(e)}return t};var y=function(e,t){var n=new e,r=new AV.ACL;r.setPublicReadAccess(!0),r.setPublicWriteAccess(!0),n.setACL(r),n.set(\"url\",t.url),n.set(\"xid\",t.xid),n.set(\"title\",t.title),n.set(\"time\",1),n.save().then(function(e){u.find(t.el,\".leancloud-visitors-count\").innerText=1}).catch(function(e){})},w={add:function(e){var t=u.findAll(document,\".leancloud_visitors,.leancloud-visitors\");if(t.length){var n=t[0],r=u.attr(n,\"id\"),i=u.attr(n,\"data-flag-title\"),o=encodeURI(r),a={el:n,url:r,xid:o,title:i};if(decodeURI(r)===decodeURI(x)){var s=new AV.Query(e);s.equalTo(\"url\",r),s.find().then(function(t){if(t.length>0){var r=t[0];r.increment(\"time\"),r.save().then(function(e){u.find(n,\".leancloud-visitors-count\").innerText=e.get(\"time\")}).catch(function(e){})}else y(e,a)}).catch(function(t){101==t.code&&y(e,a)})}else w.show(e,t)}},show:function(e,t){u.each(t,function(e,t){var n=u.find(t,\".leancloud-visitors-count\");n&&(n.innerText=0)});var n=[];for(var r in t)t.hasOwnProperty(r)&&n.push(u.attr(t[r],\"id\"));if(n.length){var i=new AV.Query(e);i.containedIn(\"url\",n),i.find().then(function(e){e.length>0&&u.each(e,function(e,t){var n=t.get(\"url\"),r=t.get(\"time\"),i=u.find(document,'.leancloud_visitors[id=\"'+n+'\"]')||u.find(document,'.leancloud-visitors[id=\"'+n+'\"]'),o=u.find(i,\".leancloud-visitors-count\");o&&(o.innerText=r)})}).catch(function(e){})}}};r.prototype.Q=function(e){if(1==arguments.length){var t=new AV.Query(\"Comment\");t.doesNotExist(\"rid\");var n=new AV.Query(\"Comment\");n.equalTo(\"rid\",\"\");var r=AV.Query.or(t,n);return r.equalTo(\"url\",decodeURI(e)),r.addDescending(\"createdAt\"),r.addDescending(\"insertedAt\"),r}var i=JSON.stringify(arguments[1]).replace(/(\\[|\\])/g,\"\"),o=\"select * from Comment where rid in (\"+i+\") order by -createdAt,-createdAt\";return AV.Query.doCloudQuery(o)},r.prototype.ErrorHandler=function(e){var t=this;if(t.el&&t.loading.hide().nodata.hide(),\"[object Error]\"==={}.toString.call(e)){var n=e.code||\"\",r=t.locale.error[n],i=r||e.message||e.error||\"\";101==n?t.nodata.show():t.el&&t.nodata.show('<pre style=\"text-align:left;\">Code '+n+\": \"+i+\"</pre>\")||console}else t.el&&t.nodata.show('<pre style=\"text-align:left;\">'+JSON.stringify(e)+\"</pre>\")||console},r.prototype.installLocale=function(e,t){var n=this;return t=t||{},e&&(v[e]=t,n.locale=v[e]||v[\"zh-cn\"]),n},r.prototype.setPath=function(e){return x=e||x,this},r.prototype.bind=function(e){var t=this,n=u.find(t.el,\".vemojis\"),r=u.find(t.el,\".vpreview\"),i=u.find(t.el,\".vemoji-btn\"),o=u.find(t.el,\".vpreview-btn\"),f=p.data;for(var v in f)f.hasOwnProperty(v)&&function(e,r){var i=u.create(\"i\",{name:e,title:e});i.innerHTML=r,n.appendChild(i),u.on(\"click\",i,function(e){var n=u.find(t.el,\".veditor\");E(n,r),y(n)})}(v,f[v]);t.emoji={show:function(){return t.preview.hide(),u.attr(i,\"v\",1),u.removeAttr(o,\"v\"),u.attr(n,\"style\",\"display:block\"),t.emoji},hide:function(){return u.removeAttr(i,\"v\"),u.attr(n,\"style\",\"display:hide\"),t.emoji}},t.preview={show:function(){return t.emoji.hide(),u.attr(o,\"v\",1),u.removeAttr(i,\"v\"),r.innerHTML=h.comment,u.attr(r,\"style\",\"display:block\"),T(),t.preview},hide:function(){return u.removeAttr(o,\"v\"),u.attr(r,\"style\",\"display:none\"),t.preview},empty:function(){return r.innerHtml=\"\",t.preview}};var m=function(e){var t=u.create(\"div\");t.insertAdjacentHTML(\"afterbegin\",e);var n=u.findAll(t,\"*\"),r=[\"INPUT\",\"STYLE\",\"SCRIPT\",\"IFRAME\",\"FRAME\",\"AUDIO\",\"VIDEO\",\"EMBED\",\"META\",\"TITLE\",\"LINK\"],i=function(e,t){var n=u.attr(e,t);n&&u.attr(e,t,n.replace(/(javascript|eval)/gi,\"\"))};return u.each(n,function(e,n){1===n.nodeType&&(r.indexOf(n.nodeName)>-1&&(\"INPUT\"===n.nodeName&&\"checkbox\"===u.attr(n,\"type\")?u.attr(n,\"disabled\",\"disabled\"):u.remove(t,n)),\"A\"===n.nodeName&&i(n,\"href\"),u.clearAttr(n))}),t.innerHTML},y=function(e){var t=e.value||\"\";t=p.parse(t),e.value=t;var n=m(s(t));h.comment=n,r.innerHTML=n,t?l(e):l.destroy(e)};u.on(\"click\",i,function(e){u.attr(i,\"v\")?t.emoji.hide():t.emoji.show()}),u.on(\"click\",o,function(e){u.attr(o,\"v\")?t.preview.hide():t.preview.show()});for(var w=e.meta,_={},A={veditor:\"comment\"},O=0,S=w.length;O<S;O++)A[\"v\"+w[O]]=w[O];for(var $ in A)A.hasOwnProperty($)&&function(){var e=A[$],n=u.find(t.el,\".\"+$);_[e]=n,n&&u.on(\"input change blur\",n,function(t){\"comment\"===e?y(n):h[e]=u.escape(n.value.replace(/(^\\s*)|(\\s*$)/g,\"\"))})}();var E=function(e,t){if(document.selection){e.focus();document.selection.createRange().text=t,e.focus()}else if(e.selectionStart||\"0\"==e.selectionStart){var n=e.selectionStart,r=e.selectionEnd,i=e.scrollTop;e.value=e.value.substring(0,n)+t+e.value.substring(r,e.value.length),e.focus(),e.selectionStart=n+t.length,e.selectionEnd=n+t.length,e.scrollTop=i}else e.focus(),e.value+=t},C=function(e){var n=u.find(t.el,\".vh[rootid='\"+e+\"']\"),r=u.find(n,\".vquote\");return r||(r=u.create(\"div\",\"class\",\"vquote\"),n.appendChild(r)),r},M=function n(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,i=e.pageSize,o=Number(u.find(t.el,\".vnum\").innerText);t.loading.show();var a=t.Q(x);a.limit(i),a.skip((r-1)*i),a.find().then(function(e){for(var a=e.length,s=[],l=0;l<a;l++){var c=e[l];s.push(c.id),L(c,u.find(t.el,\".vlist\"),!0)}t.Q(x,s).then(function(e){for(var t=e&&e.results||[],n=0;n<t.length;n++){var r=t[n];L(r,C(r.get(\"rid\")))}});var d=u.find(t.el,\".vpage\");d.innerHTML=i*r<o?'<button type=\"button\" class=\"vmore vbtn\">'+t.locale.ctrl.more+\"</button>\":\"\";var p=u.find(d,\".vmore\");p&&u.on(\"click\",p,function(e){d.innerHTML=\"\",n(++r)}),t.loading.hide()}).catch(function(e){t.loading.hide().ErrorHandler(e)})};t.Q(x).count().then(function(e){e>0?(u.attr(u.find(t.el,\".vinfo\"),\"style\",\"display:block;\"),u.find(t.el,\".vcount\").innerHTML='<span class=\"vnum\">'+e+\"</span> \"+t.locale.tips.comments,M()):t.loading.hide()}).catch(function(e){t.ErrorHandler(e)});var L=function(e,n,r){var i=u.create(\"div\",{class:\"vcard\",id:e.id}),o=g.hide?\"\":'<img class=\"vimg\" src=\"'+(g.cdn+a(e.get(\"mail\"))+g.params)+'\">',s=e.get(\"ua\")||\"\",l=\"\";if(s){s=d(s);l='<span class=\"vsys\">'+s.browser+\" \"+s.version+\"</span>\"+\" \"+('<span class=\"vsys\">'+s.os+\" \"+s.osVersion+\"</span>\")}var p=\"\",f=e.get(\"link\")||\"\";p=f?'<a class=\"vnick\" rel=\"nofollow\" href=\"'+f+'\" target=\"_blank\" >'+e.get(\"nick\")+\"</a>\":'<span class=\"vnick\">'+e.get(\"nick\")+\"</span>\",i.innerHTML=o+'\\n            <div class=\"vh\" rootid='+(e.get(\"rid\")||e.id)+'>\\n                <div class=\"vhead\">'+p+\" \"+l+'</div>\\n                <div class=\"vmeta\">\\n                    <span class=\"vtime\">'+c(e.get(\"insertedAt\")||e.createdAt,t.locale)+'</span>\\n                    <span rid=\"'+(e.get(\"rid\")||e.id)+'\" cid=\"'+e.id+'\" at=\"@'+u.escape(e.get(\"nick\"))+'\" mail=\"'+e.get(\"mail\")+'\" class=\"vat\">'+t.locale.ctrl.reply+'</span>\\n                </div>\\n                <div class=\"vcontent\">\\n                    '+m(e.get(\"comment\"))+\"\\n                </div>\\n            </div>\";for(var h=u.find(i,\".vat\"),v=u.findAll(i,\"a\"),b=0,x=v.length;b<x;b++){var y=v[b];y&&-1==(u.attr(y,\"class\")||\"\").indexOf(\"at\")&&u.attr(y,{target:\"_blank\",rel:\"nofollow\"})}var w=u.findAll(n,\".vcard\");r?n.appendChild(i):n.insertBefore(i,w[0]);var k=u.find(i,\".vcontent\");k&&z(k),h&&B(h),T()},T=function(){setTimeout(function(){var e=e||\"\";e&&e.Hub.Queue([\"Typeset\",e.Hub])},20)},z=function(e){setTimeout(function(){e.offsetHeight>180&&(e.classList.add(\"expand\"),u.on(\"click\",e,function(t){u.attr(e,\"class\",\"vcontent\")}))})},R={},B=function(e){u.on(\"click\",e,function(t){var n=u.attr(e,\"at\"),r=u.attr(e,\"rid\"),i=u.attr(e,\"cid\"),o=u.attr(e,\"mail\");R={at:u.escape(n)+\" \",rid:r,pid:i,rmail:o},u.attr(_.comment,\"placeholder\",n),_.comment.focus()})};!function(){var e=b&&b.ValineCache;if(e){e=JSON.parse(e);var n=w;for(var r in n){var i=n[r];u.find(t.el,\".v\"+i).value=u.unescape(e[i]),h[i]=e[i]}}}();var j=function(){h.comment=\"\",_.comment.value=\"\",y(_.comment),u.attr(_.comment,\"placeholder\",t.placeholder),R={},t.preview.empty().hide()},I=u.find(t.el,\".vsubmit\"),P=function(e){if(u.attr(I,\"disabled\"))return void t.alert.show({type:0,text:t.locale.tips.busy+'ヾ(๑╹◡╹)ﾉ\"',ctxt:t.locale.ctrl.ok});if(\"\"==h.comment)return void _.comment.focus();h.nick=h.nick||\"Anonymous\";var n=k.mail(h.mail),r=k.link(h.link);h.mail=n.k?n.v:\"\",h.link=r.k?r.v:\"\",t.notify||t.verify?V(Q):Q()},U=function(){var e=new AV.ACL;return e.setPublicReadAccess(!0),e.setPublicWriteAccess(!1),e},Q=function(){u.attr(I,\"disabled\",!0),t.loading.show(!0);var e=AV.Object.extend(\"Comment\"),n=new e;if(h.url=decodeURI(x),h.insertedAt=new Date,R.rid){var r=R.pid||R.rid;n.set(\"rid\",R.rid),n.set(\"pid\",r),h.comment='<a class=\"at\" href=\"#'+r+'\">'+R.at+\"</a>\"+h.comment}for(var i in h)if(h.hasOwnProperty(i)){var o=h[i];n.set(i,o)}n.setACL(U()),n.save().then(function(e){\"Anonymous\"!=h.nick&&b&&b.setItem(\"ValineCache\",JSON.stringify({nick:h.nick,link:h.link,mail:h.mail}));var n=u.find(t.el,\".vnum\"),r=1;try{if(R.rid){var i=u.find(t.el,'.vquote[rid=\"'+R.rid+'\"]')||C(R.rid);L(e,i,!0)}else n?(r=Number(n.innerText)+1,n.innerText=r):u.find(t.el,\".vcount\").innerHTML='<span class=\"num\">1</span> '+t.locale.tips.comments,L(e,u.find(t.el,\".vlist\"));h.mail&&N({username:h.nick,mail:h.mail}),R.at&&R.rmail&&t.notify&&F({username:R.at.replace(\"@\",\"\"),mail:R.rmail}),u.removeAttr(I,\"disabled\"),t.loading.hide(),j()}catch(e){t.ErrorHandler(e)}}).catch(function(e){t.ErrorHandler(e)})},V=function e(n){var r=Math.floor(10*Math.random()+1),i=Math.floor(10*Math.random()+1),o=Math.floor(10*Math.random()+1),a=[\"+\",\"-\",\"x\"],s=a[Math.floor(3*Math.random())],l=a[Math.floor(3*Math.random())],c=\"\"+r+s+i+l+o,d=c+\" = <input class='vcode vinput' >\";t.alert.show({type:1,text:d,ctxt:t.locale.ctrl.cancel,otxt:t.locale.ctrl.ok,cb:function(){var r=+u.find(t.el,\".vcode\").value;new Function(\"return \"+c.replace(/x/g,\"*\"))()===r?n&&n():t.alert.show({type:1,text:\"(T＿T)\"+t.locale.tips.again,ctxt:t.locale.ctrl.cancel,otxt:t.locale.ctrl.try,cb:function(){e(n)}})}})},N=function(e){var t=new AV.User;return t.setUsername(e.username),t.setPassword(e.mail),t.setEmail(e.mail),t.setACL(U()),t.signUp()},F=function e(n){AV.User.requestPasswordReset(n.mail).then(function(e){}).catch(function(r){1==r.code?t.alert.show({type:0,text:\"ヾ(ｏ･ω･)ﾉ At太频繁啦，提醒功能暂时宕机。<br>\"+r.error,ctxt:t.locale.ctrl.ok}):N(n).then(function(t){e(n)}).catch(function(e){})})};u.on(\"click\",I,P),u.on(\"keydown\",document,function(e){e=event||e;var n=e.keyCode||e.which||e.charCode;if(((e.ctrlKey||e.metaKey)&&13===n&&P(),9===n)&&\"veditor\"==(document.activeElement.id||\"\")){e.preventDefault();var r=u.find(t.el,\".veditor\");E(r,\"    \")}})};var k={mail:function(e){return{k:/[\\w-\\.]+@([\\w-]+\\.)+[a-z]{2,3}/.test(e),v:e}},link:function(e){return e=e.length>0&&(/^https?/.test(e)?e:\"http://\"+e),{k:/^https?:\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/.test(e),v:e}}};e.exports=i,e.exports.default=i},function(e,t,n){\"use strict\";var r={data:n(11),parse:function(e){return String(e).replace(/:(.+?):/g,function(e,t){return r.data[t]||e})}};e.exports=r},function(e,t,n){\"use strict\";function r(e){var t=this,n={Trident:e.indexOf(\"Trident\")>-1||e.indexOf(\"NET CLR\")>-1,Presto:e.indexOf(\"Presto\")>-1,WebKit:e.indexOf(\"AppleWebKit\")>-1,Gecko:e.indexOf(\"Gecko/\")>-1,Safari:e.indexOf(\"Safari\")>-1,Chrome:e.indexOf(\"Chrome\")>-1||e.indexOf(\"CriOS\")>-1,IE:e.indexOf(\"MSIE\")>-1||e.indexOf(\"Trident\")>-1,Edge:e.indexOf(\"Edge\")>-1,Firefox:e.indexOf(\"Firefox\")>-1||e.indexOf(\"FxiOS\")>-1,\"Firefox Focus\":e.indexOf(\"Focus\")>-1,Chromium:e.indexOf(\"Chromium\")>-1,Opera:e.indexOf(\"Opera\")>-1||e.indexOf(\"OPR\")>-1,Vivaldi:e.indexOf(\"Vivaldi\")>-1,Yandex:e.indexOf(\"YaBrowser\")>-1,Kindle:e.indexOf(\"Kindle\")>-1||e.indexOf(\"Silk/\")>-1,360:e.indexOf(\"360EE\")>-1||e.indexOf(\"360SE\")>-1,UC:e.indexOf(\"UC\")>-1||e.indexOf(\" UBrowser\")>-1,QQBrowser:e.indexOf(\"QQBrowser\")>-1,QQ:e.indexOf(\"QQ/\")>-1,Baidu:e.indexOf(\"Baidu\")>-1||e.indexOf(\"BIDUBrowser\")>-1,Maxthon:e.indexOf(\"Maxthon\")>-1,Sogou:e.indexOf(\"MetaSr\")>-1||e.indexOf(\"Sogou\")>-1,LBBROWSER:e.indexOf(\"LBBROWSER\")>-1,\"2345Explorer\":e.indexOf(\"2345Explorer\")>-1,TheWorld:e.indexOf(\"TheWorld\")>-1,XiaoMi:e.indexOf(\"MiuiBrowser\")>-1,Quark:e.indexOf(\"Quark\")>-1,Qiyu:e.indexOf(\"Qiyu\")>-1,Wechat:e.indexOf(\"MicroMessenger\")>-1,Taobao:e.indexOf(\"AliApp(TB\")>-1,Alipay:e.indexOf(\"AliApp(AP\")>-1,Weibo:e.indexOf(\"Weibo\")>-1,Douban:e.indexOf(\"com.douban.frodo\")>-1,Suning:e.indexOf(\"SNEBUY-APP\")>-1,iQiYi:e.indexOf(\"IqiyiApp\")>-1,Windows:e.indexOf(\"Windows\")>-1,Linux:e.indexOf(\"Linux\")>-1||e.indexOf(\"X11\")>-1,\"Mac OS\":e.indexOf(\"Macintosh\")>-1,Android:e.indexOf(\"Android\")>-1||e.indexOf(\"Adr\")>-1,Ubuntu:e.indexOf(\"Ubuntu\")>-1,FreeBSD:e.indexOf(\"FreeBSD\")>-1,Debian:e.indexOf(\"Debian\")>-1,\"Windows Phone\":e.indexOf(\"IEMobile\")>-1||e.indexOf(\"Windows Phone\")>-1,BlackBerry:e.indexOf(\"BlackBerry\")>-1||e.indexOf(\"RIM\")>-1,MeeGo:e.indexOf(\"MeeGo\")>-1,Symbian:e.indexOf(\"Symbian\")>-1,iOS:e.indexOf(\"like Mac OS X\")>-1,\"Chrome OS\":e.indexOf(\"CrOS\")>-1,WebOS:e.indexOf(\"hpwOS\")>-1,Mobile:e.indexOf(\"Mobi\")>-1||e.indexOf(\"iPh\")>-1||e.indexOf(\"480\")>-1,Tablet:e.indexOf(\"Tablet\")>-1||e.indexOf(\"Pad\")>-1||e.indexOf(\"Nexus 7\")>-1};n.Mobile&&(n.Mobile=!(e.indexOf(\"iPad\")>-1));var r={engine:[\"WebKit\",\"Trident\",\"Gecko\",\"Presto\"],browser:[\"Safari\",\"Chrome\",\"Edge\",\"IE\",\"Firefox\",\"Firefox Focus\",\"Chromium\",\"Opera\",\"Vivaldi\",\"Yandex\",\"Kindle\",\"360\",\"UC\",\"QQBrowser\",\"QQ\",\"Baidu\",\"Maxthon\",\"Sogou\",\"LBBROWSER\",\"2345Explorer\",\"TheWorld\",\"XiaoMi\",\"Quark\",\"Qiyu\",\"Wechat\",\"Taobao\",\"Alipay\",\"Weibo\",\"Douban\",\"Suning\",\"iQiYi\"],os:[\"Windows\",\"Linux\",\"Mac OS\",\"Android\",\"Ubuntu\",\"FreeBSD\",\"Debian\",\"iOS\",\"Windows Phone\",\"BlackBerry\",\"MeeGo\",\"Symbian\",\"Chrome OS\",\"WebOS\"],device:[\"Mobile\",\"Tablet\"]};t.device=\"PC\";for(var i in r)for(var o=0;o<r[i].length;o++){var a=r[i][o];n[a]&&(t[i]=a)}var s={Windows:function(){var t=e.replace(/^.*Windows NT ([\\d.]+);.*$/,\"$1\");return{6.4:\"10\",6.3:\"8.1\",6.2:\"8\",6.1:\"7\",\"6.0\":\"Vista\",5.2:\"XP\",5.1:\"XP\",\"5.0\":\"2000\"}[t]||t},Android:function(){return e.replace(/^.*Android ([\\d.]+);.*$/,\"$1\")},iOS:function(){return e.replace(/^.*OS ([\\d_]+) like.*$/,\"$1\").replace(/_/g,\".\")},Debian:function(){return e.replace(/^.*Debian\\/([\\d.]+).*$/,\"$1\")},\"Windows Phone\":function(){return e.replace(/^.*Windows Phone( OS)? ([\\d.]+);.*$/,\"$2\")},\"Mac OS\":function(){return e.replace(/^.*Mac OS X ([\\d_]+).*$/,\"$1\").replace(/_/g,\".\")},WebOS:function(){return e.replace(/^.*hpwOS\\/([\\d.]+);.*$/,\"$1\")}};t.osVersion=\"\",s[t.os]&&(t.osVersion=s[t.os](),t.osVersion==e&&(t.osVersion=\"\"));var l={Safari:function(){return e.replace(/^.*Version\\/([\\d.]+).*$/,\"$1\")},Chrome:function(){return e.replace(/^.*Chrome\\/([\\d.]+).*$/,\"$1\").replace(/^.*CriOS\\/([\\d.]+).*$/,\"$1\")},IE:function(){return e.replace(/^.*MSIE ([\\d.]+).*$/,\"$1\").replace(/^.*rv:([\\d.]+).*$/,\"$1\")},Edge:function(){return e.replace(/^.*Edge\\/([\\d.]+).*$/,\"$1\")},Firefox:function(){return e.replace(/^.*Firefox\\/([\\d.]+).*$/,\"$1\").replace(/^.*FxiOS\\/([\\d.]+).*$/,\"$1\")},\"Firefox Focus\":function(){return e.replace(/^.*Focus\\/([\\d.]+).*$/,\"$1\")},Chromium:function(){return e.replace(/^.*Chromium\\/([\\d.]+).*$/,\"$1\")},Opera:function(){return e.replace(/^.*Opera\\/([\\d.]+).*$/,\"$1\").replace(/^.*OPR\\/([\\d.]+).*$/,\"$1\")},Vivaldi:function(){return e.replace(/^.*Vivaldi\\/([\\d.]+).*$/,\"$1\")},Yandex:function(){return e.replace(/^.*YaBrowser\\/([\\d.]+).*$/,\"$1\")},Kindle:function(){return e.replace(/^.*Version\\/([\\d.]+).*$/,\"$1\")},Maxthon:function(){return e.replace(/^.*Maxthon\\/([\\d.]+).*$/,\"$1\")},QQBrowser:function(){return e.replace(/^.*QQBrowser\\/([\\d.]+).*$/,\"$1\")},QQ:function(){return e.replace(/^.*QQ\\/([\\d.]+).*$/,\"$1\")},Baidu:function(){return e.replace(/^.*BIDUBrowser[\\s\\/]([\\d.]+).*$/,\"$1\")},UC:function(){return e.replace(/^.*UC?Browser\\/([\\d.]+).*$/,\"$1\")},Sogou:function(){return e.replace(/^.*SE ([\\d.X]+).*$/,\"$1\").replace(/^.*SogouMobileBrowser\\/([\\d.]+).*$/,\"$1\")},\"2345Explorer\":function(){return e.replace(/^.*2345Explorer\\/([\\d.]+).*$/,\"$1\")},TheWorld:function(){return e.replace(/^.*TheWorld ([\\d.]+).*$/,\"$1\")},XiaoMi:function(){return e.replace(/^.*MiuiBrowser\\/([\\d.]+).*$/,\"$1\")},Quark:function(){return e.replace(/^.*Quark\\/([\\d.]+).*$/,\"$1\")},Qiyu:function(){return e.replace(/^.*Qiyu\\/([\\d.]+).*$/,\"$1\")},Wechat:function(){return e.replace(/^.*MicroMessenger\\/([\\d.]+).*$/,\"$1\")},Taobao:function(){return e.replace(/^.*AliApp\\(TB\\/([\\d.]+).*$/,\"$1\")},Alipay:function(){return e.replace(/^.*AliApp\\(AP\\/([\\d.]+).*$/,\"$1\")},Weibo:function(){return e.replace(/^.*weibo__([\\d.]+).*$/,\"$1\")},Douban:function(){return e.replace(/^.*com.douban.frodo\\/([\\d.]+).*$/,\"$1\")},Suning:function(){return e.replace(/^.*SNEBUY-APP([\\d.]+).*$/,\"$1\")},iQiYi:function(){return e.replace(/^.*IqiyiVersion\\/([\\d.]+).*$/,\"$1\")}};t.version=\"\",l[t.browser]&&(t.version=l[t.browser](),t.version==e&&(t.version=\"\")),\"Edge\"==t.browser?t.engine=\"EdgeHTML\":\"Chrome\"==t.browser&&parseInt(t.version)>27?t.engine=\"Blink\":\"Opera\"==t.browser&&parseInt(t.version)>12?t.engine=\"Blink\":\"Yandex\"==t.browser?t.engine=\"Blink\":void 0==t.browser&&(t.browser=\"Unknow App\")}function i(e){return new r(e)}e.exports=i},function(e,t,n){\"use strict\";var r={},i={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#39;\",\"`\":\"&#x60;\",\"\\\\\":\"&#x5c;\"};for(var o in i)r[i[o]]=o;var a=/[&<>\"'`\\\\]/g,s=RegExp(a.source),l=/&(?:amp|lt|gt|quot|#39|#x60|#x5c);/g,c=RegExp(l.source),d={on:function(e,t,n,r){e=e.split(\" \");for(var i=0,o=e.length;i<o;i++)d.off(e[i],t,n,r),t.addEventListener?t.addEventListener(e[i],n,r||!1):t.attachEvent?t.attachEvent(\"on\"+e[i],n):t[\"on\"+e[i]]=n},off:function(e,t,n,r){t.removeEventListener?t.removeEventListener(e,n,r||!1):t.detachEvent?t.detachEvent(\"on\"+e,n):t[\"on\"+e]=null},escape:function(e){return e&&s.test(e)?e.replace(a,function(e){return i[e]}):e},unescape:function(e){return e&&c.test(e)?e.replace(l,function(e){return r[e]}):e},create:function(e,t,n){var r=document.createElement(e);return d.attr(r,t,n),r},find:function(e,t){return e.querySelector(t)},findAll:function(e,t){return e.querySelectorAll(t)},attr:function(e,t,n){if(void 0===e.getAttribute)return d.prop(e,t,n);if(void 0!==n)null===n?d.removeAttr(e,t):e.setAttribute(t,n);else{if(\"[object Object]\"!=={}.toString.call(t))return e.getAttribute(t);d.each(t,function(t,n){e.setAttribute(t,n)})}},prop:function(e,t,n){return void 0!==n?e[t]=n:\"[object Object]\"!=={}.toString.call(t)?e[t]:void d.each(t,function(t,n){e[t]=n})},removeAttr:function(e,t){var n=void 0,r=0,i=t&&t.match(/[^\\x20\\t\\r\\n\\f\\*\\/\\\\]+/g);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n);return e},clearAttr:function(e){var t=e.attributes,n=[\"align\",\"alt\",\"class\",\"disabled\",\"href\",\"id\",\"target\",\"title\",\"type\",\"style\",\"src\"];return d.each(t,function(t,r){var i=r.name;if(\"style\"===i){var o=r.value;d.each(o.split(\";\"),function(t,n){if(n.indexOf(\"color\")>-1)return d.attr(e,\"style\",n),!1;d.removeAttr(e,\"style\")})}n.indexOf(i)>-1||d.removeAttr(e,i)}),e},remove:function(e,t){try{t.parentNode&&t.parentNode.removeChild(t)}catch(e){}},each:function(e,t){var n=0,r=e.length,i=[\"[object Array]\",\"[object NodeList]\"],o={}.toString.call(e);if(i.indexOf(o)>-1)for(;n<r&&!1!==(t&&t.call(e[n],n,e[n]));n++);else for(n in e)if(e.hasOwnProperty(n)&&!1===(t&&t.call(e[n],n,e[n])))break;return e}};e.exports=d},function(e,t,n){\"use strict\";var r=function(e,t){if(e)try{var n=e.getTime(),r=(new Date).getTime(),o=r-n,a=Math.floor(o/864e5);if(0===a){var s=o%864e5,l=Math.floor(s/36e5);if(0===l){var c=s%36e5,d=Math.floor(c/6e4);if(0===d){var u=c%6e4;return Math.round(u/1e3)+\" \"+t.timeago.seconds}return d+\" \"+t.timeago.minutes}return l+\" \"+t.timeago.hours}return a<0?t.timeago.now:a<8?a+\" \"+t.timeago.days:i(e)}catch(e){}},i=function(e){var t=o(e.getDate(),2),n=o(e.getMonth()+1,2);return o(e.getFullYear(),2)+\"-\"+n+\"-\"+t},o=function(e,t){for(var n=e.toString();n.length<t;)n=\"0\"+n;return n};e.exports=r},function(e,t,n){var r;!function(i){\"use strict\";function o(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function a(e,t){return e<<t|e>>>32-t}function s(e,t,n,r,i,s){return o(a(o(o(t,e),o(r,s)),i),n)}function l(e,t,n,r,i,o,a){return s(t&n|~t&r,e,t,i,o,a)}function c(e,t,n,r,i,o,a){return s(t&r|n&~r,e,t,i,o,a)}function d(e,t,n,r,i,o,a){return s(t^n^r,e,t,i,o,a)}function u(e,t,n,r,i,o,a){return s(n^(t|~r),e,t,i,o,a)}function p(e,t){e[t>>5]|=128<<t%32,e[14+(t+64>>>9<<4)]=t;var n,r,i,a,s,p=1732584193,f=-271733879,h=-1732584194,v=271733878;for(n=0;n<e.length;n+=16)r=p,i=f,a=h,s=v,p=l(p,f,h,v,e[n],7,-680876936),v=l(v,p,f,h,e[n+1],12,-389564586),h=l(h,v,p,f,e[n+2],17,606105819),f=l(f,h,v,p,e[n+3],22,-1044525330),p=l(p,f,h,v,e[n+4],7,-176418897),v=l(v,p,f,h,e[n+5],12,1200080426),h=l(h,v,p,f,e[n+6],17,-1473231341),f=l(f,h,v,p,e[n+7],22,-45705983),p=l(p,f,h,v,e[n+8],7,1770035416),v=l(v,p,f,h,e[n+9],12,-1958414417),h=l(h,v,p,f,e[n+10],17,-42063),f=l(f,h,v,p,e[n+11],22,-1990404162),p=l(p,f,h,v,e[n+12],7,1804603682),v=l(v,p,f,h,e[n+13],12,-40341101),h=l(h,v,p,f,e[n+14],17,-1502002290),f=l(f,h,v,p,e[n+15],22,1236535329),p=c(p,f,h,v,e[n+1],5,-165796510),v=c(v,p,f,h,e[n+6],9,-1069501632),h=c(h,v,p,f,e[n+11],14,643717713),f=c(f,h,v,p,e[n],20,-373897302),p=c(p,f,h,v,e[n+5],5,-701558691),v=c(v,p,f,h,e[n+10],9,38016083),h=c(h,v,p,f,e[n+15],14,-660478335),f=c(f,h,v,p,e[n+4],20,-405537848),p=c(p,f,h,v,e[n+9],5,568446438),v=c(v,p,f,h,e[n+14],9,-1019803690),h=c(h,v,p,f,e[n+3],14,-187363961),f=c(f,h,v,p,e[n+8],20,1163531501),p=c(p,f,h,v,e[n+13],5,-1444681467),v=c(v,p,f,h,e[n+2],9,-51403784),h=c(h,v,p,f,e[n+7],14,1735328473),f=c(f,h,v,p,e[n+12],20,-1926607734),p=d(p,f,h,v,e[n+5],4,-378558),v=d(v,p,f,h,e[n+8],11,-2022574463),h=d(h,v,p,f,e[n+11],16,1839030562),f=d(f,h,v,p,e[n+14],23,-35309556),p=d(p,f,h,v,e[n+1],4,-1530992060),v=d(v,p,f,h,e[n+4],11,1272893353),h=d(h,v,p,f,e[n+7],16,-155497632),f=d(f,h,v,p,e[n+10],23,-1094730640),p=d(p,f,h,v,e[n+13],4,681279174),v=d(v,p,f,h,e[n],11,-358537222),h=d(h,v,p,f,e[n+3],16,-722521979),f=d(f,h,v,p,e[n+6],23,76029189),p=d(p,f,h,v,e[n+9],4,-640364487),v=d(v,p,f,h,e[n+12],11,-421815835),h=d(h,v,p,f,e[n+15],16,530742520),f=d(f,h,v,p,e[n+2],23,-995338651),p=u(p,f,h,v,e[n],6,-198630844),v=u(v,p,f,h,e[n+7],10,1126891415),h=u(h,v,p,f,e[n+14],15,-1416354905),f=u(f,h,v,p,e[n+5],21,-57434055),p=u(p,f,h,v,e[n+12],6,1700485571),v=u(v,p,f,h,e[n+3],10,-1894986606),h=u(h,v,p,f,e[n+10],15,-1051523),f=u(f,h,v,p,e[n+1],21,-2054922799),p=u(p,f,h,v,e[n+8],6,1873313359),v=u(v,p,f,h,e[n+15],10,-30611744),h=u(h,v,p,f,e[n+6],15,-1560198380),f=u(f,h,v,p,e[n+13],21,1309151649),p=u(p,f,h,v,e[n+4],6,-145523070),v=u(v,p,f,h,e[n+11],10,-1120210379),h=u(h,v,p,f,e[n+2],15,718787259),f=u(f,h,v,p,e[n+9],21,-343485551),p=o(p,r),f=o(f,i),h=o(h,a),v=o(v,s);return[p,f,h,v]}function f(e){var t,n=\"\",r=32*e.length;for(t=0;t<r;t+=8)n+=String.fromCharCode(e[t>>5]>>>t%32&255);return n}function h(e){var t,n=[];for(n[(e.length>>2)-1]=void 0,t=0;t<n.length;t+=1)n[t]=0;var r=8*e.length;for(t=0;t<r;t+=8)n[t>>5]|=(255&e.charCodeAt(t/8))<<t%32;return n}function v(e){return f(p(h(e),8*e.length))}function g(e,t){var n,r,i=h(e),o=[],a=[];for(o[15]=a[15]=void 0,i.length>16&&(i=p(i,8*e.length)),n=0;n<16;n+=1)o[n]=909522486^i[n],a[n]=1549556828^i[n];return r=p(o.concat(h(t)),512+8*t.length),f(p(a.concat(r),640))}function m(e){var t,n,r=\"0123456789abcdef\",i=\"\";for(n=0;n<e.length;n+=1)t=e.charCodeAt(n),i+=r.charAt(t>>>4&15)+r.charAt(15&t);return i}function b(e){return unescape(encodeURIComponent(e))}function x(e){return v(b(e))}function y(e){return m(x(e))}function w(e,t){return g(b(e),b(t))}function k(e,t){return m(w(e,t))}function _(e,t,n){return t?n?w(t,e):k(t,e):n?x(e):y(e)}void 0!==(r=function(){return _}.call(t,n,t,e))&&(e.exports=r)}()},function(e,t,n){!function(t,n){e.exports=n()}(0,function(){\"use strict\";function e(e){return'<span style=\"color: slategray\">'+e+\"</span>\"}var t=function(e,t){return t={exports:{}},e(t,t.exports),t.exports}(function(e){var t=e.exports=function(){return new RegExp(\"(?:\"+t.line().source+\")|(?:\"+t.block().source+\")\",\"gm\")};t.line=function(){return/(?:^|\\s)\\/\\/(.+?)$/gm},t.block=function(){return/\\/\\*([\\S\\s]*?)\\*\\//gm}}),n=[\"23AC69\",\"91C132\",\"F19726\",\"E8552D\",\"1AAB8E\",\"E1147F\",\"2980C1\",\"1BA1E6\",\"9FA0A0\",\"F19726\",\"E30B20\",\"E30B20\",\"A3338B\"];return function(r,i){void 0===i&&(i={});var o=i.colors;void 0===o&&(o=n);var a=0,s={},l=/[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af\\u0400-\\u04FF]+|\\w+/,c=/</,d=new RegExp(\"(\"+l.source+\"|\"+c.source+\")|(\"+t().source+\")\",\"gmi\");return r.replace(d,function(t,n,r){if(r)return e(r);if(\"<\"===n)return\"&lt;\";var i;s[n]?i=s[n]:(i=o[a],s[n]=i);var l='<span style=\"color: #'+i+'\">'+n+\"</span>\";return a=++a%o.length,l})}})},function(e,t,n){(function(t){!function(t){\"use strict\";function n(e){this.tokens=[],this.tokens.links={},this.options=e||h.defaults,this.rules=v.normal,this.options.pedantic?this.rules=v.pedantic:this.options.gfm&&(this.options.tables?this.rules=v.tables:this.rules=v.gfm)}function r(e,t){if(this.options=t||h.defaults,this.links=e,this.rules=g.normal,this.renderer=this.options.renderer||new i,this.renderer.options=this.options,!this.links)throw new Error(\"Tokens array requires a `links` property.\");this.options.pedantic?this.rules=g.pedantic:this.options.gfm&&(this.options.breaks?this.rules=g.breaks:this.rules=g.gfm)}function i(e){this.options=e||h.defaults}function o(){}function a(e){this.tokens=[],this.token=null,this.options=e||h.defaults,this.options.renderer=this.options.renderer||new i,this.renderer=this.options.renderer,this.renderer.options=this.options}function s(e,t){return e.replace(t?/&/g:/&(?!#?\\w+;)/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#39;\")}function l(e){return e.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/gi,function(e,t){return t=t.toLowerCase(),\"colon\"===t?\":\":\"#\"===t.charAt(0)?\"x\"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):\"\"})}function c(e,t){return e=e.source||e,t=t||\"\",{replace:function(t,n){return n=n.source||n,n=n.replace(/(^|[^\\[])\\^/g,\"$1\"),e=e.replace(t,n),this},getRegex:function(){return new RegExp(e,t)}}}function d(e,t){return m[\" \"+e]||(/^[^:]+:\\/*[^\\/]*$/.test(e)?m[\" \"+e]=e+\"/\":m[\" \"+e]=e.replace(/[^\\/]*$/,\"\")),e=m[\" \"+e],\"//\"===t.slice(0,2)?e.replace(/:[\\s\\S]*/,\":\")+t:\"/\"===t.charAt(0)?e.replace(/(:\\/*[^\\/]*)[\\s\\S]*/,\"$1\")+t:e+t}function u(){}function p(e){for(var t,n,r=1;r<arguments.length;r++){t=arguments[r];for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}function f(e,t){var n=e.replace(/([^\\\\])\\|/g,\"$1 |\").split(/ +\\| */),r=0;if(n.length>t)n.splice(t);else for(;n.length<t;)n.push(\"\");for(;r<n.length;r++)n[r]=n[r].replace(/\\\\\\|/g,\"|\");return n}function h(e,t,r){if(void 0===e||null===e)throw new Error(\"marked(): input parameter is undefined or null\");if(\"string\"!=typeof e)throw new Error(\"marked(): input parameter is of type \"+Object.prototype.toString.call(e)+\", string expected\");if(r||\"function\"==typeof t){r||(r=t,t=null),t=p({},h.defaults,t||{});var i,o,l=t.highlight,c=0;try{i=n.lex(e,t)}catch(e){return r(e)}o=i.length;var d=function(e){if(e)return t.highlight=l,r(e);var n;try{n=a.parse(i,t)}catch(t){e=t}return t.highlight=l,e?r(e):r(null,n)};if(!l||l.length<3)return d();if(delete t.highlight,!o)return d();for(;c<i.length;c++)!function(e){\"code\"!==e.type?--o||d():l(e.text,e.lang,function(t,n){return t?d(t):null==n||n===e.text?--o||d():(e.text=n,e.escaped=!0,void(--o||d()))})}(i[c])}else try{return t&&(t=p({},h.defaults,t)),a.parse(n.lex(e,t),t)}catch(e){if(e.message+=\"\\nPlease report this to https://github.com/markedjs/marked.\",(t||h.defaults).silent)return\"<p>An error occurred:</p><pre>\"+s(e.message+\"\",!0)+\"</pre>\";throw e}}var v={newline:/^\\n+/,code:/^( {4}[^\\n]+\\n*)+/,fences:u,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,heading:/^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,nptable:u,blockquote:/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,list:/^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,html:\"^ {0,3}(?:<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*|<![A-Z][\\\\s\\\\S]*?>\\\\n*|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$))\",def:/^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,table:u,lheading:/^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,paragraph:/^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/,text:/^[^\\n]+/};v._label=/(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/,v._title=/(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/,v.def=c(v.def).replace(\"label\",v._label).replace(\"title\",v._title).getRegex(),v.bullet=/(?:[*+-]|\\d+\\.)/,v.item=/^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/,v.item=c(v.item,\"gm\").replace(/bull/g,v.bullet).getRegex(),v.list=c(v.list).replace(/bull/g,v.bullet).replace(\"hr\",\"\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))\").replace(\"def\",\"\\\\n+(?=\"+v.def.source+\")\").getRegex(),v._tag=\"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\",v._comment=/<!--(?!-?>)[\\s\\S]*?-->/,v.html=c(v.html,\"i\").replace(\"comment\",v._comment).replace(\"tag\",v._tag).replace(\"attribute\",/ +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex(),v.paragraph=c(v.paragraph).replace(\"hr\",v.hr).replace(\"heading\",v.heading).replace(\"lheading\",v.lheading).replace(\"tag\",v._tag).getRegex(),v.blockquote=c(v.blockquote).replace(\"paragraph\",v.paragraph).getRegex(),v.normal=p({},v),v.gfm=p({},v.normal,{fences:/^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\n? *\\1 *(?:\\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/}),v.gfm.paragraph=c(v.paragraph).replace(\"(?!\",\"(?!\"+v.gfm.fences.source.replace(\"\\\\1\",\"\\\\2\")+\"|\"+v.list.source.replace(\"\\\\1\",\"\\\\3\")+\"|\").getRegex(),v.tables=p({},v.gfm,{nptable:/^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,table:/^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/}),v.pedantic=p({},v.normal,{html:c(\"^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\\\"[^\\\"]*\\\"|'[^']*'|\\\\s[^'\\\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))\").replace(\"comment\",v._comment).replace(/tag/g,\"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),def:/^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/}),n.rules=v,n.lex=function(e,t){return new n(t).lex(e)},n.prototype.lex=function(e){return e=e.replace(/\\r\\n|\\r/g,\"\\n\").replace(/\\t/g,\"    \").replace(/\\u00a0/g,\" \").replace(/\\u2424/g,\"\\n\"),this.token(e,!0)},n.prototype.token=function(e,t){e=e.replace(/^ +$/gm,\"\");for(var n,r,i,o,a,s,l,c,d,u,p,h,g;e;)if((i=this.rules.newline.exec(e))&&(e=e.substring(i[0].length),i[0].length>1&&this.tokens.push({type:\"space\"})),i=this.rules.code.exec(e))e=e.substring(i[0].length),i=i[0].replace(/^ {4}/gm,\"\"),this.tokens.push({type:\"code\",text:this.options.pedantic?i:i.replace(/\\n+$/,\"\")});else if(i=this.rules.fences.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"code\",lang:i[2],text:i[3]||\"\"});else if(i=this.rules.heading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"heading\",depth:i[1].length,text:i[2]});else if(t&&(i=this.rules.nptable.exec(e))&&(s={type:\"table\",header:f(i[1].replace(/^ *| *\\| *$/g,\"\")),align:i[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),cells:i[3]?i[3].replace(/\\n$/,\"\").split(\"\\n\"):[]},s.header.length===s.align.length)){for(e=e.substring(i[0].length),c=0;c<s.align.length;c++)/^ *-+: *$/.test(s.align[c])?s.align[c]=\"right\":/^ *:-+: *$/.test(s.align[c])?s.align[c]=\"center\":/^ *:-+ *$/.test(s.align[c])?s.align[c]=\"left\":s.align[c]=null;for(c=0;c<s.cells.length;c++)s.cells[c]=f(s.cells[c],s.header.length);this.tokens.push(s)}else if(i=this.rules.hr.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"hr\"});else if(i=this.rules.blockquote.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"blockquote_start\"}),i=i[0].replace(/^ *> ?/gm,\"\"),this.token(i,t),this.tokens.push({type:\"blockquote_end\"});else if(i=this.rules.list.exec(e)){for(e=e.substring(i[0].length),o=i[2],p=o.length>1,this.tokens.push({type:\"list_start\",ordered:p,start:p?+o:\"\"}),i=i[0].match(this.rules.item),n=!1,u=i.length,c=0;c<u;c++)s=i[c],l=s.length,s=s.replace(/^ *([*+-]|\\d+\\.) +/,\"\"),~s.indexOf(\"\\n \")&&(l-=s.length,s=this.options.pedantic?s.replace(/^ {1,4}/gm,\"\"):s.replace(new RegExp(\"^ {1,\"+l+\"}\",\"gm\"),\"\")),this.options.smartLists&&c!==u-1&&(a=v.bullet.exec(i[c+1])[0],o===a||o.length>1&&a.length>1||(e=i.slice(c+1).join(\"\\n\")+e,c=u-1)),r=n||/\\n\\n(?!\\s*$)/.test(s),c!==u-1&&(n=\"\\n\"===s.charAt(s.length-1),r||(r=n)),h=/^\\[[ xX]\\] /.test(s),g=void 0,h&&(g=\" \"!==s[1],s=s.replace(/^\\[[ xX]\\] +/,\"\")),this.tokens.push({type:r?\"loose_item_start\":\"list_item_start\",task:h,checked:g}),this.token(s,!1),this.tokens.push({type:\"list_item_end\"});this.tokens.push({type:\"list_end\"})}else if(i=this.rules.html.exec(e))e=e.substring(i[0].length),this.tokens.push({type:this.options.sanitize?\"paragraph\":\"html\",pre:!this.options.sanitizer&&(\"pre\"===i[1]||\"script\"===i[1]||\"style\"===i[1]),text:i[0]});else if(t&&(i=this.rules.def.exec(e)))e=e.substring(i[0].length),i[3]&&(i[3]=i[3].substring(1,i[3].length-1)),d=i[1].toLowerCase().replace(/\\s+/g,\" \"),this.tokens.links[d]||(this.tokens.links[d]={href:i[2],title:i[3]});else if(t&&(i=this.rules.table.exec(e))&&(s={type:\"table\",header:f(i[1].replace(/^ *| *\\| *$/g,\"\")),align:i[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),cells:i[3]?i[3].replace(/(?: *\\| *)?\\n$/,\"\").split(\"\\n\"):[]},s.header.length===s.align.length)){for(e=e.substring(i[0].length),c=0;c<s.align.length;c++)/^ *-+: *$/.test(s.align[c])?s.align[c]=\"right\":/^ *:-+: *$/.test(s.align[c])?s.align[c]=\"center\":/^ *:-+ *$/.test(s.align[c])?s.align[c]=\"left\":s.align[c]=null;for(c=0;c<s.cells.length;c++)s.cells[c]=f(s.cells[c].replace(/^ *\\| *| *\\| *$/g,\"\"),s.header.length);this.tokens.push(s)}else if(i=this.rules.lheading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"heading\",depth:\"=\"===i[2]?1:2,text:i[1]});else if(t&&(i=this.rules.paragraph.exec(e)))e=e.substring(i[0].length),this.tokens.push({type:\"paragraph\",text:\"\\n\"===i[1].charAt(i[1].length-1)?i[1].slice(0,-1):i[1]});else if(i=this.rules.text.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"text\",text:i[0]});else if(e)throw new Error(\"Infinite loop on byte: \"+e.charCodeAt(0));return this.tokens};var g={escape:/^\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\]\\\\^_`{|}~])/,autolink:/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,url:u,tag:\"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\",link:/^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/,reflink:/^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,nolink:/^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,strong:/^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)|^__([^\\s])__(?!_)|^\\*\\*([^\\s])\\*\\*(?!\\*)/,em:/^_([^\\s][\\s\\S]*?[^\\s_])_(?!_)|^_([^\\s_][\\s\\S]*?[^\\s])_(?!_)|^\\*([^\\s][\\s\\S]*?[^\\s*])\\*(?!\\*)|^\\*([^\\s*][\\s\\S]*?[^\\s])\\*(?!\\*)|^_([^\\s_])_(?!_)|^\\*([^\\s*])\\*(?!\\*)/,code:/^(`+)\\s*([\\s\\S]*?[^`]?)\\s*\\1(?!`)/,br:/^ {2,}\\n(?!\\s*$)/,del:u,text:/^[\\s\\S]+?(?=[\\\\<!\\[`*]|\\b_| {2,}\\n|$)/};g._escapes=/\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\]\\\\^_`{|}~])/g,g._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,g._email=/[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,g.autolink=c(g.autolink).replace(\"scheme\",g._scheme).replace(\"email\",g._email).getRegex(),g._attribute=/\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/,g.tag=c(g.tag).replace(\"comment\",v._comment).replace(\"attribute\",g._attribute).getRegex(),g._label=/(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?/,g._href=/\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|(?:\\\\[()]?|\\([^\\s\\x00-\\x1f()\\\\]*\\)|[^\\s\\x00-\\x1f()\\\\])*?)/,g._title=/\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/,g.link=c(g.link).replace(\"label\",g._label).replace(\"href\",g._href).replace(\"title\",g._title).getRegex(),g.reflink=c(g.reflink).replace(\"label\",g._label).getRegex(),g.normal=p({},g),g.pedantic=p({},g.normal,{strong:/^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,em:/^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,link:c(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\",g._label).getRegex(),reflink:c(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\",g._label).getRegex()}),g.gfm=p({},g.normal,{escape:c(g.escape).replace(\"])\",\"~|])\").getRegex(),url:c(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/).replace(\"email\",g._email).getRegex(),_backpedal:/(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^~~(?=\\S)([\\s\\S]*?\\S)~~/,text:c(g.text).replace(\"]|\",\"~]|\").replace(\"|\",\"|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&'*+/=?^_`{\\\\|}~-]+@|\").getRegex()}),g.breaks=p({},g.gfm,{br:c(g.br).replace(\"{2,}\",\"*\").getRegex(),text:c(g.gfm.text).replace(\"{2,}\",\"*\").getRegex()}),r.rules=g,r.output=function(e,t,n){return new r(t,n).output(e)},r.prototype.output=function(e){for(var t,n,i,o,a,l=\"\";e;)if(a=this.rules.escape.exec(e))e=e.substring(a[0].length),l+=a[1];else if(a=this.rules.autolink.exec(e))e=e.substring(a[0].length),\"@\"===a[2]?(n=s(this.mangle(a[1])),i=\"mailto:\"+n):(n=s(a[1]),i=n),l+=this.renderer.link(i,null,n);else if(this.inLink||!(a=this.rules.url.exec(e))){if(a=this.rules.tag.exec(e))!this.inLink&&/^<a /i.test(a[0])?this.inLink=!0:this.inLink&&/^<\\/a>/i.test(a[0])&&(this.inLink=!1),e=e.substring(a[0].length),l+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(a[0]):s(a[0]):a[0];else if(a=this.rules.link.exec(e))e=e.substring(a[0].length),this.inLink=!0,i=a[2],this.options.pedantic?(t=/^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(i),t?(i=t[1],o=t[3]):o=\"\"):o=a[3]?a[3].slice(1,-1):\"\",i=i.trim().replace(/^<([\\s\\S]*)>$/,\"$1\"),l+=this.outputLink(a,{href:r.escapes(i),title:r.escapes(o)}),this.inLink=!1;else if((a=this.rules.reflink.exec(e))||(a=this.rules.nolink.exec(e))){if(e=e.substring(a[0].length),t=(a[2]||a[1]).replace(/\\s+/g,\" \"),!(t=this.links[t.toLowerCase()])||!t.href){l+=a[0].charAt(0),e=a[0].substring(1)+e;continue}this.inLink=!0,l+=this.outputLink(a,t),this.inLink=!1}else if(a=this.rules.strong.exec(e))e=e.substring(a[0].length),l+=this.renderer.strong(this.output(a[4]||a[3]||a[2]||a[1]));else if(a=this.rules.em.exec(e))e=e.substring(a[0].length),l+=this.renderer.em(this.output(a[6]||a[5]||a[4]||a[3]||a[2]||a[1]));else if(a=this.rules.code.exec(e))e=e.substring(a[0].length),l+=this.renderer.codespan(s(a[2].trim(),!0));else if(a=this.rules.br.exec(e))e=e.substring(a[0].length),l+=this.renderer.br();else if(a=this.rules.del.exec(e))e=e.substring(a[0].length),l+=this.renderer.del(this.output(a[1]));else if(a=this.rules.text.exec(e))e=e.substring(a[0].length),l+=this.renderer.text(s(this.smartypants(a[0])));else if(e)throw new Error(\"Infinite loop on byte: \"+e.charCodeAt(0))}else a[0]=this.rules._backpedal.exec(a[0])[0],e=e.substring(a[0].length),\"@\"===a[2]?(n=s(a[0]),i=\"mailto:\"+n):(n=s(a[0]),i=\"www.\"===a[1]?\"http://\"+n:n),l+=this.renderer.link(i,null,n);return l},r.escapes=function(e){return e?e.replace(r.rules._escapes,\"$1\"):e},r.prototype.outputLink=function(e,t){var n=t.href,r=t.title?s(t.title):null;return\"!\"!==e[0].charAt(0)?this.renderer.link(n,r,this.output(e[1])):this.renderer.image(n,r,s(e[1]))},r.prototype.smartypants=function(e){return this.options.smartypants?e.replace(/---/g,\"—\").replace(/--/g,\"–\").replace(/(^|[-\\u2014\\/(\\[{\"\\s])'/g,\"$1‘\").replace(/'/g,\"’\").replace(/(^|[-\\u2014\\/(\\[{\\u2018\\s])\"/g,\"$1“\").replace(/\"/g,\"”\").replace(/\\.{3}/g,\"…\"):e},r.prototype.mangle=function(e){if(!this.options.mangle)return e;for(var t,n=\"\",r=e.length,i=0;i<r;i++)t=e.charCodeAt(i),Math.random()>.5&&(t=\"x\"+t.toString(16)),n+=\"&#\"+t+\";\";return n},i.prototype.code=function(e,t,n){if(this.options.highlight){var r=this.options.highlight(e,t);null!=r&&r!==e&&(n=!0,e=r)}return t?'<pre><code class=\"'+this.options.langPrefix+s(t,!0)+'\">'+(n?e:s(e,!0))+\"</code></pre>\\n\":\"<pre><code>\"+(n?e:s(e,!0))+\"</code></pre>\"},i.prototype.blockquote=function(e){return\"<blockquote>\\n\"+e+\"</blockquote>\\n\"},i.prototype.html=function(e){return e},i.prototype.heading=function(e,t,n){return this.options.headerIds?\"<h\"+t+' id=\"'+this.options.headerPrefix+n.toLowerCase().replace(/[^\\w]+/g,\"-\")+'\">'+e+\"</h\"+t+\">\\n\":\"<h\"+t+\">\"+e+\"</h\"+t+\">\\n\"},i.prototype.hr=function(){return this.options.xhtml?\"<hr/>\\n\":\"<hr>\\n\"},i.prototype.list=function(e,t,n){var r=t?\"ol\":\"ul\";return\"<\"+r+(t&&1!==n?' start=\"'+n+'\"':\"\")+\">\\n\"+e+\"</\"+r+\">\\n\"},i.prototype.listitem=function(e){return\"<li>\"+e+\"</li>\\n\"},i.prototype.checkbox=function(e){return\"<input \"+(e?'checked=\"\" ':\"\")+'disabled=\"\" type=\"checkbox\"'+(this.options.xhtml?\" /\":\"\")+\"> \"},i.prototype.paragraph=function(e){return\"<p>\"+e+\"</p>\\n\"},i.prototype.table=function(e,t){return t&&(t=\"<tbody>\"+t+\"</tbody>\"),\"<table>\\n<thead>\\n\"+e+\"</thead>\\n\"+t+\"</table>\\n\"},i.prototype.tablerow=function(e){return\"<tr>\\n\"+e+\"</tr>\\n\"},i.prototype.tablecell=function(e,t){var n=t.header?\"th\":\"td\";return(t.align?\"<\"+n+' align=\"'+t.align+'\">':\"<\"+n+\">\")+e+\"</\"+n+\">\\n\"},i.prototype.strong=function(e){return\"<strong>\"+e+\"</strong>\"},i.prototype.em=function(e){return\"<em>\"+e+\"</em>\"},i.prototype.codespan=function(e){return\"<code>\"+e+\"</code>\"},i.prototype.br=function(){return this.options.xhtml?\"<br/>\":\"<br>\"},i.prototype.del=function(e){return\"<del>\"+e+\"</del>\"},i.prototype.link=function(e,t,n){if(this.options.sanitize){try{var r=decodeURIComponent(l(e)).replace(/[^\\w:]/g,\"\").toLowerCase()}catch(e){return n}if(0===r.indexOf(\"javascript:\")||0===r.indexOf(\"vbscript:\")||0===r.indexOf(\"data:\"))return n}this.options.baseUrl&&!b.test(e)&&(e=d(this.options.baseUrl,e));try{e=encodeURI(e).replace(/%25/g,\"%\")}catch(e){return n}var i='<a href=\"'+s(e)+'\"';return t&&(i+=' title=\"'+t+'\"'),i+=\">\"+n+\"</a>\"},i.prototype.image=function(e,t,n){this.options.baseUrl&&!b.test(e)&&(e=d(this.options.baseUrl,e));var r='<img src=\"'+e+'\" alt=\"'+n+'\"';return t&&(r+=' title=\"'+t+'\"'),r+=this.options.xhtml?\"/>\":\">\"},i.prototype.text=function(e){return e},o.prototype.strong=o.prototype.em=o.prototype.codespan=o.prototype.del=o.prototype.text=function(e){return e},o.prototype.link=o.prototype.image=function(e,t,n){return\"\"+n},o.prototype.br=function(){return\"\"},a.parse=function(e,t){return new a(t).parse(e)},a.prototype.parse=function(e){this.inline=new r(e.links,this.options),this.inlineText=new r(e.links,p({},this.options,{renderer:new o})),this.tokens=e.reverse();for(var t=\"\";this.next();)t+=this.tok();return t},a.prototype.next=function(){return this.token=this.tokens.pop()},a.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},a.prototype.parseText=function(){for(var e=this.token.text;\"text\"===this.peek().type;)e+=\"\\n\"+this.next().text;return this.inline.output(e)},a.prototype.tok=function(){switch(this.token.type){case\"space\":return\"\";case\"hr\":return this.renderer.hr();case\"heading\":return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,l(this.inlineText.output(this.token.text)));case\"code\":return this.renderer.code(this.token.text,this.token.lang,this.token.escaped);case\"table\":var e,t,n,r,i=\"\",o=\"\";for(n=\"\",e=0;e<this.token.header.length;e++)n+=this.renderer.tablecell(this.inline.output(this.token.header[e]),{header:!0,align:this.token.align[e]});for(i+=this.renderer.tablerow(n),e=0;e<this.token.cells.length;e++){for(t=this.token.cells[e],n=\"\",r=0;r<t.length;r++)n+=this.renderer.tablecell(this.inline.output(t[r]),{header:!1,align:this.token.align[r]});o+=this.renderer.tablerow(n)}return this.renderer.table(i,o);case\"blockquote_start\":for(o=\"\";\"blockquote_end\"!==this.next().type;)o+=this.tok();return this.renderer.blockquote(o);case\"list_start\":o=\"\";for(var a=this.token.ordered,s=this.token.start;\"list_end\"!==this.next().type;)o+=this.tok();return this.renderer.list(o,a,s);case\"list_item_start\":for(o=\"\",this.token.task&&(o+=this.renderer.checkbox(this.token.checked));\"list_item_end\"!==this.next().type;)o+=\"text\"===this.token.type?this.parseText():this.tok();return this.renderer.listitem(o);case\"loose_item_start\":for(o=\"\";\"list_item_end\"!==this.next().type;)o+=this.tok();return this.renderer.listitem(o);case\"html\":return this.renderer.html(this.token.text);case\"paragraph\":return this.renderer.paragraph(this.inline.output(this.token.text));case\"text\":return this.renderer.paragraph(this.parseText())}};var m={},b=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;u.exec=u,h.options=h.setOptions=function(e){return p(h.defaults,e),h},h.getDefaults=function(){return{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:\"\",highlight:null,langPrefix:\"language-\",mangle:!0,pedantic:!1,renderer:new i,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tables:!0,xhtml:!1}},h.defaults=h.getDefaults(),h.Parser=a,h.parser=a.parse,h.Renderer=i,h.TextRenderer=o,h.Lexer=n,h.lexer=n.lex,h.InlineLexer=r,h.inlineLexer=r.output,h.parse=h,e.exports=h}(this||\"undefined\"!=typeof window&&window)}).call(t,n(10))},function(e,t){e.exports={name:\"valine\",version:\"1.3.4\",description:\"A simple comment system based on Leancloud.\",main:\"/dist/Valine.min.js\",author:\"xCss <xioveliu@gmail.com> (https://github.com/xCss)\",scripts:{test:\"webpack\",build:\"webpack\",dev:\"webpack-dev-server --env.dev\",clean:\"rm -rf dist/* \"},keywords:[\"simple\",\"easy-to-use\",\"fast-and-safe\",\"comment-system\"],license:\"GPL-2.0\",repository:{type:\"git\",url:\"git+https://github.com/xcss/Valine.git\"},homepage:\"https://github.com/xcss/Valine#readme\",devDependencies:{autoprefixer:\"^7.1.1\",autosize:\"^4.0.2\",\"babel-core\":\"^6.25.0\",\"babel-loader\":\"^7.1.1\",\"babel-polyfill\":\"^6.23.0\",\"babel-preset-es2015\":\"^6.24.1\",\"babel-preset-stage-0\":\"^6.24.1\",\"blueimp-md5\":\"^2.8.0\",\"css-loader\":\"^0.28.4\",\"exports-loader\":\"^0.6.3\",\"file-loader\":\"^0.11.2\",hanabi:\"^0.4.0\",marked:\"^0.4.0\",\"node-sass\":\"^4.9.2\",\"postcss-loader\":\"^2.0.5\",\"sass-loader\":\"^6.0.3\",\"style-loader\":\"^0.18.2\",\"url-loader\":\"^0.6.2\",webpack:\"^2.6.1\",\"webpack-dev-server\":\"^2.4.5\"}}},function(e,t){var n;n=function(){return this}();try{n=n||Function(\"return this\")()||(0,eval)(\"this\")}catch(e){\"object\"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports={grinning:\"😀\",smiley:\"😃\",smile:\"😄\",grin:\"😁\",laughing:\"😆\",sweat_smile:\"😅\",joy:\"😂\",blush:\"😊\",innocent:\"😇\",wink:\"😉\",relieved:\"😌\",heart_eyes:\"😍\",kissing_heart:\"😘\",kissing:\"😗\",kissing_smiling_eyes:\"😙\",kissing_closed_eyes:\"😚\",yum:\"😋\",stuck_out_tongue_winking_eye:\"😜\",stuck_out_tongue_closed_eyes:\"😝\",stuck_out_tongue:\"😛\",sunglasses:\"😎\",smirk:\"😏\",unamused:\"😒\",disappointed:\"😞\",pensive:\"😔\",worried:\"😟\",confused:\"😕\",persevere:\"😣\",confounded:\"😖\",tired_face:\"😫\",weary:\"😩\",angry:\"😠\",rage:\"😡\",no_mouth:\"😶\",neutral_face:\"😐\",expressionless:\"😑\",hushed:\"😯\",frowning:\"😦\",anguished:\"😧\",open_mouth:\"😮\",astonished:\"😲\",dizzy_face:\"😵\",flushed:\"😳\",scream:\"😱\",fearful:\"😨\",cold_sweat:\"😰\",cry:\"😢\",disappointed_relieved:\"😥\",sob:\"😭\",sweat:\"😓\",sleepy:\"😪\",sleeping:\"😴\",mask:\"😷\",smiling_imp:\"😈\",smiley_cat:\"😺\",smile_cat:\"😸\",joy_cat:\"😹\",heart_eyes_cat:\"😻\",smirk_cat:\"😼\",kissing_cat:\"😽\",scream_cat:\"🙀\",crying_cat_face:\"😿\",pouting_cat:\"😾\",cat:\"🐱\",mouse:\"🐭\",cow:\"🐮\",monkey_face:\"🐵\",hand:\"✋\",fist:\"✊\",v:\"✌️\",point_up:\"👆\",point_down:\"👇\",point_left:\"👈\",point_right:\"👉\",facepunch:\"👊\",wave:\"👋\",clap:\"👏\",open_hands:\"👐\",\"+1\":\"👍\",\"-1\":\"👎\",ok_hand:\"👌\",pray:\"🙏\",ear:\"👂\",eyes:\"👀\",nose:\"👃\",lips:\"👄\",tongue:\"👅\",heart:\"❤️\",cupid:\"💘\",sparkling_heart:\"💖\",star:\"⭐️\",sparkles:\"✨\",zap:\"⚡️\",sunny:\"☀️\",cloud:\"☁️\",snowflake:\"❄️\",umbrella:\"☔️\",coffee:\"☕️\",airplane:\"✈️\",anchor:\"⚓️\",watch:\"⌚️\",phone:\"☎️\",hourglass:\"⌛️\",email:\"✉️\",scissors:\"✂️\",black_nib:\"✒️\",pencil2:\"✏️\",x:\"❌\",recycle:\"♻️\",white_check_mark:\"✅\",negative_squared_cross_mark:\"❎\",m:\"Ⓜ️\",i:\"ℹ️\",tm:\"™️\",copyright:\"©️\",registered:\"®️\"}},function(e,t,n){var r=n(13);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]);var i={};i.transform=void 0;n(15)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){t=e.exports=n(14)(!1),t.push([e.i,'.v *{-webkit-box-sizing:border-box;box-sizing:border-box;line-height:2;color:#555;-webkit-transition:all .3s ease;transition:all .3s ease}.v hr{margin:.825rem 0;border-color:#f6f6f6;border-style:dashed}.v.hide-avatar .vimg{display:none}.v a{position:relative;cursor:pointer;color:#1abc9c;display:inline-block}.v a:before{content:\"\";position:absolute;width:0;right:0;bottom:0;height:1px;background:#1abc9c;-webkit-transition:width .3s ease;transition:width .3s ease}.v a:hover{color:#d7191a}.v a:hover:before{width:100%;left:0;right:auto}.v code,.v pre{background-color:#f6f6f6;color:#555;padding:.2em .4em;border-radius:3px;font-size:85%;margin:0;font-family:Source Code Pro,courier new,Input Mono,PT Mono,SFMono-Regular,Consolas,Monaco,Menlo,PingFang SC,Liberation Mono,Microsoft YaHei,Courier，monospace}.v pre{padding:10px;overflow:auto;line-height:1.45}.v pre code{padding:0;background:transparent;white-space:pre-wrap;word-break:keep-all}.v blockquote{color:#666;margin:.5rem 0;padding:0 0 0 1rem;border-left:8px solid hsla(0,0%,93%,.5)}.v .vinput{border:none;resize:none;outline:none;padding:10px 5px;max-width:100%;font-size:.775rem}.v input[type=checkbox],.v input[type=radio]{display:inline-block;vertical-align:middle;margin-top:-2px}.v .vwrap{border:1px solid #f0f0f0;border-radius:4px;margin-bottom:10px;overflow:hidden;position:relative;padding:10px}.v .vwrap input{background:transparent}.v .vwrap .vedit{position:relative;padding-top:10px}.v .vwrap .vedit .vctrl{text-align:right;font-size:12px}.v .vwrap .vedit .vctrl span{padding:10px;display:inline-block;vertical-align:middle;cursor:pointer}.v .vwrap .vedit .vemojis{display:none;font-size:18px;text-align:justify;max-height:145px;overflow:auto;margin-bottom:10px;-webkit-box-shadow:0 0 1px #f0f0f0;box-shadow:0 0 1px #f0f0f0}.v .vwrap .vedit .vemojis i{font-style:normal;padding:7px 0;width:38px;cursor:pointer;text-align:center;display:inline-block;vertical-align:middle}.v .vwrap .vedit .vpreview{padding:7px;-webkit-box-shadow:0 0 1px #f0f0f0;box-shadow:0 0 1px #f0f0f0}.v .vwrap .vedit .vpreview frame,.v .vwrap .vedit .vpreview iframe,.v .vwrap .vedit .vpreview img{max-width:100%;border:none}.v .vwrap .vheader .vinput{width:33.33%;border-bottom:1px dashed #dedede}.v .vwrap .vheader.item2 .vinput{width:50%}.v .vwrap .vheader.item1 .vinput{width:100%}.v .vwrap .vheader .vinput:focus{border-bottom-color:#eb5055}@media screen and (max-width:520px){.v .vwrap .vheader.item2 .vinput,.v .vwrap .vheader .vinput{width:100%}}.v .vwrap .vcontrol{font-size:0;padding-top:15px}.v .vwrap .vcontrol .col{display:inline-block;font-size:.725rem;vertical-align:middle;color:#ccc}.v .vwrap .vcontrol .col.text-right{text-align:right}.v .vwrap .vcontrol .col svg{margin-right:2px;overflow:hidden;fill:currentColor;vertical-align:middle}.v .vwrap .vcontrol .col.col-20{width:20%}.v .vwrap .vcontrol .col.col-40{width:40%}.v .vwrap .vcontrol .col.col-60{width:60%}.v .vwrap .vcontrol .col.col-80{width:80%}.v .vwrap .vcontrol .col.split{width:50%}.v .vwrap .vmark{position:absolute;background:rgba(0,0,0,.65);width:100%;height:100%;left:0;top:0}.v .vwrap .vmark .valert{padding-top:3rem}.v .vwrap .vmark .valert .vtext{color:#fff;padding:1rem 0}.v .vwrap .vmark .valert .vcode{width:4.6875rem;border-radius:.3125rem;padding:.5rem;background:#dedede}.v .vwrap .vmark .valert .vcode:focus{border-color:#3090e4;background-color:#fff}@media screen and (max-width:720px){.v .vwrap .vmark .valert{padding-top:5.5rem}.v .vwrap .vmark .valert .vtext{color:#fff;padding:1rem 0}}.v .power{color:#999;padding:.5rem 0}.v .power,.v .power a{font-size:.75rem}.v .vinfo{font-size:0;padding:5px}.v .vinfo .col{font-size:.875rem;display:inline-block;width:50%;vertical-align:middle}.v .vinfo .vcount .vnum{font-weight:600;font-size:1.25rem}.v a{text-decoration:none;color:#555}.v a:hover{color:#222}.v ol,.v ul{padding:0;margin-left:1.25rem}.v .txt-center{text-align:center}.v .txt-right{text-align:right}.v .pd5{padding:5px}.v .pd10{padding:10px}.v .veditor{width:100%;min-height:8.75rem;font-size:.875rem;background:transparent;resize:vertical;-webkit-transition:all .25s ease;transition:all .25s ease}.v .vbtn{-webkit-transition-duration:.4s;transition-duration:.4s;text-align:center;color:#313131;border:1px solid #ededed;border-radius:.3rem;display:inline-block;background:#ededed;margin-bottom:0;font-weight:400;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;white-space:nowrap;padding:.5rem 1.25rem;font-size:.875rem;line-height:1.42857143;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:none}.v .vbtn+.vbtn{margin-left:1.25rem}.v .vbtn:active,.v .vbtn:hover{color:#3090e4;border-color:#3090e4;background-color:#fff}.v .vempty{padding:1.25rem;text-align:center;color:#999}.v .vlist{width:100%}.v .vlist .vcard{padding-top:1.5rem;position:relative;display:block}.v .vlist .vcard:after{content:\"\";clear:both;display:block}.v .vlist .vcard .vimg{width:3.125rem;height:3.125rem;float:left;border-radius:50%;margin-right:.7525rem;border:1px solid #f5f5f5;padding:.125rem}@media screen and (max-width:720px){.v .vlist .vcard .vimg{width:2.5rem;height:2.5rem}}.v .vlist .vcard .vhead{line-height:1.5;margin-top:0}.v .vlist .vcard .vhead .vnick{position:relative;font-size:.875rem;font-weight:500;margin-right:.875rem;cursor:pointer;color:#1abc9c;text-decoration:none;display:inline-block}.v .vlist .vcard .vhead .vnick:before{content:\"\";position:absolute;width:0;right:0;bottom:0;height:1px;background:#1abc9c;-webkit-transition:width .3s ease;transition:width .3s ease}.v .vlist .vcard .vhead .vnick:hover{color:#d7191a}.v .vlist .vcard .vhead .vnick:hover:before{width:100%;left:0;right:auto}.v .vlist .vcard .vhead .vsys{display:inline-block;padding:.2rem .5rem;background:#ededed;color:#b3b1b1;font-size:.75rem;border-radius:.2rem;margin-right:.3rem}@media screen and (max-width:520px){.v .vlist .vcard .vhead .vsys{display:none}}.v .vlist .vcard .vh{overflow:hidden;padding-bottom:.5rem;border-bottom:1px dashed #f5f5f5}.v .vlist .vcard .vh .vtime{color:#b3b3b3;font-size:.75rem;margin-right:.875rem}.v .vlist .vcard .vh .vmeta{line-height:1;position:relative}.v .vlist .vcard .vh .vmeta .vat{font-size:.8125rem;color:#ef2f11;cursor:pointer;float:right}.v .vlist .vcard .vcontent{word-wrap:break-word;word-break:break-all;text-align:justify;color:#4a4a4a;font-size:.875rem;line-height:2;position:relative;margin-bottom:.75rem;padding-top:.625rem}.v .vlist .vcard .vcontent frame,.v .vlist .vcard .vcontent iframe,.v .vlist .vcard .vcontent img{max-width:100%;border:none}.v .vlist .vcard .vcontent.expand{cursor:pointer;max-height:11.25rem;overflow:hidden}.v .vlist .vcard .vcontent.expand:before{display:block;content:\"\";position:absolute;width:100%;left:0;top:0;bottom:3.15rem;pointer-events:none;background:-webkit-gradient(linear,left top,left bottom,from(hsla(0,0%,100%,0)),to(hsla(0,0%,100%,.9)));background:linear-gradient(180deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.9))}.v .vlist .vcard .vcontent.expand:after{display:block;content:\"Click on expand\";text-align:center;color:#828586;position:absolute;width:100%;height:3.15rem;line-height:3.15rem;left:0;bottom:0;pointer-events:none;background:hsla(0,0%,100%,.9)}.v .vlist .vcard .vquote{color:#666;margin-top:1rem;padding-left:1rem;border-left:1px dashed hsla(0,0%,93%,.5)}.v .vlist .vcard .vquote .vimg{width:2.225rem;height:2.225rem}.v .vpage .vmore{margin:1rem 0}.v .clear{content:\"\";display:block;clear:both}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@-webkit-keyframes pulse{50%{background:#dcdcdc}}@keyframes pulse{50%{background:#dcdcdc}}.v .vloading{position:relative;padding:20px;display:block;height:80px}.v .vloading:before{-webkit-box-sizing:border-box;box-sizing:border-box;content:\"\";position:absolute;display:inline-block;top:20px;left:50%;margin-left:-20px;width:40px;height:40px;border:6px double #a0a0a0;border-top-color:transparent;border-bottom-color:transparent;border-radius:50%;-webkit-animation:spin 1s infinite linear;animation:spin 1s infinite linear}',\"\"])},function(e,t){function n(e,t){var n=e[1]||\"\",i=e[3];if(!i)return n;if(t&&\"function\"==typeof btoa){var o=r(i);return[n].concat(i.sources.map(function(e){return\"/*# sourceURL=\"+i.sourceRoot+e+\" */\"})).concat([o]).join(\"\\n\")}return[n].join(\"\\n\")}function r(e){return\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+\" */\"}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var r=n(t,e);return t[2]?\"@media \"+t[2]+\"{\"+r+\"}\":r}).join(\"\")},t.i=function(e,n){\"string\"==typeof e&&(e=[[null,e,\"\"]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];\"number\"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var a=e[i];\"number\"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]=\"(\"+a[2]+\") and (\"+n+\")\"),t.push(a))}},t}},function(e,t,n){function r(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=h[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(d(r.parts[o],t))}else{for(var a=[],o=0;o<r.parts.length;o++)a.push(d(r.parts[o],t));h[r.id]={id:r.id,refs:1,parts:a}}}}function i(e,t){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=t.base?o[0]+t.base:o[0],s=o[1],l=o[2],c=o[3],d={css:s,media:l,sourceMap:c};r[a]?r[a].parts.push(d):n.push(r[a]={id:a,parts:[d]})}return n}function o(e,t){var n=g(e.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var r=x[x.length-1];if(\"top\"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),x.push(t);else{if(\"bottom\"!==e.insertAt)throw new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");n.appendChild(t)}}function a(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=x.indexOf(e);t>=0&&x.splice(t,1)}function s(e){var t=document.createElement(\"style\");return e.attrs.type=\"text/css\",c(t,e.attrs),o(e,t),t}function l(e){var t=document.createElement(\"link\");return e.attrs.type=\"text/css\",e.attrs.rel=\"stylesheet\",c(t,e.attrs),o(e,t),t}function c(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function d(e,t){var n,r,i,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var c=b++;n=m||(m=s(t)),r=u.bind(null,n,c,!1),i=u.bind(null,n,c,!0)}else e.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=l(t),r=f.bind(null,n,t),i=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(t),r=p.bind(null,n),i=function(){a(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}function u(e,t,n,r){var i=n?\"\":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function p(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute(\"media\",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function f(e,t,n){var r=n.css,i=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||o)&&(r=y(r)),i&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+\" */\");var a=new Blob([r],{type:\"text/css\"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}var h={},v=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),g=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e.call(this,n)),t[n]}}(function(e){return document.querySelector(e)}),m=null,b=0,x=[],y=n(16);e.exports=function(e,t){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");t=t||{},t.attrs=\"object\"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=v()),t.insertInto||(t.insertInto=\"head\"),t.insertAt||(t.insertAt=\"bottom\");var n=i(e,t);return r(n,t),function(e){for(var o=[],a=0;a<n.length;a++){var s=n[a],l=h[s.id];l.refs--,o.push(l)}if(e){r(i(e,t),t)}for(var a=0;a<o.length;a++){var l=o[a];if(0===l.refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete h[l.id]}}}};var w=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join(\"\\n\")}}()},function(e,t){e.exports=function(e){var t=\"undefined\"!=typeof window&&window.location;if(!t)throw new Error(\"fixUrls requires window.location\");if(!e||\"string\"!=typeof e)return e;var n=t.protocol+\"//\"+t.host,r=n+t.pathname.replace(/\\/[^\\/]*$/,\"/\");return e.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,function(e,t){var i=t.trim().replace(/^\"(.*)\"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(i))return e;var o;return o=0===i.indexOf(\"//\")?i:0===i.indexOf(\"/\")?n+i:r+i.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(o)+\")\"})}},function(e,t,n){n(12),e.exports=n(1)}])});","date":"2020-07-16T15:29:26.803Z","updated":"2020-07-16T15:29:26.762Z","path":"js/src/Valine-1.3.4.min.js","layout":"false","title":"","comments":1,"_id":"ckdi4ck87007pz4ejbbpv9b1v","content":"/*!\n * Valine v1.3.4\n * (c) 2017-2018 xCss\n * Released under the GPL-2.0 License.\n */\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.Valine=t():e.Valine=t()}(this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=17)}([function(e,t,n){var r,i,o;/*!\n\tautosize 4.0.2\n\tlicense: MIT\n\thttp://www.jacklmoore.com/autosize\n*/\n!function(n,a){i=[e,t],r=a,void 0!==(o=\"function\"==typeof r?r.apply(t,i):r)&&(e.exports=o)}(0,function(e,t){\"use strict\";function n(e){function t(t){var n=e.style.width;e.style.width=\"0px\",e.offsetWidth,e.style.width=n,e.style.overflowY=t}function n(e){for(var t=[];e&&e.parentNode&&e.parentNode instanceof Element;)e.parentNode.scrollTop&&t.push({node:e.parentNode,scrollTop:e.parentNode.scrollTop}),e=e.parentNode;return t}function r(){if(0!==e.scrollHeight){var t=n(e),r=document.documentElement&&document.documentElement.scrollTop;e.style.height=\"\",e.style.height=e.scrollHeight+s+\"px\",l=e.clientWidth,t.forEach(function(e){e.node.scrollTop=e.scrollTop}),r&&(document.documentElement.scrollTop=r)}}function i(){r();var n=Math.round(parseFloat(e.style.height)),i=window.getComputedStyle(e,null),o=\"content-box\"===i.boxSizing?Math.round(parseFloat(i.height)):e.offsetHeight;if(o<n?\"hidden\"===i.overflowY&&(t(\"scroll\"),r(),o=\"content-box\"===i.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight):\"hidden\"!==i.overflowY&&(t(\"hidden\"),r(),o=\"content-box\"===i.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight),c!==o){c=o;var s=a(\"autosize:resized\");try{e.dispatchEvent(s)}catch(e){}}}if(e&&e.nodeName&&\"TEXTAREA\"===e.nodeName&&!o.has(e)){var s=null,l=null,c=null,d=function(){e.clientWidth!==l&&i()},u=function(t){window.removeEventListener(\"resize\",d,!1),e.removeEventListener(\"input\",i,!1),e.removeEventListener(\"keyup\",i,!1),e.removeEventListener(\"autosize:destroy\",u,!1),e.removeEventListener(\"autosize:update\",i,!1),Object.keys(t).forEach(function(n){e.style[n]=t[n]}),o.delete(e)}.bind(e,{height:e.style.height,resize:e.style.resize,overflowY:e.style.overflowY,overflowX:e.style.overflowX,wordWrap:e.style.wordWrap});e.addEventListener(\"autosize:destroy\",u,!1),\"onpropertychange\"in e&&\"oninput\"in e&&e.addEventListener(\"keyup\",i,!1),window.addEventListener(\"resize\",d,!1),e.addEventListener(\"input\",i,!1),e.addEventListener(\"autosize:update\",i,!1),e.style.overflowX=\"hidden\",e.style.wordWrap=\"break-word\",o.set(e,{destroy:u,update:i}),function(){var t=window.getComputedStyle(e,null);\"vertical\"===t.resize?e.style.resize=\"none\":\"both\"===t.resize&&(e.style.resize=\"horizontal\"),s=\"content-box\"===t.boxSizing?-(parseFloat(t.paddingTop)+parseFloat(t.paddingBottom)):parseFloat(t.borderTopWidth)+parseFloat(t.borderBottomWidth),isNaN(s)&&(s=0),i()}()}}function r(e){var t=o.get(e);t&&t.destroy()}function i(e){var t=o.get(e);t&&t.update()}var o=\"function\"==typeof Map?new Map:function(){var e=[],t=[];return{has:function(t){return e.indexOf(t)>-1},get:function(n){return t[e.indexOf(n)]},set:function(n,r){-1===e.indexOf(n)&&(e.push(n),t.push(r))},delete:function(n){var r=e.indexOf(n);r>-1&&(e.splice(r,1),t.splice(r,1))}}}(),a=function(e){return new Event(e,{bubbles:!0})};try{new Event(\"test\")}catch(e){a=function(e){var t=document.createEvent(\"Event\");return t.initEvent(e,!0,!1),t}}var s=null;\"undefined\"==typeof window||\"function\"!=typeof window.getComputedStyle?(s=function(e){return e},s.destroy=function(e){return e},s.update=function(e){return e}):(s=function(e,t){return e&&Array.prototype.forEach.call(e.length?e:[e],function(e){return n(e)}),e},s.destroy=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],r),e},s.update=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],i),e}),t.default=s,e.exports=t.default})},function(e,t,n){\"use strict\";function r(e){var t=this;return!!e&&t.init(e),t}function i(e){return new r(e)}var o=n(9).version,a=n(6),s=n(8),l=n(0),c=n(5),d=n(3),u=n(4),p=n(2),f=n(7),h={comment:\"\",nick:\"Anonymous\",mail:\"\",link:\"\",ua:navigator.userAgent,url:\"\"},v={\"zh-cn\":{head:{nick:\"昵称\",mail:\"邮箱\",link:\"网址(http://)\"},tips:{comments:\"评论\",sofa:\"快来做第一个评论的人吧~\",busy:\"还在提交中，请稍候...\",again:\"这么简单也能错，也是没谁了.\"},ctrl:{reply:\"回复\",ok:\"好的\",sure:\"确认\",cancel:\"取消\",confirm:\"确认\",continue:\"继续\",more:\"查看更多...\",try:\"再试试?\"},error:{99:\"初始化失败，请检查init中的`el`元素.\",100:\"初始化失败，请检查你的AppId和AppKey.\",401:\"未经授权的操作，请检查你的AppId和AppKey.\",403:\"访问被api域名白名单拒绝，请检查你的安全域名设置.\"},timeago:{seconds:\"秒前\",minutes:\"分钟前\",hours:\"小时前\",days:\"天前\",now:\"刚刚\"}},en:{head:{nick:\"NickName\",mail:\"E-Mail\",link:\"Website(http://)\"},tips:{comments:\"Comments\",sofa:\"No comments yet.\",busy:\"Submit is busy, please wait...\",again:\"Sorry, this is a wrong calculation.\"},ctrl:{reply:\"Reply\",ok:\"Ok\",sure:\"Sure\",cancel:\"Cancel\",confirm:\"Confirm\",continue:\"Continue\",more:\"Load More...\",try:\"Once More?\"},error:{99:\"Initialization failed, Please check the `el` element in the init method.\",100:\"Initialization failed, Please check your appId and appKey.\",401:\"Unauthorized operation, Please check your appId and appKey.\",403:\"Access denied by api domain white list, Please check your security domain.\"},timeago:{seconds:\"seconds ago\",minutes:\"minutes ago\",hours:\"hours ago\",days:\"days ago\",now:\"just now\"}}},g={cdn:\"https://gravatar.loli.net/avatar/\",ds:[\"mp\",\"identicon\",\"monsterid\",\"wavatar\",\"robohash\",\"retro\",\"\"],params:\"\",hide:!1},m=[\"nick\",\"mail\",\"link\"],b=Storage&&localStorage&&localStorage instanceof Storage&&localStorage,x=location.pathname.replace(/index\\.html?$/,\"\");r.prototype.init=function(e){if(\"undefined\"==typeof document)return void console;var t=this;try{var n=e.lang||\"\",r=e.langMode||\"\",i=g.ds,a=e.avatar,l=e.avatarForce,c=e.avatar_cdn||\"\";n&&r&&t.installLocale(n,r),t.locale=t.locale||v[e.lang||\"zh-cn\"],t.notify=e.notify||!1,t.verify=e.verify||!1;var d=l?\"&q=\"+Math.random().toString(32).substring(2):\"\";g.params=\"?d=\"+(i.indexOf(a)>-1?a:\"mp\")+\"&v=\"+o+d,g.hide=\"hide\"===a,g.cdn=!!c&&c||g.cdn,x=e.path||x;var p=Number(e.pageSize||10);if(e.pageSize=isNaN(p)?10:p<1?10:p,s.setOptions({renderer:new s.Renderer,highlight:!1===e.highlight?null:f,gfm:!0,tables:!0,breaks:!0,pedantic:!1,sanitize:!1,smartLists:!0,smartypants:!0}),!AV)return void setTimeout(function(){t.init(e)},20);var h=e.app_id||e.appId,b=e.app_key||e.appKey,y=(e.region||\"cn\").toLowerCase(),k=[\"cn\",\"us\"];if(y=k.indexOf(y)>-1?y:k[0],!h||!b)throw 99;AV.applicationId&&delete AV._config.applicationId||(AV.applicationId=null),AV.applicationKey&&delete AV._config.applicationKey||(AV.applicationKey=null),AV.init({appId:h,appKey:b,region:y});for(var _=u.findAll(document,\".valine-comment-count\"),A=0,O=_.length;A<O;A++)!function(e,n){var r=_[e];if(r){var i=u.attr(r,\"data-xid\");i&&t.Q(i).count().then(function(e){r.innerText=e}).catch(function(e){r.innerText=0})}}(A);e.visitor&&w.add(AV.Object.extend(\"Counter\"));var S=e.el||null,$=u.findAll(document,S);if(!(S=S instanceof HTMLElement?S:$[$.length-1]||null))return;t.el=S,t.el.classList.add(\"v\"),g.hide&&t.el.classList.add(\"hide-avatar\"),e.meta=(e.guest_info||e.meta||m).filter(function(e){return m.indexOf(e)>-1});var E=(0==e.meta.length?m:e.meta).map(function(e){var n=\"mail\"==e?\"email\":\"text\";return m.indexOf(e)>-1?'<input name=\"'+e+'\" placeholder=\"'+t.locale.head[e]+'\" class=\"v'+e+' vinput\" type=\"'+n+'\">':\"\"});t.placeholder=e.placeholder||\"Just Go Go\",t.el.innerHTML='<div class=\"vwrap\"><div class=\"vheader item'+E.length+'\">'+E.join(\"\")+'</div><div class=\"vedit\"><textarea id=\"veditor\" class=\"veditor vinput\" placeholder=\"'+t.placeholder+'\"></textarea><div class=\"vctrl\"><span class=\"vemoji-btn\">Emoji</span> | <span class=\"vpreview-btn\">Preview</span></div><div class=\"vemojis\" style=\"display:none;\"></div><div class=\"vinput vpreview\" style=\"display:none;\"></div></div><div class=\"vcontrol\"><div class=\"col col-20\" title=\"Markdown is supported\"><a href=\"https://segmentfault.com/markdown\" target=\"_blank\"><svg class=\"markdown\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M14.85 3H1.15C.52 3 0 3.52 0 4.15v7.69C0 12.48.52 13 1.15 13h13.69c.64 0 1.15-.52 1.15-1.15v-7.7C16 3.52 15.48 3 14.85 3zM9 11H7V8L5.5 9.92 4 8v3H2V5h2l1.5 2L7 5h2v6zm2.99.5L9.5 8H11V5h2v3h1.5l-2.51 3.5z\"></path></svg></a></div><div class=\"col col-80 text-right\"><button type=\"button\" title=\"Cmd|Ctrl+Enter\" class=\"vsubmit vbtn\">'+t.locale.ctrl.reply+'</button></div></div><div style=\"display:none;\" class=\"vmark\"></div></div><div class=\"vinfo\" style=\"display:none;\"><div class=\"vcount col\"></div></div><div class=\"vlist\"></div><div class=\"vempty\" style=\"display:none;\"></div><div class=\"vpage txt-center\"></div><div class=\"info\"><div class=\"power txt-right\">Powered By <a href=\"https://valine.js.org\" target=\"_blank\">Valine</a><br>v'+o+\"</div></div>\";var C=u.find(t.el,\".vempty\");t.nodata={show:function(e){return C.innerHTML=e||t.locale.tips.sofa,u.attr(C,\"style\",\"display:block;\"),t},hide:function(){return u.attr(C,\"style\",\"display:none;\"),t}};var M=u.create(\"div\",\"class\",\"vloading\"),L=u.find(t.el,\".vlist\");t.loading={show:function(e){var n=u.findAll(L,\".vcard\");return e?L.insertBefore(M,n[0]):L.appendChild(M),t.nodata.hide(),t},hide:function(){var e=u.find(L,\".vloading\");return e&&u.remove(L,e),0===u.findAll(L,\".vcard\").length&&t.nodata.show(),t}};var T=u.find(t.el,\".vmark\");t.alert={show:function(e){T.innerHTML='<div class=\"valert txt-center\"><div class=\"vtext\">'+(e&&e.text||1)+'</div><div class=\"vbtns\"></div></div>';var n=u.find(T,\".vbtns\"),r='<button class=\"vcancel vbtn\">'+(e&&e.ctxt||t.locale.ctrl.cancel)+\"</button>\",i='<button class=\"vsure vbtn\">'+(e&&e.otxt||t.locale.ctrl.sure)+\"</button>\";if(n.innerHTML=\"\"+r+(e&&e.type&&i),u.on(\"click\",u.find(T,\".vcancel\"),function(e){t.alert.hide()}),u.attr(T,\"style\",\"display:block;\"),e&&e.type){var o=u.find(T,\".vsure\");u.on(\"click\",o,function(n){t.alert.hide(),e.cb&&e.cb()})}return t},hide:function(){return u.attr(T,\"style\",\"display:none;\"),t}},t.bind(e)}catch(e){t.ErrorHandler(e)}return t};var y=function(e,t){var n=new e,r=new AV.ACL;r.setPublicReadAccess(!0),r.setPublicWriteAccess(!0),n.setACL(r),n.set(\"url\",t.url),n.set(\"xid\",t.xid),n.set(\"title\",t.title),n.set(\"time\",1),n.save().then(function(e){u.find(t.el,\".leancloud-visitors-count\").innerText=1}).catch(function(e){})},w={add:function(e){var t=u.findAll(document,\".leancloud_visitors,.leancloud-visitors\");if(t.length){var n=t[0],r=u.attr(n,\"id\"),i=u.attr(n,\"data-flag-title\"),o=encodeURI(r),a={el:n,url:r,xid:o,title:i};if(decodeURI(r)===decodeURI(x)){var s=new AV.Query(e);s.equalTo(\"url\",r),s.find().then(function(t){if(t.length>0){var r=t[0];r.increment(\"time\"),r.save().then(function(e){u.find(n,\".leancloud-visitors-count\").innerText=e.get(\"time\")}).catch(function(e){})}else y(e,a)}).catch(function(t){101==t.code&&y(e,a)})}else w.show(e,t)}},show:function(e,t){u.each(t,function(e,t){var n=u.find(t,\".leancloud-visitors-count\");n&&(n.innerText=0)});var n=[];for(var r in t)t.hasOwnProperty(r)&&n.push(u.attr(t[r],\"id\"));if(n.length){var i=new AV.Query(e);i.containedIn(\"url\",n),i.find().then(function(e){e.length>0&&u.each(e,function(e,t){var n=t.get(\"url\"),r=t.get(\"time\"),i=u.find(document,'.leancloud_visitors[id=\"'+n+'\"]')||u.find(document,'.leancloud-visitors[id=\"'+n+'\"]'),o=u.find(i,\".leancloud-visitors-count\");o&&(o.innerText=r)})}).catch(function(e){})}}};r.prototype.Q=function(e){if(1==arguments.length){var t=new AV.Query(\"Comment\");t.doesNotExist(\"rid\");var n=new AV.Query(\"Comment\");n.equalTo(\"rid\",\"\");var r=AV.Query.or(t,n);return r.equalTo(\"url\",decodeURI(e)),r.addDescending(\"createdAt\"),r.addDescending(\"insertedAt\"),r}var i=JSON.stringify(arguments[1]).replace(/(\\[|\\])/g,\"\"),o=\"select * from Comment where rid in (\"+i+\") order by -createdAt,-createdAt\";return AV.Query.doCloudQuery(o)},r.prototype.ErrorHandler=function(e){var t=this;if(t.el&&t.loading.hide().nodata.hide(),\"[object Error]\"==={}.toString.call(e)){var n=e.code||\"\",r=t.locale.error[n],i=r||e.message||e.error||\"\";101==n?t.nodata.show():t.el&&t.nodata.show('<pre style=\"text-align:left;\">Code '+n+\": \"+i+\"</pre>\")||console}else t.el&&t.nodata.show('<pre style=\"text-align:left;\">'+JSON.stringify(e)+\"</pre>\")||console},r.prototype.installLocale=function(e,t){var n=this;return t=t||{},e&&(v[e]=t,n.locale=v[e]||v[\"zh-cn\"]),n},r.prototype.setPath=function(e){return x=e||x,this},r.prototype.bind=function(e){var t=this,n=u.find(t.el,\".vemojis\"),r=u.find(t.el,\".vpreview\"),i=u.find(t.el,\".vemoji-btn\"),o=u.find(t.el,\".vpreview-btn\"),f=p.data;for(var v in f)f.hasOwnProperty(v)&&function(e,r){var i=u.create(\"i\",{name:e,title:e});i.innerHTML=r,n.appendChild(i),u.on(\"click\",i,function(e){var n=u.find(t.el,\".veditor\");E(n,r),y(n)})}(v,f[v]);t.emoji={show:function(){return t.preview.hide(),u.attr(i,\"v\",1),u.removeAttr(o,\"v\"),u.attr(n,\"style\",\"display:block\"),t.emoji},hide:function(){return u.removeAttr(i,\"v\"),u.attr(n,\"style\",\"display:hide\"),t.emoji}},t.preview={show:function(){return t.emoji.hide(),u.attr(o,\"v\",1),u.removeAttr(i,\"v\"),r.innerHTML=h.comment,u.attr(r,\"style\",\"display:block\"),T(),t.preview},hide:function(){return u.removeAttr(o,\"v\"),u.attr(r,\"style\",\"display:none\"),t.preview},empty:function(){return r.innerHtml=\"\",t.preview}};var m=function(e){var t=u.create(\"div\");t.insertAdjacentHTML(\"afterbegin\",e);var n=u.findAll(t,\"*\"),r=[\"INPUT\",\"STYLE\",\"SCRIPT\",\"IFRAME\",\"FRAME\",\"AUDIO\",\"VIDEO\",\"EMBED\",\"META\",\"TITLE\",\"LINK\"],i=function(e,t){var n=u.attr(e,t);n&&u.attr(e,t,n.replace(/(javascript|eval)/gi,\"\"))};return u.each(n,function(e,n){1===n.nodeType&&(r.indexOf(n.nodeName)>-1&&(\"INPUT\"===n.nodeName&&\"checkbox\"===u.attr(n,\"type\")?u.attr(n,\"disabled\",\"disabled\"):u.remove(t,n)),\"A\"===n.nodeName&&i(n,\"href\"),u.clearAttr(n))}),t.innerHTML},y=function(e){var t=e.value||\"\";t=p.parse(t),e.value=t;var n=m(s(t));h.comment=n,r.innerHTML=n,t?l(e):l.destroy(e)};u.on(\"click\",i,function(e){u.attr(i,\"v\")?t.emoji.hide():t.emoji.show()}),u.on(\"click\",o,function(e){u.attr(o,\"v\")?t.preview.hide():t.preview.show()});for(var w=e.meta,_={},A={veditor:\"comment\"},O=0,S=w.length;O<S;O++)A[\"v\"+w[O]]=w[O];for(var $ in A)A.hasOwnProperty($)&&function(){var e=A[$],n=u.find(t.el,\".\"+$);_[e]=n,n&&u.on(\"input change blur\",n,function(t){\"comment\"===e?y(n):h[e]=u.escape(n.value.replace(/(^\\s*)|(\\s*$)/g,\"\"))})}();var E=function(e,t){if(document.selection){e.focus();document.selection.createRange().text=t,e.focus()}else if(e.selectionStart||\"0\"==e.selectionStart){var n=e.selectionStart,r=e.selectionEnd,i=e.scrollTop;e.value=e.value.substring(0,n)+t+e.value.substring(r,e.value.length),e.focus(),e.selectionStart=n+t.length,e.selectionEnd=n+t.length,e.scrollTop=i}else e.focus(),e.value+=t},C=function(e){var n=u.find(t.el,\".vh[rootid='\"+e+\"']\"),r=u.find(n,\".vquote\");return r||(r=u.create(\"div\",\"class\",\"vquote\"),n.appendChild(r)),r},M=function n(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,i=e.pageSize,o=Number(u.find(t.el,\".vnum\").innerText);t.loading.show();var a=t.Q(x);a.limit(i),a.skip((r-1)*i),a.find().then(function(e){for(var a=e.length,s=[],l=0;l<a;l++){var c=e[l];s.push(c.id),L(c,u.find(t.el,\".vlist\"),!0)}t.Q(x,s).then(function(e){for(var t=e&&e.results||[],n=0;n<t.length;n++){var r=t[n];L(r,C(r.get(\"rid\")))}});var d=u.find(t.el,\".vpage\");d.innerHTML=i*r<o?'<button type=\"button\" class=\"vmore vbtn\">'+t.locale.ctrl.more+\"</button>\":\"\";var p=u.find(d,\".vmore\");p&&u.on(\"click\",p,function(e){d.innerHTML=\"\",n(++r)}),t.loading.hide()}).catch(function(e){t.loading.hide().ErrorHandler(e)})};t.Q(x).count().then(function(e){e>0?(u.attr(u.find(t.el,\".vinfo\"),\"style\",\"display:block;\"),u.find(t.el,\".vcount\").innerHTML='<span class=\"vnum\">'+e+\"</span> \"+t.locale.tips.comments,M()):t.loading.hide()}).catch(function(e){t.ErrorHandler(e)});var L=function(e,n,r){var i=u.create(\"div\",{class:\"vcard\",id:e.id}),o=g.hide?\"\":'<img class=\"vimg\" src=\"'+(g.cdn+a(e.get(\"mail\"))+g.params)+'\">',s=e.get(\"ua\")||\"\",l=\"\";if(s){s=d(s);l='<span class=\"vsys\">'+s.browser+\" \"+s.version+\"</span>\"+\" \"+('<span class=\"vsys\">'+s.os+\" \"+s.osVersion+\"</span>\")}var p=\"\",f=e.get(\"link\")||\"\";p=f?'<a class=\"vnick\" rel=\"nofollow\" href=\"'+f+'\" target=\"_blank\" >'+e.get(\"nick\")+\"</a>\":'<span class=\"vnick\">'+e.get(\"nick\")+\"</span>\",i.innerHTML=o+'\\n            <div class=\"vh\" rootid='+(e.get(\"rid\")||e.id)+'>\\n                <div class=\"vhead\">'+p+\" \"+l+'</div>\\n                <div class=\"vmeta\">\\n                    <span class=\"vtime\">'+c(e.get(\"insertedAt\")||e.createdAt,t.locale)+'</span>\\n                    <span rid=\"'+(e.get(\"rid\")||e.id)+'\" cid=\"'+e.id+'\" at=\"@'+u.escape(e.get(\"nick\"))+'\" mail=\"'+e.get(\"mail\")+'\" class=\"vat\">'+t.locale.ctrl.reply+'</span>\\n                </div>\\n                <div class=\"vcontent\">\\n                    '+m(e.get(\"comment\"))+\"\\n                </div>\\n            </div>\";for(var h=u.find(i,\".vat\"),v=u.findAll(i,\"a\"),b=0,x=v.length;b<x;b++){var y=v[b];y&&-1==(u.attr(y,\"class\")||\"\").indexOf(\"at\")&&u.attr(y,{target:\"_blank\",rel:\"nofollow\"})}var w=u.findAll(n,\".vcard\");r?n.appendChild(i):n.insertBefore(i,w[0]);var k=u.find(i,\".vcontent\");k&&z(k),h&&B(h),T()},T=function(){setTimeout(function(){var e=e||\"\";e&&e.Hub.Queue([\"Typeset\",e.Hub])},20)},z=function(e){setTimeout(function(){e.offsetHeight>180&&(e.classList.add(\"expand\"),u.on(\"click\",e,function(t){u.attr(e,\"class\",\"vcontent\")}))})},R={},B=function(e){u.on(\"click\",e,function(t){var n=u.attr(e,\"at\"),r=u.attr(e,\"rid\"),i=u.attr(e,\"cid\"),o=u.attr(e,\"mail\");R={at:u.escape(n)+\" \",rid:r,pid:i,rmail:o},u.attr(_.comment,\"placeholder\",n),_.comment.focus()})};!function(){var e=b&&b.ValineCache;if(e){e=JSON.parse(e);var n=w;for(var r in n){var i=n[r];u.find(t.el,\".v\"+i).value=u.unescape(e[i]),h[i]=e[i]}}}();var j=function(){h.comment=\"\",_.comment.value=\"\",y(_.comment),u.attr(_.comment,\"placeholder\",t.placeholder),R={},t.preview.empty().hide()},I=u.find(t.el,\".vsubmit\"),P=function(e){if(u.attr(I,\"disabled\"))return void t.alert.show({type:0,text:t.locale.tips.busy+'ヾ(๑╹◡╹)ﾉ\"',ctxt:t.locale.ctrl.ok});if(\"\"==h.comment)return void _.comment.focus();h.nick=h.nick||\"Anonymous\";var n=k.mail(h.mail),r=k.link(h.link);h.mail=n.k?n.v:\"\",h.link=r.k?r.v:\"\",t.notify||t.verify?V(Q):Q()},U=function(){var e=new AV.ACL;return e.setPublicReadAccess(!0),e.setPublicWriteAccess(!1),e},Q=function(){u.attr(I,\"disabled\",!0),t.loading.show(!0);var e=AV.Object.extend(\"Comment\"),n=new e;if(h.url=decodeURI(x),h.insertedAt=new Date,R.rid){var r=R.pid||R.rid;n.set(\"rid\",R.rid),n.set(\"pid\",r),h.comment='<a class=\"at\" href=\"#'+r+'\">'+R.at+\"</a>\"+h.comment}for(var i in h)if(h.hasOwnProperty(i)){var o=h[i];n.set(i,o)}n.setACL(U()),n.save().then(function(e){\"Anonymous\"!=h.nick&&b&&b.setItem(\"ValineCache\",JSON.stringify({nick:h.nick,link:h.link,mail:h.mail}));var n=u.find(t.el,\".vnum\"),r=1;try{if(R.rid){var i=u.find(t.el,'.vquote[rid=\"'+R.rid+'\"]')||C(R.rid);L(e,i,!0)}else n?(r=Number(n.innerText)+1,n.innerText=r):u.find(t.el,\".vcount\").innerHTML='<span class=\"num\">1</span> '+t.locale.tips.comments,L(e,u.find(t.el,\".vlist\"));h.mail&&N({username:h.nick,mail:h.mail}),R.at&&R.rmail&&t.notify&&F({username:R.at.replace(\"@\",\"\"),mail:R.rmail}),u.removeAttr(I,\"disabled\"),t.loading.hide(),j()}catch(e){t.ErrorHandler(e)}}).catch(function(e){t.ErrorHandler(e)})},V=function e(n){var r=Math.floor(10*Math.random()+1),i=Math.floor(10*Math.random()+1),o=Math.floor(10*Math.random()+1),a=[\"+\",\"-\",\"x\"],s=a[Math.floor(3*Math.random())],l=a[Math.floor(3*Math.random())],c=\"\"+r+s+i+l+o,d=c+\" = <input class='vcode vinput' >\";t.alert.show({type:1,text:d,ctxt:t.locale.ctrl.cancel,otxt:t.locale.ctrl.ok,cb:function(){var r=+u.find(t.el,\".vcode\").value;new Function(\"return \"+c.replace(/x/g,\"*\"))()===r?n&&n():t.alert.show({type:1,text:\"(T＿T)\"+t.locale.tips.again,ctxt:t.locale.ctrl.cancel,otxt:t.locale.ctrl.try,cb:function(){e(n)}})}})},N=function(e){var t=new AV.User;return t.setUsername(e.username),t.setPassword(e.mail),t.setEmail(e.mail),t.setACL(U()),t.signUp()},F=function e(n){AV.User.requestPasswordReset(n.mail).then(function(e){}).catch(function(r){1==r.code?t.alert.show({type:0,text:\"ヾ(ｏ･ω･)ﾉ At太频繁啦，提醒功能暂时宕机。<br>\"+r.error,ctxt:t.locale.ctrl.ok}):N(n).then(function(t){e(n)}).catch(function(e){})})};u.on(\"click\",I,P),u.on(\"keydown\",document,function(e){e=event||e;var n=e.keyCode||e.which||e.charCode;if(((e.ctrlKey||e.metaKey)&&13===n&&P(),9===n)&&\"veditor\"==(document.activeElement.id||\"\")){e.preventDefault();var r=u.find(t.el,\".veditor\");E(r,\"    \")}})};var k={mail:function(e){return{k:/[\\w-\\.]+@([\\w-]+\\.)+[a-z]{2,3}/.test(e),v:e}},link:function(e){return e=e.length>0&&(/^https?/.test(e)?e:\"http://\"+e),{k:/^https?:\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/.test(e),v:e}}};e.exports=i,e.exports.default=i},function(e,t,n){\"use strict\";var r={data:n(11),parse:function(e){return String(e).replace(/:(.+?):/g,function(e,t){return r.data[t]||e})}};e.exports=r},function(e,t,n){\"use strict\";function r(e){var t=this,n={Trident:e.indexOf(\"Trident\")>-1||e.indexOf(\"NET CLR\")>-1,Presto:e.indexOf(\"Presto\")>-1,WebKit:e.indexOf(\"AppleWebKit\")>-1,Gecko:e.indexOf(\"Gecko/\")>-1,Safari:e.indexOf(\"Safari\")>-1,Chrome:e.indexOf(\"Chrome\")>-1||e.indexOf(\"CriOS\")>-1,IE:e.indexOf(\"MSIE\")>-1||e.indexOf(\"Trident\")>-1,Edge:e.indexOf(\"Edge\")>-1,Firefox:e.indexOf(\"Firefox\")>-1||e.indexOf(\"FxiOS\")>-1,\"Firefox Focus\":e.indexOf(\"Focus\")>-1,Chromium:e.indexOf(\"Chromium\")>-1,Opera:e.indexOf(\"Opera\")>-1||e.indexOf(\"OPR\")>-1,Vivaldi:e.indexOf(\"Vivaldi\")>-1,Yandex:e.indexOf(\"YaBrowser\")>-1,Kindle:e.indexOf(\"Kindle\")>-1||e.indexOf(\"Silk/\")>-1,360:e.indexOf(\"360EE\")>-1||e.indexOf(\"360SE\")>-1,UC:e.indexOf(\"UC\")>-1||e.indexOf(\" UBrowser\")>-1,QQBrowser:e.indexOf(\"QQBrowser\")>-1,QQ:e.indexOf(\"QQ/\")>-1,Baidu:e.indexOf(\"Baidu\")>-1||e.indexOf(\"BIDUBrowser\")>-1,Maxthon:e.indexOf(\"Maxthon\")>-1,Sogou:e.indexOf(\"MetaSr\")>-1||e.indexOf(\"Sogou\")>-1,LBBROWSER:e.indexOf(\"LBBROWSER\")>-1,\"2345Explorer\":e.indexOf(\"2345Explorer\")>-1,TheWorld:e.indexOf(\"TheWorld\")>-1,XiaoMi:e.indexOf(\"MiuiBrowser\")>-1,Quark:e.indexOf(\"Quark\")>-1,Qiyu:e.indexOf(\"Qiyu\")>-1,Wechat:e.indexOf(\"MicroMessenger\")>-1,Taobao:e.indexOf(\"AliApp(TB\")>-1,Alipay:e.indexOf(\"AliApp(AP\")>-1,Weibo:e.indexOf(\"Weibo\")>-1,Douban:e.indexOf(\"com.douban.frodo\")>-1,Suning:e.indexOf(\"SNEBUY-APP\")>-1,iQiYi:e.indexOf(\"IqiyiApp\")>-1,Windows:e.indexOf(\"Windows\")>-1,Linux:e.indexOf(\"Linux\")>-1||e.indexOf(\"X11\")>-1,\"Mac OS\":e.indexOf(\"Macintosh\")>-1,Android:e.indexOf(\"Android\")>-1||e.indexOf(\"Adr\")>-1,Ubuntu:e.indexOf(\"Ubuntu\")>-1,FreeBSD:e.indexOf(\"FreeBSD\")>-1,Debian:e.indexOf(\"Debian\")>-1,\"Windows Phone\":e.indexOf(\"IEMobile\")>-1||e.indexOf(\"Windows Phone\")>-1,BlackBerry:e.indexOf(\"BlackBerry\")>-1||e.indexOf(\"RIM\")>-1,MeeGo:e.indexOf(\"MeeGo\")>-1,Symbian:e.indexOf(\"Symbian\")>-1,iOS:e.indexOf(\"like Mac OS X\")>-1,\"Chrome OS\":e.indexOf(\"CrOS\")>-1,WebOS:e.indexOf(\"hpwOS\")>-1,Mobile:e.indexOf(\"Mobi\")>-1||e.indexOf(\"iPh\")>-1||e.indexOf(\"480\")>-1,Tablet:e.indexOf(\"Tablet\")>-1||e.indexOf(\"Pad\")>-1||e.indexOf(\"Nexus 7\")>-1};n.Mobile&&(n.Mobile=!(e.indexOf(\"iPad\")>-1));var r={engine:[\"WebKit\",\"Trident\",\"Gecko\",\"Presto\"],browser:[\"Safari\",\"Chrome\",\"Edge\",\"IE\",\"Firefox\",\"Firefox Focus\",\"Chromium\",\"Opera\",\"Vivaldi\",\"Yandex\",\"Kindle\",\"360\",\"UC\",\"QQBrowser\",\"QQ\",\"Baidu\",\"Maxthon\",\"Sogou\",\"LBBROWSER\",\"2345Explorer\",\"TheWorld\",\"XiaoMi\",\"Quark\",\"Qiyu\",\"Wechat\",\"Taobao\",\"Alipay\",\"Weibo\",\"Douban\",\"Suning\",\"iQiYi\"],os:[\"Windows\",\"Linux\",\"Mac OS\",\"Android\",\"Ubuntu\",\"FreeBSD\",\"Debian\",\"iOS\",\"Windows Phone\",\"BlackBerry\",\"MeeGo\",\"Symbian\",\"Chrome OS\",\"WebOS\"],device:[\"Mobile\",\"Tablet\"]};t.device=\"PC\";for(var i in r)for(var o=0;o<r[i].length;o++){var a=r[i][o];n[a]&&(t[i]=a)}var s={Windows:function(){var t=e.replace(/^.*Windows NT ([\\d.]+);.*$/,\"$1\");return{6.4:\"10\",6.3:\"8.1\",6.2:\"8\",6.1:\"7\",\"6.0\":\"Vista\",5.2:\"XP\",5.1:\"XP\",\"5.0\":\"2000\"}[t]||t},Android:function(){return e.replace(/^.*Android ([\\d.]+);.*$/,\"$1\")},iOS:function(){return e.replace(/^.*OS ([\\d_]+) like.*$/,\"$1\").replace(/_/g,\".\")},Debian:function(){return e.replace(/^.*Debian\\/([\\d.]+).*$/,\"$1\")},\"Windows Phone\":function(){return e.replace(/^.*Windows Phone( OS)? ([\\d.]+);.*$/,\"$2\")},\"Mac OS\":function(){return e.replace(/^.*Mac OS X ([\\d_]+).*$/,\"$1\").replace(/_/g,\".\")},WebOS:function(){return e.replace(/^.*hpwOS\\/([\\d.]+);.*$/,\"$1\")}};t.osVersion=\"\",s[t.os]&&(t.osVersion=s[t.os](),t.osVersion==e&&(t.osVersion=\"\"));var l={Safari:function(){return e.replace(/^.*Version\\/([\\d.]+).*$/,\"$1\")},Chrome:function(){return e.replace(/^.*Chrome\\/([\\d.]+).*$/,\"$1\").replace(/^.*CriOS\\/([\\d.]+).*$/,\"$1\")},IE:function(){return e.replace(/^.*MSIE ([\\d.]+).*$/,\"$1\").replace(/^.*rv:([\\d.]+).*$/,\"$1\")},Edge:function(){return e.replace(/^.*Edge\\/([\\d.]+).*$/,\"$1\")},Firefox:function(){return e.replace(/^.*Firefox\\/([\\d.]+).*$/,\"$1\").replace(/^.*FxiOS\\/([\\d.]+).*$/,\"$1\")},\"Firefox Focus\":function(){return e.replace(/^.*Focus\\/([\\d.]+).*$/,\"$1\")},Chromium:function(){return e.replace(/^.*Chromium\\/([\\d.]+).*$/,\"$1\")},Opera:function(){return e.replace(/^.*Opera\\/([\\d.]+).*$/,\"$1\").replace(/^.*OPR\\/([\\d.]+).*$/,\"$1\")},Vivaldi:function(){return e.replace(/^.*Vivaldi\\/([\\d.]+).*$/,\"$1\")},Yandex:function(){return e.replace(/^.*YaBrowser\\/([\\d.]+).*$/,\"$1\")},Kindle:function(){return e.replace(/^.*Version\\/([\\d.]+).*$/,\"$1\")},Maxthon:function(){return e.replace(/^.*Maxthon\\/([\\d.]+).*$/,\"$1\")},QQBrowser:function(){return e.replace(/^.*QQBrowser\\/([\\d.]+).*$/,\"$1\")},QQ:function(){return e.replace(/^.*QQ\\/([\\d.]+).*$/,\"$1\")},Baidu:function(){return e.replace(/^.*BIDUBrowser[\\s\\/]([\\d.]+).*$/,\"$1\")},UC:function(){return e.replace(/^.*UC?Browser\\/([\\d.]+).*$/,\"$1\")},Sogou:function(){return e.replace(/^.*SE ([\\d.X]+).*$/,\"$1\").replace(/^.*SogouMobileBrowser\\/([\\d.]+).*$/,\"$1\")},\"2345Explorer\":function(){return e.replace(/^.*2345Explorer\\/([\\d.]+).*$/,\"$1\")},TheWorld:function(){return e.replace(/^.*TheWorld ([\\d.]+).*$/,\"$1\")},XiaoMi:function(){return e.replace(/^.*MiuiBrowser\\/([\\d.]+).*$/,\"$1\")},Quark:function(){return e.replace(/^.*Quark\\/([\\d.]+).*$/,\"$1\")},Qiyu:function(){return e.replace(/^.*Qiyu\\/([\\d.]+).*$/,\"$1\")},Wechat:function(){return e.replace(/^.*MicroMessenger\\/([\\d.]+).*$/,\"$1\")},Taobao:function(){return e.replace(/^.*AliApp\\(TB\\/([\\d.]+).*$/,\"$1\")},Alipay:function(){return e.replace(/^.*AliApp\\(AP\\/([\\d.]+).*$/,\"$1\")},Weibo:function(){return e.replace(/^.*weibo__([\\d.]+).*$/,\"$1\")},Douban:function(){return e.replace(/^.*com.douban.frodo\\/([\\d.]+).*$/,\"$1\")},Suning:function(){return e.replace(/^.*SNEBUY-APP([\\d.]+).*$/,\"$1\")},iQiYi:function(){return e.replace(/^.*IqiyiVersion\\/([\\d.]+).*$/,\"$1\")}};t.version=\"\",l[t.browser]&&(t.version=l[t.browser](),t.version==e&&(t.version=\"\")),\"Edge\"==t.browser?t.engine=\"EdgeHTML\":\"Chrome\"==t.browser&&parseInt(t.version)>27?t.engine=\"Blink\":\"Opera\"==t.browser&&parseInt(t.version)>12?t.engine=\"Blink\":\"Yandex\"==t.browser?t.engine=\"Blink\":void 0==t.browser&&(t.browser=\"Unknow App\")}function i(e){return new r(e)}e.exports=i},function(e,t,n){\"use strict\";var r={},i={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#39;\",\"`\":\"&#x60;\",\"\\\\\":\"&#x5c;\"};for(var o in i)r[i[o]]=o;var a=/[&<>\"'`\\\\]/g,s=RegExp(a.source),l=/&(?:amp|lt|gt|quot|#39|#x60|#x5c);/g,c=RegExp(l.source),d={on:function(e,t,n,r){e=e.split(\" \");for(var i=0,o=e.length;i<o;i++)d.off(e[i],t,n,r),t.addEventListener?t.addEventListener(e[i],n,r||!1):t.attachEvent?t.attachEvent(\"on\"+e[i],n):t[\"on\"+e[i]]=n},off:function(e,t,n,r){t.removeEventListener?t.removeEventListener(e,n,r||!1):t.detachEvent?t.detachEvent(\"on\"+e,n):t[\"on\"+e]=null},escape:function(e){return e&&s.test(e)?e.replace(a,function(e){return i[e]}):e},unescape:function(e){return e&&c.test(e)?e.replace(l,function(e){return r[e]}):e},create:function(e,t,n){var r=document.createElement(e);return d.attr(r,t,n),r},find:function(e,t){return e.querySelector(t)},findAll:function(e,t){return e.querySelectorAll(t)},attr:function(e,t,n){if(void 0===e.getAttribute)return d.prop(e,t,n);if(void 0!==n)null===n?d.removeAttr(e,t):e.setAttribute(t,n);else{if(\"[object Object]\"!=={}.toString.call(t))return e.getAttribute(t);d.each(t,function(t,n){e.setAttribute(t,n)})}},prop:function(e,t,n){return void 0!==n?e[t]=n:\"[object Object]\"!=={}.toString.call(t)?e[t]:void d.each(t,function(t,n){e[t]=n})},removeAttr:function(e,t){var n=void 0,r=0,i=t&&t.match(/[^\\x20\\t\\r\\n\\f\\*\\/\\\\]+/g);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n);return e},clearAttr:function(e){var t=e.attributes,n=[\"align\",\"alt\",\"class\",\"disabled\",\"href\",\"id\",\"target\",\"title\",\"type\",\"style\",\"src\"];return d.each(t,function(t,r){var i=r.name;if(\"style\"===i){var o=r.value;d.each(o.split(\";\"),function(t,n){if(n.indexOf(\"color\")>-1)return d.attr(e,\"style\",n),!1;d.removeAttr(e,\"style\")})}n.indexOf(i)>-1||d.removeAttr(e,i)}),e},remove:function(e,t){try{t.parentNode&&t.parentNode.removeChild(t)}catch(e){}},each:function(e,t){var n=0,r=e.length,i=[\"[object Array]\",\"[object NodeList]\"],o={}.toString.call(e);if(i.indexOf(o)>-1)for(;n<r&&!1!==(t&&t.call(e[n],n,e[n]));n++);else for(n in e)if(e.hasOwnProperty(n)&&!1===(t&&t.call(e[n],n,e[n])))break;return e}};e.exports=d},function(e,t,n){\"use strict\";var r=function(e,t){if(e)try{var n=e.getTime(),r=(new Date).getTime(),o=r-n,a=Math.floor(o/864e5);if(0===a){var s=o%864e5,l=Math.floor(s/36e5);if(0===l){var c=s%36e5,d=Math.floor(c/6e4);if(0===d){var u=c%6e4;return Math.round(u/1e3)+\" \"+t.timeago.seconds}return d+\" \"+t.timeago.minutes}return l+\" \"+t.timeago.hours}return a<0?t.timeago.now:a<8?a+\" \"+t.timeago.days:i(e)}catch(e){}},i=function(e){var t=o(e.getDate(),2),n=o(e.getMonth()+1,2);return o(e.getFullYear(),2)+\"-\"+n+\"-\"+t},o=function(e,t){for(var n=e.toString();n.length<t;)n=\"0\"+n;return n};e.exports=r},function(e,t,n){var r;!function(i){\"use strict\";function o(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function a(e,t){return e<<t|e>>>32-t}function s(e,t,n,r,i,s){return o(a(o(o(t,e),o(r,s)),i),n)}function l(e,t,n,r,i,o,a){return s(t&n|~t&r,e,t,i,o,a)}function c(e,t,n,r,i,o,a){return s(t&r|n&~r,e,t,i,o,a)}function d(e,t,n,r,i,o,a){return s(t^n^r,e,t,i,o,a)}function u(e,t,n,r,i,o,a){return s(n^(t|~r),e,t,i,o,a)}function p(e,t){e[t>>5]|=128<<t%32,e[14+(t+64>>>9<<4)]=t;var n,r,i,a,s,p=1732584193,f=-271733879,h=-1732584194,v=271733878;for(n=0;n<e.length;n+=16)r=p,i=f,a=h,s=v,p=l(p,f,h,v,e[n],7,-680876936),v=l(v,p,f,h,e[n+1],12,-389564586),h=l(h,v,p,f,e[n+2],17,606105819),f=l(f,h,v,p,e[n+3],22,-1044525330),p=l(p,f,h,v,e[n+4],7,-176418897),v=l(v,p,f,h,e[n+5],12,1200080426),h=l(h,v,p,f,e[n+6],17,-1473231341),f=l(f,h,v,p,e[n+7],22,-45705983),p=l(p,f,h,v,e[n+8],7,1770035416),v=l(v,p,f,h,e[n+9],12,-1958414417),h=l(h,v,p,f,e[n+10],17,-42063),f=l(f,h,v,p,e[n+11],22,-1990404162),p=l(p,f,h,v,e[n+12],7,1804603682),v=l(v,p,f,h,e[n+13],12,-40341101),h=l(h,v,p,f,e[n+14],17,-1502002290),f=l(f,h,v,p,e[n+15],22,1236535329),p=c(p,f,h,v,e[n+1],5,-165796510),v=c(v,p,f,h,e[n+6],9,-1069501632),h=c(h,v,p,f,e[n+11],14,643717713),f=c(f,h,v,p,e[n],20,-373897302),p=c(p,f,h,v,e[n+5],5,-701558691),v=c(v,p,f,h,e[n+10],9,38016083),h=c(h,v,p,f,e[n+15],14,-660478335),f=c(f,h,v,p,e[n+4],20,-405537848),p=c(p,f,h,v,e[n+9],5,568446438),v=c(v,p,f,h,e[n+14],9,-1019803690),h=c(h,v,p,f,e[n+3],14,-187363961),f=c(f,h,v,p,e[n+8],20,1163531501),p=c(p,f,h,v,e[n+13],5,-1444681467),v=c(v,p,f,h,e[n+2],9,-51403784),h=c(h,v,p,f,e[n+7],14,1735328473),f=c(f,h,v,p,e[n+12],20,-1926607734),p=d(p,f,h,v,e[n+5],4,-378558),v=d(v,p,f,h,e[n+8],11,-2022574463),h=d(h,v,p,f,e[n+11],16,1839030562),f=d(f,h,v,p,e[n+14],23,-35309556),p=d(p,f,h,v,e[n+1],4,-1530992060),v=d(v,p,f,h,e[n+4],11,1272893353),h=d(h,v,p,f,e[n+7],16,-155497632),f=d(f,h,v,p,e[n+10],23,-1094730640),p=d(p,f,h,v,e[n+13],4,681279174),v=d(v,p,f,h,e[n],11,-358537222),h=d(h,v,p,f,e[n+3],16,-722521979),f=d(f,h,v,p,e[n+6],23,76029189),p=d(p,f,h,v,e[n+9],4,-640364487),v=d(v,p,f,h,e[n+12],11,-421815835),h=d(h,v,p,f,e[n+15],16,530742520),f=d(f,h,v,p,e[n+2],23,-995338651),p=u(p,f,h,v,e[n],6,-198630844),v=u(v,p,f,h,e[n+7],10,1126891415),h=u(h,v,p,f,e[n+14],15,-1416354905),f=u(f,h,v,p,e[n+5],21,-57434055),p=u(p,f,h,v,e[n+12],6,1700485571),v=u(v,p,f,h,e[n+3],10,-1894986606),h=u(h,v,p,f,e[n+10],15,-1051523),f=u(f,h,v,p,e[n+1],21,-2054922799),p=u(p,f,h,v,e[n+8],6,1873313359),v=u(v,p,f,h,e[n+15],10,-30611744),h=u(h,v,p,f,e[n+6],15,-1560198380),f=u(f,h,v,p,e[n+13],21,1309151649),p=u(p,f,h,v,e[n+4],6,-145523070),v=u(v,p,f,h,e[n+11],10,-1120210379),h=u(h,v,p,f,e[n+2],15,718787259),f=u(f,h,v,p,e[n+9],21,-343485551),p=o(p,r),f=o(f,i),h=o(h,a),v=o(v,s);return[p,f,h,v]}function f(e){var t,n=\"\",r=32*e.length;for(t=0;t<r;t+=8)n+=String.fromCharCode(e[t>>5]>>>t%32&255);return n}function h(e){var t,n=[];for(n[(e.length>>2)-1]=void 0,t=0;t<n.length;t+=1)n[t]=0;var r=8*e.length;for(t=0;t<r;t+=8)n[t>>5]|=(255&e.charCodeAt(t/8))<<t%32;return n}function v(e){return f(p(h(e),8*e.length))}function g(e,t){var n,r,i=h(e),o=[],a=[];for(o[15]=a[15]=void 0,i.length>16&&(i=p(i,8*e.length)),n=0;n<16;n+=1)o[n]=909522486^i[n],a[n]=1549556828^i[n];return r=p(o.concat(h(t)),512+8*t.length),f(p(a.concat(r),640))}function m(e){var t,n,r=\"0123456789abcdef\",i=\"\";for(n=0;n<e.length;n+=1)t=e.charCodeAt(n),i+=r.charAt(t>>>4&15)+r.charAt(15&t);return i}function b(e){return unescape(encodeURIComponent(e))}function x(e){return v(b(e))}function y(e){return m(x(e))}function w(e,t){return g(b(e),b(t))}function k(e,t){return m(w(e,t))}function _(e,t,n){return t?n?w(t,e):k(t,e):n?x(e):y(e)}void 0!==(r=function(){return _}.call(t,n,t,e))&&(e.exports=r)}()},function(e,t,n){!function(t,n){e.exports=n()}(0,function(){\"use strict\";function e(e){return'<span style=\"color: slategray\">'+e+\"</span>\"}var t=function(e,t){return t={exports:{}},e(t,t.exports),t.exports}(function(e){var t=e.exports=function(){return new RegExp(\"(?:\"+t.line().source+\")|(?:\"+t.block().source+\")\",\"gm\")};t.line=function(){return/(?:^|\\s)\\/\\/(.+?)$/gm},t.block=function(){return/\\/\\*([\\S\\s]*?)\\*\\//gm}}),n=[\"23AC69\",\"91C132\",\"F19726\",\"E8552D\",\"1AAB8E\",\"E1147F\",\"2980C1\",\"1BA1E6\",\"9FA0A0\",\"F19726\",\"E30B20\",\"E30B20\",\"A3338B\"];return function(r,i){void 0===i&&(i={});var o=i.colors;void 0===o&&(o=n);var a=0,s={},l=/[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af\\u0400-\\u04FF]+|\\w+/,c=/</,d=new RegExp(\"(\"+l.source+\"|\"+c.source+\")|(\"+t().source+\")\",\"gmi\");return r.replace(d,function(t,n,r){if(r)return e(r);if(\"<\"===n)return\"&lt;\";var i;s[n]?i=s[n]:(i=o[a],s[n]=i);var l='<span style=\"color: #'+i+'\">'+n+\"</span>\";return a=++a%o.length,l})}})},function(e,t,n){(function(t){!function(t){\"use strict\";function n(e){this.tokens=[],this.tokens.links={},this.options=e||h.defaults,this.rules=v.normal,this.options.pedantic?this.rules=v.pedantic:this.options.gfm&&(this.options.tables?this.rules=v.tables:this.rules=v.gfm)}function r(e,t){if(this.options=t||h.defaults,this.links=e,this.rules=g.normal,this.renderer=this.options.renderer||new i,this.renderer.options=this.options,!this.links)throw new Error(\"Tokens array requires a `links` property.\");this.options.pedantic?this.rules=g.pedantic:this.options.gfm&&(this.options.breaks?this.rules=g.breaks:this.rules=g.gfm)}function i(e){this.options=e||h.defaults}function o(){}function a(e){this.tokens=[],this.token=null,this.options=e||h.defaults,this.options.renderer=this.options.renderer||new i,this.renderer=this.options.renderer,this.renderer.options=this.options}function s(e,t){return e.replace(t?/&/g:/&(?!#?\\w+;)/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#39;\")}function l(e){return e.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/gi,function(e,t){return t=t.toLowerCase(),\"colon\"===t?\":\":\"#\"===t.charAt(0)?\"x\"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):\"\"})}function c(e,t){return e=e.source||e,t=t||\"\",{replace:function(t,n){return n=n.source||n,n=n.replace(/(^|[^\\[])\\^/g,\"$1\"),e=e.replace(t,n),this},getRegex:function(){return new RegExp(e,t)}}}function d(e,t){return m[\" \"+e]||(/^[^:]+:\\/*[^\\/]*$/.test(e)?m[\" \"+e]=e+\"/\":m[\" \"+e]=e.replace(/[^\\/]*$/,\"\")),e=m[\" \"+e],\"//\"===t.slice(0,2)?e.replace(/:[\\s\\S]*/,\":\")+t:\"/\"===t.charAt(0)?e.replace(/(:\\/*[^\\/]*)[\\s\\S]*/,\"$1\")+t:e+t}function u(){}function p(e){for(var t,n,r=1;r<arguments.length;r++){t=arguments[r];for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}function f(e,t){var n=e.replace(/([^\\\\])\\|/g,\"$1 |\").split(/ +\\| */),r=0;if(n.length>t)n.splice(t);else for(;n.length<t;)n.push(\"\");for(;r<n.length;r++)n[r]=n[r].replace(/\\\\\\|/g,\"|\");return n}function h(e,t,r){if(void 0===e||null===e)throw new Error(\"marked(): input parameter is undefined or null\");if(\"string\"!=typeof e)throw new Error(\"marked(): input parameter is of type \"+Object.prototype.toString.call(e)+\", string expected\");if(r||\"function\"==typeof t){r||(r=t,t=null),t=p({},h.defaults,t||{});var i,o,l=t.highlight,c=0;try{i=n.lex(e,t)}catch(e){return r(e)}o=i.length;var d=function(e){if(e)return t.highlight=l,r(e);var n;try{n=a.parse(i,t)}catch(t){e=t}return t.highlight=l,e?r(e):r(null,n)};if(!l||l.length<3)return d();if(delete t.highlight,!o)return d();for(;c<i.length;c++)!function(e){\"code\"!==e.type?--o||d():l(e.text,e.lang,function(t,n){return t?d(t):null==n||n===e.text?--o||d():(e.text=n,e.escaped=!0,void(--o||d()))})}(i[c])}else try{return t&&(t=p({},h.defaults,t)),a.parse(n.lex(e,t),t)}catch(e){if(e.message+=\"\\nPlease report this to https://github.com/markedjs/marked.\",(t||h.defaults).silent)return\"<p>An error occurred:</p><pre>\"+s(e.message+\"\",!0)+\"</pre>\";throw e}}var v={newline:/^\\n+/,code:/^( {4}[^\\n]+\\n*)+/,fences:u,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,heading:/^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,nptable:u,blockquote:/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,list:/^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,html:\"^ {0,3}(?:<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*|<![A-Z][\\\\s\\\\S]*?>\\\\n*|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$))\",def:/^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,table:u,lheading:/^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,paragraph:/^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/,text:/^[^\\n]+/};v._label=/(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/,v._title=/(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/,v.def=c(v.def).replace(\"label\",v._label).replace(\"title\",v._title).getRegex(),v.bullet=/(?:[*+-]|\\d+\\.)/,v.item=/^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/,v.item=c(v.item,\"gm\").replace(/bull/g,v.bullet).getRegex(),v.list=c(v.list).replace(/bull/g,v.bullet).replace(\"hr\",\"\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))\").replace(\"def\",\"\\\\n+(?=\"+v.def.source+\")\").getRegex(),v._tag=\"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\",v._comment=/<!--(?!-?>)[\\s\\S]*?-->/,v.html=c(v.html,\"i\").replace(\"comment\",v._comment).replace(\"tag\",v._tag).replace(\"attribute\",/ +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex(),v.paragraph=c(v.paragraph).replace(\"hr\",v.hr).replace(\"heading\",v.heading).replace(\"lheading\",v.lheading).replace(\"tag\",v._tag).getRegex(),v.blockquote=c(v.blockquote).replace(\"paragraph\",v.paragraph).getRegex(),v.normal=p({},v),v.gfm=p({},v.normal,{fences:/^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\n? *\\1 *(?:\\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/}),v.gfm.paragraph=c(v.paragraph).replace(\"(?!\",\"(?!\"+v.gfm.fences.source.replace(\"\\\\1\",\"\\\\2\")+\"|\"+v.list.source.replace(\"\\\\1\",\"\\\\3\")+\"|\").getRegex(),v.tables=p({},v.gfm,{nptable:/^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,table:/^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/}),v.pedantic=p({},v.normal,{html:c(\"^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\\\"[^\\\"]*\\\"|'[^']*'|\\\\s[^'\\\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))\").replace(\"comment\",v._comment).replace(/tag/g,\"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),def:/^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/}),n.rules=v,n.lex=function(e,t){return new n(t).lex(e)},n.prototype.lex=function(e){return e=e.replace(/\\r\\n|\\r/g,\"\\n\").replace(/\\t/g,\"    \").replace(/\\u00a0/g,\" \").replace(/\\u2424/g,\"\\n\"),this.token(e,!0)},n.prototype.token=function(e,t){e=e.replace(/^ +$/gm,\"\");for(var n,r,i,o,a,s,l,c,d,u,p,h,g;e;)if((i=this.rules.newline.exec(e))&&(e=e.substring(i[0].length),i[0].length>1&&this.tokens.push({type:\"space\"})),i=this.rules.code.exec(e))e=e.substring(i[0].length),i=i[0].replace(/^ {4}/gm,\"\"),this.tokens.push({type:\"code\",text:this.options.pedantic?i:i.replace(/\\n+$/,\"\")});else if(i=this.rules.fences.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"code\",lang:i[2],text:i[3]||\"\"});else if(i=this.rules.heading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"heading\",depth:i[1].length,text:i[2]});else if(t&&(i=this.rules.nptable.exec(e))&&(s={type:\"table\",header:f(i[1].replace(/^ *| *\\| *$/g,\"\")),align:i[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),cells:i[3]?i[3].replace(/\\n$/,\"\").split(\"\\n\"):[]},s.header.length===s.align.length)){for(e=e.substring(i[0].length),c=0;c<s.align.length;c++)/^ *-+: *$/.test(s.align[c])?s.align[c]=\"right\":/^ *:-+: *$/.test(s.align[c])?s.align[c]=\"center\":/^ *:-+ *$/.test(s.align[c])?s.align[c]=\"left\":s.align[c]=null;for(c=0;c<s.cells.length;c++)s.cells[c]=f(s.cells[c],s.header.length);this.tokens.push(s)}else if(i=this.rules.hr.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"hr\"});else if(i=this.rules.blockquote.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"blockquote_start\"}),i=i[0].replace(/^ *> ?/gm,\"\"),this.token(i,t),this.tokens.push({type:\"blockquote_end\"});else if(i=this.rules.list.exec(e)){for(e=e.substring(i[0].length),o=i[2],p=o.length>1,this.tokens.push({type:\"list_start\",ordered:p,start:p?+o:\"\"}),i=i[0].match(this.rules.item),n=!1,u=i.length,c=0;c<u;c++)s=i[c],l=s.length,s=s.replace(/^ *([*+-]|\\d+\\.) +/,\"\"),~s.indexOf(\"\\n \")&&(l-=s.length,s=this.options.pedantic?s.replace(/^ {1,4}/gm,\"\"):s.replace(new RegExp(\"^ {1,\"+l+\"}\",\"gm\"),\"\")),this.options.smartLists&&c!==u-1&&(a=v.bullet.exec(i[c+1])[0],o===a||o.length>1&&a.length>1||(e=i.slice(c+1).join(\"\\n\")+e,c=u-1)),r=n||/\\n\\n(?!\\s*$)/.test(s),c!==u-1&&(n=\"\\n\"===s.charAt(s.length-1),r||(r=n)),h=/^\\[[ xX]\\] /.test(s),g=void 0,h&&(g=\" \"!==s[1],s=s.replace(/^\\[[ xX]\\] +/,\"\")),this.tokens.push({type:r?\"loose_item_start\":\"list_item_start\",task:h,checked:g}),this.token(s,!1),this.tokens.push({type:\"list_item_end\"});this.tokens.push({type:\"list_end\"})}else if(i=this.rules.html.exec(e))e=e.substring(i[0].length),this.tokens.push({type:this.options.sanitize?\"paragraph\":\"html\",pre:!this.options.sanitizer&&(\"pre\"===i[1]||\"script\"===i[1]||\"style\"===i[1]),text:i[0]});else if(t&&(i=this.rules.def.exec(e)))e=e.substring(i[0].length),i[3]&&(i[3]=i[3].substring(1,i[3].length-1)),d=i[1].toLowerCase().replace(/\\s+/g,\" \"),this.tokens.links[d]||(this.tokens.links[d]={href:i[2],title:i[3]});else if(t&&(i=this.rules.table.exec(e))&&(s={type:\"table\",header:f(i[1].replace(/^ *| *\\| *$/g,\"\")),align:i[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),cells:i[3]?i[3].replace(/(?: *\\| *)?\\n$/,\"\").split(\"\\n\"):[]},s.header.length===s.align.length)){for(e=e.substring(i[0].length),c=0;c<s.align.length;c++)/^ *-+: *$/.test(s.align[c])?s.align[c]=\"right\":/^ *:-+: *$/.test(s.align[c])?s.align[c]=\"center\":/^ *:-+ *$/.test(s.align[c])?s.align[c]=\"left\":s.align[c]=null;for(c=0;c<s.cells.length;c++)s.cells[c]=f(s.cells[c].replace(/^ *\\| *| *\\| *$/g,\"\"),s.header.length);this.tokens.push(s)}else if(i=this.rules.lheading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"heading\",depth:\"=\"===i[2]?1:2,text:i[1]});else if(t&&(i=this.rules.paragraph.exec(e)))e=e.substring(i[0].length),this.tokens.push({type:\"paragraph\",text:\"\\n\"===i[1].charAt(i[1].length-1)?i[1].slice(0,-1):i[1]});else if(i=this.rules.text.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"text\",text:i[0]});else if(e)throw new Error(\"Infinite loop on byte: \"+e.charCodeAt(0));return this.tokens};var g={escape:/^\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\]\\\\^_`{|}~])/,autolink:/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,url:u,tag:\"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\",link:/^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/,reflink:/^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,nolink:/^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,strong:/^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)|^__([^\\s])__(?!_)|^\\*\\*([^\\s])\\*\\*(?!\\*)/,em:/^_([^\\s][\\s\\S]*?[^\\s_])_(?!_)|^_([^\\s_][\\s\\S]*?[^\\s])_(?!_)|^\\*([^\\s][\\s\\S]*?[^\\s*])\\*(?!\\*)|^\\*([^\\s*][\\s\\S]*?[^\\s])\\*(?!\\*)|^_([^\\s_])_(?!_)|^\\*([^\\s*])\\*(?!\\*)/,code:/^(`+)\\s*([\\s\\S]*?[^`]?)\\s*\\1(?!`)/,br:/^ {2,}\\n(?!\\s*$)/,del:u,text:/^[\\s\\S]+?(?=[\\\\<!\\[`*]|\\b_| {2,}\\n|$)/};g._escapes=/\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\]\\\\^_`{|}~])/g,g._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,g._email=/[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,g.autolink=c(g.autolink).replace(\"scheme\",g._scheme).replace(\"email\",g._email).getRegex(),g._attribute=/\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/,g.tag=c(g.tag).replace(\"comment\",v._comment).replace(\"attribute\",g._attribute).getRegex(),g._label=/(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?/,g._href=/\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|(?:\\\\[()]?|\\([^\\s\\x00-\\x1f()\\\\]*\\)|[^\\s\\x00-\\x1f()\\\\])*?)/,g._title=/\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/,g.link=c(g.link).replace(\"label\",g._label).replace(\"href\",g._href).replace(\"title\",g._title).getRegex(),g.reflink=c(g.reflink).replace(\"label\",g._label).getRegex(),g.normal=p({},g),g.pedantic=p({},g.normal,{strong:/^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,em:/^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,link:c(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\",g._label).getRegex(),reflink:c(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\",g._label).getRegex()}),g.gfm=p({},g.normal,{escape:c(g.escape).replace(\"])\",\"~|])\").getRegex(),url:c(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/).replace(\"email\",g._email).getRegex(),_backpedal:/(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^~~(?=\\S)([\\s\\S]*?\\S)~~/,text:c(g.text).replace(\"]|\",\"~]|\").replace(\"|\",\"|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&'*+/=?^_`{\\\\|}~-]+@|\").getRegex()}),g.breaks=p({},g.gfm,{br:c(g.br).replace(\"{2,}\",\"*\").getRegex(),text:c(g.gfm.text).replace(\"{2,}\",\"*\").getRegex()}),r.rules=g,r.output=function(e,t,n){return new r(t,n).output(e)},r.prototype.output=function(e){for(var t,n,i,o,a,l=\"\";e;)if(a=this.rules.escape.exec(e))e=e.substring(a[0].length),l+=a[1];else if(a=this.rules.autolink.exec(e))e=e.substring(a[0].length),\"@\"===a[2]?(n=s(this.mangle(a[1])),i=\"mailto:\"+n):(n=s(a[1]),i=n),l+=this.renderer.link(i,null,n);else if(this.inLink||!(a=this.rules.url.exec(e))){if(a=this.rules.tag.exec(e))!this.inLink&&/^<a /i.test(a[0])?this.inLink=!0:this.inLink&&/^<\\/a>/i.test(a[0])&&(this.inLink=!1),e=e.substring(a[0].length),l+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(a[0]):s(a[0]):a[0];else if(a=this.rules.link.exec(e))e=e.substring(a[0].length),this.inLink=!0,i=a[2],this.options.pedantic?(t=/^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(i),t?(i=t[1],o=t[3]):o=\"\"):o=a[3]?a[3].slice(1,-1):\"\",i=i.trim().replace(/^<([\\s\\S]*)>$/,\"$1\"),l+=this.outputLink(a,{href:r.escapes(i),title:r.escapes(o)}),this.inLink=!1;else if((a=this.rules.reflink.exec(e))||(a=this.rules.nolink.exec(e))){if(e=e.substring(a[0].length),t=(a[2]||a[1]).replace(/\\s+/g,\" \"),!(t=this.links[t.toLowerCase()])||!t.href){l+=a[0].charAt(0),e=a[0].substring(1)+e;continue}this.inLink=!0,l+=this.outputLink(a,t),this.inLink=!1}else if(a=this.rules.strong.exec(e))e=e.substring(a[0].length),l+=this.renderer.strong(this.output(a[4]||a[3]||a[2]||a[1]));else if(a=this.rules.em.exec(e))e=e.substring(a[0].length),l+=this.renderer.em(this.output(a[6]||a[5]||a[4]||a[3]||a[2]||a[1]));else if(a=this.rules.code.exec(e))e=e.substring(a[0].length),l+=this.renderer.codespan(s(a[2].trim(),!0));else if(a=this.rules.br.exec(e))e=e.substring(a[0].length),l+=this.renderer.br();else if(a=this.rules.del.exec(e))e=e.substring(a[0].length),l+=this.renderer.del(this.output(a[1]));else if(a=this.rules.text.exec(e))e=e.substring(a[0].length),l+=this.renderer.text(s(this.smartypants(a[0])));else if(e)throw new Error(\"Infinite loop on byte: \"+e.charCodeAt(0))}else a[0]=this.rules._backpedal.exec(a[0])[0],e=e.substring(a[0].length),\"@\"===a[2]?(n=s(a[0]),i=\"mailto:\"+n):(n=s(a[0]),i=\"www.\"===a[1]?\"http://\"+n:n),l+=this.renderer.link(i,null,n);return l},r.escapes=function(e){return e?e.replace(r.rules._escapes,\"$1\"):e},r.prototype.outputLink=function(e,t){var n=t.href,r=t.title?s(t.title):null;return\"!\"!==e[0].charAt(0)?this.renderer.link(n,r,this.output(e[1])):this.renderer.image(n,r,s(e[1]))},r.prototype.smartypants=function(e){return this.options.smartypants?e.replace(/---/g,\"—\").replace(/--/g,\"–\").replace(/(^|[-\\u2014\\/(\\[{\"\\s])'/g,\"$1‘\").replace(/'/g,\"’\").replace(/(^|[-\\u2014\\/(\\[{\\u2018\\s])\"/g,\"$1“\").replace(/\"/g,\"”\").replace(/\\.{3}/g,\"…\"):e},r.prototype.mangle=function(e){if(!this.options.mangle)return e;for(var t,n=\"\",r=e.length,i=0;i<r;i++)t=e.charCodeAt(i),Math.random()>.5&&(t=\"x\"+t.toString(16)),n+=\"&#\"+t+\";\";return n},i.prototype.code=function(e,t,n){if(this.options.highlight){var r=this.options.highlight(e,t);null!=r&&r!==e&&(n=!0,e=r)}return t?'<pre><code class=\"'+this.options.langPrefix+s(t,!0)+'\">'+(n?e:s(e,!0))+\"</code></pre>\\n\":\"<pre><code>\"+(n?e:s(e,!0))+\"</code></pre>\"},i.prototype.blockquote=function(e){return\"<blockquote>\\n\"+e+\"</blockquote>\\n\"},i.prototype.html=function(e){return e},i.prototype.heading=function(e,t,n){return this.options.headerIds?\"<h\"+t+' id=\"'+this.options.headerPrefix+n.toLowerCase().replace(/[^\\w]+/g,\"-\")+'\">'+e+\"</h\"+t+\">\\n\":\"<h\"+t+\">\"+e+\"</h\"+t+\">\\n\"},i.prototype.hr=function(){return this.options.xhtml?\"<hr/>\\n\":\"<hr>\\n\"},i.prototype.list=function(e,t,n){var r=t?\"ol\":\"ul\";return\"<\"+r+(t&&1!==n?' start=\"'+n+'\"':\"\")+\">\\n\"+e+\"</\"+r+\">\\n\"},i.prototype.listitem=function(e){return\"<li>\"+e+\"</li>\\n\"},i.prototype.checkbox=function(e){return\"<input \"+(e?'checked=\"\" ':\"\")+'disabled=\"\" type=\"checkbox\"'+(this.options.xhtml?\" /\":\"\")+\"> \"},i.prototype.paragraph=function(e){return\"<p>\"+e+\"</p>\\n\"},i.prototype.table=function(e,t){return t&&(t=\"<tbody>\"+t+\"</tbody>\"),\"<table>\\n<thead>\\n\"+e+\"</thead>\\n\"+t+\"</table>\\n\"},i.prototype.tablerow=function(e){return\"<tr>\\n\"+e+\"</tr>\\n\"},i.prototype.tablecell=function(e,t){var n=t.header?\"th\":\"td\";return(t.align?\"<\"+n+' align=\"'+t.align+'\">':\"<\"+n+\">\")+e+\"</\"+n+\">\\n\"},i.prototype.strong=function(e){return\"<strong>\"+e+\"</strong>\"},i.prototype.em=function(e){return\"<em>\"+e+\"</em>\"},i.prototype.codespan=function(e){return\"<code>\"+e+\"</code>\"},i.prototype.br=function(){return this.options.xhtml?\"<br/>\":\"<br>\"},i.prototype.del=function(e){return\"<del>\"+e+\"</del>\"},i.prototype.link=function(e,t,n){if(this.options.sanitize){try{var r=decodeURIComponent(l(e)).replace(/[^\\w:]/g,\"\").toLowerCase()}catch(e){return n}if(0===r.indexOf(\"javascript:\")||0===r.indexOf(\"vbscript:\")||0===r.indexOf(\"data:\"))return n}this.options.baseUrl&&!b.test(e)&&(e=d(this.options.baseUrl,e));try{e=encodeURI(e).replace(/%25/g,\"%\")}catch(e){return n}var i='<a href=\"'+s(e)+'\"';return t&&(i+=' title=\"'+t+'\"'),i+=\">\"+n+\"</a>\"},i.prototype.image=function(e,t,n){this.options.baseUrl&&!b.test(e)&&(e=d(this.options.baseUrl,e));var r='<img src=\"'+e+'\" alt=\"'+n+'\"';return t&&(r+=' title=\"'+t+'\"'),r+=this.options.xhtml?\"/>\":\">\"},i.prototype.text=function(e){return e},o.prototype.strong=o.prototype.em=o.prototype.codespan=o.prototype.del=o.prototype.text=function(e){return e},o.prototype.link=o.prototype.image=function(e,t,n){return\"\"+n},o.prototype.br=function(){return\"\"},a.parse=function(e,t){return new a(t).parse(e)},a.prototype.parse=function(e){this.inline=new r(e.links,this.options),this.inlineText=new r(e.links,p({},this.options,{renderer:new o})),this.tokens=e.reverse();for(var t=\"\";this.next();)t+=this.tok();return t},a.prototype.next=function(){return this.token=this.tokens.pop()},a.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},a.prototype.parseText=function(){for(var e=this.token.text;\"text\"===this.peek().type;)e+=\"\\n\"+this.next().text;return this.inline.output(e)},a.prototype.tok=function(){switch(this.token.type){case\"space\":return\"\";case\"hr\":return this.renderer.hr();case\"heading\":return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,l(this.inlineText.output(this.token.text)));case\"code\":return this.renderer.code(this.token.text,this.token.lang,this.token.escaped);case\"table\":var e,t,n,r,i=\"\",o=\"\";for(n=\"\",e=0;e<this.token.header.length;e++)n+=this.renderer.tablecell(this.inline.output(this.token.header[e]),{header:!0,align:this.token.align[e]});for(i+=this.renderer.tablerow(n),e=0;e<this.token.cells.length;e++){for(t=this.token.cells[e],n=\"\",r=0;r<t.length;r++)n+=this.renderer.tablecell(this.inline.output(t[r]),{header:!1,align:this.token.align[r]});o+=this.renderer.tablerow(n)}return this.renderer.table(i,o);case\"blockquote_start\":for(o=\"\";\"blockquote_end\"!==this.next().type;)o+=this.tok();return this.renderer.blockquote(o);case\"list_start\":o=\"\";for(var a=this.token.ordered,s=this.token.start;\"list_end\"!==this.next().type;)o+=this.tok();return this.renderer.list(o,a,s);case\"list_item_start\":for(o=\"\",this.token.task&&(o+=this.renderer.checkbox(this.token.checked));\"list_item_end\"!==this.next().type;)o+=\"text\"===this.token.type?this.parseText():this.tok();return this.renderer.listitem(o);case\"loose_item_start\":for(o=\"\";\"list_item_end\"!==this.next().type;)o+=this.tok();return this.renderer.listitem(o);case\"html\":return this.renderer.html(this.token.text);case\"paragraph\":return this.renderer.paragraph(this.inline.output(this.token.text));case\"text\":return this.renderer.paragraph(this.parseText())}};var m={},b=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;u.exec=u,h.options=h.setOptions=function(e){return p(h.defaults,e),h},h.getDefaults=function(){return{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:\"\",highlight:null,langPrefix:\"language-\",mangle:!0,pedantic:!1,renderer:new i,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tables:!0,xhtml:!1}},h.defaults=h.getDefaults(),h.Parser=a,h.parser=a.parse,h.Renderer=i,h.TextRenderer=o,h.Lexer=n,h.lexer=n.lex,h.InlineLexer=r,h.inlineLexer=r.output,h.parse=h,e.exports=h}(this||\"undefined\"!=typeof window&&window)}).call(t,n(10))},function(e,t){e.exports={name:\"valine\",version:\"1.3.4\",description:\"A simple comment system based on Leancloud.\",main:\"/dist/Valine.min.js\",author:\"xCss <xioveliu@gmail.com> (https://github.com/xCss)\",scripts:{test:\"webpack\",build:\"webpack\",dev:\"webpack-dev-server --env.dev\",clean:\"rm -rf dist/* \"},keywords:[\"simple\",\"easy-to-use\",\"fast-and-safe\",\"comment-system\"],license:\"GPL-2.0\",repository:{type:\"git\",url:\"git+https://github.com/xcss/Valine.git\"},homepage:\"https://github.com/xcss/Valine#readme\",devDependencies:{autoprefixer:\"^7.1.1\",autosize:\"^4.0.2\",\"babel-core\":\"^6.25.0\",\"babel-loader\":\"^7.1.1\",\"babel-polyfill\":\"^6.23.0\",\"babel-preset-es2015\":\"^6.24.1\",\"babel-preset-stage-0\":\"^6.24.1\",\"blueimp-md5\":\"^2.8.0\",\"css-loader\":\"^0.28.4\",\"exports-loader\":\"^0.6.3\",\"file-loader\":\"^0.11.2\",hanabi:\"^0.4.0\",marked:\"^0.4.0\",\"node-sass\":\"^4.9.2\",\"postcss-loader\":\"^2.0.5\",\"sass-loader\":\"^6.0.3\",\"style-loader\":\"^0.18.2\",\"url-loader\":\"^0.6.2\",webpack:\"^2.6.1\",\"webpack-dev-server\":\"^2.4.5\"}}},function(e,t){var n;n=function(){return this}();try{n=n||Function(\"return this\")()||(0,eval)(\"this\")}catch(e){\"object\"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports={grinning:\"😀\",smiley:\"😃\",smile:\"😄\",grin:\"😁\",laughing:\"😆\",sweat_smile:\"😅\",joy:\"😂\",blush:\"😊\",innocent:\"😇\",wink:\"😉\",relieved:\"😌\",heart_eyes:\"😍\",kissing_heart:\"😘\",kissing:\"😗\",kissing_smiling_eyes:\"😙\",kissing_closed_eyes:\"😚\",yum:\"😋\",stuck_out_tongue_winking_eye:\"😜\",stuck_out_tongue_closed_eyes:\"😝\",stuck_out_tongue:\"😛\",sunglasses:\"😎\",smirk:\"😏\",unamused:\"😒\",disappointed:\"😞\",pensive:\"😔\",worried:\"😟\",confused:\"😕\",persevere:\"😣\",confounded:\"😖\",tired_face:\"😫\",weary:\"😩\",angry:\"😠\",rage:\"😡\",no_mouth:\"😶\",neutral_face:\"😐\",expressionless:\"😑\",hushed:\"😯\",frowning:\"😦\",anguished:\"😧\",open_mouth:\"😮\",astonished:\"😲\",dizzy_face:\"😵\",flushed:\"😳\",scream:\"😱\",fearful:\"😨\",cold_sweat:\"😰\",cry:\"😢\",disappointed_relieved:\"😥\",sob:\"😭\",sweat:\"😓\",sleepy:\"😪\",sleeping:\"😴\",mask:\"😷\",smiling_imp:\"😈\",smiley_cat:\"😺\",smile_cat:\"😸\",joy_cat:\"😹\",heart_eyes_cat:\"😻\",smirk_cat:\"😼\",kissing_cat:\"😽\",scream_cat:\"🙀\",crying_cat_face:\"😿\",pouting_cat:\"😾\",cat:\"🐱\",mouse:\"🐭\",cow:\"🐮\",monkey_face:\"🐵\",hand:\"✋\",fist:\"✊\",v:\"✌️\",point_up:\"👆\",point_down:\"👇\",point_left:\"👈\",point_right:\"👉\",facepunch:\"👊\",wave:\"👋\",clap:\"👏\",open_hands:\"👐\",\"+1\":\"👍\",\"-1\":\"👎\",ok_hand:\"👌\",pray:\"🙏\",ear:\"👂\",eyes:\"👀\",nose:\"👃\",lips:\"👄\",tongue:\"👅\",heart:\"❤️\",cupid:\"💘\",sparkling_heart:\"💖\",star:\"⭐️\",sparkles:\"✨\",zap:\"⚡️\",sunny:\"☀️\",cloud:\"☁️\",snowflake:\"❄️\",umbrella:\"☔️\",coffee:\"☕️\",airplane:\"✈️\",anchor:\"⚓️\",watch:\"⌚️\",phone:\"☎️\",hourglass:\"⌛️\",email:\"✉️\",scissors:\"✂️\",black_nib:\"✒️\",pencil2:\"✏️\",x:\"❌\",recycle:\"♻️\",white_check_mark:\"✅\",negative_squared_cross_mark:\"❎\",m:\"Ⓜ️\",i:\"ℹ️\",tm:\"™️\",copyright:\"©️\",registered:\"®️\"}},function(e,t,n){var r=n(13);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]);var i={};i.transform=void 0;n(15)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){t=e.exports=n(14)(!1),t.push([e.i,'.v *{-webkit-box-sizing:border-box;box-sizing:border-box;line-height:2;color:#555;-webkit-transition:all .3s ease;transition:all .3s ease}.v hr{margin:.825rem 0;border-color:#f6f6f6;border-style:dashed}.v.hide-avatar .vimg{display:none}.v a{position:relative;cursor:pointer;color:#1abc9c;display:inline-block}.v a:before{content:\"\";position:absolute;width:0;right:0;bottom:0;height:1px;background:#1abc9c;-webkit-transition:width .3s ease;transition:width .3s ease}.v a:hover{color:#d7191a}.v a:hover:before{width:100%;left:0;right:auto}.v code,.v pre{background-color:#f6f6f6;color:#555;padding:.2em .4em;border-radius:3px;font-size:85%;margin:0;font-family:Source Code Pro,courier new,Input Mono,PT Mono,SFMono-Regular,Consolas,Monaco,Menlo,PingFang SC,Liberation Mono,Microsoft YaHei,Courier，monospace}.v pre{padding:10px;overflow:auto;line-height:1.45}.v pre code{padding:0;background:transparent;white-space:pre-wrap;word-break:keep-all}.v blockquote{color:#666;margin:.5rem 0;padding:0 0 0 1rem;border-left:8px solid hsla(0,0%,93%,.5)}.v .vinput{border:none;resize:none;outline:none;padding:10px 5px;max-width:100%;font-size:.775rem}.v input[type=checkbox],.v input[type=radio]{display:inline-block;vertical-align:middle;margin-top:-2px}.v .vwrap{border:1px solid #f0f0f0;border-radius:4px;margin-bottom:10px;overflow:hidden;position:relative;padding:10px}.v .vwrap input{background:transparent}.v .vwrap .vedit{position:relative;padding-top:10px}.v .vwrap .vedit .vctrl{text-align:right;font-size:12px}.v .vwrap .vedit .vctrl span{padding:10px;display:inline-block;vertical-align:middle;cursor:pointer}.v .vwrap .vedit .vemojis{display:none;font-size:18px;text-align:justify;max-height:145px;overflow:auto;margin-bottom:10px;-webkit-box-shadow:0 0 1px #f0f0f0;box-shadow:0 0 1px #f0f0f0}.v .vwrap .vedit .vemojis i{font-style:normal;padding:7px 0;width:38px;cursor:pointer;text-align:center;display:inline-block;vertical-align:middle}.v .vwrap .vedit .vpreview{padding:7px;-webkit-box-shadow:0 0 1px #f0f0f0;box-shadow:0 0 1px #f0f0f0}.v .vwrap .vedit .vpreview frame,.v .vwrap .vedit .vpreview iframe,.v .vwrap .vedit .vpreview img{max-width:100%;border:none}.v .vwrap .vheader .vinput{width:33.33%;border-bottom:1px dashed #dedede}.v .vwrap .vheader.item2 .vinput{width:50%}.v .vwrap .vheader.item1 .vinput{width:100%}.v .vwrap .vheader .vinput:focus{border-bottom-color:#eb5055}@media screen and (max-width:520px){.v .vwrap .vheader.item2 .vinput,.v .vwrap .vheader .vinput{width:100%}}.v .vwrap .vcontrol{font-size:0;padding-top:15px}.v .vwrap .vcontrol .col{display:inline-block;font-size:.725rem;vertical-align:middle;color:#ccc}.v .vwrap .vcontrol .col.text-right{text-align:right}.v .vwrap .vcontrol .col svg{margin-right:2px;overflow:hidden;fill:currentColor;vertical-align:middle}.v .vwrap .vcontrol .col.col-20{width:20%}.v .vwrap .vcontrol .col.col-40{width:40%}.v .vwrap .vcontrol .col.col-60{width:60%}.v .vwrap .vcontrol .col.col-80{width:80%}.v .vwrap .vcontrol .col.split{width:50%}.v .vwrap .vmark{position:absolute;background:rgba(0,0,0,.65);width:100%;height:100%;left:0;top:0}.v .vwrap .vmark .valert{padding-top:3rem}.v .vwrap .vmark .valert .vtext{color:#fff;padding:1rem 0}.v .vwrap .vmark .valert .vcode{width:4.6875rem;border-radius:.3125rem;padding:.5rem;background:#dedede}.v .vwrap .vmark .valert .vcode:focus{border-color:#3090e4;background-color:#fff}@media screen and (max-width:720px){.v .vwrap .vmark .valert{padding-top:5.5rem}.v .vwrap .vmark .valert .vtext{color:#fff;padding:1rem 0}}.v .power{color:#999;padding:.5rem 0}.v .power,.v .power a{font-size:.75rem}.v .vinfo{font-size:0;padding:5px}.v .vinfo .col{font-size:.875rem;display:inline-block;width:50%;vertical-align:middle}.v .vinfo .vcount .vnum{font-weight:600;font-size:1.25rem}.v a{text-decoration:none;color:#555}.v a:hover{color:#222}.v ol,.v ul{padding:0;margin-left:1.25rem}.v .txt-center{text-align:center}.v .txt-right{text-align:right}.v .pd5{padding:5px}.v .pd10{padding:10px}.v .veditor{width:100%;min-height:8.75rem;font-size:.875rem;background:transparent;resize:vertical;-webkit-transition:all .25s ease;transition:all .25s ease}.v .vbtn{-webkit-transition-duration:.4s;transition-duration:.4s;text-align:center;color:#313131;border:1px solid #ededed;border-radius:.3rem;display:inline-block;background:#ededed;margin-bottom:0;font-weight:400;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;white-space:nowrap;padding:.5rem 1.25rem;font-size:.875rem;line-height:1.42857143;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:none}.v .vbtn+.vbtn{margin-left:1.25rem}.v .vbtn:active,.v .vbtn:hover{color:#3090e4;border-color:#3090e4;background-color:#fff}.v .vempty{padding:1.25rem;text-align:center;color:#999}.v .vlist{width:100%}.v .vlist .vcard{padding-top:1.5rem;position:relative;display:block}.v .vlist .vcard:after{content:\"\";clear:both;display:block}.v .vlist .vcard .vimg{width:3.125rem;height:3.125rem;float:left;border-radius:50%;margin-right:.7525rem;border:1px solid #f5f5f5;padding:.125rem}@media screen and (max-width:720px){.v .vlist .vcard .vimg{width:2.5rem;height:2.5rem}}.v .vlist .vcard .vhead{line-height:1.5;margin-top:0}.v .vlist .vcard .vhead .vnick{position:relative;font-size:.875rem;font-weight:500;margin-right:.875rem;cursor:pointer;color:#1abc9c;text-decoration:none;display:inline-block}.v .vlist .vcard .vhead .vnick:before{content:\"\";position:absolute;width:0;right:0;bottom:0;height:1px;background:#1abc9c;-webkit-transition:width .3s ease;transition:width .3s ease}.v .vlist .vcard .vhead .vnick:hover{color:#d7191a}.v .vlist .vcard .vhead .vnick:hover:before{width:100%;left:0;right:auto}.v .vlist .vcard .vhead .vsys{display:inline-block;padding:.2rem .5rem;background:#ededed;color:#b3b1b1;font-size:.75rem;border-radius:.2rem;margin-right:.3rem}@media screen and (max-width:520px){.v .vlist .vcard .vhead .vsys{display:none}}.v .vlist .vcard .vh{overflow:hidden;padding-bottom:.5rem;border-bottom:1px dashed #f5f5f5}.v .vlist .vcard .vh .vtime{color:#b3b3b3;font-size:.75rem;margin-right:.875rem}.v .vlist .vcard .vh .vmeta{line-height:1;position:relative}.v .vlist .vcard .vh .vmeta .vat{font-size:.8125rem;color:#ef2f11;cursor:pointer;float:right}.v .vlist .vcard .vcontent{word-wrap:break-word;word-break:break-all;text-align:justify;color:#4a4a4a;font-size:.875rem;line-height:2;position:relative;margin-bottom:.75rem;padding-top:.625rem}.v .vlist .vcard .vcontent frame,.v .vlist .vcard .vcontent iframe,.v .vlist .vcard .vcontent img{max-width:100%;border:none}.v .vlist .vcard .vcontent.expand{cursor:pointer;max-height:11.25rem;overflow:hidden}.v .vlist .vcard .vcontent.expand:before{display:block;content:\"\";position:absolute;width:100%;left:0;top:0;bottom:3.15rem;pointer-events:none;background:-webkit-gradient(linear,left top,left bottom,from(hsla(0,0%,100%,0)),to(hsla(0,0%,100%,.9)));background:linear-gradient(180deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.9))}.v .vlist .vcard .vcontent.expand:after{display:block;content:\"Click on expand\";text-align:center;color:#828586;position:absolute;width:100%;height:3.15rem;line-height:3.15rem;left:0;bottom:0;pointer-events:none;background:hsla(0,0%,100%,.9)}.v .vlist .vcard .vquote{color:#666;margin-top:1rem;padding-left:1rem;border-left:1px dashed hsla(0,0%,93%,.5)}.v .vlist .vcard .vquote .vimg{width:2.225rem;height:2.225rem}.v .vpage .vmore{margin:1rem 0}.v .clear{content:\"\";display:block;clear:both}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@-webkit-keyframes pulse{50%{background:#dcdcdc}}@keyframes pulse{50%{background:#dcdcdc}}.v .vloading{position:relative;padding:20px;display:block;height:80px}.v .vloading:before{-webkit-box-sizing:border-box;box-sizing:border-box;content:\"\";position:absolute;display:inline-block;top:20px;left:50%;margin-left:-20px;width:40px;height:40px;border:6px double #a0a0a0;border-top-color:transparent;border-bottom-color:transparent;border-radius:50%;-webkit-animation:spin 1s infinite linear;animation:spin 1s infinite linear}',\"\"])},function(e,t){function n(e,t){var n=e[1]||\"\",i=e[3];if(!i)return n;if(t&&\"function\"==typeof btoa){var o=r(i);return[n].concat(i.sources.map(function(e){return\"/*# sourceURL=\"+i.sourceRoot+e+\" */\"})).concat([o]).join(\"\\n\")}return[n].join(\"\\n\")}function r(e){return\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+\" */\"}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var r=n(t,e);return t[2]?\"@media \"+t[2]+\"{\"+r+\"}\":r}).join(\"\")},t.i=function(e,n){\"string\"==typeof e&&(e=[[null,e,\"\"]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];\"number\"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var a=e[i];\"number\"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]=\"(\"+a[2]+\") and (\"+n+\")\"),t.push(a))}},t}},function(e,t,n){function r(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=h[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(d(r.parts[o],t))}else{for(var a=[],o=0;o<r.parts.length;o++)a.push(d(r.parts[o],t));h[r.id]={id:r.id,refs:1,parts:a}}}}function i(e,t){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=t.base?o[0]+t.base:o[0],s=o[1],l=o[2],c=o[3],d={css:s,media:l,sourceMap:c};r[a]?r[a].parts.push(d):n.push(r[a]={id:a,parts:[d]})}return n}function o(e,t){var n=g(e.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var r=x[x.length-1];if(\"top\"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),x.push(t);else{if(\"bottom\"!==e.insertAt)throw new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");n.appendChild(t)}}function a(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=x.indexOf(e);t>=0&&x.splice(t,1)}function s(e){var t=document.createElement(\"style\");return e.attrs.type=\"text/css\",c(t,e.attrs),o(e,t),t}function l(e){var t=document.createElement(\"link\");return e.attrs.type=\"text/css\",e.attrs.rel=\"stylesheet\",c(t,e.attrs),o(e,t),t}function c(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function d(e,t){var n,r,i,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var c=b++;n=m||(m=s(t)),r=u.bind(null,n,c,!1),i=u.bind(null,n,c,!0)}else e.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=l(t),r=f.bind(null,n,t),i=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(t),r=p.bind(null,n),i=function(){a(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}function u(e,t,n,r){var i=n?\"\":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function p(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute(\"media\",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function f(e,t,n){var r=n.css,i=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||o)&&(r=y(r)),i&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+\" */\");var a=new Blob([r],{type:\"text/css\"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}var h={},v=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),g=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e.call(this,n)),t[n]}}(function(e){return document.querySelector(e)}),m=null,b=0,x=[],y=n(16);e.exports=function(e,t){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");t=t||{},t.attrs=\"object\"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=v()),t.insertInto||(t.insertInto=\"head\"),t.insertAt||(t.insertAt=\"bottom\");var n=i(e,t);return r(n,t),function(e){for(var o=[],a=0;a<n.length;a++){var s=n[a],l=h[s.id];l.refs--,o.push(l)}if(e){r(i(e,t),t)}for(var a=0;a<o.length;a++){var l=o[a];if(0===l.refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete h[l.id]}}}};var w=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join(\"\\n\")}}()},function(e,t){e.exports=function(e){var t=\"undefined\"!=typeof window&&window.location;if(!t)throw new Error(\"fixUrls requires window.location\");if(!e||\"string\"!=typeof e)return e;var n=t.protocol+\"//\"+t.host,r=n+t.pathname.replace(/\\/[^\\/]*$/,\"/\");return e.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,function(e,t){var i=t.trim().replace(/^\"(.*)\"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(i))return e;var o;return o=0===i.indexOf(\"//\")?i:0===i.indexOf(\"/\")?n+i:r+i.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(o)+\")\"})}},function(e,t,n){n(12),e.exports=n(1)}])});","site":{"data":{}},"excerpt":"","more":"/*!\n * Valine v1.3.4\n * (c) 2017-2018 xCss\n * Released under the GPL-2.0 License.\n */\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.Valine=t():e.Valine=t()}(this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,\"a\",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=\"\",t(t.s=17)}([function(e,t,n){var r,i,o;/*!\n\tautosize 4.0.2\n\tlicense: MIT\n\thttp://www.jacklmoore.com/autosize\n*/\n!function(n,a){i=[e,t],r=a,void 0!==(o=\"function\"==typeof r?r.apply(t,i):r)&&(e.exports=o)}(0,function(e,t){\"use strict\";function n(e){function t(t){var n=e.style.width;e.style.width=\"0px\",e.offsetWidth,e.style.width=n,e.style.overflowY=t}function n(e){for(var t=[];e&&e.parentNode&&e.parentNode instanceof Element;)e.parentNode.scrollTop&&t.push({node:e.parentNode,scrollTop:e.parentNode.scrollTop}),e=e.parentNode;return t}function r(){if(0!==e.scrollHeight){var t=n(e),r=document.documentElement&&document.documentElement.scrollTop;e.style.height=\"\",e.style.height=e.scrollHeight+s+\"px\",l=e.clientWidth,t.forEach(function(e){e.node.scrollTop=e.scrollTop}),r&&(document.documentElement.scrollTop=r)}}function i(){r();var n=Math.round(parseFloat(e.style.height)),i=window.getComputedStyle(e,null),o=\"content-box\"===i.boxSizing?Math.round(parseFloat(i.height)):e.offsetHeight;if(o<n?\"hidden\"===i.overflowY&&(t(\"scroll\"),r(),o=\"content-box\"===i.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight):\"hidden\"!==i.overflowY&&(t(\"hidden\"),r(),o=\"content-box\"===i.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight),c!==o){c=o;var s=a(\"autosize:resized\");try{e.dispatchEvent(s)}catch(e){}}}if(e&&e.nodeName&&\"TEXTAREA\"===e.nodeName&&!o.has(e)){var s=null,l=null,c=null,d=function(){e.clientWidth!==l&&i()},u=function(t){window.removeEventListener(\"resize\",d,!1),e.removeEventListener(\"input\",i,!1),e.removeEventListener(\"keyup\",i,!1),e.removeEventListener(\"autosize:destroy\",u,!1),e.removeEventListener(\"autosize:update\",i,!1),Object.keys(t).forEach(function(n){e.style[n]=t[n]}),o.delete(e)}.bind(e,{height:e.style.height,resize:e.style.resize,overflowY:e.style.overflowY,overflowX:e.style.overflowX,wordWrap:e.style.wordWrap});e.addEventListener(\"autosize:destroy\",u,!1),\"onpropertychange\"in e&&\"oninput\"in e&&e.addEventListener(\"keyup\",i,!1),window.addEventListener(\"resize\",d,!1),e.addEventListener(\"input\",i,!1),e.addEventListener(\"autosize:update\",i,!1),e.style.overflowX=\"hidden\",e.style.wordWrap=\"break-word\",o.set(e,{destroy:u,update:i}),function(){var t=window.getComputedStyle(e,null);\"vertical\"===t.resize?e.style.resize=\"none\":\"both\"===t.resize&&(e.style.resize=\"horizontal\"),s=\"content-box\"===t.boxSizing?-(parseFloat(t.paddingTop)+parseFloat(t.paddingBottom)):parseFloat(t.borderTopWidth)+parseFloat(t.borderBottomWidth),isNaN(s)&&(s=0),i()}()}}function r(e){var t=o.get(e);t&&t.destroy()}function i(e){var t=o.get(e);t&&t.update()}var o=\"function\"==typeof Map?new Map:function(){var e=[],t=[];return{has:function(t){return e.indexOf(t)>-1},get:function(n){return t[e.indexOf(n)]},set:function(n,r){-1===e.indexOf(n)&&(e.push(n),t.push(r))},delete:function(n){var r=e.indexOf(n);r>-1&&(e.splice(r,1),t.splice(r,1))}}}(),a=function(e){return new Event(e,{bubbles:!0})};try{new Event(\"test\")}catch(e){a=function(e){var t=document.createEvent(\"Event\");return t.initEvent(e,!0,!1),t}}var s=null;\"undefined\"==typeof window||\"function\"!=typeof window.getComputedStyle?(s=function(e){return e},s.destroy=function(e){return e},s.update=function(e){return e}):(s=function(e,t){return e&&Array.prototype.forEach.call(e.length?e:[e],function(e){return n(e)}),e},s.destroy=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],r),e},s.update=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],i),e}),t.default=s,e.exports=t.default})},function(e,t,n){\"use strict\";function r(e){var t=this;return!!e&&t.init(e),t}function i(e){return new r(e)}var o=n(9).version,a=n(6),s=n(8),l=n(0),c=n(5),d=n(3),u=n(4),p=n(2),f=n(7),h={comment:\"\",nick:\"Anonymous\",mail:\"\",link:\"\",ua:navigator.userAgent,url:\"\"},v={\"zh-cn\":{head:{nick:\"昵称\",mail:\"邮箱\",link:\"网址(http://)\"},tips:{comments:\"评论\",sofa:\"快来做第一个评论的人吧~\",busy:\"还在提交中，请稍候...\",again:\"这么简单也能错，也是没谁了.\"},ctrl:{reply:\"回复\",ok:\"好的\",sure:\"确认\",cancel:\"取消\",confirm:\"确认\",continue:\"继续\",more:\"查看更多...\",try:\"再试试?\"},error:{99:\"初始化失败，请检查init中的`el`元素.\",100:\"初始化失败，请检查你的AppId和AppKey.\",401:\"未经授权的操作，请检查你的AppId和AppKey.\",403:\"访问被api域名白名单拒绝，请检查你的安全域名设置.\"},timeago:{seconds:\"秒前\",minutes:\"分钟前\",hours:\"小时前\",days:\"天前\",now:\"刚刚\"}},en:{head:{nick:\"NickName\",mail:\"E-Mail\",link:\"Website(http://)\"},tips:{comments:\"Comments\",sofa:\"No comments yet.\",busy:\"Submit is busy, please wait...\",again:\"Sorry, this is a wrong calculation.\"},ctrl:{reply:\"Reply\",ok:\"Ok\",sure:\"Sure\",cancel:\"Cancel\",confirm:\"Confirm\",continue:\"Continue\",more:\"Load More...\",try:\"Once More?\"},error:{99:\"Initialization failed, Please check the `el` element in the init method.\",100:\"Initialization failed, Please check your appId and appKey.\",401:\"Unauthorized operation, Please check your appId and appKey.\",403:\"Access denied by api domain white list, Please check your security domain.\"},timeago:{seconds:\"seconds ago\",minutes:\"minutes ago\",hours:\"hours ago\",days:\"days ago\",now:\"just now\"}}},g={cdn:\"https://gravatar.loli.net/avatar/\",ds:[\"mp\",\"identicon\",\"monsterid\",\"wavatar\",\"robohash\",\"retro\",\"\"],params:\"\",hide:!1},m=[\"nick\",\"mail\",\"link\"],b=Storage&&localStorage&&localStorage instanceof Storage&&localStorage,x=location.pathname.replace(/index\\.html?$/,\"\");r.prototype.init=function(e){if(\"undefined\"==typeof document)return void console;var t=this;try{var n=e.lang||\"\",r=e.langMode||\"\",i=g.ds,a=e.avatar,l=e.avatarForce,c=e.avatar_cdn||\"\";n&&r&&t.installLocale(n,r),t.locale=t.locale||v[e.lang||\"zh-cn\"],t.notify=e.notify||!1,t.verify=e.verify||!1;var d=l?\"&q=\"+Math.random().toString(32).substring(2):\"\";g.params=\"?d=\"+(i.indexOf(a)>-1?a:\"mp\")+\"&v=\"+o+d,g.hide=\"hide\"===a,g.cdn=!!c&&c||g.cdn,x=e.path||x;var p=Number(e.pageSize||10);if(e.pageSize=isNaN(p)?10:p<1?10:p,s.setOptions({renderer:new s.Renderer,highlight:!1===e.highlight?null:f,gfm:!0,tables:!0,breaks:!0,pedantic:!1,sanitize:!1,smartLists:!0,smartypants:!0}),!AV)return void setTimeout(function(){t.init(e)},20);var h=e.app_id||e.appId,b=e.app_key||e.appKey,y=(e.region||\"cn\").toLowerCase(),k=[\"cn\",\"us\"];if(y=k.indexOf(y)>-1?y:k[0],!h||!b)throw 99;AV.applicationId&&delete AV._config.applicationId||(AV.applicationId=null),AV.applicationKey&&delete AV._config.applicationKey||(AV.applicationKey=null),AV.init({appId:h,appKey:b,region:y});for(var _=u.findAll(document,\".valine-comment-count\"),A=0,O=_.length;A<O;A++)!function(e,n){var r=_[e];if(r){var i=u.attr(r,\"data-xid\");i&&t.Q(i).count().then(function(e){r.innerText=e}).catch(function(e){r.innerText=0})}}(A);e.visitor&&w.add(AV.Object.extend(\"Counter\"));var S=e.el||null,$=u.findAll(document,S);if(!(S=S instanceof HTMLElement?S:$[$.length-1]||null))return;t.el=S,t.el.classList.add(\"v\"),g.hide&&t.el.classList.add(\"hide-avatar\"),e.meta=(e.guest_info||e.meta||m).filter(function(e){return m.indexOf(e)>-1});var E=(0==e.meta.length?m:e.meta).map(function(e){var n=\"mail\"==e?\"email\":\"text\";return m.indexOf(e)>-1?'<input name=\"'+e+'\" placeholder=\"'+t.locale.head[e]+'\" class=\"v'+e+' vinput\" type=\"'+n+'\">':\"\"});t.placeholder=e.placeholder||\"Just Go Go\",t.el.innerHTML='<div class=\"vwrap\"><div class=\"vheader item'+E.length+'\">'+E.join(\"\")+'</div><div class=\"vedit\"><textarea id=\"veditor\" class=\"veditor vinput\" placeholder=\"'+t.placeholder+'\"></textarea><div class=\"vctrl\"><span class=\"vemoji-btn\">Emoji</span> | <span class=\"vpreview-btn\">Preview</span></div><div class=\"vemojis\" style=\"display:none;\"></div><div class=\"vinput vpreview\" style=\"display:none;\"></div></div><div class=\"vcontrol\"><div class=\"col col-20\" title=\"Markdown is supported\"><a href=\"https://segmentfault.com/markdown\" target=\"_blank\"><svg class=\"markdown\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M14.85 3H1.15C.52 3 0 3.52 0 4.15v7.69C0 12.48.52 13 1.15 13h13.69c.64 0 1.15-.52 1.15-1.15v-7.7C16 3.52 15.48 3 14.85 3zM9 11H7V8L5.5 9.92 4 8v3H2V5h2l1.5 2L7 5h2v6zm2.99.5L9.5 8H11V5h2v3h1.5l-2.51 3.5z\"></path></svg></a></div><div class=\"col col-80 text-right\"><button type=\"button\" title=\"Cmd|Ctrl+Enter\" class=\"vsubmit vbtn\">'+t.locale.ctrl.reply+'</button></div></div><div style=\"display:none;\" class=\"vmark\"></div></div><div class=\"vinfo\" style=\"display:none;\"><div class=\"vcount col\"></div></div><div class=\"vlist\"></div><div class=\"vempty\" style=\"display:none;\"></div><div class=\"vpage txt-center\"></div><div class=\"info\"><div class=\"power txt-right\">Powered By <a href=\"https://valine.js.org\" target=\"_blank\">Valine</a><br>v'+o+\"</div></div>\";var C=u.find(t.el,\".vempty\");t.nodata={show:function(e){return C.innerHTML=e||t.locale.tips.sofa,u.attr(C,\"style\",\"display:block;\"),t},hide:function(){return u.attr(C,\"style\",\"display:none;\"),t}};var M=u.create(\"div\",\"class\",\"vloading\"),L=u.find(t.el,\".vlist\");t.loading={show:function(e){var n=u.findAll(L,\".vcard\");return e?L.insertBefore(M,n[0]):L.appendChild(M),t.nodata.hide(),t},hide:function(){var e=u.find(L,\".vloading\");return e&&u.remove(L,e),0===u.findAll(L,\".vcard\").length&&t.nodata.show(),t}};var T=u.find(t.el,\".vmark\");t.alert={show:function(e){T.innerHTML='<div class=\"valert txt-center\"><div class=\"vtext\">'+(e&&e.text||1)+'</div><div class=\"vbtns\"></div></div>';var n=u.find(T,\".vbtns\"),r='<button class=\"vcancel vbtn\">'+(e&&e.ctxt||t.locale.ctrl.cancel)+\"</button>\",i='<button class=\"vsure vbtn\">'+(e&&e.otxt||t.locale.ctrl.sure)+\"</button>\";if(n.innerHTML=\"\"+r+(e&&e.type&&i),u.on(\"click\",u.find(T,\".vcancel\"),function(e){t.alert.hide()}),u.attr(T,\"style\",\"display:block;\"),e&&e.type){var o=u.find(T,\".vsure\");u.on(\"click\",o,function(n){t.alert.hide(),e.cb&&e.cb()})}return t},hide:function(){return u.attr(T,\"style\",\"display:none;\"),t}},t.bind(e)}catch(e){t.ErrorHandler(e)}return t};var y=function(e,t){var n=new e,r=new AV.ACL;r.setPublicReadAccess(!0),r.setPublicWriteAccess(!0),n.setACL(r),n.set(\"url\",t.url),n.set(\"xid\",t.xid),n.set(\"title\",t.title),n.set(\"time\",1),n.save().then(function(e){u.find(t.el,\".leancloud-visitors-count\").innerText=1}).catch(function(e){})},w={add:function(e){var t=u.findAll(document,\".leancloud_visitors,.leancloud-visitors\");if(t.length){var n=t[0],r=u.attr(n,\"id\"),i=u.attr(n,\"data-flag-title\"),o=encodeURI(r),a={el:n,url:r,xid:o,title:i};if(decodeURI(r)===decodeURI(x)){var s=new AV.Query(e);s.equalTo(\"url\",r),s.find().then(function(t){if(t.length>0){var r=t[0];r.increment(\"time\"),r.save().then(function(e){u.find(n,\".leancloud-visitors-count\").innerText=e.get(\"time\")}).catch(function(e){})}else y(e,a)}).catch(function(t){101==t.code&&y(e,a)})}else w.show(e,t)}},show:function(e,t){u.each(t,function(e,t){var n=u.find(t,\".leancloud-visitors-count\");n&&(n.innerText=0)});var n=[];for(var r in t)t.hasOwnProperty(r)&&n.push(u.attr(t[r],\"id\"));if(n.length){var i=new AV.Query(e);i.containedIn(\"url\",n),i.find().then(function(e){e.length>0&&u.each(e,function(e,t){var n=t.get(\"url\"),r=t.get(\"time\"),i=u.find(document,'.leancloud_visitors[id=\"'+n+'\"]')||u.find(document,'.leancloud-visitors[id=\"'+n+'\"]'),o=u.find(i,\".leancloud-visitors-count\");o&&(o.innerText=r)})}).catch(function(e){})}}};r.prototype.Q=function(e){if(1==arguments.length){var t=new AV.Query(\"Comment\");t.doesNotExist(\"rid\");var n=new AV.Query(\"Comment\");n.equalTo(\"rid\",\"\");var r=AV.Query.or(t,n);return r.equalTo(\"url\",decodeURI(e)),r.addDescending(\"createdAt\"),r.addDescending(\"insertedAt\"),r}var i=JSON.stringify(arguments[1]).replace(/(\\[|\\])/g,\"\"),o=\"select * from Comment where rid in (\"+i+\") order by -createdAt,-createdAt\";return AV.Query.doCloudQuery(o)},r.prototype.ErrorHandler=function(e){var t=this;if(t.el&&t.loading.hide().nodata.hide(),\"[object Error]\"==={}.toString.call(e)){var n=e.code||\"\",r=t.locale.error[n],i=r||e.message||e.error||\"\";101==n?t.nodata.show():t.el&&t.nodata.show('<pre style=\"text-align:left;\">Code '+n+\": \"+i+\"</pre>\")||console}else t.el&&t.nodata.show('<pre style=\"text-align:left;\">'+JSON.stringify(e)+\"</pre>\")||console},r.prototype.installLocale=function(e,t){var n=this;return t=t||{},e&&(v[e]=t,n.locale=v[e]||v[\"zh-cn\"]),n},r.prototype.setPath=function(e){return x=e||x,this},r.prototype.bind=function(e){var t=this,n=u.find(t.el,\".vemojis\"),r=u.find(t.el,\".vpreview\"),i=u.find(t.el,\".vemoji-btn\"),o=u.find(t.el,\".vpreview-btn\"),f=p.data;for(var v in f)f.hasOwnProperty(v)&&function(e,r){var i=u.create(\"i\",{name:e,title:e});i.innerHTML=r,n.appendChild(i),u.on(\"click\",i,function(e){var n=u.find(t.el,\".veditor\");E(n,r),y(n)})}(v,f[v]);t.emoji={show:function(){return t.preview.hide(),u.attr(i,\"v\",1),u.removeAttr(o,\"v\"),u.attr(n,\"style\",\"display:block\"),t.emoji},hide:function(){return u.removeAttr(i,\"v\"),u.attr(n,\"style\",\"display:hide\"),t.emoji}},t.preview={show:function(){return t.emoji.hide(),u.attr(o,\"v\",1),u.removeAttr(i,\"v\"),r.innerHTML=h.comment,u.attr(r,\"style\",\"display:block\"),T(),t.preview},hide:function(){return u.removeAttr(o,\"v\"),u.attr(r,\"style\",\"display:none\"),t.preview},empty:function(){return r.innerHtml=\"\",t.preview}};var m=function(e){var t=u.create(\"div\");t.insertAdjacentHTML(\"afterbegin\",e);var n=u.findAll(t,\"*\"),r=[\"INPUT\",\"STYLE\",\"SCRIPT\",\"IFRAME\",\"FRAME\",\"AUDIO\",\"VIDEO\",\"EMBED\",\"META\",\"TITLE\",\"LINK\"],i=function(e,t){var n=u.attr(e,t);n&&u.attr(e,t,n.replace(/(javascript|eval)/gi,\"\"))};return u.each(n,function(e,n){1===n.nodeType&&(r.indexOf(n.nodeName)>-1&&(\"INPUT\"===n.nodeName&&\"checkbox\"===u.attr(n,\"type\")?u.attr(n,\"disabled\",\"disabled\"):u.remove(t,n)),\"A\"===n.nodeName&&i(n,\"href\"),u.clearAttr(n))}),t.innerHTML},y=function(e){var t=e.value||\"\";t=p.parse(t),e.value=t;var n=m(s(t));h.comment=n,r.innerHTML=n,t?l(e):l.destroy(e)};u.on(\"click\",i,function(e){u.attr(i,\"v\")?t.emoji.hide():t.emoji.show()}),u.on(\"click\",o,function(e){u.attr(o,\"v\")?t.preview.hide():t.preview.show()});for(var w=e.meta,_={},A={veditor:\"comment\"},O=0,S=w.length;O<S;O++)A[\"v\"+w[O]]=w[O];for(var $ in A)A.hasOwnProperty($)&&function(){var e=A[$],n=u.find(t.el,\".\"+$);_[e]=n,n&&u.on(\"input change blur\",n,function(t){\"comment\"===e?y(n):h[e]=u.escape(n.value.replace(/(^\\s*)|(\\s*$)/g,\"\"))})}();var E=function(e,t){if(document.selection){e.focus();document.selection.createRange().text=t,e.focus()}else if(e.selectionStart||\"0\"==e.selectionStart){var n=e.selectionStart,r=e.selectionEnd,i=e.scrollTop;e.value=e.value.substring(0,n)+t+e.value.substring(r,e.value.length),e.focus(),e.selectionStart=n+t.length,e.selectionEnd=n+t.length,e.scrollTop=i}else e.focus(),e.value+=t},C=function(e){var n=u.find(t.el,\".vh[rootid='\"+e+\"']\"),r=u.find(n,\".vquote\");return r||(r=u.create(\"div\",\"class\",\"vquote\"),n.appendChild(r)),r},M=function n(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,i=e.pageSize,o=Number(u.find(t.el,\".vnum\").innerText);t.loading.show();var a=t.Q(x);a.limit(i),a.skip((r-1)*i),a.find().then(function(e){for(var a=e.length,s=[],l=0;l<a;l++){var c=e[l];s.push(c.id),L(c,u.find(t.el,\".vlist\"),!0)}t.Q(x,s).then(function(e){for(var t=e&&e.results||[],n=0;n<t.length;n++){var r=t[n];L(r,C(r.get(\"rid\")))}});var d=u.find(t.el,\".vpage\");d.innerHTML=i*r<o?'<button type=\"button\" class=\"vmore vbtn\">'+t.locale.ctrl.more+\"</button>\":\"\";var p=u.find(d,\".vmore\");p&&u.on(\"click\",p,function(e){d.innerHTML=\"\",n(++r)}),t.loading.hide()}).catch(function(e){t.loading.hide().ErrorHandler(e)})};t.Q(x).count().then(function(e){e>0?(u.attr(u.find(t.el,\".vinfo\"),\"style\",\"display:block;\"),u.find(t.el,\".vcount\").innerHTML='<span class=\"vnum\">'+e+\"</span> \"+t.locale.tips.comments,M()):t.loading.hide()}).catch(function(e){t.ErrorHandler(e)});var L=function(e,n,r){var i=u.create(\"div\",{class:\"vcard\",id:e.id}),o=g.hide?\"\":'<img class=\"vimg\" src=\"'+(g.cdn+a(e.get(\"mail\"))+g.params)+'\">',s=e.get(\"ua\")||\"\",l=\"\";if(s){s=d(s);l='<span class=\"vsys\">'+s.browser+\" \"+s.version+\"</span>\"+\" \"+('<span class=\"vsys\">'+s.os+\" \"+s.osVersion+\"</span>\")}var p=\"\",f=e.get(\"link\")||\"\";p=f?'<a class=\"vnick\" rel=\"nofollow\" href=\"'+f+'\" target=\"_blank\" >'+e.get(\"nick\")+\"</a>\":'<span class=\"vnick\">'+e.get(\"nick\")+\"</span>\",i.innerHTML=o+'\\n            <div class=\"vh\" rootid='+(e.get(\"rid\")||e.id)+'>\\n                <div class=\"vhead\">'+p+\" \"+l+'</div>\\n                <div class=\"vmeta\">\\n                    <span class=\"vtime\">'+c(e.get(\"insertedAt\")||e.createdAt,t.locale)+'</span>\\n                    <span rid=\"'+(e.get(\"rid\")||e.id)+'\" cid=\"'+e.id+'\" at=\"@'+u.escape(e.get(\"nick\"))+'\" mail=\"'+e.get(\"mail\")+'\" class=\"vat\">'+t.locale.ctrl.reply+'</span>\\n                </div>\\n                <div class=\"vcontent\">\\n                    '+m(e.get(\"comment\"))+\"\\n                </div>\\n            </div>\";for(var h=u.find(i,\".vat\"),v=u.findAll(i,\"a\"),b=0,x=v.length;b<x;b++){var y=v[b];y&&-1==(u.attr(y,\"class\")||\"\").indexOf(\"at\")&&u.attr(y,{target:\"_blank\",rel:\"nofollow\"})}var w=u.findAll(n,\".vcard\");r?n.appendChild(i):n.insertBefore(i,w[0]);var k=u.find(i,\".vcontent\");k&&z(k),h&&B(h),T()},T=function(){setTimeout(function(){var e=e||\"\";e&&e.Hub.Queue([\"Typeset\",e.Hub])},20)},z=function(e){setTimeout(function(){e.offsetHeight>180&&(e.classList.add(\"expand\"),u.on(\"click\",e,function(t){u.attr(e,\"class\",\"vcontent\")}))})},R={},B=function(e){u.on(\"click\",e,function(t){var n=u.attr(e,\"at\"),r=u.attr(e,\"rid\"),i=u.attr(e,\"cid\"),o=u.attr(e,\"mail\");R={at:u.escape(n)+\" \",rid:r,pid:i,rmail:o},u.attr(_.comment,\"placeholder\",n),_.comment.focus()})};!function(){var e=b&&b.ValineCache;if(e){e=JSON.parse(e);var n=w;for(var r in n){var i=n[r];u.find(t.el,\".v\"+i).value=u.unescape(e[i]),h[i]=e[i]}}}();var j=function(){h.comment=\"\",_.comment.value=\"\",y(_.comment),u.attr(_.comment,\"placeholder\",t.placeholder),R={},t.preview.empty().hide()},I=u.find(t.el,\".vsubmit\"),P=function(e){if(u.attr(I,\"disabled\"))return void t.alert.show({type:0,text:t.locale.tips.busy+'ヾ(๑╹◡╹)ﾉ\"',ctxt:t.locale.ctrl.ok});if(\"\"==h.comment)return void _.comment.focus();h.nick=h.nick||\"Anonymous\";var n=k.mail(h.mail),r=k.link(h.link);h.mail=n.k?n.v:\"\",h.link=r.k?r.v:\"\",t.notify||t.verify?V(Q):Q()},U=function(){var e=new AV.ACL;return e.setPublicReadAccess(!0),e.setPublicWriteAccess(!1),e},Q=function(){u.attr(I,\"disabled\",!0),t.loading.show(!0);var e=AV.Object.extend(\"Comment\"),n=new e;if(h.url=decodeURI(x),h.insertedAt=new Date,R.rid){var r=R.pid||R.rid;n.set(\"rid\",R.rid),n.set(\"pid\",r),h.comment='<a class=\"at\" href=\"#'+r+'\">'+R.at+\"</a>\"+h.comment}for(var i in h)if(h.hasOwnProperty(i)){var o=h[i];n.set(i,o)}n.setACL(U()),n.save().then(function(e){\"Anonymous\"!=h.nick&&b&&b.setItem(\"ValineCache\",JSON.stringify({nick:h.nick,link:h.link,mail:h.mail}));var n=u.find(t.el,\".vnum\"),r=1;try{if(R.rid){var i=u.find(t.el,'.vquote[rid=\"'+R.rid+'\"]')||C(R.rid);L(e,i,!0)}else n?(r=Number(n.innerText)+1,n.innerText=r):u.find(t.el,\".vcount\").innerHTML='<span class=\"num\">1</span> '+t.locale.tips.comments,L(e,u.find(t.el,\".vlist\"));h.mail&&N({username:h.nick,mail:h.mail}),R.at&&R.rmail&&t.notify&&F({username:R.at.replace(\"@\",\"\"),mail:R.rmail}),u.removeAttr(I,\"disabled\"),t.loading.hide(),j()}catch(e){t.ErrorHandler(e)}}).catch(function(e){t.ErrorHandler(e)})},V=function e(n){var r=Math.floor(10*Math.random()+1),i=Math.floor(10*Math.random()+1),o=Math.floor(10*Math.random()+1),a=[\"+\",\"-\",\"x\"],s=a[Math.floor(3*Math.random())],l=a[Math.floor(3*Math.random())],c=\"\"+r+s+i+l+o,d=c+\" = <input class='vcode vinput' >\";t.alert.show({type:1,text:d,ctxt:t.locale.ctrl.cancel,otxt:t.locale.ctrl.ok,cb:function(){var r=+u.find(t.el,\".vcode\").value;new Function(\"return \"+c.replace(/x/g,\"*\"))()===r?n&&n():t.alert.show({type:1,text:\"(T＿T)\"+t.locale.tips.again,ctxt:t.locale.ctrl.cancel,otxt:t.locale.ctrl.try,cb:function(){e(n)}})}})},N=function(e){var t=new AV.User;return t.setUsername(e.username),t.setPassword(e.mail),t.setEmail(e.mail),t.setACL(U()),t.signUp()},F=function e(n){AV.User.requestPasswordReset(n.mail).then(function(e){}).catch(function(r){1==r.code?t.alert.show({type:0,text:\"ヾ(ｏ･ω･)ﾉ At太频繁啦，提醒功能暂时宕机。<br>\"+r.error,ctxt:t.locale.ctrl.ok}):N(n).then(function(t){e(n)}).catch(function(e){})})};u.on(\"click\",I,P),u.on(\"keydown\",document,function(e){e=event||e;var n=e.keyCode||e.which||e.charCode;if(((e.ctrlKey||e.metaKey)&&13===n&&P(),9===n)&&\"veditor\"==(document.activeElement.id||\"\")){e.preventDefault();var r=u.find(t.el,\".veditor\");E(r,\"    \")}})};var k={mail:function(e){return{k:/[\\w-\\.]+@([\\w-]+\\.)+[a-z]{2,3}/.test(e),v:e}},link:function(e){return e=e.length>0&&(/^https?/.test(e)?e:\"http://\"+e),{k:/^https?:\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:\\/~\\+#]*[\\w\\-\\@?^=%&amp;\\/~\\+#])?/.test(e),v:e}}};e.exports=i,e.exports.default=i},function(e,t,n){\"use strict\";var r={data:n(11),parse:function(e){return String(e).replace(/:(.+?):/g,function(e,t){return r.data[t]||e})}};e.exports=r},function(e,t,n){\"use strict\";function r(e){var t=this,n={Trident:e.indexOf(\"Trident\")>-1||e.indexOf(\"NET CLR\")>-1,Presto:e.indexOf(\"Presto\")>-1,WebKit:e.indexOf(\"AppleWebKit\")>-1,Gecko:e.indexOf(\"Gecko/\")>-1,Safari:e.indexOf(\"Safari\")>-1,Chrome:e.indexOf(\"Chrome\")>-1||e.indexOf(\"CriOS\")>-1,IE:e.indexOf(\"MSIE\")>-1||e.indexOf(\"Trident\")>-1,Edge:e.indexOf(\"Edge\")>-1,Firefox:e.indexOf(\"Firefox\")>-1||e.indexOf(\"FxiOS\")>-1,\"Firefox Focus\":e.indexOf(\"Focus\")>-1,Chromium:e.indexOf(\"Chromium\")>-1,Opera:e.indexOf(\"Opera\")>-1||e.indexOf(\"OPR\")>-1,Vivaldi:e.indexOf(\"Vivaldi\")>-1,Yandex:e.indexOf(\"YaBrowser\")>-1,Kindle:e.indexOf(\"Kindle\")>-1||e.indexOf(\"Silk/\")>-1,360:e.indexOf(\"360EE\")>-1||e.indexOf(\"360SE\")>-1,UC:e.indexOf(\"UC\")>-1||e.indexOf(\" UBrowser\")>-1,QQBrowser:e.indexOf(\"QQBrowser\")>-1,QQ:e.indexOf(\"QQ/\")>-1,Baidu:e.indexOf(\"Baidu\")>-1||e.indexOf(\"BIDUBrowser\")>-1,Maxthon:e.indexOf(\"Maxthon\")>-1,Sogou:e.indexOf(\"MetaSr\")>-1||e.indexOf(\"Sogou\")>-1,LBBROWSER:e.indexOf(\"LBBROWSER\")>-1,\"2345Explorer\":e.indexOf(\"2345Explorer\")>-1,TheWorld:e.indexOf(\"TheWorld\")>-1,XiaoMi:e.indexOf(\"MiuiBrowser\")>-1,Quark:e.indexOf(\"Quark\")>-1,Qiyu:e.indexOf(\"Qiyu\")>-1,Wechat:e.indexOf(\"MicroMessenger\")>-1,Taobao:e.indexOf(\"AliApp(TB\")>-1,Alipay:e.indexOf(\"AliApp(AP\")>-1,Weibo:e.indexOf(\"Weibo\")>-1,Douban:e.indexOf(\"com.douban.frodo\")>-1,Suning:e.indexOf(\"SNEBUY-APP\")>-1,iQiYi:e.indexOf(\"IqiyiApp\")>-1,Windows:e.indexOf(\"Windows\")>-1,Linux:e.indexOf(\"Linux\")>-1||e.indexOf(\"X11\")>-1,\"Mac OS\":e.indexOf(\"Macintosh\")>-1,Android:e.indexOf(\"Android\")>-1||e.indexOf(\"Adr\")>-1,Ubuntu:e.indexOf(\"Ubuntu\")>-1,FreeBSD:e.indexOf(\"FreeBSD\")>-1,Debian:e.indexOf(\"Debian\")>-1,\"Windows Phone\":e.indexOf(\"IEMobile\")>-1||e.indexOf(\"Windows Phone\")>-1,BlackBerry:e.indexOf(\"BlackBerry\")>-1||e.indexOf(\"RIM\")>-1,MeeGo:e.indexOf(\"MeeGo\")>-1,Symbian:e.indexOf(\"Symbian\")>-1,iOS:e.indexOf(\"like Mac OS X\")>-1,\"Chrome OS\":e.indexOf(\"CrOS\")>-1,WebOS:e.indexOf(\"hpwOS\")>-1,Mobile:e.indexOf(\"Mobi\")>-1||e.indexOf(\"iPh\")>-1||e.indexOf(\"480\")>-1,Tablet:e.indexOf(\"Tablet\")>-1||e.indexOf(\"Pad\")>-1||e.indexOf(\"Nexus 7\")>-1};n.Mobile&&(n.Mobile=!(e.indexOf(\"iPad\")>-1));var r={engine:[\"WebKit\",\"Trident\",\"Gecko\",\"Presto\"],browser:[\"Safari\",\"Chrome\",\"Edge\",\"IE\",\"Firefox\",\"Firefox Focus\",\"Chromium\",\"Opera\",\"Vivaldi\",\"Yandex\",\"Kindle\",\"360\",\"UC\",\"QQBrowser\",\"QQ\",\"Baidu\",\"Maxthon\",\"Sogou\",\"LBBROWSER\",\"2345Explorer\",\"TheWorld\",\"XiaoMi\",\"Quark\",\"Qiyu\",\"Wechat\",\"Taobao\",\"Alipay\",\"Weibo\",\"Douban\",\"Suning\",\"iQiYi\"],os:[\"Windows\",\"Linux\",\"Mac OS\",\"Android\",\"Ubuntu\",\"FreeBSD\",\"Debian\",\"iOS\",\"Windows Phone\",\"BlackBerry\",\"MeeGo\",\"Symbian\",\"Chrome OS\",\"WebOS\"],device:[\"Mobile\",\"Tablet\"]};t.device=\"PC\";for(var i in r)for(var o=0;o<r[i].length;o++){var a=r[i][o];n[a]&&(t[i]=a)}var s={Windows:function(){var t=e.replace(/^.*Windows NT ([\\d.]+);.*$/,\"$1\");return{6.4:\"10\",6.3:\"8.1\",6.2:\"8\",6.1:\"7\",\"6.0\":\"Vista\",5.2:\"XP\",5.1:\"XP\",\"5.0\":\"2000\"}[t]||t},Android:function(){return e.replace(/^.*Android ([\\d.]+);.*$/,\"$1\")},iOS:function(){return e.replace(/^.*OS ([\\d_]+) like.*$/,\"$1\").replace(/_/g,\".\")},Debian:function(){return e.replace(/^.*Debian\\/([\\d.]+).*$/,\"$1\")},\"Windows Phone\":function(){return e.replace(/^.*Windows Phone( OS)? ([\\d.]+);.*$/,\"$2\")},\"Mac OS\":function(){return e.replace(/^.*Mac OS X ([\\d_]+).*$/,\"$1\").replace(/_/g,\".\")},WebOS:function(){return e.replace(/^.*hpwOS\\/([\\d.]+);.*$/,\"$1\")}};t.osVersion=\"\",s[t.os]&&(t.osVersion=s[t.os](),t.osVersion==e&&(t.osVersion=\"\"));var l={Safari:function(){return e.replace(/^.*Version\\/([\\d.]+).*$/,\"$1\")},Chrome:function(){return e.replace(/^.*Chrome\\/([\\d.]+).*$/,\"$1\").replace(/^.*CriOS\\/([\\d.]+).*$/,\"$1\")},IE:function(){return e.replace(/^.*MSIE ([\\d.]+).*$/,\"$1\").replace(/^.*rv:([\\d.]+).*$/,\"$1\")},Edge:function(){return e.replace(/^.*Edge\\/([\\d.]+).*$/,\"$1\")},Firefox:function(){return e.replace(/^.*Firefox\\/([\\d.]+).*$/,\"$1\").replace(/^.*FxiOS\\/([\\d.]+).*$/,\"$1\")},\"Firefox Focus\":function(){return e.replace(/^.*Focus\\/([\\d.]+).*$/,\"$1\")},Chromium:function(){return e.replace(/^.*Chromium\\/([\\d.]+).*$/,\"$1\")},Opera:function(){return e.replace(/^.*Opera\\/([\\d.]+).*$/,\"$1\").replace(/^.*OPR\\/([\\d.]+).*$/,\"$1\")},Vivaldi:function(){return e.replace(/^.*Vivaldi\\/([\\d.]+).*$/,\"$1\")},Yandex:function(){return e.replace(/^.*YaBrowser\\/([\\d.]+).*$/,\"$1\")},Kindle:function(){return e.replace(/^.*Version\\/([\\d.]+).*$/,\"$1\")},Maxthon:function(){return e.replace(/^.*Maxthon\\/([\\d.]+).*$/,\"$1\")},QQBrowser:function(){return e.replace(/^.*QQBrowser\\/([\\d.]+).*$/,\"$1\")},QQ:function(){return e.replace(/^.*QQ\\/([\\d.]+).*$/,\"$1\")},Baidu:function(){return e.replace(/^.*BIDUBrowser[\\s\\/]([\\d.]+).*$/,\"$1\")},UC:function(){return e.replace(/^.*UC?Browser\\/([\\d.]+).*$/,\"$1\")},Sogou:function(){return e.replace(/^.*SE ([\\d.X]+).*$/,\"$1\").replace(/^.*SogouMobileBrowser\\/([\\d.]+).*$/,\"$1\")},\"2345Explorer\":function(){return e.replace(/^.*2345Explorer\\/([\\d.]+).*$/,\"$1\")},TheWorld:function(){return e.replace(/^.*TheWorld ([\\d.]+).*$/,\"$1\")},XiaoMi:function(){return e.replace(/^.*MiuiBrowser\\/([\\d.]+).*$/,\"$1\")},Quark:function(){return e.replace(/^.*Quark\\/([\\d.]+).*$/,\"$1\")},Qiyu:function(){return e.replace(/^.*Qiyu\\/([\\d.]+).*$/,\"$1\")},Wechat:function(){return e.replace(/^.*MicroMessenger\\/([\\d.]+).*$/,\"$1\")},Taobao:function(){return e.replace(/^.*AliApp\\(TB\\/([\\d.]+).*$/,\"$1\")},Alipay:function(){return e.replace(/^.*AliApp\\(AP\\/([\\d.]+).*$/,\"$1\")},Weibo:function(){return e.replace(/^.*weibo__([\\d.]+).*$/,\"$1\")},Douban:function(){return e.replace(/^.*com.douban.frodo\\/([\\d.]+).*$/,\"$1\")},Suning:function(){return e.replace(/^.*SNEBUY-APP([\\d.]+).*$/,\"$1\")},iQiYi:function(){return e.replace(/^.*IqiyiVersion\\/([\\d.]+).*$/,\"$1\")}};t.version=\"\",l[t.browser]&&(t.version=l[t.browser](),t.version==e&&(t.version=\"\")),\"Edge\"==t.browser?t.engine=\"EdgeHTML\":\"Chrome\"==t.browser&&parseInt(t.version)>27?t.engine=\"Blink\":\"Opera\"==t.browser&&parseInt(t.version)>12?t.engine=\"Blink\":\"Yandex\"==t.browser?t.engine=\"Blink\":void 0==t.browser&&(t.browser=\"Unknow App\")}function i(e){return new r(e)}e.exports=i},function(e,t,n){\"use strict\";var r={},i={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#39;\",\"`\":\"&#x60;\",\"\\\\\":\"&#x5c;\"};for(var o in i)r[i[o]]=o;var a=/[&<>\"'`\\\\]/g,s=RegExp(a.source),l=/&(?:amp|lt|gt|quot|#39|#x60|#x5c);/g,c=RegExp(l.source),d={on:function(e,t,n,r){e=e.split(\" \");for(var i=0,o=e.length;i<o;i++)d.off(e[i],t,n,r),t.addEventListener?t.addEventListener(e[i],n,r||!1):t.attachEvent?t.attachEvent(\"on\"+e[i],n):t[\"on\"+e[i]]=n},off:function(e,t,n,r){t.removeEventListener?t.removeEventListener(e,n,r||!1):t.detachEvent?t.detachEvent(\"on\"+e,n):t[\"on\"+e]=null},escape:function(e){return e&&s.test(e)?e.replace(a,function(e){return i[e]}):e},unescape:function(e){return e&&c.test(e)?e.replace(l,function(e){return r[e]}):e},create:function(e,t,n){var r=document.createElement(e);return d.attr(r,t,n),r},find:function(e,t){return e.querySelector(t)},findAll:function(e,t){return e.querySelectorAll(t)},attr:function(e,t,n){if(void 0===e.getAttribute)return d.prop(e,t,n);if(void 0!==n)null===n?d.removeAttr(e,t):e.setAttribute(t,n);else{if(\"[object Object]\"!=={}.toString.call(t))return e.getAttribute(t);d.each(t,function(t,n){e.setAttribute(t,n)})}},prop:function(e,t,n){return void 0!==n?e[t]=n:\"[object Object]\"!=={}.toString.call(t)?e[t]:void d.each(t,function(t,n){e[t]=n})},removeAttr:function(e,t){var n=void 0,r=0,i=t&&t.match(/[^\\x20\\t\\r\\n\\f\\*\\/\\\\]+/g);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n);return e},clearAttr:function(e){var t=e.attributes,n=[\"align\",\"alt\",\"class\",\"disabled\",\"href\",\"id\",\"target\",\"title\",\"type\",\"style\",\"src\"];return d.each(t,function(t,r){var i=r.name;if(\"style\"===i){var o=r.value;d.each(o.split(\";\"),function(t,n){if(n.indexOf(\"color\")>-1)return d.attr(e,\"style\",n),!1;d.removeAttr(e,\"style\")})}n.indexOf(i)>-1||d.removeAttr(e,i)}),e},remove:function(e,t){try{t.parentNode&&t.parentNode.removeChild(t)}catch(e){}},each:function(e,t){var n=0,r=e.length,i=[\"[object Array]\",\"[object NodeList]\"],o={}.toString.call(e);if(i.indexOf(o)>-1)for(;n<r&&!1!==(t&&t.call(e[n],n,e[n]));n++);else for(n in e)if(e.hasOwnProperty(n)&&!1===(t&&t.call(e[n],n,e[n])))break;return e}};e.exports=d},function(e,t,n){\"use strict\";var r=function(e,t){if(e)try{var n=e.getTime(),r=(new Date).getTime(),o=r-n,a=Math.floor(o/864e5);if(0===a){var s=o%864e5,l=Math.floor(s/36e5);if(0===l){var c=s%36e5,d=Math.floor(c/6e4);if(0===d){var u=c%6e4;return Math.round(u/1e3)+\" \"+t.timeago.seconds}return d+\" \"+t.timeago.minutes}return l+\" \"+t.timeago.hours}return a<0?t.timeago.now:a<8?a+\" \"+t.timeago.days:i(e)}catch(e){}},i=function(e){var t=o(e.getDate(),2),n=o(e.getMonth()+1,2);return o(e.getFullYear(),2)+\"-\"+n+\"-\"+t},o=function(e,t){for(var n=e.toString();n.length<t;)n=\"0\"+n;return n};e.exports=r},function(e,t,n){var r;!function(i){\"use strict\";function o(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function a(e,t){return e<<t|e>>>32-t}function s(e,t,n,r,i,s){return o(a(o(o(t,e),o(r,s)),i),n)}function l(e,t,n,r,i,o,a){return s(t&n|~t&r,e,t,i,o,a)}function c(e,t,n,r,i,o,a){return s(t&r|n&~r,e,t,i,o,a)}function d(e,t,n,r,i,o,a){return s(t^n^r,e,t,i,o,a)}function u(e,t,n,r,i,o,a){return s(n^(t|~r),e,t,i,o,a)}function p(e,t){e[t>>5]|=128<<t%32,e[14+(t+64>>>9<<4)]=t;var n,r,i,a,s,p=1732584193,f=-271733879,h=-1732584194,v=271733878;for(n=0;n<e.length;n+=16)r=p,i=f,a=h,s=v,p=l(p,f,h,v,e[n],7,-680876936),v=l(v,p,f,h,e[n+1],12,-389564586),h=l(h,v,p,f,e[n+2],17,606105819),f=l(f,h,v,p,e[n+3],22,-1044525330),p=l(p,f,h,v,e[n+4],7,-176418897),v=l(v,p,f,h,e[n+5],12,1200080426),h=l(h,v,p,f,e[n+6],17,-1473231341),f=l(f,h,v,p,e[n+7],22,-45705983),p=l(p,f,h,v,e[n+8],7,1770035416),v=l(v,p,f,h,e[n+9],12,-1958414417),h=l(h,v,p,f,e[n+10],17,-42063),f=l(f,h,v,p,e[n+11],22,-1990404162),p=l(p,f,h,v,e[n+12],7,1804603682),v=l(v,p,f,h,e[n+13],12,-40341101),h=l(h,v,p,f,e[n+14],17,-1502002290),f=l(f,h,v,p,e[n+15],22,1236535329),p=c(p,f,h,v,e[n+1],5,-165796510),v=c(v,p,f,h,e[n+6],9,-1069501632),h=c(h,v,p,f,e[n+11],14,643717713),f=c(f,h,v,p,e[n],20,-373897302),p=c(p,f,h,v,e[n+5],5,-701558691),v=c(v,p,f,h,e[n+10],9,38016083),h=c(h,v,p,f,e[n+15],14,-660478335),f=c(f,h,v,p,e[n+4],20,-405537848),p=c(p,f,h,v,e[n+9],5,568446438),v=c(v,p,f,h,e[n+14],9,-1019803690),h=c(h,v,p,f,e[n+3],14,-187363961),f=c(f,h,v,p,e[n+8],20,1163531501),p=c(p,f,h,v,e[n+13],5,-1444681467),v=c(v,p,f,h,e[n+2],9,-51403784),h=c(h,v,p,f,e[n+7],14,1735328473),f=c(f,h,v,p,e[n+12],20,-1926607734),p=d(p,f,h,v,e[n+5],4,-378558),v=d(v,p,f,h,e[n+8],11,-2022574463),h=d(h,v,p,f,e[n+11],16,1839030562),f=d(f,h,v,p,e[n+14],23,-35309556),p=d(p,f,h,v,e[n+1],4,-1530992060),v=d(v,p,f,h,e[n+4],11,1272893353),h=d(h,v,p,f,e[n+7],16,-155497632),f=d(f,h,v,p,e[n+10],23,-1094730640),p=d(p,f,h,v,e[n+13],4,681279174),v=d(v,p,f,h,e[n],11,-358537222),h=d(h,v,p,f,e[n+3],16,-722521979),f=d(f,h,v,p,e[n+6],23,76029189),p=d(p,f,h,v,e[n+9],4,-640364487),v=d(v,p,f,h,e[n+12],11,-421815835),h=d(h,v,p,f,e[n+15],16,530742520),f=d(f,h,v,p,e[n+2],23,-995338651),p=u(p,f,h,v,e[n],6,-198630844),v=u(v,p,f,h,e[n+7],10,1126891415),h=u(h,v,p,f,e[n+14],15,-1416354905),f=u(f,h,v,p,e[n+5],21,-57434055),p=u(p,f,h,v,e[n+12],6,1700485571),v=u(v,p,f,h,e[n+3],10,-1894986606),h=u(h,v,p,f,e[n+10],15,-1051523),f=u(f,h,v,p,e[n+1],21,-2054922799),p=u(p,f,h,v,e[n+8],6,1873313359),v=u(v,p,f,h,e[n+15],10,-30611744),h=u(h,v,p,f,e[n+6],15,-1560198380),f=u(f,h,v,p,e[n+13],21,1309151649),p=u(p,f,h,v,e[n+4],6,-145523070),v=u(v,p,f,h,e[n+11],10,-1120210379),h=u(h,v,p,f,e[n+2],15,718787259),f=u(f,h,v,p,e[n+9],21,-343485551),p=o(p,r),f=o(f,i),h=o(h,a),v=o(v,s);return[p,f,h,v]}function f(e){var t,n=\"\",r=32*e.length;for(t=0;t<r;t+=8)n+=String.fromCharCode(e[t>>5]>>>t%32&255);return n}function h(e){var t,n=[];for(n[(e.length>>2)-1]=void 0,t=0;t<n.length;t+=1)n[t]=0;var r=8*e.length;for(t=0;t<r;t+=8)n[t>>5]|=(255&e.charCodeAt(t/8))<<t%32;return n}function v(e){return f(p(h(e),8*e.length))}function g(e,t){var n,r,i=h(e),o=[],a=[];for(o[15]=a[15]=void 0,i.length>16&&(i=p(i,8*e.length)),n=0;n<16;n+=1)o[n]=909522486^i[n],a[n]=1549556828^i[n];return r=p(o.concat(h(t)),512+8*t.length),f(p(a.concat(r),640))}function m(e){var t,n,r=\"0123456789abcdef\",i=\"\";for(n=0;n<e.length;n+=1)t=e.charCodeAt(n),i+=r.charAt(t>>>4&15)+r.charAt(15&t);return i}function b(e){return unescape(encodeURIComponent(e))}function x(e){return v(b(e))}function y(e){return m(x(e))}function w(e,t){return g(b(e),b(t))}function k(e,t){return m(w(e,t))}function _(e,t,n){return t?n?w(t,e):k(t,e):n?x(e):y(e)}void 0!==(r=function(){return _}.call(t,n,t,e))&&(e.exports=r)}()},function(e,t,n){!function(t,n){e.exports=n()}(0,function(){\"use strict\";function e(e){return'<span style=\"color: slategray\">'+e+\"</span>\"}var t=function(e,t){return t={exports:{}},e(t,t.exports),t.exports}(function(e){var t=e.exports=function(){return new RegExp(\"(?:\"+t.line().source+\")|(?:\"+t.block().source+\")\",\"gm\")};t.line=function(){return/(?:^|\\s)\\/\\/(.+?)$/gm},t.block=function(){return/\\/\\*([\\S\\s]*?)\\*\\//gm}}),n=[\"23AC69\",\"91C132\",\"F19726\",\"E8552D\",\"1AAB8E\",\"E1147F\",\"2980C1\",\"1BA1E6\",\"9FA0A0\",\"F19726\",\"E30B20\",\"E30B20\",\"A3338B\"];return function(r,i){void 0===i&&(i={});var o=i.colors;void 0===o&&(o=n);var a=0,s={},l=/[\\u4E00-\\u9FFF\\u3400-\\u4dbf\\uf900-\\ufaff\\u3040-\\u309f\\uac00-\\ud7af\\u0400-\\u04FF]+|\\w+/,c=/</,d=new RegExp(\"(\"+l.source+\"|\"+c.source+\")|(\"+t().source+\")\",\"gmi\");return r.replace(d,function(t,n,r){if(r)return e(r);if(\"<\"===n)return\"&lt;\";var i;s[n]?i=s[n]:(i=o[a],s[n]=i);var l='<span style=\"color: #'+i+'\">'+n+\"</span>\";return a=++a%o.length,l})}})},function(e,t,n){(function(t){!function(t){\"use strict\";function n(e){this.tokens=[],this.tokens.links={},this.options=e||h.defaults,this.rules=v.normal,this.options.pedantic?this.rules=v.pedantic:this.options.gfm&&(this.options.tables?this.rules=v.tables:this.rules=v.gfm)}function r(e,t){if(this.options=t||h.defaults,this.links=e,this.rules=g.normal,this.renderer=this.options.renderer||new i,this.renderer.options=this.options,!this.links)throw new Error(\"Tokens array requires a `links` property.\");this.options.pedantic?this.rules=g.pedantic:this.options.gfm&&(this.options.breaks?this.rules=g.breaks:this.rules=g.gfm)}function i(e){this.options=e||h.defaults}function o(){}function a(e){this.tokens=[],this.token=null,this.options=e||h.defaults,this.options.renderer=this.options.renderer||new i,this.renderer=this.options.renderer,this.renderer.options=this.options}function s(e,t){return e.replace(t?/&/g:/&(?!#?\\w+;)/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#39;\")}function l(e){return e.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/gi,function(e,t){return t=t.toLowerCase(),\"colon\"===t?\":\":\"#\"===t.charAt(0)?\"x\"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):\"\"})}function c(e,t){return e=e.source||e,t=t||\"\",{replace:function(t,n){return n=n.source||n,n=n.replace(/(^|[^\\[])\\^/g,\"$1\"),e=e.replace(t,n),this},getRegex:function(){return new RegExp(e,t)}}}function d(e,t){return m[\" \"+e]||(/^[^:]+:\\/*[^\\/]*$/.test(e)?m[\" \"+e]=e+\"/\":m[\" \"+e]=e.replace(/[^\\/]*$/,\"\")),e=m[\" \"+e],\"//\"===t.slice(0,2)?e.replace(/:[\\s\\S]*/,\":\")+t:\"/\"===t.charAt(0)?e.replace(/(:\\/*[^\\/]*)[\\s\\S]*/,\"$1\")+t:e+t}function u(){}function p(e){for(var t,n,r=1;r<arguments.length;r++){t=arguments[r];for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}function f(e,t){var n=e.replace(/([^\\\\])\\|/g,\"$1 |\").split(/ +\\| */),r=0;if(n.length>t)n.splice(t);else for(;n.length<t;)n.push(\"\");for(;r<n.length;r++)n[r]=n[r].replace(/\\\\\\|/g,\"|\");return n}function h(e,t,r){if(void 0===e||null===e)throw new Error(\"marked(): input parameter is undefined or null\");if(\"string\"!=typeof e)throw new Error(\"marked(): input parameter is of type \"+Object.prototype.toString.call(e)+\", string expected\");if(r||\"function\"==typeof t){r||(r=t,t=null),t=p({},h.defaults,t||{});var i,o,l=t.highlight,c=0;try{i=n.lex(e,t)}catch(e){return r(e)}o=i.length;var d=function(e){if(e)return t.highlight=l,r(e);var n;try{n=a.parse(i,t)}catch(t){e=t}return t.highlight=l,e?r(e):r(null,n)};if(!l||l.length<3)return d();if(delete t.highlight,!o)return d();for(;c<i.length;c++)!function(e){\"code\"!==e.type?--o||d():l(e.text,e.lang,function(t,n){return t?d(t):null==n||n===e.text?--o||d():(e.text=n,e.escaped=!0,void(--o||d()))})}(i[c])}else try{return t&&(t=p({},h.defaults,t)),a.parse(n.lex(e,t),t)}catch(e){if(e.message+=\"\\nPlease report this to https://github.com/markedjs/marked.\",(t||h.defaults).silent)return\"<p>An error occurred:</p><pre>\"+s(e.message+\"\",!0)+\"</pre>\";throw e}}var v={newline:/^\\n+/,code:/^( {4}[^\\n]+\\n*)+/,fences:u,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,heading:/^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,nptable:u,blockquote:/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,list:/^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,html:\"^ {0,3}(?:<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*|<![A-Z][\\\\s\\\\S]*?>\\\\n*|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$))\",def:/^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,table:u,lheading:/^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,paragraph:/^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/,text:/^[^\\n]+/};v._label=/(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/,v._title=/(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/,v.def=c(v.def).replace(\"label\",v._label).replace(\"title\",v._title).getRegex(),v.bullet=/(?:[*+-]|\\d+\\.)/,v.item=/^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/,v.item=c(v.item,\"gm\").replace(/bull/g,v.bullet).getRegex(),v.list=c(v.list).replace(/bull/g,v.bullet).replace(\"hr\",\"\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))\").replace(\"def\",\"\\\\n+(?=\"+v.def.source+\")\").getRegex(),v._tag=\"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\",v._comment=/<!--(?!-?>)[\\s\\S]*?-->/,v.html=c(v.html,\"i\").replace(\"comment\",v._comment).replace(\"tag\",v._tag).replace(\"attribute\",/ +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex(),v.paragraph=c(v.paragraph).replace(\"hr\",v.hr).replace(\"heading\",v.heading).replace(\"lheading\",v.lheading).replace(\"tag\",v._tag).getRegex(),v.blockquote=c(v.blockquote).replace(\"paragraph\",v.paragraph).getRegex(),v.normal=p({},v),v.gfm=p({},v.normal,{fences:/^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\n? *\\1 *(?:\\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/}),v.gfm.paragraph=c(v.paragraph).replace(\"(?!\",\"(?!\"+v.gfm.fences.source.replace(\"\\\\1\",\"\\\\2\")+\"|\"+v.list.source.replace(\"\\\\1\",\"\\\\3\")+\"|\").getRegex(),v.tables=p({},v.gfm,{nptable:/^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,table:/^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/}),v.pedantic=p({},v.normal,{html:c(\"^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\\\"[^\\\"]*\\\"|'[^']*'|\\\\s[^'\\\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))\").replace(\"comment\",v._comment).replace(/tag/g,\"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),def:/^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/}),n.rules=v,n.lex=function(e,t){return new n(t).lex(e)},n.prototype.lex=function(e){return e=e.replace(/\\r\\n|\\r/g,\"\\n\").replace(/\\t/g,\"    \").replace(/\\u00a0/g,\" \").replace(/\\u2424/g,\"\\n\"),this.token(e,!0)},n.prototype.token=function(e,t){e=e.replace(/^ +$/gm,\"\");for(var n,r,i,o,a,s,l,c,d,u,p,h,g;e;)if((i=this.rules.newline.exec(e))&&(e=e.substring(i[0].length),i[0].length>1&&this.tokens.push({type:\"space\"})),i=this.rules.code.exec(e))e=e.substring(i[0].length),i=i[0].replace(/^ {4}/gm,\"\"),this.tokens.push({type:\"code\",text:this.options.pedantic?i:i.replace(/\\n+$/,\"\")});else if(i=this.rules.fences.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"code\",lang:i[2],text:i[3]||\"\"});else if(i=this.rules.heading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"heading\",depth:i[1].length,text:i[2]});else if(t&&(i=this.rules.nptable.exec(e))&&(s={type:\"table\",header:f(i[1].replace(/^ *| *\\| *$/g,\"\")),align:i[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),cells:i[3]?i[3].replace(/\\n$/,\"\").split(\"\\n\"):[]},s.header.length===s.align.length)){for(e=e.substring(i[0].length),c=0;c<s.align.length;c++)/^ *-+: *$/.test(s.align[c])?s.align[c]=\"right\":/^ *:-+: *$/.test(s.align[c])?s.align[c]=\"center\":/^ *:-+ *$/.test(s.align[c])?s.align[c]=\"left\":s.align[c]=null;for(c=0;c<s.cells.length;c++)s.cells[c]=f(s.cells[c],s.header.length);this.tokens.push(s)}else if(i=this.rules.hr.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"hr\"});else if(i=this.rules.blockquote.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"blockquote_start\"}),i=i[0].replace(/^ *> ?/gm,\"\"),this.token(i,t),this.tokens.push({type:\"blockquote_end\"});else if(i=this.rules.list.exec(e)){for(e=e.substring(i[0].length),o=i[2],p=o.length>1,this.tokens.push({type:\"list_start\",ordered:p,start:p?+o:\"\"}),i=i[0].match(this.rules.item),n=!1,u=i.length,c=0;c<u;c++)s=i[c],l=s.length,s=s.replace(/^ *([*+-]|\\d+\\.) +/,\"\"),~s.indexOf(\"\\n \")&&(l-=s.length,s=this.options.pedantic?s.replace(/^ {1,4}/gm,\"\"):s.replace(new RegExp(\"^ {1,\"+l+\"}\",\"gm\"),\"\")),this.options.smartLists&&c!==u-1&&(a=v.bullet.exec(i[c+1])[0],o===a||o.length>1&&a.length>1||(e=i.slice(c+1).join(\"\\n\")+e,c=u-1)),r=n||/\\n\\n(?!\\s*$)/.test(s),c!==u-1&&(n=\"\\n\"===s.charAt(s.length-1),r||(r=n)),h=/^\\[[ xX]\\] /.test(s),g=void 0,h&&(g=\" \"!==s[1],s=s.replace(/^\\[[ xX]\\] +/,\"\")),this.tokens.push({type:r?\"loose_item_start\":\"list_item_start\",task:h,checked:g}),this.token(s,!1),this.tokens.push({type:\"list_item_end\"});this.tokens.push({type:\"list_end\"})}else if(i=this.rules.html.exec(e))e=e.substring(i[0].length),this.tokens.push({type:this.options.sanitize?\"paragraph\":\"html\",pre:!this.options.sanitizer&&(\"pre\"===i[1]||\"script\"===i[1]||\"style\"===i[1]),text:i[0]});else if(t&&(i=this.rules.def.exec(e)))e=e.substring(i[0].length),i[3]&&(i[3]=i[3].substring(1,i[3].length-1)),d=i[1].toLowerCase().replace(/\\s+/g,\" \"),this.tokens.links[d]||(this.tokens.links[d]={href:i[2],title:i[3]});else if(t&&(i=this.rules.table.exec(e))&&(s={type:\"table\",header:f(i[1].replace(/^ *| *\\| *$/g,\"\")),align:i[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),cells:i[3]?i[3].replace(/(?: *\\| *)?\\n$/,\"\").split(\"\\n\"):[]},s.header.length===s.align.length)){for(e=e.substring(i[0].length),c=0;c<s.align.length;c++)/^ *-+: *$/.test(s.align[c])?s.align[c]=\"right\":/^ *:-+: *$/.test(s.align[c])?s.align[c]=\"center\":/^ *:-+ *$/.test(s.align[c])?s.align[c]=\"left\":s.align[c]=null;for(c=0;c<s.cells.length;c++)s.cells[c]=f(s.cells[c].replace(/^ *\\| *| *\\| *$/g,\"\"),s.header.length);this.tokens.push(s)}else if(i=this.rules.lheading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"heading\",depth:\"=\"===i[2]?1:2,text:i[1]});else if(t&&(i=this.rules.paragraph.exec(e)))e=e.substring(i[0].length),this.tokens.push({type:\"paragraph\",text:\"\\n\"===i[1].charAt(i[1].length-1)?i[1].slice(0,-1):i[1]});else if(i=this.rules.text.exec(e))e=e.substring(i[0].length),this.tokens.push({type:\"text\",text:i[0]});else if(e)throw new Error(\"Infinite loop on byte: \"+e.charCodeAt(0));return this.tokens};var g={escape:/^\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\]\\\\^_`{|}~])/,autolink:/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,url:u,tag:\"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\",link:/^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/,reflink:/^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,nolink:/^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,strong:/^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)|^__([^\\s])__(?!_)|^\\*\\*([^\\s])\\*\\*(?!\\*)/,em:/^_([^\\s][\\s\\S]*?[^\\s_])_(?!_)|^_([^\\s_][\\s\\S]*?[^\\s])_(?!_)|^\\*([^\\s][\\s\\S]*?[^\\s*])\\*(?!\\*)|^\\*([^\\s*][\\s\\S]*?[^\\s])\\*(?!\\*)|^_([^\\s_])_(?!_)|^\\*([^\\s*])\\*(?!\\*)/,code:/^(`+)\\s*([\\s\\S]*?[^`]?)\\s*\\1(?!`)/,br:/^ {2,}\\n(?!\\s*$)/,del:u,text:/^[\\s\\S]+?(?=[\\\\<!\\[`*]|\\b_| {2,}\\n|$)/};g._escapes=/\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\]\\\\^_`{|}~])/g,g._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,g._email=/[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,g.autolink=c(g.autolink).replace(\"scheme\",g._scheme).replace(\"email\",g._email).getRegex(),g._attribute=/\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/,g.tag=c(g.tag).replace(\"comment\",v._comment).replace(\"attribute\",g._attribute).getRegex(),g._label=/(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?/,g._href=/\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|(?:\\\\[()]?|\\([^\\s\\x00-\\x1f()\\\\]*\\)|[^\\s\\x00-\\x1f()\\\\])*?)/,g._title=/\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/,g.link=c(g.link).replace(\"label\",g._label).replace(\"href\",g._href).replace(\"title\",g._title).getRegex(),g.reflink=c(g.reflink).replace(\"label\",g._label).getRegex(),g.normal=p({},g),g.pedantic=p({},g.normal,{strong:/^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,em:/^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,link:c(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\",g._label).getRegex(),reflink:c(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\",g._label).getRegex()}),g.gfm=p({},g.normal,{escape:c(g.escape).replace(\"])\",\"~|])\").getRegex(),url:c(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/).replace(\"email\",g._email).getRegex(),_backpedal:/(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^~~(?=\\S)([\\s\\S]*?\\S)~~/,text:c(g.text).replace(\"]|\",\"~]|\").replace(\"|\",\"|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&'*+/=?^_`{\\\\|}~-]+@|\").getRegex()}),g.breaks=p({},g.gfm,{br:c(g.br).replace(\"{2,}\",\"*\").getRegex(),text:c(g.gfm.text).replace(\"{2,}\",\"*\").getRegex()}),r.rules=g,r.output=function(e,t,n){return new r(t,n).output(e)},r.prototype.output=function(e){for(var t,n,i,o,a,l=\"\";e;)if(a=this.rules.escape.exec(e))e=e.substring(a[0].length),l+=a[1];else if(a=this.rules.autolink.exec(e))e=e.substring(a[0].length),\"@\"===a[2]?(n=s(this.mangle(a[1])),i=\"mailto:\"+n):(n=s(a[1]),i=n),l+=this.renderer.link(i,null,n);else if(this.inLink||!(a=this.rules.url.exec(e))){if(a=this.rules.tag.exec(e))!this.inLink&&/^<a /i.test(a[0])?this.inLink=!0:this.inLink&&/^<\\/a>/i.test(a[0])&&(this.inLink=!1),e=e.substring(a[0].length),l+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(a[0]):s(a[0]):a[0];else if(a=this.rules.link.exec(e))e=e.substring(a[0].length),this.inLink=!0,i=a[2],this.options.pedantic?(t=/^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(i),t?(i=t[1],o=t[3]):o=\"\"):o=a[3]?a[3].slice(1,-1):\"\",i=i.trim().replace(/^<([\\s\\S]*)>$/,\"$1\"),l+=this.outputLink(a,{href:r.escapes(i),title:r.escapes(o)}),this.inLink=!1;else if((a=this.rules.reflink.exec(e))||(a=this.rules.nolink.exec(e))){if(e=e.substring(a[0].length),t=(a[2]||a[1]).replace(/\\s+/g,\" \"),!(t=this.links[t.toLowerCase()])||!t.href){l+=a[0].charAt(0),e=a[0].substring(1)+e;continue}this.inLink=!0,l+=this.outputLink(a,t),this.inLink=!1}else if(a=this.rules.strong.exec(e))e=e.substring(a[0].length),l+=this.renderer.strong(this.output(a[4]||a[3]||a[2]||a[1]));else if(a=this.rules.em.exec(e))e=e.substring(a[0].length),l+=this.renderer.em(this.output(a[6]||a[5]||a[4]||a[3]||a[2]||a[1]));else if(a=this.rules.code.exec(e))e=e.substring(a[0].length),l+=this.renderer.codespan(s(a[2].trim(),!0));else if(a=this.rules.br.exec(e))e=e.substring(a[0].length),l+=this.renderer.br();else if(a=this.rules.del.exec(e))e=e.substring(a[0].length),l+=this.renderer.del(this.output(a[1]));else if(a=this.rules.text.exec(e))e=e.substring(a[0].length),l+=this.renderer.text(s(this.smartypants(a[0])));else if(e)throw new Error(\"Infinite loop on byte: \"+e.charCodeAt(0))}else a[0]=this.rules._backpedal.exec(a[0])[0],e=e.substring(a[0].length),\"@\"===a[2]?(n=s(a[0]),i=\"mailto:\"+n):(n=s(a[0]),i=\"www.\"===a[1]?\"http://\"+n:n),l+=this.renderer.link(i,null,n);return l},r.escapes=function(e){return e?e.replace(r.rules._escapes,\"$1\"):e},r.prototype.outputLink=function(e,t){var n=t.href,r=t.title?s(t.title):null;return\"!\"!==e[0].charAt(0)?this.renderer.link(n,r,this.output(e[1])):this.renderer.image(n,r,s(e[1]))},r.prototype.smartypants=function(e){return this.options.smartypants?e.replace(/---/g,\"—\").replace(/--/g,\"–\").replace(/(^|[-\\u2014\\/(\\[{\"\\s])'/g,\"$1‘\").replace(/'/g,\"’\").replace(/(^|[-\\u2014\\/(\\[{\\u2018\\s])\"/g,\"$1“\").replace(/\"/g,\"”\").replace(/\\.{3}/g,\"…\"):e},r.prototype.mangle=function(e){if(!this.options.mangle)return e;for(var t,n=\"\",r=e.length,i=0;i<r;i++)t=e.charCodeAt(i),Math.random()>.5&&(t=\"x\"+t.toString(16)),n+=\"&#\"+t+\";\";return n},i.prototype.code=function(e,t,n){if(this.options.highlight){var r=this.options.highlight(e,t);null!=r&&r!==e&&(n=!0,e=r)}return t?'<pre><code class=\"'+this.options.langPrefix+s(t,!0)+'\">'+(n?e:s(e,!0))+\"</code></pre>\\n\":\"<pre><code>\"+(n?e:s(e,!0))+\"</code></pre>\"},i.prototype.blockquote=function(e){return\"<blockquote>\\n\"+e+\"</blockquote>\\n\"},i.prototype.html=function(e){return e},i.prototype.heading=function(e,t,n){return this.options.headerIds?\"<h\"+t+' id=\"'+this.options.headerPrefix+n.toLowerCase().replace(/[^\\w]+/g,\"-\")+'\">'+e+\"</h\"+t+\">\\n\":\"<h\"+t+\">\"+e+\"</h\"+t+\">\\n\"},i.prototype.hr=function(){return this.options.xhtml?\"<hr/>\\n\":\"<hr>\\n\"},i.prototype.list=function(e,t,n){var r=t?\"ol\":\"ul\";return\"<\"+r+(t&&1!==n?' start=\"'+n+'\"':\"\")+\">\\n\"+e+\"</\"+r+\">\\n\"},i.prototype.listitem=function(e){return\"<li>\"+e+\"</li>\\n\"},i.prototype.checkbox=function(e){return\"<input \"+(e?'checked=\"\" ':\"\")+'disabled=\"\" type=\"checkbox\"'+(this.options.xhtml?\" /\":\"\")+\"> \"},i.prototype.paragraph=function(e){return\"<p>\"+e+\"</p>\\n\"},i.prototype.table=function(e,t){return t&&(t=\"<tbody>\"+t+\"</tbody>\"),\"<table>\\n<thead>\\n\"+e+\"</thead>\\n\"+t+\"</table>\\n\"},i.prototype.tablerow=function(e){return\"<tr>\\n\"+e+\"</tr>\\n\"},i.prototype.tablecell=function(e,t){var n=t.header?\"th\":\"td\";return(t.align?\"<\"+n+' align=\"'+t.align+'\">':\"<\"+n+\">\")+e+\"</\"+n+\">\\n\"},i.prototype.strong=function(e){return\"<strong>\"+e+\"</strong>\"},i.prototype.em=function(e){return\"<em>\"+e+\"</em>\"},i.prototype.codespan=function(e){return\"<code>\"+e+\"</code>\"},i.prototype.br=function(){return this.options.xhtml?\"<br/>\":\"<br>\"},i.prototype.del=function(e){return\"<del>\"+e+\"</del>\"},i.prototype.link=function(e,t,n){if(this.options.sanitize){try{var r=decodeURIComponent(l(e)).replace(/[^\\w:]/g,\"\").toLowerCase()}catch(e){return n}if(0===r.indexOf(\"javascript:\")||0===r.indexOf(\"vbscript:\")||0===r.indexOf(\"data:\"))return n}this.options.baseUrl&&!b.test(e)&&(e=d(this.options.baseUrl,e));try{e=encodeURI(e).replace(/%25/g,\"%\")}catch(e){return n}var i='<a href=\"'+s(e)+'\"';return t&&(i+=' title=\"'+t+'\"'),i+=\">\"+n+\"</a>\"},i.prototype.image=function(e,t,n){this.options.baseUrl&&!b.test(e)&&(e=d(this.options.baseUrl,e));var r='<img src=\"'+e+'\" alt=\"'+n+'\"';return t&&(r+=' title=\"'+t+'\"'),r+=this.options.xhtml?\"/>\":\">\"},i.prototype.text=function(e){return e},o.prototype.strong=o.prototype.em=o.prototype.codespan=o.prototype.del=o.prototype.text=function(e){return e},o.prototype.link=o.prototype.image=function(e,t,n){return\"\"+n},o.prototype.br=function(){return\"\"},a.parse=function(e,t){return new a(t).parse(e)},a.prototype.parse=function(e){this.inline=new r(e.links,this.options),this.inlineText=new r(e.links,p({},this.options,{renderer:new o})),this.tokens=e.reverse();for(var t=\"\";this.next();)t+=this.tok();return t},a.prototype.next=function(){return this.token=this.tokens.pop()},a.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},a.prototype.parseText=function(){for(var e=this.token.text;\"text\"===this.peek().type;)e+=\"\\n\"+this.next().text;return this.inline.output(e)},a.prototype.tok=function(){switch(this.token.type){case\"space\":return\"\";case\"hr\":return this.renderer.hr();case\"heading\":return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,l(this.inlineText.output(this.token.text)));case\"code\":return this.renderer.code(this.token.text,this.token.lang,this.token.escaped);case\"table\":var e,t,n,r,i=\"\",o=\"\";for(n=\"\",e=0;e<this.token.header.length;e++)n+=this.renderer.tablecell(this.inline.output(this.token.header[e]),{header:!0,align:this.token.align[e]});for(i+=this.renderer.tablerow(n),e=0;e<this.token.cells.length;e++){for(t=this.token.cells[e],n=\"\",r=0;r<t.length;r++)n+=this.renderer.tablecell(this.inline.output(t[r]),{header:!1,align:this.token.align[r]});o+=this.renderer.tablerow(n)}return this.renderer.table(i,o);case\"blockquote_start\":for(o=\"\";\"blockquote_end\"!==this.next().type;)o+=this.tok();return this.renderer.blockquote(o);case\"list_start\":o=\"\";for(var a=this.token.ordered,s=this.token.start;\"list_end\"!==this.next().type;)o+=this.tok();return this.renderer.list(o,a,s);case\"list_item_start\":for(o=\"\",this.token.task&&(o+=this.renderer.checkbox(this.token.checked));\"list_item_end\"!==this.next().type;)o+=\"text\"===this.token.type?this.parseText():this.tok();return this.renderer.listitem(o);case\"loose_item_start\":for(o=\"\";\"list_item_end\"!==this.next().type;)o+=this.tok();return this.renderer.listitem(o);case\"html\":return this.renderer.html(this.token.text);case\"paragraph\":return this.renderer.paragraph(this.inline.output(this.token.text));case\"text\":return this.renderer.paragraph(this.parseText())}};var m={},b=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;u.exec=u,h.options=h.setOptions=function(e){return p(h.defaults,e),h},h.getDefaults=function(){return{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:\"\",highlight:null,langPrefix:\"language-\",mangle:!0,pedantic:!1,renderer:new i,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tables:!0,xhtml:!1}},h.defaults=h.getDefaults(),h.Parser=a,h.parser=a.parse,h.Renderer=i,h.TextRenderer=o,h.Lexer=n,h.lexer=n.lex,h.InlineLexer=r,h.inlineLexer=r.output,h.parse=h,e.exports=h}(this||\"undefined\"!=typeof window&&window)}).call(t,n(10))},function(e,t){e.exports={name:\"valine\",version:\"1.3.4\",description:\"A simple comment system based on Leancloud.\",main:\"/dist/Valine.min.js\",author:\"xCss <xioveliu@gmail.com> (https://github.com/xCss)\",scripts:{test:\"webpack\",build:\"webpack\",dev:\"webpack-dev-server --env.dev\",clean:\"rm -rf dist/* \"},keywords:[\"simple\",\"easy-to-use\",\"fast-and-safe\",\"comment-system\"],license:\"GPL-2.0\",repository:{type:\"git\",url:\"git+https://github.com/xcss/Valine.git\"},homepage:\"https://github.com/xcss/Valine#readme\",devDependencies:{autoprefixer:\"^7.1.1\",autosize:\"^4.0.2\",\"babel-core\":\"^6.25.0\",\"babel-loader\":\"^7.1.1\",\"babel-polyfill\":\"^6.23.0\",\"babel-preset-es2015\":\"^6.24.1\",\"babel-preset-stage-0\":\"^6.24.1\",\"blueimp-md5\":\"^2.8.0\",\"css-loader\":\"^0.28.4\",\"exports-loader\":\"^0.6.3\",\"file-loader\":\"^0.11.2\",hanabi:\"^0.4.0\",marked:\"^0.4.0\",\"node-sass\":\"^4.9.2\",\"postcss-loader\":\"^2.0.5\",\"sass-loader\":\"^6.0.3\",\"style-loader\":\"^0.18.2\",\"url-loader\":\"^0.6.2\",webpack:\"^2.6.1\",\"webpack-dev-server\":\"^2.4.5\"}}},function(e,t){var n;n=function(){return this}();try{n=n||Function(\"return this\")()||(0,eval)(\"this\")}catch(e){\"object\"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports={grinning:\"😀\",smiley:\"😃\",smile:\"😄\",grin:\"😁\",laughing:\"😆\",sweat_smile:\"😅\",joy:\"😂\",blush:\"😊\",innocent:\"😇\",wink:\"😉\",relieved:\"😌\",heart_eyes:\"😍\",kissing_heart:\"😘\",kissing:\"😗\",kissing_smiling_eyes:\"😙\",kissing_closed_eyes:\"😚\",yum:\"😋\",stuck_out_tongue_winking_eye:\"😜\",stuck_out_tongue_closed_eyes:\"😝\",stuck_out_tongue:\"😛\",sunglasses:\"😎\",smirk:\"😏\",unamused:\"😒\",disappointed:\"😞\",pensive:\"😔\",worried:\"😟\",confused:\"😕\",persevere:\"😣\",confounded:\"😖\",tired_face:\"😫\",weary:\"😩\",angry:\"😠\",rage:\"😡\",no_mouth:\"😶\",neutral_face:\"😐\",expressionless:\"😑\",hushed:\"😯\",frowning:\"😦\",anguished:\"😧\",open_mouth:\"😮\",astonished:\"😲\",dizzy_face:\"😵\",flushed:\"😳\",scream:\"😱\",fearful:\"😨\",cold_sweat:\"😰\",cry:\"😢\",disappointed_relieved:\"😥\",sob:\"😭\",sweat:\"😓\",sleepy:\"😪\",sleeping:\"😴\",mask:\"😷\",smiling_imp:\"😈\",smiley_cat:\"😺\",smile_cat:\"😸\",joy_cat:\"😹\",heart_eyes_cat:\"😻\",smirk_cat:\"😼\",kissing_cat:\"😽\",scream_cat:\"🙀\",crying_cat_face:\"😿\",pouting_cat:\"😾\",cat:\"🐱\",mouse:\"🐭\",cow:\"🐮\",monkey_face:\"🐵\",hand:\"✋\",fist:\"✊\",v:\"✌️\",point_up:\"👆\",point_down:\"👇\",point_left:\"👈\",point_right:\"👉\",facepunch:\"👊\",wave:\"👋\",clap:\"👏\",open_hands:\"👐\",\"+1\":\"👍\",\"-1\":\"👎\",ok_hand:\"👌\",pray:\"🙏\",ear:\"👂\",eyes:\"👀\",nose:\"👃\",lips:\"👄\",tongue:\"👅\",heart:\"❤️\",cupid:\"💘\",sparkling_heart:\"💖\",star:\"⭐️\",sparkles:\"✨\",zap:\"⚡️\",sunny:\"☀️\",cloud:\"☁️\",snowflake:\"❄️\",umbrella:\"☔️\",coffee:\"☕️\",airplane:\"✈️\",anchor:\"⚓️\",watch:\"⌚️\",phone:\"☎️\",hourglass:\"⌛️\",email:\"✉️\",scissors:\"✂️\",black_nib:\"✒️\",pencil2:\"✏️\",x:\"❌\",recycle:\"♻️\",white_check_mark:\"✅\",negative_squared_cross_mark:\"❎\",m:\"Ⓜ️\",i:\"ℹ️\",tm:\"™️\",copyright:\"©️\",registered:\"®️\"}},function(e,t,n){var r=n(13);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]);var i={};i.transform=void 0;n(15)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){t=e.exports=n(14)(!1),t.push([e.i,'.v *{-webkit-box-sizing:border-box;box-sizing:border-box;line-height:2;color:#555;-webkit-transition:all .3s ease;transition:all .3s ease}.v hr{margin:.825rem 0;border-color:#f6f6f6;border-style:dashed}.v.hide-avatar .vimg{display:none}.v a{position:relative;cursor:pointer;color:#1abc9c;display:inline-block}.v a:before{content:\"\";position:absolute;width:0;right:0;bottom:0;height:1px;background:#1abc9c;-webkit-transition:width .3s ease;transition:width .3s ease}.v a:hover{color:#d7191a}.v a:hover:before{width:100%;left:0;right:auto}.v code,.v pre{background-color:#f6f6f6;color:#555;padding:.2em .4em;border-radius:3px;font-size:85%;margin:0;font-family:Source Code Pro,courier new,Input Mono,PT Mono,SFMono-Regular,Consolas,Monaco,Menlo,PingFang SC,Liberation Mono,Microsoft YaHei,Courier，monospace}.v pre{padding:10px;overflow:auto;line-height:1.45}.v pre code{padding:0;background:transparent;white-space:pre-wrap;word-break:keep-all}.v blockquote{color:#666;margin:.5rem 0;padding:0 0 0 1rem;border-left:8px solid hsla(0,0%,93%,.5)}.v .vinput{border:none;resize:none;outline:none;padding:10px 5px;max-width:100%;font-size:.775rem}.v input[type=checkbox],.v input[type=radio]{display:inline-block;vertical-align:middle;margin-top:-2px}.v .vwrap{border:1px solid #f0f0f0;border-radius:4px;margin-bottom:10px;overflow:hidden;position:relative;padding:10px}.v .vwrap input{background:transparent}.v .vwrap .vedit{position:relative;padding-top:10px}.v .vwrap .vedit .vctrl{text-align:right;font-size:12px}.v .vwrap .vedit .vctrl span{padding:10px;display:inline-block;vertical-align:middle;cursor:pointer}.v .vwrap .vedit .vemojis{display:none;font-size:18px;text-align:justify;max-height:145px;overflow:auto;margin-bottom:10px;-webkit-box-shadow:0 0 1px #f0f0f0;box-shadow:0 0 1px #f0f0f0}.v .vwrap .vedit .vemojis i{font-style:normal;padding:7px 0;width:38px;cursor:pointer;text-align:center;display:inline-block;vertical-align:middle}.v .vwrap .vedit .vpreview{padding:7px;-webkit-box-shadow:0 0 1px #f0f0f0;box-shadow:0 0 1px #f0f0f0}.v .vwrap .vedit .vpreview frame,.v .vwrap .vedit .vpreview iframe,.v .vwrap .vedit .vpreview img{max-width:100%;border:none}.v .vwrap .vheader .vinput{width:33.33%;border-bottom:1px dashed #dedede}.v .vwrap .vheader.item2 .vinput{width:50%}.v .vwrap .vheader.item1 .vinput{width:100%}.v .vwrap .vheader .vinput:focus{border-bottom-color:#eb5055}@media screen and (max-width:520px){.v .vwrap .vheader.item2 .vinput,.v .vwrap .vheader .vinput{width:100%}}.v .vwrap .vcontrol{font-size:0;padding-top:15px}.v .vwrap .vcontrol .col{display:inline-block;font-size:.725rem;vertical-align:middle;color:#ccc}.v .vwrap .vcontrol .col.text-right{text-align:right}.v .vwrap .vcontrol .col svg{margin-right:2px;overflow:hidden;fill:currentColor;vertical-align:middle}.v .vwrap .vcontrol .col.col-20{width:20%}.v .vwrap .vcontrol .col.col-40{width:40%}.v .vwrap .vcontrol .col.col-60{width:60%}.v .vwrap .vcontrol .col.col-80{width:80%}.v .vwrap .vcontrol .col.split{width:50%}.v .vwrap .vmark{position:absolute;background:rgba(0,0,0,.65);width:100%;height:100%;left:0;top:0}.v .vwrap .vmark .valert{padding-top:3rem}.v .vwrap .vmark .valert .vtext{color:#fff;padding:1rem 0}.v .vwrap .vmark .valert .vcode{width:4.6875rem;border-radius:.3125rem;padding:.5rem;background:#dedede}.v .vwrap .vmark .valert .vcode:focus{border-color:#3090e4;background-color:#fff}@media screen and (max-width:720px){.v .vwrap .vmark .valert{padding-top:5.5rem}.v .vwrap .vmark .valert .vtext{color:#fff;padding:1rem 0}}.v .power{color:#999;padding:.5rem 0}.v .power,.v .power a{font-size:.75rem}.v .vinfo{font-size:0;padding:5px}.v .vinfo .col{font-size:.875rem;display:inline-block;width:50%;vertical-align:middle}.v .vinfo .vcount .vnum{font-weight:600;font-size:1.25rem}.v a{text-decoration:none;color:#555}.v a:hover{color:#222}.v ol,.v ul{padding:0;margin-left:1.25rem}.v .txt-center{text-align:center}.v .txt-right{text-align:right}.v .pd5{padding:5px}.v .pd10{padding:10px}.v .veditor{width:100%;min-height:8.75rem;font-size:.875rem;background:transparent;resize:vertical;-webkit-transition:all .25s ease;transition:all .25s ease}.v .vbtn{-webkit-transition-duration:.4s;transition-duration:.4s;text-align:center;color:#313131;border:1px solid #ededed;border-radius:.3rem;display:inline-block;background:#ededed;margin-bottom:0;font-weight:400;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;white-space:nowrap;padding:.5rem 1.25rem;font-size:.875rem;line-height:1.42857143;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:none}.v .vbtn+.vbtn{margin-left:1.25rem}.v .vbtn:active,.v .vbtn:hover{color:#3090e4;border-color:#3090e4;background-color:#fff}.v .vempty{padding:1.25rem;text-align:center;color:#999}.v .vlist{width:100%}.v .vlist .vcard{padding-top:1.5rem;position:relative;display:block}.v .vlist .vcard:after{content:\"\";clear:both;display:block}.v .vlist .vcard .vimg{width:3.125rem;height:3.125rem;float:left;border-radius:50%;margin-right:.7525rem;border:1px solid #f5f5f5;padding:.125rem}@media screen and (max-width:720px){.v .vlist .vcard .vimg{width:2.5rem;height:2.5rem}}.v .vlist .vcard .vhead{line-height:1.5;margin-top:0}.v .vlist .vcard .vhead .vnick{position:relative;font-size:.875rem;font-weight:500;margin-right:.875rem;cursor:pointer;color:#1abc9c;text-decoration:none;display:inline-block}.v .vlist .vcard .vhead .vnick:before{content:\"\";position:absolute;width:0;right:0;bottom:0;height:1px;background:#1abc9c;-webkit-transition:width .3s ease;transition:width .3s ease}.v .vlist .vcard .vhead .vnick:hover{color:#d7191a}.v .vlist .vcard .vhead .vnick:hover:before{width:100%;left:0;right:auto}.v .vlist .vcard .vhead .vsys{display:inline-block;padding:.2rem .5rem;background:#ededed;color:#b3b1b1;font-size:.75rem;border-radius:.2rem;margin-right:.3rem}@media screen and (max-width:520px){.v .vlist .vcard .vhead .vsys{display:none}}.v .vlist .vcard .vh{overflow:hidden;padding-bottom:.5rem;border-bottom:1px dashed #f5f5f5}.v .vlist .vcard .vh .vtime{color:#b3b3b3;font-size:.75rem;margin-right:.875rem}.v .vlist .vcard .vh .vmeta{line-height:1;position:relative}.v .vlist .vcard .vh .vmeta .vat{font-size:.8125rem;color:#ef2f11;cursor:pointer;float:right}.v .vlist .vcard .vcontent{word-wrap:break-word;word-break:break-all;text-align:justify;color:#4a4a4a;font-size:.875rem;line-height:2;position:relative;margin-bottom:.75rem;padding-top:.625rem}.v .vlist .vcard .vcontent frame,.v .vlist .vcard .vcontent iframe,.v .vlist .vcard .vcontent img{max-width:100%;border:none}.v .vlist .vcard .vcontent.expand{cursor:pointer;max-height:11.25rem;overflow:hidden}.v .vlist .vcard .vcontent.expand:before{display:block;content:\"\";position:absolute;width:100%;left:0;top:0;bottom:3.15rem;pointer-events:none;background:-webkit-gradient(linear,left top,left bottom,from(hsla(0,0%,100%,0)),to(hsla(0,0%,100%,.9)));background:linear-gradient(180deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.9))}.v .vlist .vcard .vcontent.expand:after{display:block;content:\"Click on expand\";text-align:center;color:#828586;position:absolute;width:100%;height:3.15rem;line-height:3.15rem;left:0;bottom:0;pointer-events:none;background:hsla(0,0%,100%,.9)}.v .vlist .vcard .vquote{color:#666;margin-top:1rem;padding-left:1rem;border-left:1px dashed hsla(0,0%,93%,.5)}.v .vlist .vcard .vquote .vimg{width:2.225rem;height:2.225rem}.v .vpage .vmore{margin:1rem 0}.v .clear{content:\"\";display:block;clear:both}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@-webkit-keyframes pulse{50%{background:#dcdcdc}}@keyframes pulse{50%{background:#dcdcdc}}.v .vloading{position:relative;padding:20px;display:block;height:80px}.v .vloading:before{-webkit-box-sizing:border-box;box-sizing:border-box;content:\"\";position:absolute;display:inline-block;top:20px;left:50%;margin-left:-20px;width:40px;height:40px;border:6px double #a0a0a0;border-top-color:transparent;border-bottom-color:transparent;border-radius:50%;-webkit-animation:spin 1s infinite linear;animation:spin 1s infinite linear}',\"\"])},function(e,t){function n(e,t){var n=e[1]||\"\",i=e[3];if(!i)return n;if(t&&\"function\"==typeof btoa){var o=r(i);return[n].concat(i.sources.map(function(e){return\"/*# sourceURL=\"+i.sourceRoot+e+\" */\"})).concat([o]).join(\"\\n\")}return[n].join(\"\\n\")}function r(e){return\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+\" */\"}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var r=n(t,e);return t[2]?\"@media \"+t[2]+\"{\"+r+\"}\":r}).join(\"\")},t.i=function(e,n){\"string\"==typeof e&&(e=[[null,e,\"\"]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];\"number\"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var a=e[i];\"number\"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]=\"(\"+a[2]+\") and (\"+n+\")\"),t.push(a))}},t}},function(e,t,n){function r(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=h[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(d(r.parts[o],t))}else{for(var a=[],o=0;o<r.parts.length;o++)a.push(d(r.parts[o],t));h[r.id]={id:r.id,refs:1,parts:a}}}}function i(e,t){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=t.base?o[0]+t.base:o[0],s=o[1],l=o[2],c=o[3],d={css:s,media:l,sourceMap:c};r[a]?r[a].parts.push(d):n.push(r[a]={id:a,parts:[d]})}return n}function o(e,t){var n=g(e.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var r=x[x.length-1];if(\"top\"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),x.push(t);else{if(\"bottom\"!==e.insertAt)throw new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");n.appendChild(t)}}function a(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=x.indexOf(e);t>=0&&x.splice(t,1)}function s(e){var t=document.createElement(\"style\");return e.attrs.type=\"text/css\",c(t,e.attrs),o(e,t),t}function l(e){var t=document.createElement(\"link\");return e.attrs.type=\"text/css\",e.attrs.rel=\"stylesheet\",c(t,e.attrs),o(e,t),t}function c(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function d(e,t){var n,r,i,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var c=b++;n=m||(m=s(t)),r=u.bind(null,n,c,!1),i=u.bind(null,n,c,!0)}else e.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=l(t),r=f.bind(null,n,t),i=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(t),r=p.bind(null,n),i=function(){a(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}function u(e,t,n,r){var i=n?\"\":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function p(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute(\"media\",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function f(e,t,n){var r=n.css,i=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||o)&&(r=y(r)),i&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+\" */\");var a=new Blob([r],{type:\"text/css\"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}var h={},v=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),g=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e.call(this,n)),t[n]}}(function(e){return document.querySelector(e)}),m=null,b=0,x=[],y=n(16);e.exports=function(e,t){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");t=t||{},t.attrs=\"object\"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=v()),t.insertInto||(t.insertInto=\"head\"),t.insertAt||(t.insertAt=\"bottom\");var n=i(e,t);return r(n,t),function(e){for(var o=[],a=0;a<n.length;a++){var s=n[a],l=h[s.id];l.refs--,o.push(l)}if(e){r(i(e,t),t)}for(var a=0;a<o.length;a++){var l=o[a];if(0===l.refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete h[l.id]}}}};var w=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join(\"\\n\")}}()},function(e,t){e.exports=function(e){var t=\"undefined\"!=typeof window&&window.location;if(!t)throw new Error(\"fixUrls requires window.location\");if(!e||\"string\"!=typeof e)return e;var n=t.protocol+\"//\"+t.host,r=n+t.pathname.replace(/\\/[^\\/]*$/,\"/\");return e.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,function(e,t){var i=t.trim().replace(/^\"(.*)\"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(i))return e;var o;return o=0===i.indexOf(\"//\")?i:0===i.indexOf(\"/\")?n+i:r+i.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(o)+\")\"})}},function(e,t,n){n(12),e.exports=n(1)}])});","length":18169}],"Post":[{"title":"560. 和为K的子数组","abbrlink":"a146f8fa","_content":"\n> 给定一个整数数组和一个整数 k ，你需要找到该数组中和为 k 的连续的子数组的个数。\n>\n> 示例 1：\n>\n> ```java\n> 输入:nums = [1,1,1], k = 2\n> 输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。\n> ```\n\n<!-- more -->\n\n### 💡 思路\n\n这题一开始没什么思路，只想到了暴力解法，两层for循环，遍历以每一个位置为开头的数字其连续子数组的和，当和为k时，记录结果。\n\n可能容易出现一步错误的优化，就是当和大于k时跳出内层循环，但是需要注意的是：这里数组中可能出现负数，因此和并不是一直增加的。\n\n### 🧾 代码\n\n编码上没有什么注意的点，考虑代码的鲁棒性。\n\n```java\npublic int subarraySum(int[] nums, int k) {\n    //暴力-double for\n    if(nums == null || nums.length == 0){\n        return 0;\n    }\n    int n = nums.length;\n    int res = 0;\n    for(int i = 0; i < n; i++){\n        int sum = 0;\n        for(int j = i; j < n; j++){\n            sum += nums[j];\n            if(sum == k){\n                res ++;\n            }\n        }\n    }\n    return res;\n}\n```\n\n神奇的是暴力的解法居然也可以在Leetcode上获得一个accept😂。\n\n### 📈 优化\n\n暴力解中每一次都要重新计算从i开始往后的子数组的和，存在大量的重复计算。其实优化的思路并不好想，需要将子数组的和转化为“前缀和”的差，什么是“前缀和”呢？举个例子，对于数组nums` [3,1,-2,5] `，前缀和pre为` [3,4,2,7] ` 。子数组的和转化为“前缀和”的差，同样举个例子，子数组` [1,-2] `的和为` 2-3=-1 `，即` nums[1]+nums[2]=pre[2]-pre[0] `。\n\n有了上面的基础之后，我们将问题转化为，\n\n","source":"_drafts/560-和为K的子数组.md","raw":"---\ntitle: 560. 和为K的子数组\ntags:\n  - Leetcode\n  - 数组\n  - 哈希\ncategories:\n  - Leetcode\nabbrlink: a146f8fa\n---\n\n> 给定一个整数数组和一个整数 k ，你需要找到该数组中和为 k 的连续的子数组的个数。\n>\n> 示例 1：\n>\n> ```java\n> 输入:nums = [1,1,1], k = 2\n> 输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。\n> ```\n\n<!-- more -->\n\n### 💡 思路\n\n这题一开始没什么思路，只想到了暴力解法，两层for循环，遍历以每一个位置为开头的数字其连续子数组的和，当和为k时，记录结果。\n\n可能容易出现一步错误的优化，就是当和大于k时跳出内层循环，但是需要注意的是：这里数组中可能出现负数，因此和并不是一直增加的。\n\n### 🧾 代码\n\n编码上没有什么注意的点，考虑代码的鲁棒性。\n\n```java\npublic int subarraySum(int[] nums, int k) {\n    //暴力-double for\n    if(nums == null || nums.length == 0){\n        return 0;\n    }\n    int n = nums.length;\n    int res = 0;\n    for(int i = 0; i < n; i++){\n        int sum = 0;\n        for(int j = i; j < n; j++){\n            sum += nums[j];\n            if(sum == k){\n                res ++;\n            }\n        }\n    }\n    return res;\n}\n```\n\n神奇的是暴力的解法居然也可以在Leetcode上获得一个accept😂。\n\n### 📈 优化\n\n暴力解中每一次都要重新计算从i开始往后的子数组的和，存在大量的重复计算。其实优化的思路并不好想，需要将子数组的和转化为“前缀和”的差，什么是“前缀和”呢？举个例子，对于数组nums` [3,1,-2,5] `，前缀和pre为` [3,4,2,7] ` 。子数组的和转化为“前缀和”的差，同样举个例子，子数组` [1,-2] `的和为` 2-3=-1 `，即` nums[1]+nums[2]=pre[2]-pre[0] `。\n\n有了上面的基础之后，我们将问题转化为，\n\n","slug":"560-和为K的子数组","published":0,"date":"2020-05-15T11:39:35.838Z","updated":"2020-05-31T15:07:55.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck190002z4ej1jth0tgq","content":"<blockquote>\n<p>给定一个整数数组和一个整数 k ，你需要找到该数组中和为 k 的连续的子数组的个数。</p>\n<p>示例 1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:nums = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>], k = <span class=\"number\">2</span></span><br><span class=\"line\">输出: <span class=\"number\">2</span> , [<span class=\"number\">1</span>,<span class=\"number\">1</span>] 与 [<span class=\"number\">1</span>,<span class=\"number\">1</span>] 为两种不同的情况。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>这题一开始没什么思路，只想到了暴力解法，两层for循环，遍历以每一个位置为开头的数字其连续子数组的和，当和为k时，记录结果。</p>\n<p>可能容易出现一步错误的优化，就是当和大于k时跳出内层循环，但是需要注意的是：这里数组中可能出现负数，因此和并不是一直增加的。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>编码上没有什么注意的点，考虑代码的鲁棒性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">subarraySum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//暴力-double for</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; n; j++)&#123;</span><br><span class=\"line\">            sum += nums[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum == k)&#123;</span><br><span class=\"line\">                res ++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>神奇的是暴力的解法居然也可以在Leetcode上获得一个accept😂。</p>\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>暴力解中每一次都要重新计算从i开始往后的子数组的和，存在大量的重复计算。其实优化的思路并不好想，需要将子数组的和转化为“前缀和”的差，什么是“前缀和”呢？举个例子，对于数组nums<code>[3,1,-2,5]</code>，前缀和pre为<code>[3,4,2,7]</code> 。子数组的和转化为“前缀和”的差，同样举个例子，子数组<code>[1,-2]</code>的和为<code>2-3=-1</code>，即<code>nums[1]+nums[2]=pre[2]-pre[0]</code>。</p>\n<p>有了上面的基础之后，我们将问题转化为，</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>给定一个整数数组和一个整数 k ，你需要找到该数组中和为 k 的连续的子数组的个数。</p>\n<p>示例 1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:nums = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>], k = <span class=\"number\">2</span></span><br><span class=\"line\">输出: <span class=\"number\">2</span> , [<span class=\"number\">1</span>,<span class=\"number\">1</span>] 与 [<span class=\"number\">1</span>,<span class=\"number\">1</span>] 为两种不同的情况。</span><br></pre></td></tr></table></figure>\n</blockquote>","more":"<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>这题一开始没什么思路，只想到了暴力解法，两层for循环，遍历以每一个位置为开头的数字其连续子数组的和，当和为k时，记录结果。</p>\n<p>可能容易出现一步错误的优化，就是当和大于k时跳出内层循环，但是需要注意的是：这里数组中可能出现负数，因此和并不是一直增加的。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>编码上没有什么注意的点，考虑代码的鲁棒性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">subarraySum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//暴力-double for</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; n; j++)&#123;</span><br><span class=\"line\">            sum += nums[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum == k)&#123;</span><br><span class=\"line\">                res ++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>神奇的是暴力的解法居然也可以在Leetcode上获得一个accept😂。</p>\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>暴力解中每一次都要重新计算从i开始往后的子数组的和，存在大量的重复计算。其实优化的思路并不好想，需要将子数组的和转化为“前缀和”的差，什么是“前缀和”呢？举个例子，对于数组nums<code>[3,1,-2,5]</code>，前缀和pre为<code>[3,4,2,7]</code> 。子数组的和转化为“前缀和”的差，同样举个例子，子数组<code>[1,-2]</code>的和为<code>2-3=-1</code>，即<code>nums[1]+nums[2]=pre[2]-pre[0]</code>。</p>\n<p>有了上面的基础之后，我们将问题转化为，</p>","length":785},{"title":"Netty面试问题","image":"https://realmicah.xyz/img/","abbrlink":"ca79e873","_content":"\n<p>\n\n<!-- more -->\n\n## Netty是什么？\n\nNetty是一个基于NIO的Client-Server（客户端服务器）框架，简化并优化了TCP和UDP套接字服务器等网络编程，并且性能以及安全性等很多方面甚至都要更好，支持多种协议，如FTP、SMTP、HTTP以及各种二进制和基于文本的传统协议，使用它可以快速简单地开发网络应用程序。\n\n## 为什么要使用Netty？\n\n1. 统一的API，支持多种传输类型，阻塞和非阻塞的\n2. 简单而强大的线程模型\n3. 自带编解码器解决TCP粘包/拆包问题\n4. 真正的无连接数据包套接字支持\n5. 支持多种协议FTP、SMTP、HTTP\n6. 比JDK自带的NIO相关API更加易用、更高的吞吐量、更低的延迟、更少的内存复制\n7. 有完整的SSL/TLS支持，具有良好的安全性\n\n## Netty应用场景了解么？\n\n1. 作为RPC框架的网络通信工具：在Dubbo的RPC调用中，服务消费者使用NettyClient，服务提供者使用NettyServer，当发生服务调用时，将数据通过Dubbo协议编码发送到Server，Server进行解码并完成方法调用，返回数据。\n2. 实现简单的HTTP服务器：在NettyServer的Handler中获取Uri并组装HttpResponse返回。\n3. 实现即时通讯系统。\n\n## Netty核心组件有哪些？分别有什么作用？\n\n### Channel\n\nChannel接口是Netty对网络操作的抽象，它包括基本的I/O操作，如` bind()`、`connect()`、`read()`、`write()`等。\n\n#### 实现类\n\n1. `NioServerSocketChannel`：对应Java BIO中的ServerSocket\n2. `NioSocketChannel`：对应Java BIO中的Socket\n\n### EventLoop\n\n> `EventLoop`定义了Netty的核心抽象，用于处理连接的生命周期中所发生的事件。\n\n- 作用：负责监听网络事件并调用事件处理器进行相关的I/O操作。\n- `EventLoop`负责处理，`Channel`负责读写，`Channel`注册在`EventLoop`上。\n\n### ChannelFuture\n\nNetty是异步非阻塞的，无法立刻得到操作的执行结果（异步），可以通过`ChannelFuture`接口的`addListener()`方法可以注册一个`ChannelFutureListener`，监听结果。\n\n#### 其他方法\n\n- `channel()`：获取关联的Channel\n- `sync()`：让异步操作变为同步\n\n### ChannelHandler和ChannelPipeline\n\nChannelHandler是消息的具体处理器，ChannelPipeline的`addLast()`用来添加一个或多个ChannelHandler，形成一条处理数据的链，一个数据从第一个Handler处理完之后传递到下一个Handler。\n\n### EventGroup\n\n在Netty中，通常由Boss EventLoopGroup接受连接，Worker EventLoopGroup处理连接事件。一个EventGroup是一个线程组，其中包含多个EventLoop，一个EventLoop有一个线程。\n\n### Bootstrap和ServerBootstrap\n\nBootstrap是客户端的启动引导类，ServerBootstrap是服务器的启动引导类。\n\n#### 使用\n\n- Bootstrap通过`connect()`方法连接到服务端的主机和端口，作为TCP通信的客户端，或者使用`bind()`方法绑定本地端口，作为UDP通信的一端。通常只需要配置一个EventLoopGroup。\n\n- SreverBootstrap使用`bind()`方法绑定一个本地端口，等待客户端连接。配置两个线程组-BOSS和WORKER用于接收和处理连接事件。\n\n## Netty线程模型\n\n基于Reactor模式开发，Reactor是事件驱动模型，采用多路复用将事件分发给相应的事件处理器Handler处理。在Netty中主要通过NioEventLoopGroup线程组来实现具体的线程模型。\n\n1. 单线程模型\n\n   一个线程负责接受客户端连接并处理事件，包括`accept|read|decode|process|encode|send`。\n\n   ```java\n   //指定线程数为1，不指定时为CPU核心数*2\n   EventLoopGroup eventGroup = new NioEventLoopGroup(1); \n   //服务器启动引导类\n   ServerBootstrap serverBootstrap = new ServerBootstrap();\n   serverBootstrap.group(eventGroup, eventGroup);//指定处理的线程组\n   ```\n\n   \n\n2. 多线程模型\n\n   一个acceptor线程负责监听客户端连接，一个NIO线程组负责处理`accept|read|decode|process|encode|send`事件。\n\n   ```java\n   EventLoopGroup acceptor = new NioEventLoopGroup(1);\n   EventLoopGroup workerGroup = new NioEventLoopGroup();\n   ServerBootstrap serverBootstrap = new ServerBootstrap();\n   serverBootstrap.group(acceptor, workerGroup);\n   ```\n\n   \n\n3. 主从多线程模型\n\n   从主线程池中选择一个线程作为acceptor线程监听端口，接收客户端连接，其他线程负责后续的接入认证等工作。连接建立后，由从线程池负责具体处理I/O读写。\n\n   ```java\n   EventLoopGroup masterGroup = new NioEventLoopGroup();\n   EventLoopGroup subGroup = new NioEventLoopGroup();\n   ServerBootstrap serverBootstrap = new ServerBootstrap();\n   serverBootstrap.group(masterGroup, subGroup);\n   ```\n\n   ","source":"_drafts/Netty面试问题.md","raw":"---\ntitle: Netty面试问题\ntags:\n  - Netty\n  - Java后端面试\ncategories:\n  - Java后端面试\nimage: 'https://realmicah.xyz/img/'\nabbrlink: ca79e873\n---\n\n<p>\n\n<!-- more -->\n\n## Netty是什么？\n\nNetty是一个基于NIO的Client-Server（客户端服务器）框架，简化并优化了TCP和UDP套接字服务器等网络编程，并且性能以及安全性等很多方面甚至都要更好，支持多种协议，如FTP、SMTP、HTTP以及各种二进制和基于文本的传统协议，使用它可以快速简单地开发网络应用程序。\n\n## 为什么要使用Netty？\n\n1. 统一的API，支持多种传输类型，阻塞和非阻塞的\n2. 简单而强大的线程模型\n3. 自带编解码器解决TCP粘包/拆包问题\n4. 真正的无连接数据包套接字支持\n5. 支持多种协议FTP、SMTP、HTTP\n6. 比JDK自带的NIO相关API更加易用、更高的吞吐量、更低的延迟、更少的内存复制\n7. 有完整的SSL/TLS支持，具有良好的安全性\n\n## Netty应用场景了解么？\n\n1. 作为RPC框架的网络通信工具：在Dubbo的RPC调用中，服务消费者使用NettyClient，服务提供者使用NettyServer，当发生服务调用时，将数据通过Dubbo协议编码发送到Server，Server进行解码并完成方法调用，返回数据。\n2. 实现简单的HTTP服务器：在NettyServer的Handler中获取Uri并组装HttpResponse返回。\n3. 实现即时通讯系统。\n\n## Netty核心组件有哪些？分别有什么作用？\n\n### Channel\n\nChannel接口是Netty对网络操作的抽象，它包括基本的I/O操作，如` bind()`、`connect()`、`read()`、`write()`等。\n\n#### 实现类\n\n1. `NioServerSocketChannel`：对应Java BIO中的ServerSocket\n2. `NioSocketChannel`：对应Java BIO中的Socket\n\n### EventLoop\n\n> `EventLoop`定义了Netty的核心抽象，用于处理连接的生命周期中所发生的事件。\n\n- 作用：负责监听网络事件并调用事件处理器进行相关的I/O操作。\n- `EventLoop`负责处理，`Channel`负责读写，`Channel`注册在`EventLoop`上。\n\n### ChannelFuture\n\nNetty是异步非阻塞的，无法立刻得到操作的执行结果（异步），可以通过`ChannelFuture`接口的`addListener()`方法可以注册一个`ChannelFutureListener`，监听结果。\n\n#### 其他方法\n\n- `channel()`：获取关联的Channel\n- `sync()`：让异步操作变为同步\n\n### ChannelHandler和ChannelPipeline\n\nChannelHandler是消息的具体处理器，ChannelPipeline的`addLast()`用来添加一个或多个ChannelHandler，形成一条处理数据的链，一个数据从第一个Handler处理完之后传递到下一个Handler。\n\n### EventGroup\n\n在Netty中，通常由Boss EventLoopGroup接受连接，Worker EventLoopGroup处理连接事件。一个EventGroup是一个线程组，其中包含多个EventLoop，一个EventLoop有一个线程。\n\n### Bootstrap和ServerBootstrap\n\nBootstrap是客户端的启动引导类，ServerBootstrap是服务器的启动引导类。\n\n#### 使用\n\n- Bootstrap通过`connect()`方法连接到服务端的主机和端口，作为TCP通信的客户端，或者使用`bind()`方法绑定本地端口，作为UDP通信的一端。通常只需要配置一个EventLoopGroup。\n\n- SreverBootstrap使用`bind()`方法绑定一个本地端口，等待客户端连接。配置两个线程组-BOSS和WORKER用于接收和处理连接事件。\n\n## Netty线程模型\n\n基于Reactor模式开发，Reactor是事件驱动模型，采用多路复用将事件分发给相应的事件处理器Handler处理。在Netty中主要通过NioEventLoopGroup线程组来实现具体的线程模型。\n\n1. 单线程模型\n\n   一个线程负责接受客户端连接并处理事件，包括`accept|read|decode|process|encode|send`。\n\n   ```java\n   //指定线程数为1，不指定时为CPU核心数*2\n   EventLoopGroup eventGroup = new NioEventLoopGroup(1); \n   //服务器启动引导类\n   ServerBootstrap serverBootstrap = new ServerBootstrap();\n   serverBootstrap.group(eventGroup, eventGroup);//指定处理的线程组\n   ```\n\n   \n\n2. 多线程模型\n\n   一个acceptor线程负责监听客户端连接，一个NIO线程组负责处理`accept|read|decode|process|encode|send`事件。\n\n   ```java\n   EventLoopGroup acceptor = new NioEventLoopGroup(1);\n   EventLoopGroup workerGroup = new NioEventLoopGroup();\n   ServerBootstrap serverBootstrap = new ServerBootstrap();\n   serverBootstrap.group(acceptor, workerGroup);\n   ```\n\n   \n\n3. 主从多线程模型\n\n   从主线程池中选择一个线程作为acceptor线程监听端口，接收客户端连接，其他线程负责后续的接入认证等工作。连接建立后，由从线程池负责具体处理I/O读写。\n\n   ```java\n   EventLoopGroup masterGroup = new NioEventLoopGroup();\n   EventLoopGroup subGroup = new NioEventLoopGroup();\n   ServerBootstrap serverBootstrap = new ServerBootstrap();\n   serverBootstrap.group(masterGroup, subGroup);\n   ```\n\n   ","slug":"Netty面试问题","published":0,"date":"2020-06-16T11:18:30.107Z","updated":"2020-06-17T12:03:05.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1c0004z4ejdav7ef0l","content":"<p>\n\n<a id=\"more\"></a>\n\n<h2 id=\"Netty是什么？\"><a href=\"#Netty是什么？\" class=\"headerlink\" title=\"Netty是什么？\"></a>Netty是什么？</h2><p>Netty是一个基于NIO的Client-Server（客户端服务器）框架，简化并优化了TCP和UDP套接字服务器等网络编程，并且性能以及安全性等很多方面甚至都要更好，支持多种协议，如FTP、SMTP、HTTP以及各种二进制和基于文本的传统协议，使用它可以快速简单地开发网络应用程序。</p>\n<h2 id=\"为什么要使用Netty？\"><a href=\"#为什么要使用Netty？\" class=\"headerlink\" title=\"为什么要使用Netty？\"></a>为什么要使用Netty？</h2><ol>\n<li>统一的API，支持多种传输类型，阻塞和非阻塞的</li>\n<li>简单而强大的线程模型</li>\n<li>自带编解码器解决TCP粘包/拆包问题</li>\n<li>真正的无连接数据包套接字支持</li>\n<li>支持多种协议FTP、SMTP、HTTP</li>\n<li>比JDK自带的NIO相关API更加易用、更高的吞吐量、更低的延迟、更少的内存复制</li>\n<li>有完整的SSL/TLS支持，具有良好的安全性</li>\n</ol>\n<h2 id=\"Netty应用场景了解么？\"><a href=\"#Netty应用场景了解么？\" class=\"headerlink\" title=\"Netty应用场景了解么？\"></a>Netty应用场景了解么？</h2><ol>\n<li>作为RPC框架的网络通信工具：在Dubbo的RPC调用中，服务消费者使用NettyClient，服务提供者使用NettyServer，当发生服务调用时，将数据通过Dubbo协议编码发送到Server，Server进行解码并完成方法调用，返回数据。</li>\n<li>实现简单的HTTP服务器：在NettyServer的Handler中获取Uri并组装HttpResponse返回。</li>\n<li>实现即时通讯系统。</li>\n</ol>\n<h2 id=\"Netty核心组件有哪些？分别有什么作用？\"><a href=\"#Netty核心组件有哪些？分别有什么作用？\" class=\"headerlink\" title=\"Netty核心组件有哪些？分别有什么作用？\"></a>Netty核心组件有哪些？分别有什么作用？</h2><h3 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h3><p>Channel接口是Netty对网络操作的抽象，它包括基本的I/O操作，如<code>bind()</code>、<code>connect()</code>、<code>read()</code>、<code>write()</code>等。</p>\n<h4 id=\"实现类\"><a href=\"#实现类\" class=\"headerlink\" title=\"实现类\"></a>实现类</h4><ol>\n<li><code>NioServerSocketChannel</code>：对应Java BIO中的ServerSocket</li>\n<li><code>NioSocketChannel</code>：对应Java BIO中的Socket</li>\n</ol>\n<h3 id=\"EventLoop\"><a href=\"#EventLoop\" class=\"headerlink\" title=\"EventLoop\"></a>EventLoop</h3><blockquote>\n<p><code>EventLoop</code>定义了Netty的核心抽象，用于处理连接的生命周期中所发生的事件。</p>\n</blockquote>\n<ul>\n<li>作用：负责监听网络事件并调用事件处理器进行相关的I/O操作。</li>\n<li><code>EventLoop</code>负责处理，<code>Channel</code>负责读写，<code>Channel</code>注册在<code>EventLoop</code>上。</li>\n</ul>\n<h3 id=\"ChannelFuture\"><a href=\"#ChannelFuture\" class=\"headerlink\" title=\"ChannelFuture\"></a>ChannelFuture</h3><p>Netty是异步非阻塞的，无法立刻得到操作的执行结果（异步），可以通过<code>ChannelFuture</code>接口的<code>addListener()</code>方法可以注册一个<code>ChannelFutureListener</code>，监听结果。</p>\n<h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><ul>\n<li><code>channel()</code>：获取关联的Channel</li>\n<li><code>sync()</code>：让异步操作变为同步</li>\n</ul>\n<h3 id=\"ChannelHandler和ChannelPipeline\"><a href=\"#ChannelHandler和ChannelPipeline\" class=\"headerlink\" title=\"ChannelHandler和ChannelPipeline\"></a>ChannelHandler和ChannelPipeline</h3><p>ChannelHandler是消息的具体处理器，ChannelPipeline的<code>addLast()</code>用来添加一个或多个ChannelHandler，形成一条处理数据的链，一个数据从第一个Handler处理完之后传递到下一个Handler。</p>\n<h3 id=\"EventGroup\"><a href=\"#EventGroup\" class=\"headerlink\" title=\"EventGroup\"></a>EventGroup</h3><p>在Netty中，通常由Boss EventLoopGroup接受连接，Worker EventLoopGroup处理连接事件。一个EventGroup是一个线程组，其中包含多个EventLoop，一个EventLoop有一个线程。</p>\n<h3 id=\"Bootstrap和ServerBootstrap\"><a href=\"#Bootstrap和ServerBootstrap\" class=\"headerlink\" title=\"Bootstrap和ServerBootstrap\"></a>Bootstrap和ServerBootstrap</h3><p>Bootstrap是客户端的启动引导类，ServerBootstrap是服务器的启动引导类。</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><ul>\n<li><p>Bootstrap通过<code>connect()</code>方法连接到服务端的主机和端口，作为TCP通信的客户端，或者使用<code>bind()</code>方法绑定本地端口，作为UDP通信的一端。通常只需要配置一个EventLoopGroup。</p>\n</li>\n<li><p>SreverBootstrap使用<code>bind()</code>方法绑定一个本地端口，等待客户端连接。配置两个线程组-BOSS和WORKER用于接收和处理连接事件。</p>\n</li>\n</ul>\n<h2 id=\"Netty线程模型\"><a href=\"#Netty线程模型\" class=\"headerlink\" title=\"Netty线程模型\"></a>Netty线程模型</h2><p>基于Reactor模式开发，Reactor是事件驱动模型，采用多路复用将事件分发给相应的事件处理器Handler处理。在Netty中主要通过NioEventLoopGroup线程组来实现具体的线程模型。</p>\n<ol>\n<li><p>单线程模型</p>\n<p>一个线程负责接受客户端连接并处理事件，包括<code>accept|read|decode|process|encode|send</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//指定线程数为1，不指定时为CPU核心数*2</span></span><br><span class=\"line\">EventLoopGroup eventGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>); </span><br><span class=\"line\"><span class=\"comment\">//服务器启动引导类</span></span><br><span class=\"line\">ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">serverBootstrap.group(eventGroup, eventGroup);<span class=\"comment\">//指定处理的线程组</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>多线程模型</p>\n<p>一个acceptor线程负责监听客户端连接，一个NIO线程组负责处理<code>accept|read|decode|process|encode|send</code>事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventLoopGroup acceptor = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">serverBootstrap.group(acceptor, workerGroup);</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>主从多线程模型</p>\n<p>从主线程池中选择一个线程作为acceptor线程监听端口，接收客户端连接，其他线程负责后续的接入认证等工作。连接建立后，由从线程池负责具体处理I/O读写。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventLoopGroup masterGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">EventLoopGroup subGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">serverBootstrap.group(masterGroup, subGroup);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>","more":"<h2 id=\"Netty是什么？\"><a href=\"#Netty是什么？\" class=\"headerlink\" title=\"Netty是什么？\"></a>Netty是什么？</h2><p>Netty是一个基于NIO的Client-Server（客户端服务器）框架，简化并优化了TCP和UDP套接字服务器等网络编程，并且性能以及安全性等很多方面甚至都要更好，支持多种协议，如FTP、SMTP、HTTP以及各种二进制和基于文本的传统协议，使用它可以快速简单地开发网络应用程序。</p>\n<h2 id=\"为什么要使用Netty？\"><a href=\"#为什么要使用Netty？\" class=\"headerlink\" title=\"为什么要使用Netty？\"></a>为什么要使用Netty？</h2><ol>\n<li>统一的API，支持多种传输类型，阻塞和非阻塞的</li>\n<li>简单而强大的线程模型</li>\n<li>自带编解码器解决TCP粘包/拆包问题</li>\n<li>真正的无连接数据包套接字支持</li>\n<li>支持多种协议FTP、SMTP、HTTP</li>\n<li>比JDK自带的NIO相关API更加易用、更高的吞吐量、更低的延迟、更少的内存复制</li>\n<li>有完整的SSL/TLS支持，具有良好的安全性</li>\n</ol>\n<h2 id=\"Netty应用场景了解么？\"><a href=\"#Netty应用场景了解么？\" class=\"headerlink\" title=\"Netty应用场景了解么？\"></a>Netty应用场景了解么？</h2><ol>\n<li>作为RPC框架的网络通信工具：在Dubbo的RPC调用中，服务消费者使用NettyClient，服务提供者使用NettyServer，当发生服务调用时，将数据通过Dubbo协议编码发送到Server，Server进行解码并完成方法调用，返回数据。</li>\n<li>实现简单的HTTP服务器：在NettyServer的Handler中获取Uri并组装HttpResponse返回。</li>\n<li>实现即时通讯系统。</li>\n</ol>\n<h2 id=\"Netty核心组件有哪些？分别有什么作用？\"><a href=\"#Netty核心组件有哪些？分别有什么作用？\" class=\"headerlink\" title=\"Netty核心组件有哪些？分别有什么作用？\"></a>Netty核心组件有哪些？分别有什么作用？</h2><h3 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h3><p>Channel接口是Netty对网络操作的抽象，它包括基本的I/O操作，如<code>bind()</code>、<code>connect()</code>、<code>read()</code>、<code>write()</code>等。</p>\n<h4 id=\"实现类\"><a href=\"#实现类\" class=\"headerlink\" title=\"实现类\"></a>实现类</h4><ol>\n<li><code>NioServerSocketChannel</code>：对应Java BIO中的ServerSocket</li>\n<li><code>NioSocketChannel</code>：对应Java BIO中的Socket</li>\n</ol>\n<h3 id=\"EventLoop\"><a href=\"#EventLoop\" class=\"headerlink\" title=\"EventLoop\"></a>EventLoop</h3><blockquote>\n<p><code>EventLoop</code>定义了Netty的核心抽象，用于处理连接的生命周期中所发生的事件。</p>\n</blockquote>\n<ul>\n<li>作用：负责监听网络事件并调用事件处理器进行相关的I/O操作。</li>\n<li><code>EventLoop</code>负责处理，<code>Channel</code>负责读写，<code>Channel</code>注册在<code>EventLoop</code>上。</li>\n</ul>\n<h3 id=\"ChannelFuture\"><a href=\"#ChannelFuture\" class=\"headerlink\" title=\"ChannelFuture\"></a>ChannelFuture</h3><p>Netty是异步非阻塞的，无法立刻得到操作的执行结果（异步），可以通过<code>ChannelFuture</code>接口的<code>addListener()</code>方法可以注册一个<code>ChannelFutureListener</code>，监听结果。</p>\n<h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><ul>\n<li><code>channel()</code>：获取关联的Channel</li>\n<li><code>sync()</code>：让异步操作变为同步</li>\n</ul>\n<h3 id=\"ChannelHandler和ChannelPipeline\"><a href=\"#ChannelHandler和ChannelPipeline\" class=\"headerlink\" title=\"ChannelHandler和ChannelPipeline\"></a>ChannelHandler和ChannelPipeline</h3><p>ChannelHandler是消息的具体处理器，ChannelPipeline的<code>addLast()</code>用来添加一个或多个ChannelHandler，形成一条处理数据的链，一个数据从第一个Handler处理完之后传递到下一个Handler。</p>\n<h3 id=\"EventGroup\"><a href=\"#EventGroup\" class=\"headerlink\" title=\"EventGroup\"></a>EventGroup</h3><p>在Netty中，通常由Boss EventLoopGroup接受连接，Worker EventLoopGroup处理连接事件。一个EventGroup是一个线程组，其中包含多个EventLoop，一个EventLoop有一个线程。</p>\n<h3 id=\"Bootstrap和ServerBootstrap\"><a href=\"#Bootstrap和ServerBootstrap\" class=\"headerlink\" title=\"Bootstrap和ServerBootstrap\"></a>Bootstrap和ServerBootstrap</h3><p>Bootstrap是客户端的启动引导类，ServerBootstrap是服务器的启动引导类。</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><ul>\n<li><p>Bootstrap通过<code>connect()</code>方法连接到服务端的主机和端口，作为TCP通信的客户端，或者使用<code>bind()</code>方法绑定本地端口，作为UDP通信的一端。通常只需要配置一个EventLoopGroup。</p>\n</li>\n<li><p>SreverBootstrap使用<code>bind()</code>方法绑定一个本地端口，等待客户端连接。配置两个线程组-BOSS和WORKER用于接收和处理连接事件。</p>\n</li>\n</ul>\n<h2 id=\"Netty线程模型\"><a href=\"#Netty线程模型\" class=\"headerlink\" title=\"Netty线程模型\"></a>Netty线程模型</h2><p>基于Reactor模式开发，Reactor是事件驱动模型，采用多路复用将事件分发给相应的事件处理器Handler处理。在Netty中主要通过NioEventLoopGroup线程组来实现具体的线程模型。</p>\n<ol>\n<li><p>单线程模型</p>\n<p>一个线程负责接受客户端连接并处理事件，包括<code>accept|read|decode|process|encode|send</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//指定线程数为1，不指定时为CPU核心数*2</span></span><br><span class=\"line\">EventLoopGroup eventGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>); </span><br><span class=\"line\"><span class=\"comment\">//服务器启动引导类</span></span><br><span class=\"line\">ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">serverBootstrap.group(eventGroup, eventGroup);<span class=\"comment\">//指定处理的线程组</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>多线程模型</p>\n<p>一个acceptor线程负责监听客户端连接，一个NIO线程组负责处理<code>accept|read|decode|process|encode|send</code>事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventLoopGroup acceptor = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">serverBootstrap.group(acceptor, workerGroup);</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>主从多线程模型</p>\n<p>从主线程池中选择一个线程作为acceptor线程监听端口，接收客户端连接，其他线程负责后续的接入认证等工作。连接建立后，由从线程池负责具体处理I/O读写。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventLoopGroup masterGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">EventLoopGroup subGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\">ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">serverBootstrap.group(masterGroup, subGroup);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>","length":2416},{"abbrlink":"cab44b1f","_content":"\n\n## java基础\n\nArrays.sort实现原理和Collection实现原理\nforeach和while的区别(编译之后)\n线程池的种类，区别和使用场景\n分析线程池的实现原理和线程的调度过程\n线程池如何调优\n线程池的最大线程数目根据什么确定\n动态代理的几种方式\nHashMap的并发问题\n了解LinkedHashMap的应用吗\n反射的原理，反射创建类实例的三种方式是什么？\ncloneable接口实现原理，浅拷贝or深拷贝\nJava NIO使用\nhashtable和hashmap的区别及实现原理，hashmap会问到数组索引，hash碰撞怎么解决\narraylist和linkedlist区别及实现原理\n反射中，Class.forName和ClassLoader区别\nString，Stringbuffer，StringBuilder的区别？\n有没有可能2个不相等的对象有相同的hashcode\n简述NIO的最佳实践，比如netty，mina\nTreeMap的实现原理\n\n### JVM相关\n\n类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，他们的执行顺序\nJVM内存分代\nJava 8的内存分代改进\nJVM垃圾回收机制，何时触发MinorGC等操作\njvm中一次完整的GC流程（从ygc到fgc）是怎样的，重点讲讲对象如何晋升到老年代，几种主要的jvm参数等\n你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms，g1\n新生代和老生代的内存回收策略\nEden和Survivor的比例分配等\n深入分析了Classloader，双亲委派机制\nJVM的编译优化\n对Java内存模型的理解，以及其在并发中的应用\n指令重排序，内存栅栏等\nOOM错误，stackoverflow错误，permgen space错误\nJVM常用参数\ntomcat结构，类加载器流程\nvolatile的语义，它修饰的变量一定线程安全吗\ng1和cms区别,吞吐量优先和响应优先的垃圾收集器选择\n说一说你对环境变量classpath的理解？如果一个类不在classpath下，为什么会抛出ClassNotFoundException异常，如果在不改变这个类路径的前期下，怎样才能正确加载这个类？\n说一下强引用、软引用、弱引用、虚引用以及他们之间和gc的关系\n\n### JUC/并发相关\n\nThreadLocal用过么，原理是什么，用的时候要注意什么\nSynchronized和Lock的区别\nsynchronized 的原理，什么是自旋锁，偏向锁，轻量级锁，什么叫可重入锁，什么叫公平锁和非公平锁\nconcurrenthashmap具体实现及其原理，jdk8下的改版\n用过哪些原子类，他们的参数以及原理是什么\ncas是什么，他会产生什么问题（ABA问题的解决，如加入修改次数、版本号）\n如果让你实现一个并发安全的链表，你会怎么做\n简述ConcurrentLinkedQueue和LinkedBlockingQueue的用处和不同之处\n简述AQS的实现原理\ncountdowlatch和cyclicbarrier的用法，以及相互之间的差别?\nconcurrent包中使用过哪些类？分别说说使用在什么场景？为什么要使用？\nLockSupport工具\nCondition接口及其实现原理\nFork/Join框架的理解\njdk8的parallelStream的理解\n分段锁的原理,锁力度减小的思考\n\n## Spring\n\nSpring AOP与IOC的实现原理\nSpring的beanFactory和factoryBean的区别\n为什么CGlib方式可以对接口实现代理？\nRMI与代理模式\nSpring的事务隔离级别，实现原理\n对Spring的理解，非单例注入的原理？它的生命周期？循环注入的原理，aop的实现原理，说说aop中的几个术语，它们是怎么相互工作的？\nMybatis的底层实现原理\nMVC框架原理，他们都是怎么做url路由的\nspring boot特性，优势，适用场景等\nquartz和timer对比\nspring的controller是单例还是多例，怎么保证并发的安全\n\n## 分布式相关\n\nDubbo的底层实现原理和机制\n描述一个服务从发布到被消费的详细过程\n分布式系统怎么做服务治理\n接口的幂等性的概念\n消息中间件如何解决消息丢失问题\nDubbo的服务请求失败怎么处理\n重连机制会不会造成错误\n对分布式事务的理解\n如何实现负载均衡，有哪些算法可以实现？\nZookeeper的用途，选举的原理是什么？\n数据的垂直拆分水平拆分。\nzookeeper原理和适用场景\nzookeeper watch机制\nredis/zk节点宕机如何处理\n分布式集群下如何做到唯一序列号\n如何做一个分布式锁\n用过哪些MQ，怎么用的，和其他mq比较有什么优缺点，MQ的连接是线程安全的吗\nMQ系统的数据如何保证不丢失\n列举出你能想到的数据库分库分表策略；分库分表后，如何解决全表查询的问题。\n\n## 算法&数据结构&设计模式\n\n海量url去重类问题（布隆过滤器）\n数组和链表数据结构描述，各自的时间复杂度\n二叉树遍历\n快速排序\nBTree相关的操作\n在工作中遇到过哪些设计模式，是如何应用的\nhash算法的有哪几种，优缺点，使用场景\n什么是一致性hash\npaxos算法\n在装饰器模式和代理模式之间，你如何抉择，请结合自身实际情况聊聊\n代码重构的步骤和原因，如果理解重构到模式？\n\n## 数据库\n\nMySQL InnoDB存储的文件结构\n索引树是如何维护的？\n数据库自增主键可能的问题\nMySQL的几种优化\nmysql索引为什么使用B+树\n数据库锁表的相关处理\n索引失效场景\n高并发下如何做到安全的修改同一行数据，乐观锁和悲观锁是什么，INNODB的行级锁有哪2种，解释其含义\n数据库会死锁吗，举一个死锁的例子，mysql怎么解决死锁\n\n## Redis&缓存相关\n\nRedis的并发竞争问题如何解决了解Redis事务的CAS操作吗\n缓存机器增删如何对系统影响最小，一致性哈希的实现\nRedis持久化的几种方式，优缺点是什么，怎么实现的\nRedis的缓存失效策略\n缓存穿透的解决办法\nredis集群，高可用，原理\nmySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据\n用Redis和任意语言实现一段恶意登录保护的代码，限制1小时内每用户Id最多只能登录5次\nredis的数据淘汰策略\n\n## 网络相关\n\nhttp1.0和http1.1有什么区别\nTCP/IP协议\nTCP三次握手和四次挥手的流程，为什么断开连接要4次,如果握手只有两次，会出现什么\nTIME_WAIT和CLOSE_WAIT的区别\n说说你知道的几种HTTP响应码\n当你用浏览器打开一个链接的时候，计算机做了哪些工作步骤\nTCP/IP如何保证可靠性，数据包有哪些数据组成\n长连接与短连接\nHttp请求get和post的区别以及数据包格式\n简述tcp建立连接3次握手，和断开连接4次握手的过程；关闭连接时，出现TIMEWAIT过多是由什么原因引起，是出现在主动断开方还是被动断开方。\n\n## 其他\n\nmaven解决依赖冲突,快照版和发行版的区别\nLinux下IO模型有几种，各自的含义是什么\n实际场景问题，海量登录日志如何排序和处理SQL操作，主要是索引和聚合函数的应用\n实际场景问题解决，典型的TOP K问题\n线上bug处理流程\n如何从线上日志发现问题\nlinux利用哪些命令，查找哪里出了问题（例如io密集任务，cpu过度）\n场景问题，有一个第三方接口，有很多个线程去调用获取数据，现在规定每秒钟最多有10个线程同时调用它，如何做到。\n用三个线程按顺序循环打印abc三个字母，比如abcabcabc。\n常见的缓存策略有哪些，你们项目中用到了什么缓存系统，如何设计的\n设计一个秒杀系统，30分钟没付款就自动关闭交易（并发会很高）\n请列出你所了解的性能测试工具\n后台系统怎么防止请求重复提交？\n有多个相同的接口，我想客户端同时请求，然后只需要在第一个请求返回结果的时候返回给客户端","source":"_drafts/youdw-github.md","raw":"---\nabbrlink: cab44b1f\n---\n\n\n## java基础\n\nArrays.sort实现原理和Collection实现原理\nforeach和while的区别(编译之后)\n线程池的种类，区别和使用场景\n分析线程池的实现原理和线程的调度过程\n线程池如何调优\n线程池的最大线程数目根据什么确定\n动态代理的几种方式\nHashMap的并发问题\n了解LinkedHashMap的应用吗\n反射的原理，反射创建类实例的三种方式是什么？\ncloneable接口实现原理，浅拷贝or深拷贝\nJava NIO使用\nhashtable和hashmap的区别及实现原理，hashmap会问到数组索引，hash碰撞怎么解决\narraylist和linkedlist区别及实现原理\n反射中，Class.forName和ClassLoader区别\nString，Stringbuffer，StringBuilder的区别？\n有没有可能2个不相等的对象有相同的hashcode\n简述NIO的最佳实践，比如netty，mina\nTreeMap的实现原理\n\n### JVM相关\n\n类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，他们的执行顺序\nJVM内存分代\nJava 8的内存分代改进\nJVM垃圾回收机制，何时触发MinorGC等操作\njvm中一次完整的GC流程（从ygc到fgc）是怎样的，重点讲讲对象如何晋升到老年代，几种主要的jvm参数等\n你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms，g1\n新生代和老生代的内存回收策略\nEden和Survivor的比例分配等\n深入分析了Classloader，双亲委派机制\nJVM的编译优化\n对Java内存模型的理解，以及其在并发中的应用\n指令重排序，内存栅栏等\nOOM错误，stackoverflow错误，permgen space错误\nJVM常用参数\ntomcat结构，类加载器流程\nvolatile的语义，它修饰的变量一定线程安全吗\ng1和cms区别,吞吐量优先和响应优先的垃圾收集器选择\n说一说你对环境变量classpath的理解？如果一个类不在classpath下，为什么会抛出ClassNotFoundException异常，如果在不改变这个类路径的前期下，怎样才能正确加载这个类？\n说一下强引用、软引用、弱引用、虚引用以及他们之间和gc的关系\n\n### JUC/并发相关\n\nThreadLocal用过么，原理是什么，用的时候要注意什么\nSynchronized和Lock的区别\nsynchronized 的原理，什么是自旋锁，偏向锁，轻量级锁，什么叫可重入锁，什么叫公平锁和非公平锁\nconcurrenthashmap具体实现及其原理，jdk8下的改版\n用过哪些原子类，他们的参数以及原理是什么\ncas是什么，他会产生什么问题（ABA问题的解决，如加入修改次数、版本号）\n如果让你实现一个并发安全的链表，你会怎么做\n简述ConcurrentLinkedQueue和LinkedBlockingQueue的用处和不同之处\n简述AQS的实现原理\ncountdowlatch和cyclicbarrier的用法，以及相互之间的差别?\nconcurrent包中使用过哪些类？分别说说使用在什么场景？为什么要使用？\nLockSupport工具\nCondition接口及其实现原理\nFork/Join框架的理解\njdk8的parallelStream的理解\n分段锁的原理,锁力度减小的思考\n\n## Spring\n\nSpring AOP与IOC的实现原理\nSpring的beanFactory和factoryBean的区别\n为什么CGlib方式可以对接口实现代理？\nRMI与代理模式\nSpring的事务隔离级别，实现原理\n对Spring的理解，非单例注入的原理？它的生命周期？循环注入的原理，aop的实现原理，说说aop中的几个术语，它们是怎么相互工作的？\nMybatis的底层实现原理\nMVC框架原理，他们都是怎么做url路由的\nspring boot特性，优势，适用场景等\nquartz和timer对比\nspring的controller是单例还是多例，怎么保证并发的安全\n\n## 分布式相关\n\nDubbo的底层实现原理和机制\n描述一个服务从发布到被消费的详细过程\n分布式系统怎么做服务治理\n接口的幂等性的概念\n消息中间件如何解决消息丢失问题\nDubbo的服务请求失败怎么处理\n重连机制会不会造成错误\n对分布式事务的理解\n如何实现负载均衡，有哪些算法可以实现？\nZookeeper的用途，选举的原理是什么？\n数据的垂直拆分水平拆分。\nzookeeper原理和适用场景\nzookeeper watch机制\nredis/zk节点宕机如何处理\n分布式集群下如何做到唯一序列号\n如何做一个分布式锁\n用过哪些MQ，怎么用的，和其他mq比较有什么优缺点，MQ的连接是线程安全的吗\nMQ系统的数据如何保证不丢失\n列举出你能想到的数据库分库分表策略；分库分表后，如何解决全表查询的问题。\n\n## 算法&数据结构&设计模式\n\n海量url去重类问题（布隆过滤器）\n数组和链表数据结构描述，各自的时间复杂度\n二叉树遍历\n快速排序\nBTree相关的操作\n在工作中遇到过哪些设计模式，是如何应用的\nhash算法的有哪几种，优缺点，使用场景\n什么是一致性hash\npaxos算法\n在装饰器模式和代理模式之间，你如何抉择，请结合自身实际情况聊聊\n代码重构的步骤和原因，如果理解重构到模式？\n\n## 数据库\n\nMySQL InnoDB存储的文件结构\n索引树是如何维护的？\n数据库自增主键可能的问题\nMySQL的几种优化\nmysql索引为什么使用B+树\n数据库锁表的相关处理\n索引失效场景\n高并发下如何做到安全的修改同一行数据，乐观锁和悲观锁是什么，INNODB的行级锁有哪2种，解释其含义\n数据库会死锁吗，举一个死锁的例子，mysql怎么解决死锁\n\n## Redis&缓存相关\n\nRedis的并发竞争问题如何解决了解Redis事务的CAS操作吗\n缓存机器增删如何对系统影响最小，一致性哈希的实现\nRedis持久化的几种方式，优缺点是什么，怎么实现的\nRedis的缓存失效策略\n缓存穿透的解决办法\nredis集群，高可用，原理\nmySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据\n用Redis和任意语言实现一段恶意登录保护的代码，限制1小时内每用户Id最多只能登录5次\nredis的数据淘汰策略\n\n## 网络相关\n\nhttp1.0和http1.1有什么区别\nTCP/IP协议\nTCP三次握手和四次挥手的流程，为什么断开连接要4次,如果握手只有两次，会出现什么\nTIME_WAIT和CLOSE_WAIT的区别\n说说你知道的几种HTTP响应码\n当你用浏览器打开一个链接的时候，计算机做了哪些工作步骤\nTCP/IP如何保证可靠性，数据包有哪些数据组成\n长连接与短连接\nHttp请求get和post的区别以及数据包格式\n简述tcp建立连接3次握手，和断开连接4次握手的过程；关闭连接时，出现TIMEWAIT过多是由什么原因引起，是出现在主动断开方还是被动断开方。\n\n## 其他\n\nmaven解决依赖冲突,快照版和发行版的区别\nLinux下IO模型有几种，各自的含义是什么\n实际场景问题，海量登录日志如何排序和处理SQL操作，主要是索引和聚合函数的应用\n实际场景问题解决，典型的TOP K问题\n线上bug处理流程\n如何从线上日志发现问题\nlinux利用哪些命令，查找哪里出了问题（例如io密集任务，cpu过度）\n场景问题，有一个第三方接口，有很多个线程去调用获取数据，现在规定每秒钟最多有10个线程同时调用它，如何做到。\n用三个线程按顺序循环打印abc三个字母，比如abcabcabc。\n常见的缓存策略有哪些，你们项目中用到了什么缓存系统，如何设计的\n设计一个秒杀系统，30分钟没付款就自动关闭交易（并发会很高）\n请列出你所了解的性能测试工具\n后台系统怎么防止请求重复提交？\n有多个相同的接口，我想客户端同时请求，然后只需要在第一个请求返回结果的时候返回给客户端","slug":"youdw-github","published":0,"date":"2020-07-01T13:52:44.421Z","updated":"2020-07-04T17:31:52.663Z","title":"youdw-github","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1f0008z4ej2ypn8wnp","content":"<h2 id=\"java基础\"><a href=\"#java基础\" class=\"headerlink\" title=\"java基础\"></a>java基础</h2><p>Arrays.sort实现原理和Collection实现原理<br>foreach和while的区别(编译之后)<br>线程池的种类，区别和使用场景<br>分析线程池的实现原理和线程的调度过程<br>线程池如何调优<br>线程池的最大线程数目根据什么确定<br>动态代理的几种方式<br>HashMap的并发问题<br>了解LinkedHashMap的应用吗<br>反射的原理，反射创建类实例的三种方式是什么？<br>cloneable接口实现原理，浅拷贝or深拷贝<br>Java NIO使用<br>hashtable和hashmap的区别及实现原理，hashmap会问到数组索引，hash碰撞怎么解决<br>arraylist和linkedlist区别及实现原理<br>反射中，Class.forName和ClassLoader区别<br>String，Stringbuffer，StringBuilder的区别？<br>有没有可能2个不相等的对象有相同的hashcode<br>简述NIO的最佳实践，比如netty，mina<br>TreeMap的实现原理</p>\n<h3 id=\"JVM相关\"><a href=\"#JVM相关\" class=\"headerlink\" title=\"JVM相关\"></a>JVM相关</h3><p>类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，他们的执行顺序<br>JVM内存分代<br>Java 8的内存分代改进<br>JVM垃圾回收机制，何时触发MinorGC等操作<br>jvm中一次完整的GC流程（从ygc到fgc）是怎样的，重点讲讲对象如何晋升到老年代，几种主要的jvm参数等<br>你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms，g1<br>新生代和老生代的内存回收策略<br>Eden和Survivor的比例分配等<br>深入分析了Classloader，双亲委派机制<br>JVM的编译优化<br>对Java内存模型的理解，以及其在并发中的应用<br>指令重排序，内存栅栏等<br>OOM错误，stackoverflow错误，permgen space错误<br>JVM常用参数<br>tomcat结构，类加载器流程<br>volatile的语义，它修饰的变量一定线程安全吗<br>g1和cms区别,吞吐量优先和响应优先的垃圾收集器选择<br>说一说你对环境变量classpath的理解？如果一个类不在classpath下，为什么会抛出ClassNotFoundException异常，如果在不改变这个类路径的前期下，怎样才能正确加载这个类？<br>说一下强引用、软引用、弱引用、虚引用以及他们之间和gc的关系</p>\n<h3 id=\"JUC-并发相关\"><a href=\"#JUC-并发相关\" class=\"headerlink\" title=\"JUC/并发相关\"></a>JUC/并发相关</h3><p>ThreadLocal用过么，原理是什么，用的时候要注意什么<br>Synchronized和Lock的区别<br>synchronized 的原理，什么是自旋锁，偏向锁，轻量级锁，什么叫可重入锁，什么叫公平锁和非公平锁<br>concurrenthashmap具体实现及其原理，jdk8下的改版<br>用过哪些原子类，他们的参数以及原理是什么<br>cas是什么，他会产生什么问题（ABA问题的解决，如加入修改次数、版本号）<br>如果让你实现一个并发安全的链表，你会怎么做<br>简述ConcurrentLinkedQueue和LinkedBlockingQueue的用处和不同之处<br>简述AQS的实现原理<br>countdowlatch和cyclicbarrier的用法，以及相互之间的差别?<br>concurrent包中使用过哪些类？分别说说使用在什么场景？为什么要使用？<br>LockSupport工具<br>Condition接口及其实现原理<br>Fork/Join框架的理解<br>jdk8的parallelStream的理解<br>分段锁的原理,锁力度减小的思考</p>\n<h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><p>Spring AOP与IOC的实现原理<br>Spring的beanFactory和factoryBean的区别<br>为什么CGlib方式可以对接口实现代理？<br>RMI与代理模式<br>Spring的事务隔离级别，实现原理<br>对Spring的理解，非单例注入的原理？它的生命周期？循环注入的原理，aop的实现原理，说说aop中的几个术语，它们是怎么相互工作的？<br>Mybatis的底层实现原理<br>MVC框架原理，他们都是怎么做url路由的<br>spring boot特性，优势，适用场景等<br>quartz和timer对比<br>spring的controller是单例还是多例，怎么保证并发的安全</p>\n<h2 id=\"分布式相关\"><a href=\"#分布式相关\" class=\"headerlink\" title=\"分布式相关\"></a>分布式相关</h2><p>Dubbo的底层实现原理和机制<br>描述一个服务从发布到被消费的详细过程<br>分布式系统怎么做服务治理<br>接口的幂等性的概念<br>消息中间件如何解决消息丢失问题<br>Dubbo的服务请求失败怎么处理<br>重连机制会不会造成错误<br>对分布式事务的理解<br>如何实现负载均衡，有哪些算法可以实现？<br>Zookeeper的用途，选举的原理是什么？<br>数据的垂直拆分水平拆分。<br>zookeeper原理和适用场景<br>zookeeper watch机制<br>redis/zk节点宕机如何处理<br>分布式集群下如何做到唯一序列号<br>如何做一个分布式锁<br>用过哪些MQ，怎么用的，和其他mq比较有什么优缺点，MQ的连接是线程安全的吗<br>MQ系统的数据如何保证不丢失<br>列举出你能想到的数据库分库分表策略；分库分表后，如何解决全表查询的问题。</p>\n<h2 id=\"算法-amp-数据结构-amp-设计模式\"><a href=\"#算法-amp-数据结构-amp-设计模式\" class=\"headerlink\" title=\"算法&amp;数据结构&amp;设计模式\"></a>算法&amp;数据结构&amp;设计模式</h2><p>海量url去重类问题（布隆过滤器）<br>数组和链表数据结构描述，各自的时间复杂度<br>二叉树遍历<br>快速排序<br>BTree相关的操作<br>在工作中遇到过哪些设计模式，是如何应用的<br>hash算法的有哪几种，优缺点，使用场景<br>什么是一致性hash<br>paxos算法<br>在装饰器模式和代理模式之间，你如何抉择，请结合自身实际情况聊聊<br>代码重构的步骤和原因，如果理解重构到模式？</p>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><p>MySQL InnoDB存储的文件结构<br>索引树是如何维护的？<br>数据库自增主键可能的问题<br>MySQL的几种优化<br>mysql索引为什么使用B+树<br>数据库锁表的相关处理<br>索引失效场景<br>高并发下如何做到安全的修改同一行数据，乐观锁和悲观锁是什么，INNODB的行级锁有哪2种，解释其含义<br>数据库会死锁吗，举一个死锁的例子，mysql怎么解决死锁</p>\n<h2 id=\"Redis-amp-缓存相关\"><a href=\"#Redis-amp-缓存相关\" class=\"headerlink\" title=\"Redis&amp;缓存相关\"></a>Redis&amp;缓存相关</h2><p>Redis的并发竞争问题如何解决了解Redis事务的CAS操作吗<br>缓存机器增删如何对系统影响最小，一致性哈希的实现<br>Redis持久化的几种方式，优缺点是什么，怎么实现的<br>Redis的缓存失效策略<br>缓存穿透的解决办法<br>redis集群，高可用，原理<br>mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据<br>用Redis和任意语言实现一段恶意登录保护的代码，限制1小时内每用户Id最多只能登录5次<br>redis的数据淘汰策略</p>\n<h2 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h2><p>http1.0和http1.1有什么区别<br>TCP/IP协议<br>TCP三次握手和四次挥手的流程，为什么断开连接要4次,如果握手只有两次，会出现什么<br>TIME_WAIT和CLOSE_WAIT的区别<br>说说你知道的几种HTTP响应码<br>当你用浏览器打开一个链接的时候，计算机做了哪些工作步骤<br>TCP/IP如何保证可靠性，数据包有哪些数据组成<br>长连接与短连接<br>Http请求get和post的区别以及数据包格式<br>简述tcp建立连接3次握手，和断开连接4次握手的过程；关闭连接时，出现TIMEWAIT过多是由什么原因引起，是出现在主动断开方还是被动断开方。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>maven解决依赖冲突,快照版和发行版的区别<br>Linux下IO模型有几种，各自的含义是什么<br>实际场景问题，海量登录日志如何排序和处理SQL操作，主要是索引和聚合函数的应用<br>实际场景问题解决，典型的TOP K问题<br>线上bug处理流程<br>如何从线上日志发现问题<br>linux利用哪些命令，查找哪里出了问题（例如io密集任务，cpu过度）<br>场景问题，有一个第三方接口，有很多个线程去调用获取数据，现在规定每秒钟最多有10个线程同时调用它，如何做到。<br>用三个线程按顺序循环打印abc三个字母，比如abcabcabc。<br>常见的缓存策略有哪些，你们项目中用到了什么缓存系统，如何设计的<br>设计一个秒杀系统，30分钟没付款就自动关闭交易（并发会很高）<br>请列出你所了解的性能测试工具<br>后台系统怎么防止请求重复提交？<br>有多个相同的接口，我想客户端同时请求，然后只需要在第一个请求返回结果的时候返回给客户端</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"java基础\"><a href=\"#java基础\" class=\"headerlink\" title=\"java基础\"></a>java基础</h2><p>Arrays.sort实现原理和Collection实现原理<br>foreach和while的区别(编译之后)<br>线程池的种类，区别和使用场景<br>分析线程池的实现原理和线程的调度过程<br>线程池如何调优<br>线程池的最大线程数目根据什么确定<br>动态代理的几种方式<br>HashMap的并发问题<br>了解LinkedHashMap的应用吗<br>反射的原理，反射创建类实例的三种方式是什么？<br>cloneable接口实现原理，浅拷贝or深拷贝<br>Java NIO使用<br>hashtable和hashmap的区别及实现原理，hashmap会问到数组索引，hash碰撞怎么解决<br>arraylist和linkedlist区别及实现原理<br>反射中，Class.forName和ClassLoader区别<br>String，Stringbuffer，StringBuilder的区别？<br>有没有可能2个不相等的对象有相同的hashcode<br>简述NIO的最佳实践，比如netty，mina<br>TreeMap的实现原理</p>\n<h3 id=\"JVM相关\"><a href=\"#JVM相关\" class=\"headerlink\" title=\"JVM相关\"></a>JVM相关</h3><p>类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，他们的执行顺序<br>JVM内存分代<br>Java 8的内存分代改进<br>JVM垃圾回收机制，何时触发MinorGC等操作<br>jvm中一次完整的GC流程（从ygc到fgc）是怎样的，重点讲讲对象如何晋升到老年代，几种主要的jvm参数等<br>你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms，g1<br>新生代和老生代的内存回收策略<br>Eden和Survivor的比例分配等<br>深入分析了Classloader，双亲委派机制<br>JVM的编译优化<br>对Java内存模型的理解，以及其在并发中的应用<br>指令重排序，内存栅栏等<br>OOM错误，stackoverflow错误，permgen space错误<br>JVM常用参数<br>tomcat结构，类加载器流程<br>volatile的语义，它修饰的变量一定线程安全吗<br>g1和cms区别,吞吐量优先和响应优先的垃圾收集器选择<br>说一说你对环境变量classpath的理解？如果一个类不在classpath下，为什么会抛出ClassNotFoundException异常，如果在不改变这个类路径的前期下，怎样才能正确加载这个类？<br>说一下强引用、软引用、弱引用、虚引用以及他们之间和gc的关系</p>\n<h3 id=\"JUC-并发相关\"><a href=\"#JUC-并发相关\" class=\"headerlink\" title=\"JUC/并发相关\"></a>JUC/并发相关</h3><p>ThreadLocal用过么，原理是什么，用的时候要注意什么<br>Synchronized和Lock的区别<br>synchronized 的原理，什么是自旋锁，偏向锁，轻量级锁，什么叫可重入锁，什么叫公平锁和非公平锁<br>concurrenthashmap具体实现及其原理，jdk8下的改版<br>用过哪些原子类，他们的参数以及原理是什么<br>cas是什么，他会产生什么问题（ABA问题的解决，如加入修改次数、版本号）<br>如果让你实现一个并发安全的链表，你会怎么做<br>简述ConcurrentLinkedQueue和LinkedBlockingQueue的用处和不同之处<br>简述AQS的实现原理<br>countdowlatch和cyclicbarrier的用法，以及相互之间的差别?<br>concurrent包中使用过哪些类？分别说说使用在什么场景？为什么要使用？<br>LockSupport工具<br>Condition接口及其实现原理<br>Fork/Join框架的理解<br>jdk8的parallelStream的理解<br>分段锁的原理,锁力度减小的思考</p>\n<h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><p>Spring AOP与IOC的实现原理<br>Spring的beanFactory和factoryBean的区别<br>为什么CGlib方式可以对接口实现代理？<br>RMI与代理模式<br>Spring的事务隔离级别，实现原理<br>对Spring的理解，非单例注入的原理？它的生命周期？循环注入的原理，aop的实现原理，说说aop中的几个术语，它们是怎么相互工作的？<br>Mybatis的底层实现原理<br>MVC框架原理，他们都是怎么做url路由的<br>spring boot特性，优势，适用场景等<br>quartz和timer对比<br>spring的controller是单例还是多例，怎么保证并发的安全</p>\n<h2 id=\"分布式相关\"><a href=\"#分布式相关\" class=\"headerlink\" title=\"分布式相关\"></a>分布式相关</h2><p>Dubbo的底层实现原理和机制<br>描述一个服务从发布到被消费的详细过程<br>分布式系统怎么做服务治理<br>接口的幂等性的概念<br>消息中间件如何解决消息丢失问题<br>Dubbo的服务请求失败怎么处理<br>重连机制会不会造成错误<br>对分布式事务的理解<br>如何实现负载均衡，有哪些算法可以实现？<br>Zookeeper的用途，选举的原理是什么？<br>数据的垂直拆分水平拆分。<br>zookeeper原理和适用场景<br>zookeeper watch机制<br>redis/zk节点宕机如何处理<br>分布式集群下如何做到唯一序列号<br>如何做一个分布式锁<br>用过哪些MQ，怎么用的，和其他mq比较有什么优缺点，MQ的连接是线程安全的吗<br>MQ系统的数据如何保证不丢失<br>列举出你能想到的数据库分库分表策略；分库分表后，如何解决全表查询的问题。</p>\n<h2 id=\"算法-amp-数据结构-amp-设计模式\"><a href=\"#算法-amp-数据结构-amp-设计模式\" class=\"headerlink\" title=\"算法&amp;数据结构&amp;设计模式\"></a>算法&amp;数据结构&amp;设计模式</h2><p>海量url去重类问题（布隆过滤器）<br>数组和链表数据结构描述，各自的时间复杂度<br>二叉树遍历<br>快速排序<br>BTree相关的操作<br>在工作中遇到过哪些设计模式，是如何应用的<br>hash算法的有哪几种，优缺点，使用场景<br>什么是一致性hash<br>paxos算法<br>在装饰器模式和代理模式之间，你如何抉择，请结合自身实际情况聊聊<br>代码重构的步骤和原因，如果理解重构到模式？</p>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><p>MySQL InnoDB存储的文件结构<br>索引树是如何维护的？<br>数据库自增主键可能的问题<br>MySQL的几种优化<br>mysql索引为什么使用B+树<br>数据库锁表的相关处理<br>索引失效场景<br>高并发下如何做到安全的修改同一行数据，乐观锁和悲观锁是什么，INNODB的行级锁有哪2种，解释其含义<br>数据库会死锁吗，举一个死锁的例子，mysql怎么解决死锁</p>\n<h2 id=\"Redis-amp-缓存相关\"><a href=\"#Redis-amp-缓存相关\" class=\"headerlink\" title=\"Redis&amp;缓存相关\"></a>Redis&amp;缓存相关</h2><p>Redis的并发竞争问题如何解决了解Redis事务的CAS操作吗<br>缓存机器增删如何对系统影响最小，一致性哈希的实现<br>Redis持久化的几种方式，优缺点是什么，怎么实现的<br>Redis的缓存失效策略<br>缓存穿透的解决办法<br>redis集群，高可用，原理<br>mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据<br>用Redis和任意语言实现一段恶意登录保护的代码，限制1小时内每用户Id最多只能登录5次<br>redis的数据淘汰策略</p>\n<h2 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h2><p>http1.0和http1.1有什么区别<br>TCP/IP协议<br>TCP三次握手和四次挥手的流程，为什么断开连接要4次,如果握手只有两次，会出现什么<br>TIME_WAIT和CLOSE_WAIT的区别<br>说说你知道的几种HTTP响应码<br>当你用浏览器打开一个链接的时候，计算机做了哪些工作步骤<br>TCP/IP如何保证可靠性，数据包有哪些数据组成<br>长连接与短连接<br>Http请求get和post的区别以及数据包格式<br>简述tcp建立连接3次握手，和断开连接4次握手的过程；关闭连接时，出现TIMEWAIT过多是由什么原因引起，是出现在主动断开方还是被动断开方。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>maven解决依赖冲突,快照版和发行版的区别<br>Linux下IO模型有几种，各自的含义是什么<br>实际场景问题，海量登录日志如何排序和处理SQL操作，主要是索引和聚合函数的应用<br>实际场景问题解决，典型的TOP K问题<br>线上bug处理流程<br>如何从线上日志发现问题<br>linux利用哪些命令，查找哪里出了问题（例如io密集任务，cpu过度）<br>场景问题，有一个第三方接口，有很多个线程去调用获取数据，现在规定每秒钟最多有10个线程同时调用它，如何做到。<br>用三个线程按顺序循环打印abc三个字母，比如abcabcabc。<br>常见的缓存策略有哪些，你们项目中用到了什么缓存系统，如何设计的<br>设计一个秒杀系统，30分钟没付款就自动关闭交易（并发会很高）<br>请列出你所了解的性能测试工具<br>后台系统怎么防止请求重复提交？<br>有多个相同的接口，我想客户端同时请求，然后只需要在第一个请求返回结果的时候返回给客户端</p>\n","length":3193},{"abbrlink":"cf099fb5","_content":"## 项目介绍\n\n这个项目是当时做了技能评估平台，说到一些实操的考试场景比如心肺复苏，可以用视频的方式来考核，但是后面医院那边又搁置了，所以我当时做了一些视频管理相关的实践，后来自己想着不能浪费了就结合了SpringCloud和Vue将它做成一个视频课程系统，在后台管理部分可以管理课程、讲师、文件、权限等，在视频平台提供了登陆注册、单点登录、视频点播等功能。\n\n\n\n### 垂直分表的应用\n\n课程内容的大文本字段，切分为新表，提高效率\n\n在大字段/频繁更新的字段，可以应用垂直分表\n\n## 文件分片上传\n\n分片文件key标识属于哪个文件，key通过md5文件信息得到\n\n通过转成10进制，再改成62进制得到更短的key\n\n通过key也可以判断文件是否已经被上传实现极速上传，并通过已传输的分片实现断点续传\n\n选择文件->校验文件->生成唯一标识->组装文件数据->调用文件上传校验接口查询文件记录->1.不存在，开始上传，递归直到所有分片上传完成 2. 存在，上传下一分片直到所有分片上传完成 3.存在，所有分片上传完成，显示极速上传成功 -> 1，2之后，合并分片，删除分片\n\n### 为什么要使用base64编码传输文件？\n\n计算机存储和操作时都是二进制序列，由于不同的设备对于字符的处理不同，有些二进制值在具体设备上代表不同的含义，因此传输二进制文本可能会导致某些不可见字符被错误传输，因此才有base64编码，因为经过BASE64编码后的字符串，全部都是由标准键盘上面的常规字符组成，这样编码后的字符串在传输过程中不会发生UNICODE字符串不能识别或者丢失的现象。在编码之后也可以用字符串形式对文件进行存储。\n\n#### base64编码原理\n\n将原字符对应的ASCII码值组成的二进制序列，每六位为转为64个字符中的一个。（2^6=64）\n\n### 数据库的存储\n\n表中使用字段shardIndex标识当前已上传到第几分片，当shardIndex为分配总数shardTotal时，进行合并分片操作。具体通过读取所有临时分片文件，写出到一个文件中。\n\n\n\n## 登录注册\n\n### 登录\n\n1. 生成验证码token，存放验证码字符串以及token到缓存，返回验证码图片\n2. 输入用户名、密码、验证码\n3. 前端密码加密。调用登录\n4. 后端加密密码\n5. 获取验证码判断是否正确\n6. 正确验证码后，清除redis数据\n7. 查询用户是否存在\n8. 用户存在则比较密码是否正确\n9. 密码正确得到用户信息，生成token，存放到缓存（单点登录）\n10. 返回用户信息，不返回密码\n11. 保存用户信息到前端session\n12. 记住我？是保存到localsession，否则清空local缓存\n\n### 注册\n\n发送短信验证码，60s不重发功能\n\n## 权限管理\n\n用户->角色，角色->资源\n\n表设计：用户表、角色表、资源表、用户-角色表、角色-资源表\n\n读取权限：登陆时加载所有权限\n\n拦截：根绝资源所需的权限 判断当前是否拥有权限\n\n1. 前端：菜单、路由、按钮、\n2. 后端：接口、gateway过滤\n\n权限初始化：以json形式记录所有资源\n\n## 代码生成器\n\n\n\n### 打包\n\n将打包插件放到需要运行的模块，父模块不需要\n\n","source":"_drafts/imooc在线课程实战.md","raw":"---\nabbrlink: cf099fb5\n---\n## 项目介绍\n\n这个项目是当时做了技能评估平台，说到一些实操的考试场景比如心肺复苏，可以用视频的方式来考核，但是后面医院那边又搁置了，所以我当时做了一些视频管理相关的实践，后来自己想着不能浪费了就结合了SpringCloud和Vue将它做成一个视频课程系统，在后台管理部分可以管理课程、讲师、文件、权限等，在视频平台提供了登陆注册、单点登录、视频点播等功能。\n\n\n\n### 垂直分表的应用\n\n课程内容的大文本字段，切分为新表，提高效率\n\n在大字段/频繁更新的字段，可以应用垂直分表\n\n## 文件分片上传\n\n分片文件key标识属于哪个文件，key通过md5文件信息得到\n\n通过转成10进制，再改成62进制得到更短的key\n\n通过key也可以判断文件是否已经被上传实现极速上传，并通过已传输的分片实现断点续传\n\n选择文件->校验文件->生成唯一标识->组装文件数据->调用文件上传校验接口查询文件记录->1.不存在，开始上传，递归直到所有分片上传完成 2. 存在，上传下一分片直到所有分片上传完成 3.存在，所有分片上传完成，显示极速上传成功 -> 1，2之后，合并分片，删除分片\n\n### 为什么要使用base64编码传输文件？\n\n计算机存储和操作时都是二进制序列，由于不同的设备对于字符的处理不同，有些二进制值在具体设备上代表不同的含义，因此传输二进制文本可能会导致某些不可见字符被错误传输，因此才有base64编码，因为经过BASE64编码后的字符串，全部都是由标准键盘上面的常规字符组成，这样编码后的字符串在传输过程中不会发生UNICODE字符串不能识别或者丢失的现象。在编码之后也可以用字符串形式对文件进行存储。\n\n#### base64编码原理\n\n将原字符对应的ASCII码值组成的二进制序列，每六位为转为64个字符中的一个。（2^6=64）\n\n### 数据库的存储\n\n表中使用字段shardIndex标识当前已上传到第几分片，当shardIndex为分配总数shardTotal时，进行合并分片操作。具体通过读取所有临时分片文件，写出到一个文件中。\n\n\n\n## 登录注册\n\n### 登录\n\n1. 生成验证码token，存放验证码字符串以及token到缓存，返回验证码图片\n2. 输入用户名、密码、验证码\n3. 前端密码加密。调用登录\n4. 后端加密密码\n5. 获取验证码判断是否正确\n6. 正确验证码后，清除redis数据\n7. 查询用户是否存在\n8. 用户存在则比较密码是否正确\n9. 密码正确得到用户信息，生成token，存放到缓存（单点登录）\n10. 返回用户信息，不返回密码\n11. 保存用户信息到前端session\n12. 记住我？是保存到localsession，否则清空local缓存\n\n### 注册\n\n发送短信验证码，60s不重发功能\n\n## 权限管理\n\n用户->角色，角色->资源\n\n表设计：用户表、角色表、资源表、用户-角色表、角色-资源表\n\n读取权限：登陆时加载所有权限\n\n拦截：根绝资源所需的权限 判断当前是否拥有权限\n\n1. 前端：菜单、路由、按钮、\n2. 后端：接口、gateway过滤\n\n权限初始化：以json形式记录所有资源\n\n## 代码生成器\n\n\n\n### 打包\n\n将打包插件放到需要运行的模块，父模块不需要\n\n","slug":"imooc在线课程实战","published":0,"date":"2020-07-05T06:50:00.151Z","updated":"2020-08-05T06:54:23.339Z","title":"imooc在线课程实战","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1h0009z4ej4r9v8c3x","content":"<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2><p>这个项目是当时做了技能评估平台，说到一些实操的考试场景比如心肺复苏，可以用视频的方式来考核，但是后面医院那边又搁置了，所以我当时做了一些视频管理相关的实践，后来自己想着不能浪费了就结合了SpringCloud和Vue将它做成一个视频课程系统，在后台管理部分可以管理课程、讲师、文件、权限等，在视频平台提供了登陆注册、单点登录、视频点播等功能。</p>\n<h3 id=\"垂直分表的应用\"><a href=\"#垂直分表的应用\" class=\"headerlink\" title=\"垂直分表的应用\"></a>垂直分表的应用</h3><p>课程内容的大文本字段，切分为新表，提高效率</p>\n<p>在大字段/频繁更新的字段，可以应用垂直分表</p>\n<h2 id=\"文件分片上传\"><a href=\"#文件分片上传\" class=\"headerlink\" title=\"文件分片上传\"></a>文件分片上传</h2><p>分片文件key标识属于哪个文件，key通过md5文件信息得到</p>\n<p>通过转成10进制，再改成62进制得到更短的key</p>\n<p>通过key也可以判断文件是否已经被上传实现极速上传，并通过已传输的分片实现断点续传</p>\n<p>选择文件-&gt;校验文件-&gt;生成唯一标识-&gt;组装文件数据-&gt;调用文件上传校验接口查询文件记录-&gt;1.不存在，开始上传，递归直到所有分片上传完成 2. 存在，上传下一分片直到所有分片上传完成 3.存在，所有分片上传完成，显示极速上传成功 -&gt; 1，2之后，合并分片，删除分片</p>\n<h3 id=\"为什么要使用base64编码传输文件？\"><a href=\"#为什么要使用base64编码传输文件？\" class=\"headerlink\" title=\"为什么要使用base64编码传输文件？\"></a>为什么要使用base64编码传输文件？</h3><p>计算机存储和操作时都是二进制序列，由于不同的设备对于字符的处理不同，有些二进制值在具体设备上代表不同的含义，因此传输二进制文本可能会导致某些不可见字符被错误传输，因此才有base64编码，因为经过BASE64编码后的字符串，全部都是由标准键盘上面的常规字符组成，这样编码后的字符串在传输过程中不会发生UNICODE字符串不能识别或者丢失的现象。在编码之后也可以用字符串形式对文件进行存储。</p>\n<h4 id=\"base64编码原理\"><a href=\"#base64编码原理\" class=\"headerlink\" title=\"base64编码原理\"></a>base64编码原理</h4><p>将原字符对应的ASCII码值组成的二进制序列，每六位为转为64个字符中的一个。（2^6=64）</p>\n<h3 id=\"数据库的存储\"><a href=\"#数据库的存储\" class=\"headerlink\" title=\"数据库的存储\"></a>数据库的存储</h3><p>表中使用字段shardIndex标识当前已上传到第几分片，当shardIndex为分配总数shardTotal时，进行合并分片操作。具体通过读取所有临时分片文件，写出到一个文件中。</p>\n<h2 id=\"登录注册\"><a href=\"#登录注册\" class=\"headerlink\" title=\"登录注册\"></a>登录注册</h2><h3 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h3><ol>\n<li>生成验证码token，存放验证码字符串以及token到缓存，返回验证码图片</li>\n<li>输入用户名、密码、验证码</li>\n<li>前端密码加密。调用登录</li>\n<li>后端加密密码</li>\n<li>获取验证码判断是否正确</li>\n<li>正确验证码后，清除redis数据</li>\n<li>查询用户是否存在</li>\n<li>用户存在则比较密码是否正确</li>\n<li>密码正确得到用户信息，生成token，存放到缓存（单点登录）</li>\n<li>返回用户信息，不返回密码</li>\n<li>保存用户信息到前端session</li>\n<li>记住我？是保存到localsession，否则清空local缓存</li>\n</ol>\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>发送短信验证码，60s不重发功能</p>\n<h2 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h2><p>用户-&gt;角色，角色-&gt;资源</p>\n<p>表设计：用户表、角色表、资源表、用户-角色表、角色-资源表</p>\n<p>读取权限：登陆时加载所有权限</p>\n<p>拦截：根绝资源所需的权限 判断当前是否拥有权限</p>\n<ol>\n<li>前端：菜单、路由、按钮、</li>\n<li>后端：接口、gateway过滤</li>\n</ol>\n<p>权限初始化：以json形式记录所有资源</p>\n<h2 id=\"代码生成器\"><a href=\"#代码生成器\" class=\"headerlink\" title=\"代码生成器\"></a>代码生成器</h2><h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><p>将打包插件放到需要运行的模块，父模块不需要</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2><p>这个项目是当时做了技能评估平台，说到一些实操的考试场景比如心肺复苏，可以用视频的方式来考核，但是后面医院那边又搁置了，所以我当时做了一些视频管理相关的实践，后来自己想着不能浪费了就结合了SpringCloud和Vue将它做成一个视频课程系统，在后台管理部分可以管理课程、讲师、文件、权限等，在视频平台提供了登陆注册、单点登录、视频点播等功能。</p>\n<h3 id=\"垂直分表的应用\"><a href=\"#垂直分表的应用\" class=\"headerlink\" title=\"垂直分表的应用\"></a>垂直分表的应用</h3><p>课程内容的大文本字段，切分为新表，提高效率</p>\n<p>在大字段/频繁更新的字段，可以应用垂直分表</p>\n<h2 id=\"文件分片上传\"><a href=\"#文件分片上传\" class=\"headerlink\" title=\"文件分片上传\"></a>文件分片上传</h2><p>分片文件key标识属于哪个文件，key通过md5文件信息得到</p>\n<p>通过转成10进制，再改成62进制得到更短的key</p>\n<p>通过key也可以判断文件是否已经被上传实现极速上传，并通过已传输的分片实现断点续传</p>\n<p>选择文件-&gt;校验文件-&gt;生成唯一标识-&gt;组装文件数据-&gt;调用文件上传校验接口查询文件记录-&gt;1.不存在，开始上传，递归直到所有分片上传完成 2. 存在，上传下一分片直到所有分片上传完成 3.存在，所有分片上传完成，显示极速上传成功 -&gt; 1，2之后，合并分片，删除分片</p>\n<h3 id=\"为什么要使用base64编码传输文件？\"><a href=\"#为什么要使用base64编码传输文件？\" class=\"headerlink\" title=\"为什么要使用base64编码传输文件？\"></a>为什么要使用base64编码传输文件？</h3><p>计算机存储和操作时都是二进制序列，由于不同的设备对于字符的处理不同，有些二进制值在具体设备上代表不同的含义，因此传输二进制文本可能会导致某些不可见字符被错误传输，因此才有base64编码，因为经过BASE64编码后的字符串，全部都是由标准键盘上面的常规字符组成，这样编码后的字符串在传输过程中不会发生UNICODE字符串不能识别或者丢失的现象。在编码之后也可以用字符串形式对文件进行存储。</p>\n<h4 id=\"base64编码原理\"><a href=\"#base64编码原理\" class=\"headerlink\" title=\"base64编码原理\"></a>base64编码原理</h4><p>将原字符对应的ASCII码值组成的二进制序列，每六位为转为64个字符中的一个。（2^6=64）</p>\n<h3 id=\"数据库的存储\"><a href=\"#数据库的存储\" class=\"headerlink\" title=\"数据库的存储\"></a>数据库的存储</h3><p>表中使用字段shardIndex标识当前已上传到第几分片，当shardIndex为分配总数shardTotal时，进行合并分片操作。具体通过读取所有临时分片文件，写出到一个文件中。</p>\n<h2 id=\"登录注册\"><a href=\"#登录注册\" class=\"headerlink\" title=\"登录注册\"></a>登录注册</h2><h3 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h3><ol>\n<li>生成验证码token，存放验证码字符串以及token到缓存，返回验证码图片</li>\n<li>输入用户名、密码、验证码</li>\n<li>前端密码加密。调用登录</li>\n<li>后端加密密码</li>\n<li>获取验证码判断是否正确</li>\n<li>正确验证码后，清除redis数据</li>\n<li>查询用户是否存在</li>\n<li>用户存在则比较密码是否正确</li>\n<li>密码正确得到用户信息，生成token，存放到缓存（单点登录）</li>\n<li>返回用户信息，不返回密码</li>\n<li>保存用户信息到前端session</li>\n<li>记住我？是保存到localsession，否则清空local缓存</li>\n</ol>\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>发送短信验证码，60s不重发功能</p>\n<h2 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h2><p>用户-&gt;角色，角色-&gt;资源</p>\n<p>表设计：用户表、角色表、资源表、用户-角色表、角色-资源表</p>\n<p>读取权限：登陆时加载所有权限</p>\n<p>拦截：根绝资源所需的权限 判断当前是否拥有权限</p>\n<ol>\n<li>前端：菜单、路由、按钮、</li>\n<li>后端：接口、gateway过滤</li>\n</ol>\n<p>权限初始化：以json形式记录所有资源</p>\n<h2 id=\"代码生成器\"><a href=\"#代码生成器\" class=\"headerlink\" title=\"代码生成器\"></a>代码生成器</h2><h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><p>将打包插件放到需要运行的模块，父模块不需要</p>\n","length":1228},{"title":"tips","abbrlink":"642c4108","_content":"\n#### Leetcode题解tips\n\n🔗 [点击这里获得更加舒适的体验！](https://www.realmicah.xyz/posts/.html)\n\n💡 思路\n\n🧾 代码\n\n📈 优化\n\n👊 暴力解法\n\n✍️\n","source":"_drafts/tips.md","raw":"---\ntitle: tips\nabbrlink: 642c4108\ntags:\n---\n\n#### Leetcode题解tips\n\n🔗 [点击这里获得更加舒适的体验！](https://www.realmicah.xyz/posts/.html)\n\n💡 思路\n\n🧾 代码\n\n📈 优化\n\n👊 暴力解法\n\n✍️\n","slug":"tips","published":0,"date":"2020-05-01T03:59:14.736Z","updated":"2020-05-26T14:53:19.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1i000az4ejdbvz3c7j","content":"<h4 id=\"Leetcode题解tips\"><a href=\"#Leetcode题解tips\" class=\"headerlink\" title=\"Leetcode题解tips\"></a>Leetcode题解tips</h4><p>🔗 <a href=\"https://www.realmicah.xyz/posts/.html\">点击这里获得更加舒适的体验！</a></p>\n<p>💡 思路</p>\n<p>🧾 代码</p>\n<p>📈 优化</p>\n<p>👊 暴力解法</p>\n<p>✍️</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Leetcode题解tips\"><a href=\"#Leetcode题解tips\" class=\"headerlink\" title=\"Leetcode题解tips\"></a>Leetcode题解tips</h4><p>🔗 <a href=\"https://www.realmicah.xyz/posts/.html\">点击这里获得更加舒适的体验！</a></p>\n<p>💡 思路</p>\n<p>🧾 代码</p>\n<p>📈 优化</p>\n<p>👊 暴力解法</p>\n<p>✍️</p>\n","length":50},{"abbrlink":"63f01be3","_content":"1. 两数之和\n\n  使用map存放元素和下标，遍历过程中，查看是否map中是否存在key：target-nums[i]，有则找到了两数和为target，返回其下标和当前下标\n\n2. 两数相加\n\n  处理进位。\n\n3. 无重复字符的最长子串\n\n  利用set和滑动窗口，右侧从0向右移动过程中，如果当前字符以存在set中，则表示遇到了重复，记录此时right-left，并将元素移除，left++；否则继续right++\n\n4. 最长回文子串\n\n  动态规划，如果S[i+1...j-1]是回文串，则当S[i]=S[j]时，S[i...j]也为回文串。因此状态转移方程为dp[i] [j] = dp[i+1] [j-1] && S[i]==S[j]，如果S[i...j]也为回文串，并且长度大于之前的回文串，则更新长度\n\n5. 整数反转\n\n  通过不断对10取模获取到数字的最后一位，然后/10继续下一位，获取到最后一位时，在拼接成新数字时，判断是否溢出。因为我们通过ans*10 + pop的方式得到拼接后的数字，则根据ans *10 + pop > Integer.MAX_VALUE，和 ans *10 + pop < Integer.MIN_VALUE可以得到溢出的条件，在拼接之前做出判断。` ans > Integer.MAX_VALUE / 10 || (ans == Integer.MAX_VALUE / 10 && pop > 7)`，7是整型最大值的个位数。\n\n6. 回文数\n\n  同样使用第5题的方法，逆序构造的数字如果不等于原值则返回false。由于不需要判断溢出，因此采用long来记录构造的数字\n\n7. 盛最多水的容器\n\n  双指针，从左右边界向中间移动，每次移动较小的一个，记录最大值作为结果。正确性来自面积S=min(height[left], height[right]) * (right-left)，由于总是取较小的高，而在移动过程中right-left会一直变小，因此移动较高的一侧不可能产生更大的面积\n\n8. 最长公共前缀\n\n  暴力：以一个字符串为模板，对其每一个字符，遍历其他所有字符串，当全部相等时则添加到结果字符串中，出现不等则结束返回结果字符串\n\n  字典树：\n\n9. 三数之和\n\n  普通：外层for循环，内层使用两数之和做法，去重难搞\n\n  排序双指针：排序后，外层循环可去重，在内层循环，通过左右双指针，由于排序过，因此可通过三数之和与0的大小关系，确定左/右指针移动\n\n10. 最接近的三数之和\n\n  与上一题相同做法，在记录结果时需要通过绝对值比较，更新结果。\n\n\n11. 电话号码的字母组合\n\n    回溯：从第一个数字开始，遍历数字对应的字母，将当前字母添加到生成的字符串后面，再输入下一个数字，当没有数字要被输入时，则一个字母组合产生。\n\n12. 四数之和\n\n    思想同10，共三层循环。先对数组排序，可以根据和的大小情况，让最内层循环的左右指针移动，并且可以提前break和continue。\n\n13. 删除链表的倒数第N个节点\n\n    普通：先遍历得到个数，再进行删除，共扫描两趟\n\n    双指针：q先走n步，然后p、q同时向后走，直到q为空，此时p则在倒数第n个位置。\n\n14. 有效的括号\n\n    栈：遇到左括号入栈，遇到匹配的右括号出栈，最终返回栈是否为空\n\n15. 合并两个有序链表\n\n    归并排序子过程：比较当前两节点，小的则成为结果链表的下一个节点，然后所在链表跳到下一个节点，直到一方为空，接下来将另一方的剩余节点添加到结果链表\n\n16. 括号生成\n\n    回溯：总长度2*n，每个位置有两种选择，左括号必须在前，因此当左括号数量小于右时，则不满足要求，否则的话继续添加左右括号，并进行下一步搜索。\n\n17. 两两交换链表中的节点\n\n    迭代：拿到连续的三个节点，将前两个节点node1、node2完成交换，并将第三个节点连接在node1（后）上，然后虚拟头节点连上node2（前），当前p前进到node1\n\n    递归：终止条件为当前为空或当前没有下一节点；返回值为完成交换的子链表；单个f(x)完成两个节点的交换，head和next，head连接完成了交换的子链表，next连接head。\n\n18. 删除排序数组中的重复项\n\n    双指针：遍历时慢指针和快指针值相等则让快指针前进以跳过重复项，不等时将这个不等的值放到慢指针的位置，然后让慢指针前进，准备存放下一个不重复的值\n\n19. 下一个排列\n\n    逆向遍历，如果当前比前一个大，从当前开始向后找到一个比前一个大的**最小数**，调换顺序，然后对当前到数组结束位置的部分排序为升序。最差遍历两次数组，复杂度O（n）\n\n20. 搜索旋转排序数组\n\n    时间复杂度O（logN），考虑二分。数组被分为两个有序的部分，因此在找到**分界点**（最大值/最小值）后，问题转变为在有序数组中的查找问题，采用二分查找。\n\n21. 在排序数组中查找元素的第一个和最后一个位置\n\n    与上一题异曲同工，区别在于\n\n22. 搜索插入位置\n\n23. 外观数列\n\n24. 组合总和\n\n25. 组合总和 II\n\n26. 全排列\n\n27. 旋转图像\n\n28. 字母异位词分组\n\n29. Pow(x,n)\n\n30. 最大子序和\n\n31. 螺旋矩阵\n\n32. 跳跃游戏\n\n33. 合并区间\n\n34. 旋转链表\n\n35. 不同路径\n\n36. 最小路径和\n\n37. 加一\n\n38. x的平方根\n\n39. 爬楼梯\n\n40. 颜色分类\n\n41. 子集\n\n42. 单词搜索\n\n43. 删除排序链表中的重复元素\n\n44. 分隔链表\n\n45. 合并两个有序数组\n\n46. 子集 II\n\n47. 解码方法\n\n48. 反转链表 II\n\n49. 二叉树的中序遍历\n\n50. 不同的二叉搜索树 II\n\n51. 不同的二叉搜索树\n\n52. 验证二叉搜索树\n\n53. 对称二叉树\n\n54. 二叉树的层序遍历\n\n55. 二叉树的锯齿形层次遍历\n\n56. 二叉树的最大深度\n\n57. 从前序与中序遍历序列构造二叉树\n\n58. 将有序数组转换为二叉搜索树\n\n59. 有序链表转换二叉搜索树\n\n60. 路径总和 II\n\n61. 二叉树展开为链表\n\n62. 杨辉三角\n\n63. 买卖股票的最佳时机\n\n64. 买卖股票的最佳时机 II\n\n65. 验证回文串\n\n66. 只出现一次的数字\n\n67. 只出现一次的数字 II\n\n68. 单词拆分\n\n69. 环形链表\n\n70. 环形链表 II\n\n71. 重排链表\n\n72. 二叉树的前序遍历\n    73 .LRU缓存机制\n\n73. 排序链表\n\n74. 逆波兰表达式求值\n\n75. 乘积最大子数组\n\n76. 最小栈\n\n77. 相交链表\n\n78. 寻找峰值\n\n79. 多数元素\n\n80. Excel表列序号\n\n81. 阶乘后的零\n\n82. 最大数\n\n83. 重复的DNA序列\n\n84. 旋转数组\n\n85. 打家劫舍\n\n86. 二叉树的右视图\n\n87. 岛屿数量\n\n88. 快乐数\n\n89. 移除链表元素\n\n90. 反转链表\n\n91. 数组中的第K个最大元素\n\n92. 存在重复元素\n\n93. 最大正方形\n\n94. 用队列实现栈\n\n95. 翻转二叉树\n\n96. 基本计算器 II\n\n97. 二叉搜索树中第K小的元素\n\n98. 用栈实现队列\n\n99. 回文链表\n\n100. 二叉搜索树的最近公共祖先\n\n101. 二叉树的最近公共祖先\n\n102. 删除链表中的节点\n\n103. 除自身以外数组的乘积\n\n104. 搜索二维矩阵 II\n\n105. 有效的字母异位词\n\n106. 各位相加\n\n107. 缺失数字\n\n108. 完全平方数\n\n109. 移动零\n\n110. 寻找重复数\n\n111. Nim 游戏\n\n112. 最长上升子序列\n\n113. 超级丑数\n\n114. 零钱兑换\n\n115. 3 的幂\n\n116. 奇偶链表\n\n117. 递增的三元子序列\n\n118. 打家劫舍 III\n\n119. 比特位计数\n\n120. 反转字符串\n\n121. 前K 个高频元素\n\n122. 两个数组的交集\n\n123. 两整数之和\n\n124. 有序矩阵中第K小的元素\n\n125. 字符串解码\n\n126. 移掉K位数字\n\n127. 根据身高重建队列\n\n128. 最长回文串\n\n129. FizzBuzz\n\n130. 字符串相加\n\n131. 分割等和子集\n\n132. 找到所有数组中消失的数字\n\n133. 四数相加 II\n\n134. 分发饼干\n\n135. 汉明距离\n\n136. 数字的补数\n\n137. 把二叉搜索树转换为累加树\n\n138. 二叉树的直径\n\n139. 和为K的子数组\n\n140. 分糖果\n\n141. 最短无序连续子数组\n\n142. 合并二叉树\n\n143. 回文子串\n\n144. 最大二叉树\n\n145. 1 比特与 2 比特字符\n\n146. 最长重复子数组\n\n147. 自除数\n\n148. 每日温度\n\n149. 划分字母区间\n\n150. 重构字符串\n\n151. 宝石与石头\n\n152. 用两个栈实现队列\n\n153. 斐波那契数列\n\n154. 数组中重复的数字\n\n155. 二维数组中的查找\n\n156. 青蛙跳台阶问题\n\n157. 旋转数组的最小数字\n\n158. 替换空格\n\n159. 从尾到头打印链表\n\n160. 重建二叉树\n\n161. 剪绳子\n\n162. 合并两个排序的链表\n\n163. 树的子结构\n\n164. 二叉树的镜像\n\n165. 对称的二叉树\n\n166. 调整数组顺序使奇数位于偶数前面\n\n167. 二进制中 1 的个数\n\n168. 顺时针打印矩阵\n\n169. 链表中倒数第k个节点\n\n170. 数值的整数次方\n\n171. 反转链表\n\n172. 删除链表的节点\n\n173. 最小的k个数\n\n174. 包含min函数的栈\n\n175. 连续子数组的最大和\n\n176. 二叉搜索树与双向链表\n\n177. 栈的压入、弹出序列\n\n178. 字符串的排列\n\n179. 数组中出现次数超过一半的数字\n\n180. 从上到下打印二叉树\n\n181. 从上到下打印二叉树II\n\n182. 从上到下打印二叉树III\n\n183. 二叉搜索树的后序遍历序列\n\n184. 第一个只出现一次的字符\n\n185. 二叉树中和为某一值的路径\n\n186. 二叉树的深度\n\n187. 数组中数字出现的次数\n\n188. 数组中数字出现的次数 II\n\n189. 和为s的两个数字\n\n190. 把数组排成最小的数\n\n191. 和为s的连续正数序列\n\n192. 两个链表的第一个公共节点\n\n193. 礼物的最大价值\n\n194. 翻转单词顺序\n\n195. 在排序数组中查找数字 I\n\n196. 左旋转字符串\n\n197. 0 ～n- 1 中缺失的数字\n\n198. 最长不含重复字符的子字符串\n\n199. 二叉搜索树的第k大节点\n\n200. 丑数\n\n201. 不用加减乘除做加法\n\n202. 滑动窗口的最大值\n\n203. 构建乘积数组\n\n204. 扑克牌中的顺子\n\n205. 平衡二叉树\n\n206. 股票的最大利润\n\n207. 求 1 + 2 +...+n\n\n208. 二叉搜索树的最近公共祖先\n\n209. 二叉树的最近公共祖先","source":"_drafts/一天200题.md","raw":"---\nabbrlink: 63f01be3\n---\n1. 两数之和\n\n  使用map存放元素和下标，遍历过程中，查看是否map中是否存在key：target-nums[i]，有则找到了两数和为target，返回其下标和当前下标\n\n2. 两数相加\n\n  处理进位。\n\n3. 无重复字符的最长子串\n\n  利用set和滑动窗口，右侧从0向右移动过程中，如果当前字符以存在set中，则表示遇到了重复，记录此时right-left，并将元素移除，left++；否则继续right++\n\n4. 最长回文子串\n\n  动态规划，如果S[i+1...j-1]是回文串，则当S[i]=S[j]时，S[i...j]也为回文串。因此状态转移方程为dp[i] [j] = dp[i+1] [j-1] && S[i]==S[j]，如果S[i...j]也为回文串，并且长度大于之前的回文串，则更新长度\n\n5. 整数反转\n\n  通过不断对10取模获取到数字的最后一位，然后/10继续下一位，获取到最后一位时，在拼接成新数字时，判断是否溢出。因为我们通过ans*10 + pop的方式得到拼接后的数字，则根据ans *10 + pop > Integer.MAX_VALUE，和 ans *10 + pop < Integer.MIN_VALUE可以得到溢出的条件，在拼接之前做出判断。` ans > Integer.MAX_VALUE / 10 || (ans == Integer.MAX_VALUE / 10 && pop > 7)`，7是整型最大值的个位数。\n\n6. 回文数\n\n  同样使用第5题的方法，逆序构造的数字如果不等于原值则返回false。由于不需要判断溢出，因此采用long来记录构造的数字\n\n7. 盛最多水的容器\n\n  双指针，从左右边界向中间移动，每次移动较小的一个，记录最大值作为结果。正确性来自面积S=min(height[left], height[right]) * (right-left)，由于总是取较小的高，而在移动过程中right-left会一直变小，因此移动较高的一侧不可能产生更大的面积\n\n8. 最长公共前缀\n\n  暴力：以一个字符串为模板，对其每一个字符，遍历其他所有字符串，当全部相等时则添加到结果字符串中，出现不等则结束返回结果字符串\n\n  字典树：\n\n9. 三数之和\n\n  普通：外层for循环，内层使用两数之和做法，去重难搞\n\n  排序双指针：排序后，外层循环可去重，在内层循环，通过左右双指针，由于排序过，因此可通过三数之和与0的大小关系，确定左/右指针移动\n\n10. 最接近的三数之和\n\n  与上一题相同做法，在记录结果时需要通过绝对值比较，更新结果。\n\n\n11. 电话号码的字母组合\n\n    回溯：从第一个数字开始，遍历数字对应的字母，将当前字母添加到生成的字符串后面，再输入下一个数字，当没有数字要被输入时，则一个字母组合产生。\n\n12. 四数之和\n\n    思想同10，共三层循环。先对数组排序，可以根据和的大小情况，让最内层循环的左右指针移动，并且可以提前break和continue。\n\n13. 删除链表的倒数第N个节点\n\n    普通：先遍历得到个数，再进行删除，共扫描两趟\n\n    双指针：q先走n步，然后p、q同时向后走，直到q为空，此时p则在倒数第n个位置。\n\n14. 有效的括号\n\n    栈：遇到左括号入栈，遇到匹配的右括号出栈，最终返回栈是否为空\n\n15. 合并两个有序链表\n\n    归并排序子过程：比较当前两节点，小的则成为结果链表的下一个节点，然后所在链表跳到下一个节点，直到一方为空，接下来将另一方的剩余节点添加到结果链表\n\n16. 括号生成\n\n    回溯：总长度2*n，每个位置有两种选择，左括号必须在前，因此当左括号数量小于右时，则不满足要求，否则的话继续添加左右括号，并进行下一步搜索。\n\n17. 两两交换链表中的节点\n\n    迭代：拿到连续的三个节点，将前两个节点node1、node2完成交换，并将第三个节点连接在node1（后）上，然后虚拟头节点连上node2（前），当前p前进到node1\n\n    递归：终止条件为当前为空或当前没有下一节点；返回值为完成交换的子链表；单个f(x)完成两个节点的交换，head和next，head连接完成了交换的子链表，next连接head。\n\n18. 删除排序数组中的重复项\n\n    双指针：遍历时慢指针和快指针值相等则让快指针前进以跳过重复项，不等时将这个不等的值放到慢指针的位置，然后让慢指针前进，准备存放下一个不重复的值\n\n19. 下一个排列\n\n    逆向遍历，如果当前比前一个大，从当前开始向后找到一个比前一个大的**最小数**，调换顺序，然后对当前到数组结束位置的部分排序为升序。最差遍历两次数组，复杂度O（n）\n\n20. 搜索旋转排序数组\n\n    时间复杂度O（logN），考虑二分。数组被分为两个有序的部分，因此在找到**分界点**（最大值/最小值）后，问题转变为在有序数组中的查找问题，采用二分查找。\n\n21. 在排序数组中查找元素的第一个和最后一个位置\n\n    与上一题异曲同工，区别在于\n\n22. 搜索插入位置\n\n23. 外观数列\n\n24. 组合总和\n\n25. 组合总和 II\n\n26. 全排列\n\n27. 旋转图像\n\n28. 字母异位词分组\n\n29. Pow(x,n)\n\n30. 最大子序和\n\n31. 螺旋矩阵\n\n32. 跳跃游戏\n\n33. 合并区间\n\n34. 旋转链表\n\n35. 不同路径\n\n36. 最小路径和\n\n37. 加一\n\n38. x的平方根\n\n39. 爬楼梯\n\n40. 颜色分类\n\n41. 子集\n\n42. 单词搜索\n\n43. 删除排序链表中的重复元素\n\n44. 分隔链表\n\n45. 合并两个有序数组\n\n46. 子集 II\n\n47. 解码方法\n\n48. 反转链表 II\n\n49. 二叉树的中序遍历\n\n50. 不同的二叉搜索树 II\n\n51. 不同的二叉搜索树\n\n52. 验证二叉搜索树\n\n53. 对称二叉树\n\n54. 二叉树的层序遍历\n\n55. 二叉树的锯齿形层次遍历\n\n56. 二叉树的最大深度\n\n57. 从前序与中序遍历序列构造二叉树\n\n58. 将有序数组转换为二叉搜索树\n\n59. 有序链表转换二叉搜索树\n\n60. 路径总和 II\n\n61. 二叉树展开为链表\n\n62. 杨辉三角\n\n63. 买卖股票的最佳时机\n\n64. 买卖股票的最佳时机 II\n\n65. 验证回文串\n\n66. 只出现一次的数字\n\n67. 只出现一次的数字 II\n\n68. 单词拆分\n\n69. 环形链表\n\n70. 环形链表 II\n\n71. 重排链表\n\n72. 二叉树的前序遍历\n    73 .LRU缓存机制\n\n73. 排序链表\n\n74. 逆波兰表达式求值\n\n75. 乘积最大子数组\n\n76. 最小栈\n\n77. 相交链表\n\n78. 寻找峰值\n\n79. 多数元素\n\n80. Excel表列序号\n\n81. 阶乘后的零\n\n82. 最大数\n\n83. 重复的DNA序列\n\n84. 旋转数组\n\n85. 打家劫舍\n\n86. 二叉树的右视图\n\n87. 岛屿数量\n\n88. 快乐数\n\n89. 移除链表元素\n\n90. 反转链表\n\n91. 数组中的第K个最大元素\n\n92. 存在重复元素\n\n93. 最大正方形\n\n94. 用队列实现栈\n\n95. 翻转二叉树\n\n96. 基本计算器 II\n\n97. 二叉搜索树中第K小的元素\n\n98. 用栈实现队列\n\n99. 回文链表\n\n100. 二叉搜索树的最近公共祖先\n\n101. 二叉树的最近公共祖先\n\n102. 删除链表中的节点\n\n103. 除自身以外数组的乘积\n\n104. 搜索二维矩阵 II\n\n105. 有效的字母异位词\n\n106. 各位相加\n\n107. 缺失数字\n\n108. 完全平方数\n\n109. 移动零\n\n110. 寻找重复数\n\n111. Nim 游戏\n\n112. 最长上升子序列\n\n113. 超级丑数\n\n114. 零钱兑换\n\n115. 3 的幂\n\n116. 奇偶链表\n\n117. 递增的三元子序列\n\n118. 打家劫舍 III\n\n119. 比特位计数\n\n120. 反转字符串\n\n121. 前K 个高频元素\n\n122. 两个数组的交集\n\n123. 两整数之和\n\n124. 有序矩阵中第K小的元素\n\n125. 字符串解码\n\n126. 移掉K位数字\n\n127. 根据身高重建队列\n\n128. 最长回文串\n\n129. FizzBuzz\n\n130. 字符串相加\n\n131. 分割等和子集\n\n132. 找到所有数组中消失的数字\n\n133. 四数相加 II\n\n134. 分发饼干\n\n135. 汉明距离\n\n136. 数字的补数\n\n137. 把二叉搜索树转换为累加树\n\n138. 二叉树的直径\n\n139. 和为K的子数组\n\n140. 分糖果\n\n141. 最短无序连续子数组\n\n142. 合并二叉树\n\n143. 回文子串\n\n144. 最大二叉树\n\n145. 1 比特与 2 比特字符\n\n146. 最长重复子数组\n\n147. 自除数\n\n148. 每日温度\n\n149. 划分字母区间\n\n150. 重构字符串\n\n151. 宝石与石头\n\n152. 用两个栈实现队列\n\n153. 斐波那契数列\n\n154. 数组中重复的数字\n\n155. 二维数组中的查找\n\n156. 青蛙跳台阶问题\n\n157. 旋转数组的最小数字\n\n158. 替换空格\n\n159. 从尾到头打印链表\n\n160. 重建二叉树\n\n161. 剪绳子\n\n162. 合并两个排序的链表\n\n163. 树的子结构\n\n164. 二叉树的镜像\n\n165. 对称的二叉树\n\n166. 调整数组顺序使奇数位于偶数前面\n\n167. 二进制中 1 的个数\n\n168. 顺时针打印矩阵\n\n169. 链表中倒数第k个节点\n\n170. 数值的整数次方\n\n171. 反转链表\n\n172. 删除链表的节点\n\n173. 最小的k个数\n\n174. 包含min函数的栈\n\n175. 连续子数组的最大和\n\n176. 二叉搜索树与双向链表\n\n177. 栈的压入、弹出序列\n\n178. 字符串的排列\n\n179. 数组中出现次数超过一半的数字\n\n180. 从上到下打印二叉树\n\n181. 从上到下打印二叉树II\n\n182. 从上到下打印二叉树III\n\n183. 二叉搜索树的后序遍历序列\n\n184. 第一个只出现一次的字符\n\n185. 二叉树中和为某一值的路径\n\n186. 二叉树的深度\n\n187. 数组中数字出现的次数\n\n188. 数组中数字出现的次数 II\n\n189. 和为s的两个数字\n\n190. 把数组排成最小的数\n\n191. 和为s的连续正数序列\n\n192. 两个链表的第一个公共节点\n\n193. 礼物的最大价值\n\n194. 翻转单词顺序\n\n195. 在排序数组中查找数字 I\n\n196. 左旋转字符串\n\n197. 0 ～n- 1 中缺失的数字\n\n198. 最长不含重复字符的子字符串\n\n199. 二叉搜索树的第k大节点\n\n200. 丑数\n\n201. 不用加减乘除做加法\n\n202. 滑动窗口的最大值\n\n203. 构建乘积数组\n\n204. 扑克牌中的顺子\n\n205. 平衡二叉树\n\n206. 股票的最大利润\n\n207. 求 1 + 2 +...+n\n\n208. 二叉搜索树的最近公共祖先\n\n209. 二叉树的最近公共祖先","slug":"一天200题","published":0,"date":"2020-08-01T01:11:47.862Z","updated":"2020-08-03T15:00:49.877Z","title":"一天200题","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1j000dz4ejhtx31pbf","content":"<ol>\n<li><p>两数之和</p>\n<p>使用map存放元素和下标，遍历过程中，查看是否map中是否存在key：target-nums[i]，有则找到了两数和为target，返回其下标和当前下标</p>\n</li>\n<li><p>两数相加</p>\n<p>处理进位。</p>\n</li>\n<li><p>无重复字符的最长子串</p>\n<p>利用set和滑动窗口，右侧从0向右移动过程中，如果当前字符以存在set中，则表示遇到了重复，记录此时right-left，并将元素移除，left++；否则继续right++</p>\n</li>\n<li><p>最长回文子串</p>\n<p>动态规划，如果S[i+1…j-1]是回文串，则当S[i]=S[j]时，S[i…j]也为回文串。因此状态转移方程为dp[i] [j] = dp[i+1] [j-1] &amp;&amp; S[i]==S[j]，如果S[i…j]也为回文串，并且长度大于之前的回文串，则更新长度</p>\n</li>\n<li><p>整数反转</p>\n<p>通过不断对10取模获取到数字的最后一位，然后/10继续下一位，获取到最后一位时，在拼接成新数字时，判断是否溢出。因为我们通过ans*10 + pop的方式得到拼接后的数字，则根据ans *10 + pop &gt; Integer.MAX_VALUE，和 ans *10 + pop &lt; Integer.MIN_VALUE可以得到溢出的条件，在拼接之前做出判断。<code>ans &gt; Integer.MAX_VALUE / 10 || (ans == Integer.MAX_VALUE / 10 &amp;&amp; pop &gt; 7)</code>，7是整型最大值的个位数。</p>\n</li>\n<li><p>回文数</p>\n<p>同样使用第5题的方法，逆序构造的数字如果不等于原值则返回false。由于不需要判断溢出，因此采用long来记录构造的数字</p>\n</li>\n<li><p>盛最多水的容器</p>\n<p>双指针，从左右边界向中间移动，每次移动较小的一个，记录最大值作为结果。正确性来自面积S=min(height[left], height[right]) * (right-left)，由于总是取较小的高，而在移动过程中right-left会一直变小，因此移动较高的一侧不可能产生更大的面积</p>\n</li>\n<li><p>最长公共前缀</p>\n<p>暴力：以一个字符串为模板，对其每一个字符，遍历其他所有字符串，当全部相等时则添加到结果字符串中，出现不等则结束返回结果字符串</p>\n<p>字典树：</p>\n</li>\n<li><p>三数之和</p>\n<p>普通：外层for循环，内层使用两数之和做法，去重难搞</p>\n<p>排序双指针：排序后，外层循环可去重，在内层循环，通过左右双指针，由于排序过，因此可通过三数之和与0的大小关系，确定左/右指针移动</p>\n</li>\n<li><p>最接近的三数之和</p>\n<p>与上一题相同做法，在记录结果时需要通过绝对值比较，更新结果。</p>\n</li>\n</ol>\n<ol start=\"11\">\n<li><p>电话号码的字母组合</p>\n<p>回溯：从第一个数字开始，遍历数字对应的字母，将当前字母添加到生成的字符串后面，再输入下一个数字，当没有数字要被输入时，则一个字母组合产生。</p>\n</li>\n<li><p>四数之和</p>\n<p>思想同10，共三层循环。先对数组排序，可以根据和的大小情况，让最内层循环的左右指针移动，并且可以提前break和continue。</p>\n</li>\n<li><p>删除链表的倒数第N个节点</p>\n<p>普通：先遍历得到个数，再进行删除，共扫描两趟</p>\n<p>双指针：q先走n步，然后p、q同时向后走，直到q为空，此时p则在倒数第n个位置。</p>\n</li>\n<li><p>有效的括号</p>\n<p>栈：遇到左括号入栈，遇到匹配的右括号出栈，最终返回栈是否为空</p>\n</li>\n<li><p>合并两个有序链表</p>\n<p>归并排序子过程：比较当前两节点，小的则成为结果链表的下一个节点，然后所在链表跳到下一个节点，直到一方为空，接下来将另一方的剩余节点添加到结果链表</p>\n</li>\n<li><p>括号生成</p>\n<p>回溯：总长度2*n，每个位置有两种选择，左括号必须在前，因此当左括号数量小于右时，则不满足要求，否则的话继续添加左右括号，并进行下一步搜索。</p>\n</li>\n<li><p>两两交换链表中的节点</p>\n<p>迭代：拿到连续的三个节点，将前两个节点node1、node2完成交换，并将第三个节点连接在node1（后）上，然后虚拟头节点连上node2（前），当前p前进到node1</p>\n<p>递归：终止条件为当前为空或当前没有下一节点；返回值为完成交换的子链表；单个f(x)完成两个节点的交换，head和next，head连接完成了交换的子链表，next连接head。</p>\n</li>\n<li><p>删除排序数组中的重复项</p>\n<p>双指针：遍历时慢指针和快指针值相等则让快指针前进以跳过重复项，不等时将这个不等的值放到慢指针的位置，然后让慢指针前进，准备存放下一个不重复的值</p>\n</li>\n<li><p>下一个排列</p>\n<p>逆向遍历，如果当前比前一个大，从当前开始向后找到一个比前一个大的<strong>最小数</strong>，调换顺序，然后对当前到数组结束位置的部分排序为升序。最差遍历两次数组，复杂度O（n）</p>\n</li>\n<li><p>搜索旋转排序数组</p>\n<p>时间复杂度O（logN），考虑二分。数组被分为两个有序的部分，因此在找到<strong>分界点</strong>（最大值/最小值）后，问题转变为在有序数组中的查找问题，采用二分查找。</p>\n</li>\n<li><p>在排序数组中查找元素的第一个和最后一个位置</p>\n<p>与上一题异曲同工，区别在于</p>\n</li>\n<li><p>搜索插入位置</p>\n</li>\n<li><p>外观数列</p>\n</li>\n<li><p>组合总和</p>\n</li>\n<li><p>组合总和 II</p>\n</li>\n<li><p>全排列</p>\n</li>\n<li><p>旋转图像</p>\n</li>\n<li><p>字母异位词分组</p>\n</li>\n<li><p>Pow(x,n)</p>\n</li>\n<li><p>最大子序和</p>\n</li>\n<li><p>螺旋矩阵</p>\n</li>\n<li><p>跳跃游戏</p>\n</li>\n<li><p>合并区间</p>\n</li>\n<li><p>旋转链表</p>\n</li>\n<li><p>不同路径</p>\n</li>\n<li><p>最小路径和</p>\n</li>\n<li><p>加一</p>\n</li>\n<li><p>x的平方根</p>\n</li>\n<li><p>爬楼梯</p>\n</li>\n<li><p>颜色分类</p>\n</li>\n<li><p>子集</p>\n</li>\n<li><p>单词搜索</p>\n</li>\n<li><p>删除排序链表中的重复元素</p>\n</li>\n<li><p>分隔链表</p>\n</li>\n<li><p>合并两个有序数组</p>\n</li>\n<li><p>子集 II</p>\n</li>\n<li><p>解码方法</p>\n</li>\n<li><p>反转链表 II</p>\n</li>\n<li><p>二叉树的中序遍历</p>\n</li>\n<li><p>不同的二叉搜索树 II</p>\n</li>\n<li><p>不同的二叉搜索树</p>\n</li>\n<li><p>验证二叉搜索树</p>\n</li>\n<li><p>对称二叉树</p>\n</li>\n<li><p>二叉树的层序遍历</p>\n</li>\n<li><p>二叉树的锯齿形层次遍历</p>\n</li>\n<li><p>二叉树的最大深度</p>\n</li>\n<li><p>从前序与中序遍历序列构造二叉树</p>\n</li>\n<li><p>将有序数组转换为二叉搜索树</p>\n</li>\n<li><p>有序链表转换二叉搜索树</p>\n</li>\n<li><p>路径总和 II</p>\n</li>\n<li><p>二叉树展开为链表</p>\n</li>\n<li><p>杨辉三角</p>\n</li>\n<li><p>买卖股票的最佳时机</p>\n</li>\n<li><p>买卖股票的最佳时机 II</p>\n</li>\n<li><p>验证回文串</p>\n</li>\n<li><p>只出现一次的数字</p>\n</li>\n<li><p>只出现一次的数字 II</p>\n</li>\n<li><p>单词拆分</p>\n</li>\n<li><p>环形链表</p>\n</li>\n<li><p>环形链表 II</p>\n</li>\n<li><p>重排链表</p>\n</li>\n<li><p>二叉树的前序遍历<br>73 .LRU缓存机制</p>\n</li>\n<li><p>排序链表</p>\n</li>\n<li><p>逆波兰表达式求值</p>\n</li>\n<li><p>乘积最大子数组</p>\n</li>\n<li><p>最小栈</p>\n</li>\n<li><p>相交链表</p>\n</li>\n<li><p>寻找峰值</p>\n</li>\n<li><p>多数元素</p>\n</li>\n<li><p>Excel表列序号</p>\n</li>\n<li><p>阶乘后的零</p>\n</li>\n<li><p>最大数</p>\n</li>\n<li><p>重复的DNA序列</p>\n</li>\n<li><p>旋转数组</p>\n</li>\n<li><p>打家劫舍</p>\n</li>\n<li><p>二叉树的右视图</p>\n</li>\n<li><p>岛屿数量</p>\n</li>\n<li><p>快乐数</p>\n</li>\n<li><p>移除链表元素</p>\n</li>\n<li><p>反转链表</p>\n</li>\n<li><p>数组中的第K个最大元素</p>\n</li>\n<li><p>存在重复元素</p>\n</li>\n<li><p>最大正方形</p>\n</li>\n<li><p>用队列实现栈</p>\n</li>\n<li><p>翻转二叉树</p>\n</li>\n<li><p>基本计算器 II</p>\n</li>\n<li><p>二叉搜索树中第K小的元素</p>\n</li>\n<li><p>用栈实现队列</p>\n</li>\n<li><p>回文链表</p>\n</li>\n<li><p>二叉搜索树的最近公共祖先</p>\n</li>\n<li><p>二叉树的最近公共祖先</p>\n</li>\n<li><p>删除链表中的节点</p>\n</li>\n<li><p>除自身以外数组的乘积</p>\n</li>\n<li><p>搜索二维矩阵 II</p>\n</li>\n<li><p>有效的字母异位词</p>\n</li>\n<li><p>各位相加</p>\n</li>\n<li><p>缺失数字</p>\n</li>\n<li><p>完全平方数</p>\n</li>\n<li><p>移动零</p>\n</li>\n<li><p>寻找重复数</p>\n</li>\n<li><p>Nim 游戏</p>\n</li>\n<li><p>最长上升子序列</p>\n</li>\n<li><p>超级丑数</p>\n</li>\n<li><p>零钱兑换</p>\n</li>\n<li><p>3 的幂</p>\n</li>\n<li><p>奇偶链表</p>\n</li>\n<li><p>递增的三元子序列</p>\n</li>\n<li><p>打家劫舍 III</p>\n</li>\n<li><p>比特位计数</p>\n</li>\n<li><p>反转字符串</p>\n</li>\n<li><p>前K 个高频元素</p>\n</li>\n<li><p>两个数组的交集</p>\n</li>\n<li><p>两整数之和</p>\n</li>\n<li><p>有序矩阵中第K小的元素</p>\n</li>\n<li><p>字符串解码</p>\n</li>\n<li><p>移掉K位数字</p>\n</li>\n<li><p>根据身高重建队列</p>\n</li>\n<li><p>最长回文串</p>\n</li>\n<li><p>FizzBuzz</p>\n</li>\n<li><p>字符串相加</p>\n</li>\n<li><p>分割等和子集</p>\n</li>\n<li><p>找到所有数组中消失的数字</p>\n</li>\n<li><p>四数相加 II</p>\n</li>\n<li><p>分发饼干</p>\n</li>\n<li><p>汉明距离</p>\n</li>\n<li><p>数字的补数</p>\n</li>\n<li><p>把二叉搜索树转换为累加树</p>\n</li>\n<li><p>二叉树的直径</p>\n</li>\n<li><p>和为K的子数组</p>\n</li>\n<li><p>分糖果</p>\n</li>\n<li><p>最短无序连续子数组</p>\n</li>\n<li><p>合并二叉树</p>\n</li>\n<li><p>回文子串</p>\n</li>\n<li><p>最大二叉树</p>\n</li>\n<li><p>1 比特与 2 比特字符</p>\n</li>\n<li><p>最长重复子数组</p>\n</li>\n<li><p>自除数</p>\n</li>\n<li><p>每日温度</p>\n</li>\n<li><p>划分字母区间</p>\n</li>\n<li><p>重构字符串</p>\n</li>\n<li><p>宝石与石头</p>\n</li>\n<li><p>用两个栈实现队列</p>\n</li>\n<li><p>斐波那契数列</p>\n</li>\n<li><p>数组中重复的数字</p>\n</li>\n<li><p>二维数组中的查找</p>\n</li>\n<li><p>青蛙跳台阶问题</p>\n</li>\n<li><p>旋转数组的最小数字</p>\n</li>\n<li><p>替换空格</p>\n</li>\n<li><p>从尾到头打印链表</p>\n</li>\n<li><p>重建二叉树</p>\n</li>\n<li><p>剪绳子</p>\n</li>\n<li><p>合并两个排序的链表</p>\n</li>\n<li><p>树的子结构</p>\n</li>\n<li><p>二叉树的镜像</p>\n</li>\n<li><p>对称的二叉树</p>\n</li>\n<li><p>调整数组顺序使奇数位于偶数前面</p>\n</li>\n<li><p>二进制中 1 的个数</p>\n</li>\n<li><p>顺时针打印矩阵</p>\n</li>\n<li><p>链表中倒数第k个节点</p>\n</li>\n<li><p>数值的整数次方</p>\n</li>\n<li><p>反转链表</p>\n</li>\n<li><p>删除链表的节点</p>\n</li>\n<li><p>最小的k个数</p>\n</li>\n<li><p>包含min函数的栈</p>\n</li>\n<li><p>连续子数组的最大和</p>\n</li>\n<li><p>二叉搜索树与双向链表</p>\n</li>\n<li><p>栈的压入、弹出序列</p>\n</li>\n<li><p>字符串的排列</p>\n</li>\n<li><p>数组中出现次数超过一半的数字</p>\n</li>\n<li><p>从上到下打印二叉树</p>\n</li>\n<li><p>从上到下打印二叉树II</p>\n</li>\n<li><p>从上到下打印二叉树III</p>\n</li>\n<li><p>二叉搜索树的后序遍历序列</p>\n</li>\n<li><p>第一个只出现一次的字符</p>\n</li>\n<li><p>二叉树中和为某一值的路径</p>\n</li>\n<li><p>二叉树的深度</p>\n</li>\n<li><p>数组中数字出现的次数</p>\n</li>\n<li><p>数组中数字出现的次数 II</p>\n</li>\n<li><p>和为s的两个数字</p>\n</li>\n<li><p>把数组排成最小的数</p>\n</li>\n<li><p>和为s的连续正数序列</p>\n</li>\n<li><p>两个链表的第一个公共节点</p>\n</li>\n<li><p>礼物的最大价值</p>\n</li>\n<li><p>翻转单词顺序</p>\n</li>\n<li><p>在排序数组中查找数字 I</p>\n</li>\n<li><p>左旋转字符串</p>\n</li>\n<li><p>0 ～n- 1 中缺失的数字</p>\n</li>\n<li><p>最长不含重复字符的子字符串</p>\n</li>\n<li><p>二叉搜索树的第k大节点</p>\n</li>\n<li><p>丑数</p>\n</li>\n<li><p>不用加减乘除做加法</p>\n</li>\n<li><p>滑动窗口的最大值</p>\n</li>\n<li><p>构建乘积数组</p>\n</li>\n<li><p>扑克牌中的顺子</p>\n</li>\n<li><p>平衡二叉树</p>\n</li>\n<li><p>股票的最大利润</p>\n</li>\n<li><p>求 1 + 2 +…+n</p>\n</li>\n<li><p>二叉搜索树的最近公共祖先</p>\n</li>\n<li><p>二叉树的最近公共祖先</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>两数之和</p>\n<p>使用map存放元素和下标，遍历过程中，查看是否map中是否存在key：target-nums[i]，有则找到了两数和为target，返回其下标和当前下标</p>\n</li>\n<li><p>两数相加</p>\n<p>处理进位。</p>\n</li>\n<li><p>无重复字符的最长子串</p>\n<p>利用set和滑动窗口，右侧从0向右移动过程中，如果当前字符以存在set中，则表示遇到了重复，记录此时right-left，并将元素移除，left++；否则继续right++</p>\n</li>\n<li><p>最长回文子串</p>\n<p>动态规划，如果S[i+1…j-1]是回文串，则当S[i]=S[j]时，S[i…j]也为回文串。因此状态转移方程为dp[i] [j] = dp[i+1] [j-1] &amp;&amp; S[i]==S[j]，如果S[i…j]也为回文串，并且长度大于之前的回文串，则更新长度</p>\n</li>\n<li><p>整数反转</p>\n<p>通过不断对10取模获取到数字的最后一位，然后/10继续下一位，获取到最后一位时，在拼接成新数字时，判断是否溢出。因为我们通过ans*10 + pop的方式得到拼接后的数字，则根据ans *10 + pop &gt; Integer.MAX_VALUE，和 ans *10 + pop &lt; Integer.MIN_VALUE可以得到溢出的条件，在拼接之前做出判断。<code>ans &gt; Integer.MAX_VALUE / 10 || (ans == Integer.MAX_VALUE / 10 &amp;&amp; pop &gt; 7)</code>，7是整型最大值的个位数。</p>\n</li>\n<li><p>回文数</p>\n<p>同样使用第5题的方法，逆序构造的数字如果不等于原值则返回false。由于不需要判断溢出，因此采用long来记录构造的数字</p>\n</li>\n<li><p>盛最多水的容器</p>\n<p>双指针，从左右边界向中间移动，每次移动较小的一个，记录最大值作为结果。正确性来自面积S=min(height[left], height[right]) * (right-left)，由于总是取较小的高，而在移动过程中right-left会一直变小，因此移动较高的一侧不可能产生更大的面积</p>\n</li>\n<li><p>最长公共前缀</p>\n<p>暴力：以一个字符串为模板，对其每一个字符，遍历其他所有字符串，当全部相等时则添加到结果字符串中，出现不等则结束返回结果字符串</p>\n<p>字典树：</p>\n</li>\n<li><p>三数之和</p>\n<p>普通：外层for循环，内层使用两数之和做法，去重难搞</p>\n<p>排序双指针：排序后，外层循环可去重，在内层循环，通过左右双指针，由于排序过，因此可通过三数之和与0的大小关系，确定左/右指针移动</p>\n</li>\n<li><p>最接近的三数之和</p>\n<p>与上一题相同做法，在记录结果时需要通过绝对值比较，更新结果。</p>\n</li>\n</ol>\n<ol start=\"11\">\n<li><p>电话号码的字母组合</p>\n<p>回溯：从第一个数字开始，遍历数字对应的字母，将当前字母添加到生成的字符串后面，再输入下一个数字，当没有数字要被输入时，则一个字母组合产生。</p>\n</li>\n<li><p>四数之和</p>\n<p>思想同10，共三层循环。先对数组排序，可以根据和的大小情况，让最内层循环的左右指针移动，并且可以提前break和continue。</p>\n</li>\n<li><p>删除链表的倒数第N个节点</p>\n<p>普通：先遍历得到个数，再进行删除，共扫描两趟</p>\n<p>双指针：q先走n步，然后p、q同时向后走，直到q为空，此时p则在倒数第n个位置。</p>\n</li>\n<li><p>有效的括号</p>\n<p>栈：遇到左括号入栈，遇到匹配的右括号出栈，最终返回栈是否为空</p>\n</li>\n<li><p>合并两个有序链表</p>\n<p>归并排序子过程：比较当前两节点，小的则成为结果链表的下一个节点，然后所在链表跳到下一个节点，直到一方为空，接下来将另一方的剩余节点添加到结果链表</p>\n</li>\n<li><p>括号生成</p>\n<p>回溯：总长度2*n，每个位置有两种选择，左括号必须在前，因此当左括号数量小于右时，则不满足要求，否则的话继续添加左右括号，并进行下一步搜索。</p>\n</li>\n<li><p>两两交换链表中的节点</p>\n<p>迭代：拿到连续的三个节点，将前两个节点node1、node2完成交换，并将第三个节点连接在node1（后）上，然后虚拟头节点连上node2（前），当前p前进到node1</p>\n<p>递归：终止条件为当前为空或当前没有下一节点；返回值为完成交换的子链表；单个f(x)完成两个节点的交换，head和next，head连接完成了交换的子链表，next连接head。</p>\n</li>\n<li><p>删除排序数组中的重复项</p>\n<p>双指针：遍历时慢指针和快指针值相等则让快指针前进以跳过重复项，不等时将这个不等的值放到慢指针的位置，然后让慢指针前进，准备存放下一个不重复的值</p>\n</li>\n<li><p>下一个排列</p>\n<p>逆向遍历，如果当前比前一个大，从当前开始向后找到一个比前一个大的<strong>最小数</strong>，调换顺序，然后对当前到数组结束位置的部分排序为升序。最差遍历两次数组，复杂度O（n）</p>\n</li>\n<li><p>搜索旋转排序数组</p>\n<p>时间复杂度O（logN），考虑二分。数组被分为两个有序的部分，因此在找到<strong>分界点</strong>（最大值/最小值）后，问题转变为在有序数组中的查找问题，采用二分查找。</p>\n</li>\n<li><p>在排序数组中查找元素的第一个和最后一个位置</p>\n<p>与上一题异曲同工，区别在于</p>\n</li>\n<li><p>搜索插入位置</p>\n</li>\n<li><p>外观数列</p>\n</li>\n<li><p>组合总和</p>\n</li>\n<li><p>组合总和 II</p>\n</li>\n<li><p>全排列</p>\n</li>\n<li><p>旋转图像</p>\n</li>\n<li><p>字母异位词分组</p>\n</li>\n<li><p>Pow(x,n)</p>\n</li>\n<li><p>最大子序和</p>\n</li>\n<li><p>螺旋矩阵</p>\n</li>\n<li><p>跳跃游戏</p>\n</li>\n<li><p>合并区间</p>\n</li>\n<li><p>旋转链表</p>\n</li>\n<li><p>不同路径</p>\n</li>\n<li><p>最小路径和</p>\n</li>\n<li><p>加一</p>\n</li>\n<li><p>x的平方根</p>\n</li>\n<li><p>爬楼梯</p>\n</li>\n<li><p>颜色分类</p>\n</li>\n<li><p>子集</p>\n</li>\n<li><p>单词搜索</p>\n</li>\n<li><p>删除排序链表中的重复元素</p>\n</li>\n<li><p>分隔链表</p>\n</li>\n<li><p>合并两个有序数组</p>\n</li>\n<li><p>子集 II</p>\n</li>\n<li><p>解码方法</p>\n</li>\n<li><p>反转链表 II</p>\n</li>\n<li><p>二叉树的中序遍历</p>\n</li>\n<li><p>不同的二叉搜索树 II</p>\n</li>\n<li><p>不同的二叉搜索树</p>\n</li>\n<li><p>验证二叉搜索树</p>\n</li>\n<li><p>对称二叉树</p>\n</li>\n<li><p>二叉树的层序遍历</p>\n</li>\n<li><p>二叉树的锯齿形层次遍历</p>\n</li>\n<li><p>二叉树的最大深度</p>\n</li>\n<li><p>从前序与中序遍历序列构造二叉树</p>\n</li>\n<li><p>将有序数组转换为二叉搜索树</p>\n</li>\n<li><p>有序链表转换二叉搜索树</p>\n</li>\n<li><p>路径总和 II</p>\n</li>\n<li><p>二叉树展开为链表</p>\n</li>\n<li><p>杨辉三角</p>\n</li>\n<li><p>买卖股票的最佳时机</p>\n</li>\n<li><p>买卖股票的最佳时机 II</p>\n</li>\n<li><p>验证回文串</p>\n</li>\n<li><p>只出现一次的数字</p>\n</li>\n<li><p>只出现一次的数字 II</p>\n</li>\n<li><p>单词拆分</p>\n</li>\n<li><p>环形链表</p>\n</li>\n<li><p>环形链表 II</p>\n</li>\n<li><p>重排链表</p>\n</li>\n<li><p>二叉树的前序遍历<br>73 .LRU缓存机制</p>\n</li>\n<li><p>排序链表</p>\n</li>\n<li><p>逆波兰表达式求值</p>\n</li>\n<li><p>乘积最大子数组</p>\n</li>\n<li><p>最小栈</p>\n</li>\n<li><p>相交链表</p>\n</li>\n<li><p>寻找峰值</p>\n</li>\n<li><p>多数元素</p>\n</li>\n<li><p>Excel表列序号</p>\n</li>\n<li><p>阶乘后的零</p>\n</li>\n<li><p>最大数</p>\n</li>\n<li><p>重复的DNA序列</p>\n</li>\n<li><p>旋转数组</p>\n</li>\n<li><p>打家劫舍</p>\n</li>\n<li><p>二叉树的右视图</p>\n</li>\n<li><p>岛屿数量</p>\n</li>\n<li><p>快乐数</p>\n</li>\n<li><p>移除链表元素</p>\n</li>\n<li><p>反转链表</p>\n</li>\n<li><p>数组中的第K个最大元素</p>\n</li>\n<li><p>存在重复元素</p>\n</li>\n<li><p>最大正方形</p>\n</li>\n<li><p>用队列实现栈</p>\n</li>\n<li><p>翻转二叉树</p>\n</li>\n<li><p>基本计算器 II</p>\n</li>\n<li><p>二叉搜索树中第K小的元素</p>\n</li>\n<li><p>用栈实现队列</p>\n</li>\n<li><p>回文链表</p>\n</li>\n<li><p>二叉搜索树的最近公共祖先</p>\n</li>\n<li><p>二叉树的最近公共祖先</p>\n</li>\n<li><p>删除链表中的节点</p>\n</li>\n<li><p>除自身以外数组的乘积</p>\n</li>\n<li><p>搜索二维矩阵 II</p>\n</li>\n<li><p>有效的字母异位词</p>\n</li>\n<li><p>各位相加</p>\n</li>\n<li><p>缺失数字</p>\n</li>\n<li><p>完全平方数</p>\n</li>\n<li><p>移动零</p>\n</li>\n<li><p>寻找重复数</p>\n</li>\n<li><p>Nim 游戏</p>\n</li>\n<li><p>最长上升子序列</p>\n</li>\n<li><p>超级丑数</p>\n</li>\n<li><p>零钱兑换</p>\n</li>\n<li><p>3 的幂</p>\n</li>\n<li><p>奇偶链表</p>\n</li>\n<li><p>递增的三元子序列</p>\n</li>\n<li><p>打家劫舍 III</p>\n</li>\n<li><p>比特位计数</p>\n</li>\n<li><p>反转字符串</p>\n</li>\n<li><p>前K 个高频元素</p>\n</li>\n<li><p>两个数组的交集</p>\n</li>\n<li><p>两整数之和</p>\n</li>\n<li><p>有序矩阵中第K小的元素</p>\n</li>\n<li><p>字符串解码</p>\n</li>\n<li><p>移掉K位数字</p>\n</li>\n<li><p>根据身高重建队列</p>\n</li>\n<li><p>最长回文串</p>\n</li>\n<li><p>FizzBuzz</p>\n</li>\n<li><p>字符串相加</p>\n</li>\n<li><p>分割等和子集</p>\n</li>\n<li><p>找到所有数组中消失的数字</p>\n</li>\n<li><p>四数相加 II</p>\n</li>\n<li><p>分发饼干</p>\n</li>\n<li><p>汉明距离</p>\n</li>\n<li><p>数字的补数</p>\n</li>\n<li><p>把二叉搜索树转换为累加树</p>\n</li>\n<li><p>二叉树的直径</p>\n</li>\n<li><p>和为K的子数组</p>\n</li>\n<li><p>分糖果</p>\n</li>\n<li><p>最短无序连续子数组</p>\n</li>\n<li><p>合并二叉树</p>\n</li>\n<li><p>回文子串</p>\n</li>\n<li><p>最大二叉树</p>\n</li>\n<li><p>1 比特与 2 比特字符</p>\n</li>\n<li><p>最长重复子数组</p>\n</li>\n<li><p>自除数</p>\n</li>\n<li><p>每日温度</p>\n</li>\n<li><p>划分字母区间</p>\n</li>\n<li><p>重构字符串</p>\n</li>\n<li><p>宝石与石头</p>\n</li>\n<li><p>用两个栈实现队列</p>\n</li>\n<li><p>斐波那契数列</p>\n</li>\n<li><p>数组中重复的数字</p>\n</li>\n<li><p>二维数组中的查找</p>\n</li>\n<li><p>青蛙跳台阶问题</p>\n</li>\n<li><p>旋转数组的最小数字</p>\n</li>\n<li><p>替换空格</p>\n</li>\n<li><p>从尾到头打印链表</p>\n</li>\n<li><p>重建二叉树</p>\n</li>\n<li><p>剪绳子</p>\n</li>\n<li><p>合并两个排序的链表</p>\n</li>\n<li><p>树的子结构</p>\n</li>\n<li><p>二叉树的镜像</p>\n</li>\n<li><p>对称的二叉树</p>\n</li>\n<li><p>调整数组顺序使奇数位于偶数前面</p>\n</li>\n<li><p>二进制中 1 的个数</p>\n</li>\n<li><p>顺时针打印矩阵</p>\n</li>\n<li><p>链表中倒数第k个节点</p>\n</li>\n<li><p>数值的整数次方</p>\n</li>\n<li><p>反转链表</p>\n</li>\n<li><p>删除链表的节点</p>\n</li>\n<li><p>最小的k个数</p>\n</li>\n<li><p>包含min函数的栈</p>\n</li>\n<li><p>连续子数组的最大和</p>\n</li>\n<li><p>二叉搜索树与双向链表</p>\n</li>\n<li><p>栈的压入、弹出序列</p>\n</li>\n<li><p>字符串的排列</p>\n</li>\n<li><p>数组中出现次数超过一半的数字</p>\n</li>\n<li><p>从上到下打印二叉树</p>\n</li>\n<li><p>从上到下打印二叉树II</p>\n</li>\n<li><p>从上到下打印二叉树III</p>\n</li>\n<li><p>二叉搜索树的后序遍历序列</p>\n</li>\n<li><p>第一个只出现一次的字符</p>\n</li>\n<li><p>二叉树中和为某一值的路径</p>\n</li>\n<li><p>二叉树的深度</p>\n</li>\n<li><p>数组中数字出现的次数</p>\n</li>\n<li><p>数组中数字出现的次数 II</p>\n</li>\n<li><p>和为s的两个数字</p>\n</li>\n<li><p>把数组排成最小的数</p>\n</li>\n<li><p>和为s的连续正数序列</p>\n</li>\n<li><p>两个链表的第一个公共节点</p>\n</li>\n<li><p>礼物的最大价值</p>\n</li>\n<li><p>翻转单词顺序</p>\n</li>\n<li><p>在排序数组中查找数字 I</p>\n</li>\n<li><p>左旋转字符串</p>\n</li>\n<li><p>0 ～n- 1 中缺失的数字</p>\n</li>\n<li><p>最长不含重复字符的子字符串</p>\n</li>\n<li><p>二叉搜索树的第k大节点</p>\n</li>\n<li><p>丑数</p>\n</li>\n<li><p>不用加减乘除做加法</p>\n</li>\n<li><p>滑动窗口的最大值</p>\n</li>\n<li><p>构建乘积数组</p>\n</li>\n<li><p>扑克牌中的顺子</p>\n</li>\n<li><p>平衡二叉树</p>\n</li>\n<li><p>股票的最大利润</p>\n</li>\n<li><p>求 1 + 2 +…+n</p>\n</li>\n<li><p>二叉搜索树的最近公共祖先</p>\n</li>\n<li><p>二叉树的最近公共祖先</p>\n</li>\n</ol>\n","length":3164},{"abbrlink":"a14955d3","_content":"## 项目介绍\n\n这个项目是用于中山大学附属第一医院的医生技能评估，我负责项目前后端的设计和实现，采用shiro框架实现多角色的登录认证和权限管理，应用spring的schedule定时清理无用数据，使用了poi等实现了成绩导出，支持pdf和excel格式，echarts做成绩等数据的可视化图表和分析，并有完善的日志信息记录和异常告警模块。项目上线至今已经经过了多场百人甚至千人的考试，体现出了无纸化考试的优点，提高了医院医师的工作效率，减少了资源的浪费。\n\n\n\n## 定时任务的应用\n\n### 为什么选Spring自带的\n\n针对业务较简单，所以选用轻量级的易用的，因为Schedule使用简单，在方法上使用注解scheduled加cron表达式即可。\n\n缺点：不适用于任务多，间隔短的情况，因为第一个任务执行未完成时将会导致第二个任务延迟执行。\n\ncron表达式：秒分时日月周(年) 允许取值分别为该时间下的可选值(如秒为0-59) \n\n特殊取值：*任意，10-12：10秒到12秒，MON,FRI:表示星期一和五，5/15：从5开始每15执行一次。\n\nquartz：非spring自带，主要组件有job任务，trigger触发器，schedule定时器-可装配多个触发器，需要经过配置注入到spring容器中，并且支持分布式事务。\n\n### springschedule实现原理\n\nScheduledTaskRegistrar 定时任务注册器，在bean初始化后，会将所有带Schedule注解的方法注册到注册器中\n\nSchedule注解属性：cron-表达式，fixDelay-固定延迟、本次执行开始和上次执行结束之间延迟的毫秒，fixRate-固定频率、以固定的时间间隔执行，initialDelay-延迟任务的初始延迟毫秒数\n\nlocalExecutor：使用ScheduledThreadPoolExecutor实现，单线程执行，内部采用的是延迟队列DelayQueue。由于是单线程执行，因此不适用于任务多，间隔短的情况，因为第一个任务执行未完成时将会导致第二个任务延迟执行。\n\n## 登录认证权限框架\n\n### 为什么选shiro\n\n登录认证权限管理主要都是通过过滤器来实现对应的逻辑，shiro在设计上比springSecurity简单许多，不需要繁杂的配置，再加上SpringSecurity功能更加丰富，因此其设计上会更加复杂，上手起来会比较困难，由于只需要认证和鉴权两个核心功能，因此选择了更加轻量级的shiro。\n\nRBAC:基于角色的权限管理，通过用户的角色与其对应的权限实现权限安全管理。\n\n##  JWTtoken和其他认证的比较\n\njwt是一种身份认证的机制，使用jwt可以在客户端和服务端建立起可靠的通信。\n\n### 组成\n\n1. header头部-jwt和加密算法\n2. payload-设置token信息主题 用户id以及其他信息签发时间签发者过期时间等\n3. signature-使用非对称加密算法将base64加密过的头部和payload再次通过密钥加密后就可以生成token。解析时也是一样，只需要验证token即可判断是否登录\n\n### 单点登录：在不同的系统之间，只需要登录一次，就能访问其他相互信任的系统。\n\n同域：通过cookie的顶域，和session共享实现\n\n不同域：用户访问a系统时，a服务端发现未登录，重定向到单点登录系统，在单点登录系统中完成登录后，会有全局的状态保存，再生成一个凭据回发给a系统，a系统将再发送请求验证凭据的有效性，验证通过后，登陆系统会记录a系统的地址和sessionid，通过则将登陆信息保存在自己的服务端，完成登录。用户访问b系统时，b服务端发现未登录，重定向到单点登录系统，发现已登录，单点登录也生成一个凭据给b系统，b系统记录登录信息。\n\n注销时，在子系统退出通过凭据到登陆系统删除全局session和子系统和sessionid进行删除","source":"_drafts/技能评估平台.md","raw":"---\nabbrlink: a14955d3\n---\n## 项目介绍\n\n这个项目是用于中山大学附属第一医院的医生技能评估，我负责项目前后端的设计和实现，采用shiro框架实现多角色的登录认证和权限管理，应用spring的schedule定时清理无用数据，使用了poi等实现了成绩导出，支持pdf和excel格式，echarts做成绩等数据的可视化图表和分析，并有完善的日志信息记录和异常告警模块。项目上线至今已经经过了多场百人甚至千人的考试，体现出了无纸化考试的优点，提高了医院医师的工作效率，减少了资源的浪费。\n\n\n\n## 定时任务的应用\n\n### 为什么选Spring自带的\n\n针对业务较简单，所以选用轻量级的易用的，因为Schedule使用简单，在方法上使用注解scheduled加cron表达式即可。\n\n缺点：不适用于任务多，间隔短的情况，因为第一个任务执行未完成时将会导致第二个任务延迟执行。\n\ncron表达式：秒分时日月周(年) 允许取值分别为该时间下的可选值(如秒为0-59) \n\n特殊取值：*任意，10-12：10秒到12秒，MON,FRI:表示星期一和五，5/15：从5开始每15执行一次。\n\nquartz：非spring自带，主要组件有job任务，trigger触发器，schedule定时器-可装配多个触发器，需要经过配置注入到spring容器中，并且支持分布式事务。\n\n### springschedule实现原理\n\nScheduledTaskRegistrar 定时任务注册器，在bean初始化后，会将所有带Schedule注解的方法注册到注册器中\n\nSchedule注解属性：cron-表达式，fixDelay-固定延迟、本次执行开始和上次执行结束之间延迟的毫秒，fixRate-固定频率、以固定的时间间隔执行，initialDelay-延迟任务的初始延迟毫秒数\n\nlocalExecutor：使用ScheduledThreadPoolExecutor实现，单线程执行，内部采用的是延迟队列DelayQueue。由于是单线程执行，因此不适用于任务多，间隔短的情况，因为第一个任务执行未完成时将会导致第二个任务延迟执行。\n\n## 登录认证权限框架\n\n### 为什么选shiro\n\n登录认证权限管理主要都是通过过滤器来实现对应的逻辑，shiro在设计上比springSecurity简单许多，不需要繁杂的配置，再加上SpringSecurity功能更加丰富，因此其设计上会更加复杂，上手起来会比较困难，由于只需要认证和鉴权两个核心功能，因此选择了更加轻量级的shiro。\n\nRBAC:基于角色的权限管理，通过用户的角色与其对应的权限实现权限安全管理。\n\n##  JWTtoken和其他认证的比较\n\njwt是一种身份认证的机制，使用jwt可以在客户端和服务端建立起可靠的通信。\n\n### 组成\n\n1. header头部-jwt和加密算法\n2. payload-设置token信息主题 用户id以及其他信息签发时间签发者过期时间等\n3. signature-使用非对称加密算法将base64加密过的头部和payload再次通过密钥加密后就可以生成token。解析时也是一样，只需要验证token即可判断是否登录\n\n### 单点登录：在不同的系统之间，只需要登录一次，就能访问其他相互信任的系统。\n\n同域：通过cookie的顶域，和session共享实现\n\n不同域：用户访问a系统时，a服务端发现未登录，重定向到单点登录系统，在单点登录系统中完成登录后，会有全局的状态保存，再生成一个凭据回发给a系统，a系统将再发送请求验证凭据的有效性，验证通过后，登陆系统会记录a系统的地址和sessionid，通过则将登陆信息保存在自己的服务端，完成登录。用户访问b系统时，b服务端发现未登录，重定向到单点登录系统，发现已登录，单点登录也生成一个凭据给b系统，b系统记录登录信息。\n\n注销时，在子系统退出通过凭据到登陆系统删除全局session和子系统和sessionid进行删除","slug":"技能评估平台","published":0,"date":"2020-08-04T08:33:10.755Z","updated":"2020-08-06T01:23:57.434Z","title":"技能评估平台","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1k000ez4ejbzc4389x","content":"<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2><p>这个项目是用于中山大学附属第一医院的医生技能评估，我负责项目前后端的设计和实现，采用shiro框架实现多角色的登录认证和权限管理，应用spring的schedule定时清理无用数据，使用了poi等实现了成绩导出，支持pdf和excel格式，echarts做成绩等数据的可视化图表和分析，并有完善的日志信息记录和异常告警模块。项目上线至今已经经过了多场百人甚至千人的考试，体现出了无纸化考试的优点，提高了医院医师的工作效率，减少了资源的浪费。</p>\n<h2 id=\"定时任务的应用\"><a href=\"#定时任务的应用\" class=\"headerlink\" title=\"定时任务的应用\"></a>定时任务的应用</h2><h3 id=\"为什么选Spring自带的\"><a href=\"#为什么选Spring自带的\" class=\"headerlink\" title=\"为什么选Spring自带的\"></a>为什么选Spring自带的</h3><p>针对业务较简单，所以选用轻量级的易用的，因为Schedule使用简单，在方法上使用注解scheduled加cron表达式即可。</p>\n<p>缺点：不适用于任务多，间隔短的情况，因为第一个任务执行未完成时将会导致第二个任务延迟执行。</p>\n<p>cron表达式：秒分时日月周(年) 允许取值分别为该时间下的可选值(如秒为0-59) </p>\n<p>特殊取值：*任意，10-12：10秒到12秒，MON,FRI:表示星期一和五，5/15：从5开始每15执行一次。</p>\n<p>quartz：非spring自带，主要组件有job任务，trigger触发器，schedule定时器-可装配多个触发器，需要经过配置注入到spring容器中，并且支持分布式事务。</p>\n<h3 id=\"springschedule实现原理\"><a href=\"#springschedule实现原理\" class=\"headerlink\" title=\"springschedule实现原理\"></a>springschedule实现原理</h3><p>ScheduledTaskRegistrar 定时任务注册器，在bean初始化后，会将所有带Schedule注解的方法注册到注册器中</p>\n<p>Schedule注解属性：cron-表达式，fixDelay-固定延迟、本次执行开始和上次执行结束之间延迟的毫秒，fixRate-固定频率、以固定的时间间隔执行，initialDelay-延迟任务的初始延迟毫秒数</p>\n<p>localExecutor：使用ScheduledThreadPoolExecutor实现，单线程执行，内部采用的是延迟队列DelayQueue。由于是单线程执行，因此不适用于任务多，间隔短的情况，因为第一个任务执行未完成时将会导致第二个任务延迟执行。</p>\n<h2 id=\"登录认证权限框架\"><a href=\"#登录认证权限框架\" class=\"headerlink\" title=\"登录认证权限框架\"></a>登录认证权限框架</h2><h3 id=\"为什么选shiro\"><a href=\"#为什么选shiro\" class=\"headerlink\" title=\"为什么选shiro\"></a>为什么选shiro</h3><p>登录认证权限管理主要都是通过过滤器来实现对应的逻辑，shiro在设计上比springSecurity简单许多，不需要繁杂的配置，再加上SpringSecurity功能更加丰富，因此其设计上会更加复杂，上手起来会比较困难，由于只需要认证和鉴权两个核心功能，因此选择了更加轻量级的shiro。</p>\n<p>RBAC:基于角色的权限管理，通过用户的角色与其对应的权限实现权限安全管理。</p>\n<h2 id=\"JWTtoken和其他认证的比较\"><a href=\"#JWTtoken和其他认证的比较\" class=\"headerlink\" title=\"JWTtoken和其他认证的比较\"></a>JWTtoken和其他认证的比较</h2><p>jwt是一种身份认证的机制，使用jwt可以在客户端和服务端建立起可靠的通信。</p>\n<h3 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h3><ol>\n<li>header头部-jwt和加密算法</li>\n<li>payload-设置token信息主题 用户id以及其他信息签发时间签发者过期时间等</li>\n<li>signature-使用非对称加密算法将base64加密过的头部和payload再次通过密钥加密后就可以生成token。解析时也是一样，只需要验证token即可判断是否登录</li>\n</ol>\n<h3 id=\"单点登录：在不同的系统之间，只需要登录一次，就能访问其他相互信任的系统。\"><a href=\"#单点登录：在不同的系统之间，只需要登录一次，就能访问其他相互信任的系统。\" class=\"headerlink\" title=\"单点登录：在不同的系统之间，只需要登录一次，就能访问其他相互信任的系统。\"></a>单点登录：在不同的系统之间，只需要登录一次，就能访问其他相互信任的系统。</h3><p>同域：通过cookie的顶域，和session共享实现</p>\n<p>不同域：用户访问a系统时，a服务端发现未登录，重定向到单点登录系统，在单点登录系统中完成登录后，会有全局的状态保存，再生成一个凭据回发给a系统，a系统将再发送请求验证凭据的有效性，验证通过后，登陆系统会记录a系统的地址和sessionid，通过则将登陆信息保存在自己的服务端，完成登录。用户访问b系统时，b服务端发现未登录，重定向到单点登录系统，发现已登录，单点登录也生成一个凭据给b系统，b系统记录登录信息。</p>\n<p>注销时，在子系统退出通过凭据到登陆系统删除全局session和子系统和sessionid进行删除</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2><p>这个项目是用于中山大学附属第一医院的医生技能评估，我负责项目前后端的设计和实现，采用shiro框架实现多角色的登录认证和权限管理，应用spring的schedule定时清理无用数据，使用了poi等实现了成绩导出，支持pdf和excel格式，echarts做成绩等数据的可视化图表和分析，并有完善的日志信息记录和异常告警模块。项目上线至今已经经过了多场百人甚至千人的考试，体现出了无纸化考试的优点，提高了医院医师的工作效率，减少了资源的浪费。</p>\n<h2 id=\"定时任务的应用\"><a href=\"#定时任务的应用\" class=\"headerlink\" title=\"定时任务的应用\"></a>定时任务的应用</h2><h3 id=\"为什么选Spring自带的\"><a href=\"#为什么选Spring自带的\" class=\"headerlink\" title=\"为什么选Spring自带的\"></a>为什么选Spring自带的</h3><p>针对业务较简单，所以选用轻量级的易用的，因为Schedule使用简单，在方法上使用注解scheduled加cron表达式即可。</p>\n<p>缺点：不适用于任务多，间隔短的情况，因为第一个任务执行未完成时将会导致第二个任务延迟执行。</p>\n<p>cron表达式：秒分时日月周(年) 允许取值分别为该时间下的可选值(如秒为0-59) </p>\n<p>特殊取值：*任意，10-12：10秒到12秒，MON,FRI:表示星期一和五，5/15：从5开始每15执行一次。</p>\n<p>quartz：非spring自带，主要组件有job任务，trigger触发器，schedule定时器-可装配多个触发器，需要经过配置注入到spring容器中，并且支持分布式事务。</p>\n<h3 id=\"springschedule实现原理\"><a href=\"#springschedule实现原理\" class=\"headerlink\" title=\"springschedule实现原理\"></a>springschedule实现原理</h3><p>ScheduledTaskRegistrar 定时任务注册器，在bean初始化后，会将所有带Schedule注解的方法注册到注册器中</p>\n<p>Schedule注解属性：cron-表达式，fixDelay-固定延迟、本次执行开始和上次执行结束之间延迟的毫秒，fixRate-固定频率、以固定的时间间隔执行，initialDelay-延迟任务的初始延迟毫秒数</p>\n<p>localExecutor：使用ScheduledThreadPoolExecutor实现，单线程执行，内部采用的是延迟队列DelayQueue。由于是单线程执行，因此不适用于任务多，间隔短的情况，因为第一个任务执行未完成时将会导致第二个任务延迟执行。</p>\n<h2 id=\"登录认证权限框架\"><a href=\"#登录认证权限框架\" class=\"headerlink\" title=\"登录认证权限框架\"></a>登录认证权限框架</h2><h3 id=\"为什么选shiro\"><a href=\"#为什么选shiro\" class=\"headerlink\" title=\"为什么选shiro\"></a>为什么选shiro</h3><p>登录认证权限管理主要都是通过过滤器来实现对应的逻辑，shiro在设计上比springSecurity简单许多，不需要繁杂的配置，再加上SpringSecurity功能更加丰富，因此其设计上会更加复杂，上手起来会比较困难，由于只需要认证和鉴权两个核心功能，因此选择了更加轻量级的shiro。</p>\n<p>RBAC:基于角色的权限管理，通过用户的角色与其对应的权限实现权限安全管理。</p>\n<h2 id=\"JWTtoken和其他认证的比较\"><a href=\"#JWTtoken和其他认证的比较\" class=\"headerlink\" title=\"JWTtoken和其他认证的比较\"></a>JWTtoken和其他认证的比较</h2><p>jwt是一种身份认证的机制，使用jwt可以在客户端和服务端建立起可靠的通信。</p>\n<h3 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h3><ol>\n<li>header头部-jwt和加密算法</li>\n<li>payload-设置token信息主题 用户id以及其他信息签发时间签发者过期时间等</li>\n<li>signature-使用非对称加密算法将base64加密过的头部和payload再次通过密钥加密后就可以生成token。解析时也是一样，只需要验证token即可判断是否登录</li>\n</ol>\n<h3 id=\"单点登录：在不同的系统之间，只需要登录一次，就能访问其他相互信任的系统。\"><a href=\"#单点登录：在不同的系统之间，只需要登录一次，就能访问其他相互信任的系统。\" class=\"headerlink\" title=\"单点登录：在不同的系统之间，只需要登录一次，就能访问其他相互信任的系统。\"></a>单点登录：在不同的系统之间，只需要登录一次，就能访问其他相互信任的系统。</h3><p>同域：通过cookie的顶域，和session共享实现</p>\n<p>不同域：用户访问a系统时，a服务端发现未登录，重定向到单点登录系统，在单点登录系统中完成登录后，会有全局的状态保存，再生成一个凭据回发给a系统，a系统将再发送请求验证凭据的有效性，验证通过后，登陆系统会记录a系统的地址和sessionid，通过则将登陆信息保存在自己的服务端，完成登录。用户访问b系统时，b服务端发现未登录，重定向到单点登录系统，发现已登录，单点登录也生成一个凭据给b系统，b系统记录登录信息。</p>\n<p>注销时，在子系统退出通过凭据到登陆系统删除全局session和子系统和sessionid进行删除</p>\n","length":1568},{"abbrlink":"2930aaf7","_content":"## Hadoop安装\n\n### 配置文件\n\n1. 环境变量配置：修改/hadoop/etc/hadoop/hadoop-env.sh，配置JAVA_HOME\n\n2. 公共属性配置：/hadoop/etc/hadoop/core-site.xml的configuration节点\n\n   ```xml\n   <configuration>\n   \t<!-- 指定 HADOOP 所使用的文件系统 schema （ URI ）， HDFS 的老大（ NameNode ）的地址 -->\n       <property>\n           <name>fs.defaultFS</name>\n           <value>hdfs://master:9000</value>\n       </property>\n       <!-- 指定 hadoop 运行时产生文件的存储目录 -->\n       <property>\n           <name>hadoop.tmp.dir</name>\n           <value>/usr/local/hadoop-3.2.1/tmpdata</value>\n       </property>\n   </configuration>\n   ```\n\n   \n\n3. HDFS配置：修改hdfs-site.xml，添加副本、通讯等配置\n\n   ```xml\n   <configuration>\n       <!-- 指定 HDFS 副本的数量 -->\n       <property>\n           <name>dfs.replication</name>\n           <value>2</value>\n       </property>\n       <!-- 设置 namenode 的 http 通讯地址 -->\n       <property>\n           <name>dfs.namenode.http-address</name>\n           <value>master:50070</value>\n       </property>\n       <!-- 设置 secondarynamenode 的 http 通讯地址 -->\n       <property>\n           <name>dfs.namenode.secondary.http-address</name>\n           <value>master:50090</value>\n       </property>\n       <!-- 设置 namenode 存放的路径 -->\n       <property>\n           <name>dfs.namenode.name.dir</name>\n           <value>/usr/local/hadoop-3.2.1/namenode</value>\n       </property>\n       <!-- 设置 datanode 存放的路径 -->\n       <property>\n           <name>dfs.datanode.data.dir</name>\n           <value>/usr/local/hadoop-3.2.1/datanode</value>\n       </property>\n   </configuration>\n   ```\n\n   \n\n4. MapReduce配置：修改 mapred-site.xml\n\n   ```xml\n   <configuration>\n   \t<!-- 指定 mr 运行在 yarn 上 -->\n       <property>\n           <name>mapreduce.framework.name</name>\n           <value>yarn</value>\n       </property>\n       <property>\n           <name>yarn.app.mapreduce.am.env</name>\n           <value>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.2.1</value>\n       </property>\n       <property>\n           <name>mapreduce.map.env</name>\n           <value>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.2.1</value>\n       </property>\n       <property>\n           <name>mapreduce.reduce.env</name>\n           <value>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.2.1</value>\n       </property>\n   </configuration>\n   ```\n\n   \n\n5. YARN配置：修改 yarn-site.xml\n\n   ```xml\n   <configuration>\n       <!-- 指定 YARN 的老大（ ResourceManager ）的地址 -->\n       <property>\n           <name>yarn.resourcemanager.hostname</name>\n           <value>master</value>\n       </property>\n       <!-- reducer 获取数据的方式 -->\n       <property>\n           <name>yarn.nodemanager.aux-services</name>\n           <value>mapreduce_shuffle</value>\n       </property>\n   </configuration>\n   ```\n\n   \n\n6. datanode节点声明：workers配置\n\n   ```bash\n   vim workers\n   slave01\n   slave02\n   ```\n\n7. 修改环境变量\n\n   ```bash\n   vim /etc/profile\n   # 增加\n   export HADOOP_HOME=/usr/local/hadoop-3.2.1\n   # 增加\n   export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin\n   \n   source /etc/profile\n   ```\n\n   \n\n8. 通过scp复制到其他的worker节点\n\n   ```bash\n   scp -r /usr/local/hadoop-3.2.1/ root@slave01:/usr/local/\n   scp /etc/profile root@slave01:/etc/\n   ```\n\n   \n\n9. 格式化namenode\n\n   ```bash\n   hadoop namenode -format\n   ```\n\n   \n\n10. 启动\n\n    ```bash\n    # 如果 HDFS 分布式文件系统与 Yarn 同时启动，停止 stop-all.sh\n    start-all.sh\n    # 单独启动：\n    # 启动 HDFS 分布式文件系统 ，停止 stop-dfs.sh\n    start-dfs.sh\n    # 启动 Yarn 资源管理器，停止 stop-yarn.sh\n    start-yarn.sh\n    # 启动完成后可通过jps查看进程\n    jps\n    ```\n\n    root用户可能启动报用户未指定异常\n\n    ![image-20200722110318881](C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200722110318881.png)\n\n    通过修改env.sh指定用户\n\n    ```bash\n    export HDFS_NAMENODE_USER=root\n    export HDFS_DATANODE_USER=root\n    export HDFS_SECONDARYNAMENODE_USER=root\n    export YARN_RESOURCEMANAGER_USER=root\n    export YARN_NODEMANAGER_USER=root\n    ```\n\n    \n\n### 基本命令\n\n| 命令                             | 说明           |\n| -------------------------------- | -------------- |\n| hdfs dfs -ls /                   | 查看目录       |\n| hdfs dfs -mkdir /xxx             | 创建目录       |\n| hdfs dfs -put xx.txt /path       | 上传文件到hdfs |\n| hdfs dfs -get /xx.txt /localPath | 下载到本地     |\n| hdfs dfs -cat /xx.txt            | 查看文件内容   |\n| hadoop dfs -rm -r /path          | 删除文件夹     |\n\n## Spark安装\n\n### 安装Scala语言\n\n1. 解压，移动到目标目录\n\n   ```bash\n   tar -zxvf scala-2.11.0.tgz\n   ```\n\n2. 增加环境变量\n\n   ```bash\n   vi /etc/profile\n   export SCALA_HOME=/usr/local/scala-2.11.0\n   export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$SCALA_HOME/bin\n   ```\n\n   \n\n3. 复制到其他slave\n\n   ```bash\n   scp -r scala-2.11.0 root@slave01:/xxx\n   \n   scp /etc/profile root@slave01:/etc/\n   ```\n\n   \n\n### Spark组件安装\n\n1. 解压，移动到目标目录\n\n2. 修改配置文件 /spark/conf/spark-env.sh\n\n   ```bash\n   export JAVA_HOME=/usr/local/jdk1.8.0_202\n   export SCALA_HOME=/usr/local/scala-2.11.0\n   export HADOOP_HOME=/usr/local/hadoop-3.2.1\n   export HADOOP_CONF_DIR=/usr/local/hadoop-3.2.1/etc/hadoop\n   export SPARK_MASTER_IP=master\n   export SPARK_WORKER_MEMORY=1g\n   export SPARK_WORKER_CORES=1\n   export SPARK_WORKER_INSTANCES=1\n   ```\n\n   \n\n3. 配置slaves\n\n   ```bash\n   vim slaves\n   #插入\n   slave01\n   slave02\n   ```\n\n   \n\n4. 启动（注意指定spark启动，因为和hadoop文件相同）","source":"_drafts/毕业实习.md","raw":"---\nabbrlink: 2930aaf7\n---\n## Hadoop安装\n\n### 配置文件\n\n1. 环境变量配置：修改/hadoop/etc/hadoop/hadoop-env.sh，配置JAVA_HOME\n\n2. 公共属性配置：/hadoop/etc/hadoop/core-site.xml的configuration节点\n\n   ```xml\n   <configuration>\n   \t<!-- 指定 HADOOP 所使用的文件系统 schema （ URI ）， HDFS 的老大（ NameNode ）的地址 -->\n       <property>\n           <name>fs.defaultFS</name>\n           <value>hdfs://master:9000</value>\n       </property>\n       <!-- 指定 hadoop 运行时产生文件的存储目录 -->\n       <property>\n           <name>hadoop.tmp.dir</name>\n           <value>/usr/local/hadoop-3.2.1/tmpdata</value>\n       </property>\n   </configuration>\n   ```\n\n   \n\n3. HDFS配置：修改hdfs-site.xml，添加副本、通讯等配置\n\n   ```xml\n   <configuration>\n       <!-- 指定 HDFS 副本的数量 -->\n       <property>\n           <name>dfs.replication</name>\n           <value>2</value>\n       </property>\n       <!-- 设置 namenode 的 http 通讯地址 -->\n       <property>\n           <name>dfs.namenode.http-address</name>\n           <value>master:50070</value>\n       </property>\n       <!-- 设置 secondarynamenode 的 http 通讯地址 -->\n       <property>\n           <name>dfs.namenode.secondary.http-address</name>\n           <value>master:50090</value>\n       </property>\n       <!-- 设置 namenode 存放的路径 -->\n       <property>\n           <name>dfs.namenode.name.dir</name>\n           <value>/usr/local/hadoop-3.2.1/namenode</value>\n       </property>\n       <!-- 设置 datanode 存放的路径 -->\n       <property>\n           <name>dfs.datanode.data.dir</name>\n           <value>/usr/local/hadoop-3.2.1/datanode</value>\n       </property>\n   </configuration>\n   ```\n\n   \n\n4. MapReduce配置：修改 mapred-site.xml\n\n   ```xml\n   <configuration>\n   \t<!-- 指定 mr 运行在 yarn 上 -->\n       <property>\n           <name>mapreduce.framework.name</name>\n           <value>yarn</value>\n       </property>\n       <property>\n           <name>yarn.app.mapreduce.am.env</name>\n           <value>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.2.1</value>\n       </property>\n       <property>\n           <name>mapreduce.map.env</name>\n           <value>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.2.1</value>\n       </property>\n       <property>\n           <name>mapreduce.reduce.env</name>\n           <value>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.2.1</value>\n       </property>\n   </configuration>\n   ```\n\n   \n\n5. YARN配置：修改 yarn-site.xml\n\n   ```xml\n   <configuration>\n       <!-- 指定 YARN 的老大（ ResourceManager ）的地址 -->\n       <property>\n           <name>yarn.resourcemanager.hostname</name>\n           <value>master</value>\n       </property>\n       <!-- reducer 获取数据的方式 -->\n       <property>\n           <name>yarn.nodemanager.aux-services</name>\n           <value>mapreduce_shuffle</value>\n       </property>\n   </configuration>\n   ```\n\n   \n\n6. datanode节点声明：workers配置\n\n   ```bash\n   vim workers\n   slave01\n   slave02\n   ```\n\n7. 修改环境变量\n\n   ```bash\n   vim /etc/profile\n   # 增加\n   export HADOOP_HOME=/usr/local/hadoop-3.2.1\n   # 增加\n   export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin\n   \n   source /etc/profile\n   ```\n\n   \n\n8. 通过scp复制到其他的worker节点\n\n   ```bash\n   scp -r /usr/local/hadoop-3.2.1/ root@slave01:/usr/local/\n   scp /etc/profile root@slave01:/etc/\n   ```\n\n   \n\n9. 格式化namenode\n\n   ```bash\n   hadoop namenode -format\n   ```\n\n   \n\n10. 启动\n\n    ```bash\n    # 如果 HDFS 分布式文件系统与 Yarn 同时启动，停止 stop-all.sh\n    start-all.sh\n    # 单独启动：\n    # 启动 HDFS 分布式文件系统 ，停止 stop-dfs.sh\n    start-dfs.sh\n    # 启动 Yarn 资源管理器，停止 stop-yarn.sh\n    start-yarn.sh\n    # 启动完成后可通过jps查看进程\n    jps\n    ```\n\n    root用户可能启动报用户未指定异常\n\n    ![image-20200722110318881](C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200722110318881.png)\n\n    通过修改env.sh指定用户\n\n    ```bash\n    export HDFS_NAMENODE_USER=root\n    export HDFS_DATANODE_USER=root\n    export HDFS_SECONDARYNAMENODE_USER=root\n    export YARN_RESOURCEMANAGER_USER=root\n    export YARN_NODEMANAGER_USER=root\n    ```\n\n    \n\n### 基本命令\n\n| 命令                             | 说明           |\n| -------------------------------- | -------------- |\n| hdfs dfs -ls /                   | 查看目录       |\n| hdfs dfs -mkdir /xxx             | 创建目录       |\n| hdfs dfs -put xx.txt /path       | 上传文件到hdfs |\n| hdfs dfs -get /xx.txt /localPath | 下载到本地     |\n| hdfs dfs -cat /xx.txt            | 查看文件内容   |\n| hadoop dfs -rm -r /path          | 删除文件夹     |\n\n## Spark安装\n\n### 安装Scala语言\n\n1. 解压，移动到目标目录\n\n   ```bash\n   tar -zxvf scala-2.11.0.tgz\n   ```\n\n2. 增加环境变量\n\n   ```bash\n   vi /etc/profile\n   export SCALA_HOME=/usr/local/scala-2.11.0\n   export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$SCALA_HOME/bin\n   ```\n\n   \n\n3. 复制到其他slave\n\n   ```bash\n   scp -r scala-2.11.0 root@slave01:/xxx\n   \n   scp /etc/profile root@slave01:/etc/\n   ```\n\n   \n\n### Spark组件安装\n\n1. 解压，移动到目标目录\n\n2. 修改配置文件 /spark/conf/spark-env.sh\n\n   ```bash\n   export JAVA_HOME=/usr/local/jdk1.8.0_202\n   export SCALA_HOME=/usr/local/scala-2.11.0\n   export HADOOP_HOME=/usr/local/hadoop-3.2.1\n   export HADOOP_CONF_DIR=/usr/local/hadoop-3.2.1/etc/hadoop\n   export SPARK_MASTER_IP=master\n   export SPARK_WORKER_MEMORY=1g\n   export SPARK_WORKER_CORES=1\n   export SPARK_WORKER_INSTANCES=1\n   ```\n\n   \n\n3. 配置slaves\n\n   ```bash\n   vim slaves\n   #插入\n   slave01\n   slave02\n   ```\n\n   \n\n4. 启动（注意指定spark启动，因为和hadoop文件相同）","slug":"毕业实习","published":0,"date":"2020-07-22T02:13:31.208Z","updated":"2020-07-26T09:37:11.454Z","title":"毕业实习","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1l000hz4ej5dy6bxii","content":"<h2 id=\"Hadoop安装\"><a href=\"#Hadoop安装\" class=\"headerlink\" title=\"Hadoop安装\"></a>Hadoop安装</h2><h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><ol>\n<li><p>环境变量配置：修改/hadoop/etc/hadoop/hadoop-env.sh，配置JAVA_HOME</p>\n</li>\n<li><p>公共属性配置：/hadoop/etc/hadoop/core-site.xml的configuration节点</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 指定 HADOOP 所使用的文件系统 schema （ URI ）， HDFS 的老大（ NameNode ）的地址 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://master:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定 hadoop 运行时产生文件的存储目录 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/hadoop-3.2.1/tmpdata<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>HDFS配置：修改hdfs-site.xml，添加副本、通讯等配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定 HDFS 副本的数量 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置 namenode 的 http 通讯地址 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.http-address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>master:50070<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置 secondarynamenode 的 http 通讯地址 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>master:50090<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置 namenode 存放的路径 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/hadoop-3.2.1/namenode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置 datanode 存放的路径 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.datanode.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/hadoop-3.2.1/datanode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>MapReduce配置：修改 mapred-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 指定 mr 运行在 yarn 上 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.2.1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.map.env<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.2.1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.reduce.env<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.2.1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>YARN配置：修改 yarn-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定 YARN 的老大（ ResourceManager ）的地址 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.resourcemanager.hostname<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>master<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- reducer 获取数据的方式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"6\">\n<li><p>datanode节点声明：workers配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim workers</span><br><span class=\"line\">slave01</span><br><span class=\"line\">slave02</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 增加</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_HOME=/usr/<span class=\"built_in\">local</span>/hadoop-3.2.1</span><br><span class=\"line\"><span class=\"comment\"># 增加</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$HADOOP_HOME</span>/bin:<span class=\"variable\">$HADOOP_HOME</span>/sbin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"8\">\n<li><p>通过scp复制到其他的worker节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /usr/<span class=\"built_in\">local</span>/hadoop-3.2.1/ root@slave01:/usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">scp /etc/profile root@slave01:/etc/</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"9\">\n<li><p>格式化namenode</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop namenode -format</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"10\">\n<li><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果 HDFS 分布式文件系统与 Yarn 同时启动，停止 stop-all.sh</span></span><br><span class=\"line\">start-all.sh</span><br><span class=\"line\"><span class=\"comment\"># 单独启动：</span></span><br><span class=\"line\"><span class=\"comment\"># 启动 HDFS 分布式文件系统 ，停止 stop-dfs.sh</span></span><br><span class=\"line\">start-dfs.sh</span><br><span class=\"line\"><span class=\"comment\"># 启动 Yarn 资源管理器，停止 stop-yarn.sh</span></span><br><span class=\"line\">start-yarn.sh</span><br><span class=\"line\"><span class=\"comment\"># 启动完成后可通过jps查看进程</span></span><br><span class=\"line\">jps</span><br></pre></td></tr></table></figure>\n\n<p>root用户可能启动报用户未指定异常</p>\n<p><img src=\"C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200722110318881.png\" alt=\"image-20200722110318881\"></p>\n<p>通过修改env.sh指定用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> HDFS_NAMENODE_USER=root</span><br><span class=\"line\"><span class=\"built_in\">export</span> HDFS_DATANODE_USER=root</span><br><span class=\"line\"><span class=\"built_in\">export</span> HDFS_SECONDARYNAMENODE_USER=root</span><br><span class=\"line\"><span class=\"built_in\">export</span> YARN_RESOURCEMANAGER_USER=root</span><br><span class=\"line\"><span class=\"built_in\">export</span> YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hdfs dfs -ls /</td>\n<td>查看目录</td>\n</tr>\n<tr>\n<td>hdfs dfs -mkdir /xxx</td>\n<td>创建目录</td>\n</tr>\n<tr>\n<td>hdfs dfs -put xx.txt /path</td>\n<td>上传文件到hdfs</td>\n</tr>\n<tr>\n<td>hdfs dfs -get /xx.txt /localPath</td>\n<td>下载到本地</td>\n</tr>\n<tr>\n<td>hdfs dfs -cat /xx.txt</td>\n<td>查看文件内容</td>\n</tr>\n<tr>\n<td>hadoop dfs -rm -r /path</td>\n<td>删除文件夹</td>\n</tr>\n</tbody></table>\n<h2 id=\"Spark安装\"><a href=\"#Spark安装\" class=\"headerlink\" title=\"Spark安装\"></a>Spark安装</h2><h3 id=\"安装Scala语言\"><a href=\"#安装Scala语言\" class=\"headerlink\" title=\"安装Scala语言\"></a>安装Scala语言</h3><ol>\n<li><p>解压，移动到目标目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf scala-2.11.0.tgz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增加环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> SCALA_HOME=/usr/<span class=\"built_in\">local</span>/scala-2.11.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$HADOOP_HOME</span>/bin:<span class=\"variable\">$HADOOP_HOME</span>/sbin:<span class=\"variable\">$SCALA_HOME</span>/bin</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>复制到其他slave</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r scala-2.11.0 root@slave01:/xxx</span><br><span class=\"line\"></span><br><span class=\"line\">scp /etc/profile root@slave01:/etc/</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h3 id=\"Spark组件安装\"><a href=\"#Spark组件安装\" class=\"headerlink\" title=\"Spark组件安装\"></a>Spark组件安装</h3><ol>\n<li><p>解压，移动到目标目录</p>\n</li>\n<li><p>修改配置文件 /spark/conf/spark-env.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/jdk1.8.0_202</span><br><span class=\"line\"><span class=\"built_in\">export</span> SCALA_HOME=/usr/<span class=\"built_in\">local</span>/scala-2.11.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_HOME=/usr/<span class=\"built_in\">local</span>/hadoop-3.2.1</span><br><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_CONF_DIR=/usr/<span class=\"built_in\">local</span>/hadoop-3.2.1/etc/hadoop</span><br><span class=\"line\"><span class=\"built_in\">export</span> SPARK_MASTER_IP=master</span><br><span class=\"line\"><span class=\"built_in\">export</span> SPARK_WORKER_MEMORY=1g</span><br><span class=\"line\"><span class=\"built_in\">export</span> SPARK_WORKER_CORES=1</span><br><span class=\"line\"><span class=\"built_in\">export</span> SPARK_WORKER_INSTANCES=1</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>配置slaves</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim slaves</span><br><span class=\"line\"><span class=\"comment\">#插入</span></span><br><span class=\"line\">slave01</span><br><span class=\"line\">slave02</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"4\">\n<li>启动（注意指定spark启动，因为和hadoop文件相同）</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Hadoop安装\"><a href=\"#Hadoop安装\" class=\"headerlink\" title=\"Hadoop安装\"></a>Hadoop安装</h2><h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><ol>\n<li><p>环境变量配置：修改/hadoop/etc/hadoop/hadoop-env.sh，配置JAVA_HOME</p>\n</li>\n<li><p>公共属性配置：/hadoop/etc/hadoop/core-site.xml的configuration节点</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 指定 HADOOP 所使用的文件系统 schema （ URI ）， HDFS 的老大（ NameNode ）的地址 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://master:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定 hadoop 运行时产生文件的存储目录 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/hadoop-3.2.1/tmpdata<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>HDFS配置：修改hdfs-site.xml，添加副本、通讯等配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定 HDFS 副本的数量 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置 namenode 的 http 通讯地址 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.http-address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>master:50070<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置 secondarynamenode 的 http 通讯地址 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>master:50090<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置 namenode 存放的路径 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.name.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/hadoop-3.2.1/namenode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置 datanode 存放的路径 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.datanode.data.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/hadoop-3.2.1/datanode<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>MapReduce配置：修改 mapred-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 指定 mr 运行在 yarn 上 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.2.1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.map.env<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.2.1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.reduce.env<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop-3.2.1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>YARN配置：修改 yarn-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定 YARN 的老大（ ResourceManager ）的地址 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.resourcemanager.hostname<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>master<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- reducer 获取数据的方式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"6\">\n<li><p>datanode节点声明：workers配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim workers</span><br><span class=\"line\">slave01</span><br><span class=\"line\">slave02</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 增加</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_HOME=/usr/<span class=\"built_in\">local</span>/hadoop-3.2.1</span><br><span class=\"line\"><span class=\"comment\"># 增加</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$HADOOP_HOME</span>/bin:<span class=\"variable\">$HADOOP_HOME</span>/sbin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"8\">\n<li><p>通过scp复制到其他的worker节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /usr/<span class=\"built_in\">local</span>/hadoop-3.2.1/ root@slave01:/usr/<span class=\"built_in\">local</span>/</span><br><span class=\"line\">scp /etc/profile root@slave01:/etc/</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"9\">\n<li><p>格式化namenode</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop namenode -format</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"10\">\n<li><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果 HDFS 分布式文件系统与 Yarn 同时启动，停止 stop-all.sh</span></span><br><span class=\"line\">start-all.sh</span><br><span class=\"line\"><span class=\"comment\"># 单独启动：</span></span><br><span class=\"line\"><span class=\"comment\"># 启动 HDFS 分布式文件系统 ，停止 stop-dfs.sh</span></span><br><span class=\"line\">start-dfs.sh</span><br><span class=\"line\"><span class=\"comment\"># 启动 Yarn 资源管理器，停止 stop-yarn.sh</span></span><br><span class=\"line\">start-yarn.sh</span><br><span class=\"line\"><span class=\"comment\"># 启动完成后可通过jps查看进程</span></span><br><span class=\"line\">jps</span><br></pre></td></tr></table></figure>\n\n<p>root用户可能启动报用户未指定异常</p>\n<p><img src=\"C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200722110318881.png\" alt=\"image-20200722110318881\"></p>\n<p>通过修改env.sh指定用户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> HDFS_NAMENODE_USER=root</span><br><span class=\"line\"><span class=\"built_in\">export</span> HDFS_DATANODE_USER=root</span><br><span class=\"line\"><span class=\"built_in\">export</span> HDFS_SECONDARYNAMENODE_USER=root</span><br><span class=\"line\"><span class=\"built_in\">export</span> YARN_RESOURCEMANAGER_USER=root</span><br><span class=\"line\"><span class=\"built_in\">export</span> YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hdfs dfs -ls /</td>\n<td>查看目录</td>\n</tr>\n<tr>\n<td>hdfs dfs -mkdir /xxx</td>\n<td>创建目录</td>\n</tr>\n<tr>\n<td>hdfs dfs -put xx.txt /path</td>\n<td>上传文件到hdfs</td>\n</tr>\n<tr>\n<td>hdfs dfs -get /xx.txt /localPath</td>\n<td>下载到本地</td>\n</tr>\n<tr>\n<td>hdfs dfs -cat /xx.txt</td>\n<td>查看文件内容</td>\n</tr>\n<tr>\n<td>hadoop dfs -rm -r /path</td>\n<td>删除文件夹</td>\n</tr>\n</tbody></table>\n<h2 id=\"Spark安装\"><a href=\"#Spark安装\" class=\"headerlink\" title=\"Spark安装\"></a>Spark安装</h2><h3 id=\"安装Scala语言\"><a href=\"#安装Scala语言\" class=\"headerlink\" title=\"安装Scala语言\"></a>安装Scala语言</h3><ol>\n<li><p>解压，移动到目标目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf scala-2.11.0.tgz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增加环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br><span class=\"line\"><span class=\"built_in\">export</span> SCALA_HOME=/usr/<span class=\"built_in\">local</span>/scala-2.11.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$HADOOP_HOME</span>/bin:<span class=\"variable\">$HADOOP_HOME</span>/sbin:<span class=\"variable\">$SCALA_HOME</span>/bin</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>复制到其他slave</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r scala-2.11.0 root@slave01:/xxx</span><br><span class=\"line\"></span><br><span class=\"line\">scp /etc/profile root@slave01:/etc/</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h3 id=\"Spark组件安装\"><a href=\"#Spark组件安装\" class=\"headerlink\" title=\"Spark组件安装\"></a>Spark组件安装</h3><ol>\n<li><p>解压，移动到目标目录</p>\n</li>\n<li><p>修改配置文件 /spark/conf/spark-env.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/<span class=\"built_in\">local</span>/jdk1.8.0_202</span><br><span class=\"line\"><span class=\"built_in\">export</span> SCALA_HOME=/usr/<span class=\"built_in\">local</span>/scala-2.11.0</span><br><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_HOME=/usr/<span class=\"built_in\">local</span>/hadoop-3.2.1</span><br><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_CONF_DIR=/usr/<span class=\"built_in\">local</span>/hadoop-3.2.1/etc/hadoop</span><br><span class=\"line\"><span class=\"built_in\">export</span> SPARK_MASTER_IP=master</span><br><span class=\"line\"><span class=\"built_in\">export</span> SPARK_WORKER_MEMORY=1g</span><br><span class=\"line\"><span class=\"built_in\">export</span> SPARK_WORKER_CORES=1</span><br><span class=\"line\"><span class=\"built_in\">export</span> SPARK_WORKER_INSTANCES=1</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>配置slaves</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim slaves</span><br><span class=\"line\"><span class=\"comment\">#插入</span></span><br><span class=\"line\">slave01</span><br><span class=\"line\">slave02</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"4\">\n<li>启动（注意指定spark启动，因为和hadoop文件相同）</li>\n</ol>\n","length":4062},{"title":"1014. 最佳观光组合","abbrlink":"6cc1ef4f","_content":"\n> 给定正整数数组 A，A[i] 表示第 i 个观光景点的评分，并且两个景点 i 和 j 之间的距离为 j - i。\n>\n> 一对景点（i < j）组成的观光组合的得分为（A[i] + A[j] + i - j）：景点的评分之和减去它们两者之间的距离。\n>\n> 返回一对观光景点能取得的最高分。\n>\n\n<!-- more -->\n\n```java\n示例：\n    输入：[8,1,5,2,6]\n    输出：11\n    解释：i=0,j=2,A[i]+A[j]+i-j=8+5+0-2=11\n```\n\n### 💡 思路\n\n在数组中寻找的问题通常最直观的思路是暴力的遍历，这道题同样可以使用这种方法，从前往后枚举每一个元素，并对该元素遍历除了本身之外的其他所有元素，在这个过程中更新最大值`max`。由于数据规模是`50000`，因此这种`o(n²)`的做法是会超时的。\n\n{% fold 代码 %}\n\n```java\npublic int maxScoreSightseeingPair(int[] A) {\n    if(A==null || A.length==0){\n        return -1;\n    }\n    int n = A.length;\n    int max = Integer.MIN_VALUE;\n    //暴力-超时\n    for(int i = 0; i < n; i++){\n        for(int j = 0 ; j < n; j++){\n            if(j != i){\n                max = Math.max(max, A[i]+A[j]-Math.abs(i-j));\n            }\n\n        }\n    }\n    return max;\n}\n```\n\n\n\n{% endfold %}\n\n### 📈 优化\n\n在暴力做法中，对于得分公式`A[i] + A[j] + i - j`，我们将其划分成了`A[i] + i`和`A[j]-j`两部分，在外层循环确定一个`A[i]+i`，在内层循环中枚举所有`A[j]-j`，以此找到最大值。这导致了时间复杂度是`O(n²)`的，那么我们如何将这两层循环减为一层呢？答案是从这两部分出发，只要两部分都是最大值，那么组合结果一定是最大值。我们可以在遍历过程中，同时维护原本外层循环的`A[i]+i`始终为最大值即可通过一层循环求出结果。\n\n### 🧾 代码\n\n```java\npublic int maxScoreSightseeingPair(int[] A) {\n    if(A==null || A.length==0){\n        return -1;\n    }\n    int n = A.length;\n    int max = Integer.MIN_VALUE;\n\n    //遍历的同时维护a始终为最大的A[i]+i值\n    int a = A[0] + 0;\n    for (int i = 1; i < n; i++) {\n        max = Integer.max(max, a + A[i] - i);\n        a = Integer.max(a, A[i] + i);\n    }\n    return max;\n}\n```\n\n","source":"_posts/1014-最佳观光组合.md","raw":"---\ntitle: 1014. 最佳观光组合\ntags:\n  - 数组\ncategories:\n  - Leetcode\nabbrlink: 6cc1ef4f\n---\n\n> 给定正整数数组 A，A[i] 表示第 i 个观光景点的评分，并且两个景点 i 和 j 之间的距离为 j - i。\n>\n> 一对景点（i < j）组成的观光组合的得分为（A[i] + A[j] + i - j）：景点的评分之和减去它们两者之间的距离。\n>\n> 返回一对观光景点能取得的最高分。\n>\n\n<!-- more -->\n\n```java\n示例：\n    输入：[8,1,5,2,6]\n    输出：11\n    解释：i=0,j=2,A[i]+A[j]+i-j=8+5+0-2=11\n```\n\n### 💡 思路\n\n在数组中寻找的问题通常最直观的思路是暴力的遍历，这道题同样可以使用这种方法，从前往后枚举每一个元素，并对该元素遍历除了本身之外的其他所有元素，在这个过程中更新最大值`max`。由于数据规模是`50000`，因此这种`o(n²)`的做法是会超时的。\n\n{% fold 代码 %}\n\n```java\npublic int maxScoreSightseeingPair(int[] A) {\n    if(A==null || A.length==0){\n        return -1;\n    }\n    int n = A.length;\n    int max = Integer.MIN_VALUE;\n    //暴力-超时\n    for(int i = 0; i < n; i++){\n        for(int j = 0 ; j < n; j++){\n            if(j != i){\n                max = Math.max(max, A[i]+A[j]-Math.abs(i-j));\n            }\n\n        }\n    }\n    return max;\n}\n```\n\n\n\n{% endfold %}\n\n### 📈 优化\n\n在暴力做法中，对于得分公式`A[i] + A[j] + i - j`，我们将其划分成了`A[i] + i`和`A[j]-j`两部分，在外层循环确定一个`A[i]+i`，在内层循环中枚举所有`A[j]-j`，以此找到最大值。这导致了时间复杂度是`O(n²)`的，那么我们如何将这两层循环减为一层呢？答案是从这两部分出发，只要两部分都是最大值，那么组合结果一定是最大值。我们可以在遍历过程中，同时维护原本外层循环的`A[i]+i`始终为最大值即可通过一层循环求出结果。\n\n### 🧾 代码\n\n```java\npublic int maxScoreSightseeingPair(int[] A) {\n    if(A==null || A.length==0){\n        return -1;\n    }\n    int n = A.length;\n    int max = Integer.MIN_VALUE;\n\n    //遍历的同时维护a始终为最大的A[i]+i值\n    int a = A[0] + 0;\n    for (int i = 1; i < n; i++) {\n        max = Integer.max(max, a + A[i] - i);\n        a = Integer.max(a, A[i] + i);\n    }\n    return max;\n}\n```\n\n","slug":"1014-最佳观光组合","published":1,"date":"2020-06-17T11:44:59.651Z","updated":"2020-06-17T12:03:42.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1m000iz4ejfs222cdy","content":"<blockquote>\n<p>给定正整数数组 A，A[i] 表示第 i 个观光景点的评分，并且两个景点 i 和 j 之间的距离为 j - i。</p>\n<p>一对景点（i &lt; j）组成的观光组合的得分为（A[i] + A[j] + i - j）：景点的评分之和减去它们两者之间的距离。</p>\n<p>返回一对观光景点能取得的最高分。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例：</span><br><span class=\"line\">    输入：[<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">    输出：<span class=\"number\">11</span></span><br><span class=\"line\">    解释：i=<span class=\"number\">0</span>,j=<span class=\"number\">2</span>,A[i]+A[j]+i-j=<span class=\"number\">8</span>+<span class=\"number\">5</span>+<span class=\"number\">0</span>-<span class=\"number\">2</span>=<span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>在数组中寻找的问题通常最直观的思路是暴力的遍历，这道题同样可以使用这种方法，从前往后枚举每一个元素，并对该元素遍历除了本身之外的其他所有元素，在这个过程中更新最大值<code>max</code>。由于数据规模是<code>50000</code>，因此这种<code>o(n²)</code>的做法是会超时的。</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">代码</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxScoreSightseeingPair</span><span class=\"params\">(<span class=\"keyword\">int</span>[] A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A==<span class=\"keyword\">null</span> || A.length==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = A.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\">    <span class=\"comment\">//暴力-超时</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span> ; j &lt; n; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j != i)&#123;</span><br><span class=\"line\">                max = Math.max(max, A[i]+A[j]-Math.abs(i-j));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</div></div>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>在暴力做法中，对于得分公式<code>A[i] + A[j] + i - j</code>，我们将其划分成了<code>A[i] + i</code>和<code>A[j]-j</code>两部分，在外层循环确定一个<code>A[i]+i</code>，在内层循环中枚举所有<code>A[j]-j</code>，以此找到最大值。这导致了时间复杂度是<code>O(n²)</code>的，那么我们如何将这两层循环减为一层呢？答案是从这两部分出发，只要两部分都是最大值，那么组合结果一定是最大值。我们可以在遍历过程中，同时维护原本外层循环的<code>A[i]+i</code>始终为最大值即可通过一层循环求出结果。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxScoreSightseeingPair</span><span class=\"params\">(<span class=\"keyword\">int</span>[] A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A==<span class=\"keyword\">null</span> || A.length==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = A.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历的同时维护a始终为最大的A[i]+i值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = A[<span class=\"number\">0</span>] + <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        max = Integer.max(max, a + A[i] - i);</span><br><span class=\"line\">        a = Integer.max(a, A[i] + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>给定正整数数组 A，A[i] 表示第 i 个观光景点的评分，并且两个景点 i 和 j 之间的距离为 j - i。</p>\n<p>一对景点（i &lt; j）组成的观光组合的得分为（A[i] + A[j] + i - j）：景点的评分之和减去它们两者之间的距离。</p>\n<p>返回一对观光景点能取得的最高分。</p>\n</blockquote>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例：</span><br><span class=\"line\">    输入：[<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">    输出：<span class=\"number\">11</span></span><br><span class=\"line\">    解释：i=<span class=\"number\">0</span>,j=<span class=\"number\">2</span>,A[i]+A[j]+i-j=<span class=\"number\">8</span>+<span class=\"number\">5</span>+<span class=\"number\">0</span>-<span class=\"number\">2</span>=<span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>在数组中寻找的问题通常最直观的思路是暴力的遍历，这道题同样可以使用这种方法，从前往后枚举每一个元素，并对该元素遍历除了本身之外的其他所有元素，在这个过程中更新最大值<code>max</code>。由于数据规模是<code>50000</code>，因此这种<code>o(n²)</code>的做法是会超时的。</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">代码</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxScoreSightseeingPair</span><span class=\"params\">(<span class=\"keyword\">int</span>[] A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A==<span class=\"keyword\">null</span> || A.length==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = A.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\">    <span class=\"comment\">//暴力-超时</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span> ; j &lt; n; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j != i)&#123;</span><br><span class=\"line\">                max = Math.max(max, A[i]+A[j]-Math.abs(i-j));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</div></div>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>在暴力做法中，对于得分公式<code>A[i] + A[j] + i - j</code>，我们将其划分成了<code>A[i] + i</code>和<code>A[j]-j</code>两部分，在外层循环确定一个<code>A[i]+i</code>，在内层循环中枚举所有<code>A[j]-j</code>，以此找到最大值。这导致了时间复杂度是<code>O(n²)</code>的，那么我们如何将这两层循环减为一层呢？答案是从这两部分出发，只要两部分都是最大值，那么组合结果一定是最大值。我们可以在遍历过程中，同时维护原本外层循环的<code>A[i]+i</code>始终为最大值即可通过一层循环求出结果。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxScoreSightseeingPair</span><span class=\"params\">(<span class=\"keyword\">int</span>[] A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A==<span class=\"keyword\">null</span> || A.length==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = A.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = Integer.MIN_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历的同时维护a始终为最大的A[i]+i值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = A[<span class=\"number\">0</span>] + <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        max = Integer.max(max, a + A[i] - i);</span><br><span class=\"line\">        a = Integer.max(a, A[i] + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jun 17 2020 20:03:42 GMT+0800 (中国标准时间)","title":"1014. 最佳观光组合","path":"posts/6cc1ef4f.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>给定正整数数组 A，A[i] 表示第 i 个观光景点的评分，并且两个景点 i 和 j 之间的距离为 j - i。</p>\n<p>一对景点（i &lt; j）组成的观光组合的得分为（A[i] + A[j] + i - j）：景点的评分之和减去它们两者之间的距离。</p>\n<p>返回一对观光景点能取得的最高分。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-06-17T11:44:59.651Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-06-17T11:44:59.651Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["数组"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1119},{"abbrlink":"118b8ca3","_content":"## 词法分析\n\n#### 1. 根据语言写出文法产生式\n\n上下文有关文法（1型）：产生式左部长度小于等于右部，因此无空串产生式\n\n上下文无关文法（2型）：左部是一个非终结符\n\n正规文法（3型）：左部是非终结符，右部要么是终结符，要么是在终结符左部 /右部增加一个非终结符（左线性/右线性）\n\n#### 2. 构造与某一正规式等价自小DFA\n\n1. 根据正规式画出对应状态的状态转换图\n2. 根据状态转换图画出对应状态\n3. 根据状态转化矩阵得到重命名的状态转换矩阵\n4. 根据重命名状态转换矩阵得出DFA\n\n#### 3. DFA化简\n\n1. 划分初态集合和终态集合\n2. 划分：根据有没有跨集合，划分\n3. 化简出DFA\n\n## 语法分析\n\n#### 1. 消除左递归\n\n直接左递归：A->Aα | β 消除后 A->βA' , A'->αA' | ε\n\n间接左递归，将间接代入另一个产生式，可以转换成直接左递归\n\n#### 2. LL1分析法\n\n1. LL(1)三个条件\n\n   ```bash\n   1. 有没有左递归\n   2. 有没有回溯（公共左因子）\n   3. 相同左部的select没交集，且右部不能同时推空\n   \n   ```\n\n2. 求first和follow\n\n   first：其产生式右部的最左终结符\n\n   follow：非终结符作为产生式右部时，如果其后面没有任何符号，则加上产生式左部的非终结符的follow集，有非终结符则加上非终结符的first集，有终结符则加上右边第一个终结符。\n\n   select：对A->a，如果a->ε，select(A->a)=first(a)- ε + follow(A)，如果a不能推出空串，则select(A->a) = first(a)\n\n#### 3. 根据产生式写出语法树，短语，直接短语，句柄\n\n短语：每一棵子树的边缘\n\n直接短语：如果子树高度为2，则其边缘为直接短语\n\n句柄：最左的直接短语\n\n#### 4. LR(0)文法\n\n## 语义分析\n\n#### 1. 逆波兰\n\n## 中间代码生成\n\n#### 1. 数组、if语句、while语句翻译\n\n## 优化\n\n","source":"_drafts/编译原理.md","raw":"---\nabbrlink: 118b8ca3\n---\n## 词法分析\n\n#### 1. 根据语言写出文法产生式\n\n上下文有关文法（1型）：产生式左部长度小于等于右部，因此无空串产生式\n\n上下文无关文法（2型）：左部是一个非终结符\n\n正规文法（3型）：左部是非终结符，右部要么是终结符，要么是在终结符左部 /右部增加一个非终结符（左线性/右线性）\n\n#### 2. 构造与某一正规式等价自小DFA\n\n1. 根据正规式画出对应状态的状态转换图\n2. 根据状态转换图画出对应状态\n3. 根据状态转化矩阵得到重命名的状态转换矩阵\n4. 根据重命名状态转换矩阵得出DFA\n\n#### 3. DFA化简\n\n1. 划分初态集合和终态集合\n2. 划分：根据有没有跨集合，划分\n3. 化简出DFA\n\n## 语法分析\n\n#### 1. 消除左递归\n\n直接左递归：A->Aα | β 消除后 A->βA' , A'->αA' | ε\n\n间接左递归，将间接代入另一个产生式，可以转换成直接左递归\n\n#### 2. LL1分析法\n\n1. LL(1)三个条件\n\n   ```bash\n   1. 有没有左递归\n   2. 有没有回溯（公共左因子）\n   3. 相同左部的select没交集，且右部不能同时推空\n   \n   ```\n\n2. 求first和follow\n\n   first：其产生式右部的最左终结符\n\n   follow：非终结符作为产生式右部时，如果其后面没有任何符号，则加上产生式左部的非终结符的follow集，有非终结符则加上非终结符的first集，有终结符则加上右边第一个终结符。\n\n   select：对A->a，如果a->ε，select(A->a)=first(a)- ε + follow(A)，如果a不能推出空串，则select(A->a) = first(a)\n\n#### 3. 根据产生式写出语法树，短语，直接短语，句柄\n\n短语：每一棵子树的边缘\n\n直接短语：如果子树高度为2，则其边缘为直接短语\n\n句柄：最左的直接短语\n\n#### 4. LR(0)文法\n\n## 语义分析\n\n#### 1. 逆波兰\n\n## 中间代码生成\n\n#### 1. 数组、if语句、while语句翻译\n\n## 优化\n\n","slug":"编译原理","published":0,"date":"2020-07-07T02:20:36.124Z","updated":"2020-07-21T15:48:55.774Z","title":"编译原理","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1n000lz4ejbkvqdstq","content":"<h2 id=\"词法分析\"><a href=\"#词法分析\" class=\"headerlink\" title=\"词法分析\"></a>词法分析</h2><h4 id=\"1-根据语言写出文法产生式\"><a href=\"#1-根据语言写出文法产生式\" class=\"headerlink\" title=\"1. 根据语言写出文法产生式\"></a>1. 根据语言写出文法产生式</h4><p>上下文有关文法（1型）：产生式左部长度小于等于右部，因此无空串产生式</p>\n<p>上下文无关文法（2型）：左部是一个非终结符</p>\n<p>正规文法（3型）：左部是非终结符，右部要么是终结符，要么是在终结符左部 /右部增加一个非终结符（左线性/右线性）</p>\n<h4 id=\"2-构造与某一正规式等价自小DFA\"><a href=\"#2-构造与某一正规式等价自小DFA\" class=\"headerlink\" title=\"2. 构造与某一正规式等价自小DFA\"></a>2. 构造与某一正规式等价自小DFA</h4><ol>\n<li>根据正规式画出对应状态的状态转换图</li>\n<li>根据状态转换图画出对应状态</li>\n<li>根据状态转化矩阵得到重命名的状态转换矩阵</li>\n<li>根据重命名状态转换矩阵得出DFA</li>\n</ol>\n<h4 id=\"3-DFA化简\"><a href=\"#3-DFA化简\" class=\"headerlink\" title=\"3. DFA化简\"></a>3. DFA化简</h4><ol>\n<li>划分初态集合和终态集合</li>\n<li>划分：根据有没有跨集合，划分</li>\n<li>化简出DFA</li>\n</ol>\n<h2 id=\"语法分析\"><a href=\"#语法分析\" class=\"headerlink\" title=\"语法分析\"></a>语法分析</h2><h4 id=\"1-消除左递归\"><a href=\"#1-消除左递归\" class=\"headerlink\" title=\"1. 消除左递归\"></a>1. 消除左递归</h4><p>直接左递归：A-&gt;Aα | β 消除后 A-&gt;βA’ , A’-&gt;αA’ | ε</p>\n<p>间接左递归，将间接代入另一个产生式，可以转换成直接左递归</p>\n<h4 id=\"2-LL1分析法\"><a href=\"#2-LL1分析法\" class=\"headerlink\" title=\"2. LL1分析法\"></a>2. LL1分析法</h4><ol>\n<li><p>LL(1)三个条件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 有没有左递归</span><br><span class=\"line\">2. 有没有回溯（公共左因子）</span><br><span class=\"line\">3. 相同左部的select没交集，且右部不能同时推空</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>求first和follow</p>\n<p>first：其产生式右部的最左终结符</p>\n<p>follow：非终结符作为产生式右部时，如果其后面没有任何符号，则加上产生式左部的非终结符的follow集，有非终结符则加上非终结符的first集，有终结符则加上右边第一个终结符。</p>\n<p>select：对A-&gt;a，如果a-&gt;ε，select(A-&gt;a)=first(a)- ε + follow(A)，如果a不能推出空串，则select(A-&gt;a) = first(a)</p>\n</li>\n</ol>\n<h4 id=\"3-根据产生式写出语法树，短语，直接短语，句柄\"><a href=\"#3-根据产生式写出语法树，短语，直接短语，句柄\" class=\"headerlink\" title=\"3. 根据产生式写出语法树，短语，直接短语，句柄\"></a>3. 根据产生式写出语法树，短语，直接短语，句柄</h4><p>短语：每一棵子树的边缘</p>\n<p>直接短语：如果子树高度为2，则其边缘为直接短语</p>\n<p>句柄：最左的直接短语</p>\n<h4 id=\"4-LR-0-文法\"><a href=\"#4-LR-0-文法\" class=\"headerlink\" title=\"4. LR(0)文法\"></a>4. LR(0)文法</h4><h2 id=\"语义分析\"><a href=\"#语义分析\" class=\"headerlink\" title=\"语义分析\"></a>语义分析</h2><h4 id=\"1-逆波兰\"><a href=\"#1-逆波兰\" class=\"headerlink\" title=\"1. 逆波兰\"></a>1. 逆波兰</h4><h2 id=\"中间代码生成\"><a href=\"#中间代码生成\" class=\"headerlink\" title=\"中间代码生成\"></a>中间代码生成</h2><h4 id=\"1-数组、if语句、while语句翻译\"><a href=\"#1-数组、if语句、while语句翻译\" class=\"headerlink\" title=\"1. 数组、if语句、while语句翻译\"></a>1. 数组、if语句、while语句翻译</h4><h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"词法分析\"><a href=\"#词法分析\" class=\"headerlink\" title=\"词法分析\"></a>词法分析</h2><h4 id=\"1-根据语言写出文法产生式\"><a href=\"#1-根据语言写出文法产生式\" class=\"headerlink\" title=\"1. 根据语言写出文法产生式\"></a>1. 根据语言写出文法产生式</h4><p>上下文有关文法（1型）：产生式左部长度小于等于右部，因此无空串产生式</p>\n<p>上下文无关文法（2型）：左部是一个非终结符</p>\n<p>正规文法（3型）：左部是非终结符，右部要么是终结符，要么是在终结符左部 /右部增加一个非终结符（左线性/右线性）</p>\n<h4 id=\"2-构造与某一正规式等价自小DFA\"><a href=\"#2-构造与某一正规式等价自小DFA\" class=\"headerlink\" title=\"2. 构造与某一正规式等价自小DFA\"></a>2. 构造与某一正规式等价自小DFA</h4><ol>\n<li>根据正规式画出对应状态的状态转换图</li>\n<li>根据状态转换图画出对应状态</li>\n<li>根据状态转化矩阵得到重命名的状态转换矩阵</li>\n<li>根据重命名状态转换矩阵得出DFA</li>\n</ol>\n<h4 id=\"3-DFA化简\"><a href=\"#3-DFA化简\" class=\"headerlink\" title=\"3. DFA化简\"></a>3. DFA化简</h4><ol>\n<li>划分初态集合和终态集合</li>\n<li>划分：根据有没有跨集合，划分</li>\n<li>化简出DFA</li>\n</ol>\n<h2 id=\"语法分析\"><a href=\"#语法分析\" class=\"headerlink\" title=\"语法分析\"></a>语法分析</h2><h4 id=\"1-消除左递归\"><a href=\"#1-消除左递归\" class=\"headerlink\" title=\"1. 消除左递归\"></a>1. 消除左递归</h4><p>直接左递归：A-&gt;Aα | β 消除后 A-&gt;βA’ , A’-&gt;αA’ | ε</p>\n<p>间接左递归，将间接代入另一个产生式，可以转换成直接左递归</p>\n<h4 id=\"2-LL1分析法\"><a href=\"#2-LL1分析法\" class=\"headerlink\" title=\"2. LL1分析法\"></a>2. LL1分析法</h4><ol>\n<li><p>LL(1)三个条件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 有没有左递归</span><br><span class=\"line\">2. 有没有回溯（公共左因子）</span><br><span class=\"line\">3. 相同左部的select没交集，且右部不能同时推空</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>求first和follow</p>\n<p>first：其产生式右部的最左终结符</p>\n<p>follow：非终结符作为产生式右部时，如果其后面没有任何符号，则加上产生式左部的非终结符的follow集，有非终结符则加上非终结符的first集，有终结符则加上右边第一个终结符。</p>\n<p>select：对A-&gt;a，如果a-&gt;ε，select(A-&gt;a)=first(a)- ε + follow(A)，如果a不能推出空串，则select(A-&gt;a) = first(a)</p>\n</li>\n</ol>\n<h4 id=\"3-根据产生式写出语法树，短语，直接短语，句柄\"><a href=\"#3-根据产生式写出语法树，短语，直接短语，句柄\" class=\"headerlink\" title=\"3. 根据产生式写出语法树，短语，直接短语，句柄\"></a>3. 根据产生式写出语法树，短语，直接短语，句柄</h4><p>短语：每一棵子树的边缘</p>\n<p>直接短语：如果子树高度为2，则其边缘为直接短语</p>\n<p>句柄：最左的直接短语</p>\n<h4 id=\"4-LR-0-文法\"><a href=\"#4-LR-0-文法\" class=\"headerlink\" title=\"4. LR(0)文法\"></a>4. LR(0)文法</h4><h2 id=\"语义分析\"><a href=\"#语义分析\" class=\"headerlink\" title=\"语义分析\"></a>语义分析</h2><h4 id=\"1-逆波兰\"><a href=\"#1-逆波兰\" class=\"headerlink\" title=\"1. 逆波兰\"></a>1. 逆波兰</h4><h2 id=\"中间代码生成\"><a href=\"#中间代码生成\" class=\"headerlink\" title=\"中间代码生成\"></a>中间代码生成</h2><h4 id=\"1-数组、if语句、while语句翻译\"><a href=\"#1-数组、if语句、while语句翻译\" class=\"headerlink\" title=\"1. 数组、if语句、while语句翻译\"></a>1. 数组、if语句、while语句翻译</h4><h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2>","length":727},{"title":"127. 单词接龙","abbrlink":"527f7711","_content":"\n> 给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：\n>\n> 1. 每次转换只能改变一个字母。\n> 2. 转换过程中的中间单词必须是字典中的单词。\n>\n> 说明:\n>\n> - 如果不存在这样的转换序列，返回 0。\n> - 所有单词具有相同的长度。\n> - 所有单词只由小写字母组成。\n> - 字典中不存在重复的单词。\n\n<!-- more-->\n\n### 💡 思路\n\n算法的主要过程是对`beginWord `每次替换一个字母，成为一个新的单词，判断是否是` endWord ` 。题目要求找到最短转换序列的长度，也就是最少的转换次数，因此可以考虑采用广度优先搜索。因为每次替换一个位置的字母，有25种选择，新的单词必须存在于给出的`wordList`种，共有单词的长度`len`个位置。\n\n整个算法其实是在构建一张无向图，假设`beginWord `为`hit `，` endWord `为`hot `，`wordList `为` [hat,bat,hot]`。从`beginWord `开始，对于第一个位置`h `，有25种替换选择，但其中只有选择`b `所生成的新单词`bat `在`wordList`中，因此需要往队列`queue` 中添加`bat `，第二个位置`i `，同样有25种选择，其中只有选择`a`和`o` 所生成的新单词在`wordList`中，因此需要将`hat,hot`放入queue中。但在这里我们发现新生成的单词`hot` 即为`endWord `，此时即是最少的转换次数为1次。\n\n理解上述过程需要你对广度优先搜索有一定的熟悉度，比如所用的队列、何时更新转换次数等。\n\n### 🧾 代码\n\n代码的整个框架还是比较常规的广度优先搜索，主要是其中进行替换时需要替换`len`个位置，以及每个位置可从`a`到`z`。\n\n```java\n public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        \n     HashSet<String> words = new HashSet<>(wordList);\n     if(words.size()== 0 || !words.contains(endWord)){//不存在endword\n         return 0;\n     }\n     words.remove(beginWord);\n\n     Queue<String> queue = new LinkedList<>();\n     queue.offer(beginWord);\n     HashSet<String> visited = new HashSet<>();//存放已经使用过的\n     visited.add(beginWord);\n     int len = beginWord.length();\n     int step = 1;\n     while(!queue.isEmpty()){\n         int size = queue.size();\n         for(int i = 0 ; i < size; i++){\n             String curWord = queue.poll();\n             char[] chars = curWord.toCharArray();\n             for(int j = 0; j < len; j++){//当前单词的每个位置\n                 char oldChar = chars[j];\n\n                 for(char m = 'a'; m <= 'z'; m++){//从a-z依次替换\n                     if(m == oldChar){\n                         continue;\n                     }\n                     chars[j] = m;//替换当前位置\n                     String newWord = String.valueOf(chars);\n                     if(words.contains(newWord)){//新单词存在于wordList中\n                         if(newWord.equals(endWord)){//找到了\n                             return step+1;\n                         }\n                         if(!visited.contains(newWord)){//未使用过\n                             queue.add(newWord);\n                             visited.add(newWord);\n                         }\n                     }\n                 }\n                 chars[j] = oldChar;//还原当前位置\n             }\n         }\n         step ++;//此时更新step-在上面整个循环中完成的是将一次替换的所有结果存放到了queue中\n     }\n     return 0;\n }\n```\n\n","source":"_posts/127-单词接龙.md","raw":"---\ntitle: 127. 单词接龙\ntags:\n  - 广度优先搜索\ncategories:\n  - Leetcode\nabbrlink: 527f7711\n---\n\n> 给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：\n>\n> 1. 每次转换只能改变一个字母。\n> 2. 转换过程中的中间单词必须是字典中的单词。\n>\n> 说明:\n>\n> - 如果不存在这样的转换序列，返回 0。\n> - 所有单词具有相同的长度。\n> - 所有单词只由小写字母组成。\n> - 字典中不存在重复的单词。\n\n<!-- more-->\n\n### 💡 思路\n\n算法的主要过程是对`beginWord `每次替换一个字母，成为一个新的单词，判断是否是` endWord ` 。题目要求找到最短转换序列的长度，也就是最少的转换次数，因此可以考虑采用广度优先搜索。因为每次替换一个位置的字母，有25种选择，新的单词必须存在于给出的`wordList`种，共有单词的长度`len`个位置。\n\n整个算法其实是在构建一张无向图，假设`beginWord `为`hit `，` endWord `为`hot `，`wordList `为` [hat,bat,hot]`。从`beginWord `开始，对于第一个位置`h `，有25种替换选择，但其中只有选择`b `所生成的新单词`bat `在`wordList`中，因此需要往队列`queue` 中添加`bat `，第二个位置`i `，同样有25种选择，其中只有选择`a`和`o` 所生成的新单词在`wordList`中，因此需要将`hat,hot`放入queue中。但在这里我们发现新生成的单词`hot` 即为`endWord `，此时即是最少的转换次数为1次。\n\n理解上述过程需要你对广度优先搜索有一定的熟悉度，比如所用的队列、何时更新转换次数等。\n\n### 🧾 代码\n\n代码的整个框架还是比较常规的广度优先搜索，主要是其中进行替换时需要替换`len`个位置，以及每个位置可从`a`到`z`。\n\n```java\n public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        \n     HashSet<String> words = new HashSet<>(wordList);\n     if(words.size()== 0 || !words.contains(endWord)){//不存在endword\n         return 0;\n     }\n     words.remove(beginWord);\n\n     Queue<String> queue = new LinkedList<>();\n     queue.offer(beginWord);\n     HashSet<String> visited = new HashSet<>();//存放已经使用过的\n     visited.add(beginWord);\n     int len = beginWord.length();\n     int step = 1;\n     while(!queue.isEmpty()){\n         int size = queue.size();\n         for(int i = 0 ; i < size; i++){\n             String curWord = queue.poll();\n             char[] chars = curWord.toCharArray();\n             for(int j = 0; j < len; j++){//当前单词的每个位置\n                 char oldChar = chars[j];\n\n                 for(char m = 'a'; m <= 'z'; m++){//从a-z依次替换\n                     if(m == oldChar){\n                         continue;\n                     }\n                     chars[j] = m;//替换当前位置\n                     String newWord = String.valueOf(chars);\n                     if(words.contains(newWord)){//新单词存在于wordList中\n                         if(newWord.equals(endWord)){//找到了\n                             return step+1;\n                         }\n                         if(!visited.contains(newWord)){//未使用过\n                             queue.add(newWord);\n                             visited.add(newWord);\n                         }\n                     }\n                 }\n                 chars[j] = oldChar;//还原当前位置\n             }\n         }\n         step ++;//此时更新step-在上面整个循环中完成的是将一次替换的所有结果存放到了queue中\n     }\n     return 0;\n }\n```\n\n","slug":"127-单词接龙","published":1,"date":"2020-06-07T15:28:39.188Z","updated":"2020-06-07T15:53:05.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1n000nz4ej4zxk1coo","content":"<blockquote>\n<p>给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：</p>\n<ol>\n<li>每次转换只能改变一个字母。</li>\n<li>转换过程中的中间单词必须是字典中的单词。</li>\n</ol>\n<p>说明:</p>\n<ul>\n<li>如果不存在这样的转换序列，返回 0。</li>\n<li>所有单词具有相同的长度。</li>\n<li>所有单词只由小写字母组成。</li>\n<li>字典中不存在重复的单词。</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>算法的主要过程是对<code>beginWord</code>每次替换一个字母，成为一个新的单词，判断是否是<code>endWord</code> 。题目要求找到最短转换序列的长度，也就是最少的转换次数，因此可以考虑采用广度优先搜索。因为每次替换一个位置的字母，有25种选择，新的单词必须存在于给出的<code>wordList</code>种，共有单词的长度<code>len</code>个位置。</p>\n<p>整个算法其实是在构建一张无向图，假设<code>beginWord</code>为<code>hit</code>，<code>endWord</code>为<code>hot</code>，<code>wordList</code>为<code>[hat,bat,hot]</code>。从<code>beginWord</code>开始，对于第一个位置<code>h</code>，有25种替换选择，但其中只有选择<code>b</code>所生成的新单词<code>bat</code>在<code>wordList</code>中，因此需要往队列<code>queue</code> 中添加<code>bat</code>，第二个位置<code>i</code>，同样有25种选择，其中只有选择<code>a</code>和<code>o</code> 所生成的新单词在<code>wordList</code>中，因此需要将<code>hat,hot</code>放入queue中。但在这里我们发现新生成的单词<code>hot</code> 即为<code>endWord</code>，此时即是最少的转换次数为1次。</p>\n<p>理解上述过程需要你对广度优先搜索有一定的熟悉度，比如所用的队列、何时更新转换次数等。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>代码的整个框架还是比较常规的广度优先搜索，主要是其中进行替换时需要替换<code>len</code>个位置，以及每个位置可从<code>a</code>到<code>z</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">ladderLength</span><span class=\"params\">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">    HashSet&lt;String&gt; words = <span class=\"keyword\">new</span> HashSet&lt;&gt;(wordList);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(words.size()== <span class=\"number\">0</span> || !words.contains(endWord))&#123;<span class=\"comment\">//不存在endword</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    words.remove(beginWord);</span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;String&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.offer(beginWord);</span><br><span class=\"line\">    HashSet&lt;String&gt; visited = <span class=\"keyword\">new</span> HashSet&lt;&gt;();<span class=\"comment\">//存放已经使用过的</span></span><br><span class=\"line\">    visited.add(beginWord);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = beginWord.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> step = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; size; i++)&#123;</span><br><span class=\"line\">            String curWord = queue.poll();</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] chars = curWord.toCharArray();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; len; j++)&#123;<span class=\"comment\">//当前单词的每个位置</span></span><br><span class=\"line\">                <span class=\"keyword\">char</span> oldChar = chars[j];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> m = <span class=\"string\">'a'</span>; m &lt;= <span class=\"string\">'z'</span>; m++)&#123;<span class=\"comment\">//从a-z依次替换</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(m == oldChar)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    chars[j] = m;<span class=\"comment\">//替换当前位置</span></span><br><span class=\"line\">                    String newWord = String.valueOf(chars);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(words.contains(newWord))&#123;<span class=\"comment\">//新单词存在于wordList中</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(newWord.equals(endWord))&#123;<span class=\"comment\">//找到了</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> step+<span class=\"number\">1</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!visited.contains(newWord))&#123;<span class=\"comment\">//未使用过</span></span><br><span class=\"line\">                            queue.add(newWord);</span><br><span class=\"line\">                            visited.add(newWord);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                chars[j] = oldChar;<span class=\"comment\">//还原当前位置</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        step ++;<span class=\"comment\">//此时更新step-在上面整个循环中完成的是将一次替换的所有结果存放到了queue中</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：</p>\n<ol>\n<li>每次转换只能改变一个字母。</li>\n<li>转换过程中的中间单词必须是字典中的单词。</li>\n</ol>\n<p>说明:</p>\n<ul>\n<li>如果不存在这样的转换序列，返回 0。</li>\n<li>所有单词具有相同的长度。</li>\n<li>所有单词只由小写字母组成。</li>\n<li>字典中不存在重复的单词。</li>\n</ul>\n</blockquote>","more":"<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>算法的主要过程是对<code>beginWord</code>每次替换一个字母，成为一个新的单词，判断是否是<code>endWord</code> 。题目要求找到最短转换序列的长度，也就是最少的转换次数，因此可以考虑采用广度优先搜索。因为每次替换一个位置的字母，有25种选择，新的单词必须存在于给出的<code>wordList</code>种，共有单词的长度<code>len</code>个位置。</p>\n<p>整个算法其实是在构建一张无向图，假设<code>beginWord</code>为<code>hit</code>，<code>endWord</code>为<code>hot</code>，<code>wordList</code>为<code>[hat,bat,hot]</code>。从<code>beginWord</code>开始，对于第一个位置<code>h</code>，有25种替换选择，但其中只有选择<code>b</code>所生成的新单词<code>bat</code>在<code>wordList</code>中，因此需要往队列<code>queue</code> 中添加<code>bat</code>，第二个位置<code>i</code>，同样有25种选择，其中只有选择<code>a</code>和<code>o</code> 所生成的新单词在<code>wordList</code>中，因此需要将<code>hat,hot</code>放入queue中。但在这里我们发现新生成的单词<code>hot</code> 即为<code>endWord</code>，此时即是最少的转换次数为1次。</p>\n<p>理解上述过程需要你对广度优先搜索有一定的熟悉度，比如所用的队列、何时更新转换次数等。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>代码的整个框架还是比较常规的广度优先搜索，主要是其中进行替换时需要替换<code>len</code>个位置，以及每个位置可从<code>a</code>到<code>z</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">ladderLength</span><span class=\"params\">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">    HashSet&lt;String&gt; words = <span class=\"keyword\">new</span> HashSet&lt;&gt;(wordList);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(words.size()== <span class=\"number\">0</span> || !words.contains(endWord))&#123;<span class=\"comment\">//不存在endword</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    words.remove(beginWord);</span><br><span class=\"line\"></span><br><span class=\"line\">    Queue&lt;String&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.offer(beginWord);</span><br><span class=\"line\">    HashSet&lt;String&gt; visited = <span class=\"keyword\">new</span> HashSet&lt;&gt;();<span class=\"comment\">//存放已经使用过的</span></span><br><span class=\"line\">    visited.add(beginWord);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = beginWord.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> step = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; size; i++)&#123;</span><br><span class=\"line\">            String curWord = queue.poll();</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] chars = curWord.toCharArray();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; len; j++)&#123;<span class=\"comment\">//当前单词的每个位置</span></span><br><span class=\"line\">                <span class=\"keyword\">char</span> oldChar = chars[j];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> m = <span class=\"string\">'a'</span>; m &lt;= <span class=\"string\">'z'</span>; m++)&#123;<span class=\"comment\">//从a-z依次替换</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(m == oldChar)&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    chars[j] = m;<span class=\"comment\">//替换当前位置</span></span><br><span class=\"line\">                    String newWord = String.valueOf(chars);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(words.contains(newWord))&#123;<span class=\"comment\">//新单词存在于wordList中</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(newWord.equals(endWord))&#123;<span class=\"comment\">//找到了</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span> step+<span class=\"number\">1</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!visited.contains(newWord))&#123;<span class=\"comment\">//未使用过</span></span><br><span class=\"line\">                            queue.add(newWord);</span><br><span class=\"line\">                            visited.add(newWord);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                chars[j] = oldChar;<span class=\"comment\">//还原当前位置</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        step ++;<span class=\"comment\">//此时更新step-在上面整个循环中完成的是将一次替换的所有结果存放到了queue中</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Jun 07 2020 23:53:05 GMT+0800 (中国标准时间)","title":"127. 单词接龙","path":"posts/527f7711.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：</p>\n<ol>\n<li>每次转换只能改变一个字母。</li>\n<li>转换过程中的中间单词必须是字典中的单词。</li>\n</ol>\n<p>说明:</p>\n<ul>\n<li>如果不存在这样的转换序列，返回 0。</li>\n<li>所有单词具有相同的长度。</li>\n<li>所有单词只由小写字母组成。</li>\n<li>字典中不存在重复的单词。</li>\n</ul>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-06-07T15:28:39.188Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-06-07T15:28:39.188Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["广度优先搜索"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1832},{"title":"1022. 从根到叶的二进制数之和","abbrlink":"39280e8c","_content":"\n> 给出一棵二叉树，其上每个结点的值都是 0 或 1 。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。例如，如果路径为 0 -> 1 -> 1 -> 0 -> 1，那么它表示二进制数 01101，也就是 13 。\n>\n> 对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。\n>\n> 以 10^9 + 7 为模，返回这些数字之和。\n\n<!-- more -->\n\n{% note info %}\n\n示例：\n\n```java\n输入：[1,0,1,0,1,0,1]\n输出：22\n解释：(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\n```\n\n{% endnote %}\n\n### 💡 思路\n\n树中的路径问题，可以使用深度优先搜索来解决。本题中，需要求每一从根节点到叶子路径组成的二进制数的和。深搜过程中，需要保存已经得到的当前路径，到达根节点的标志是左右子树都为空，将二进制转为十进制我最开始无耻地使用 ` Integer.parseInt(s,2) `，因为保存当前的路径直接用了字符串😂。\n\n### 🧾 代码\n\n```java\nint sum;\npublic int sumRootToLeaf(TreeNode root) {\n    dfs(root, \"\");\n    return sum;\n}\npublic void dfs(TreeNode root, String s){\n    if(root == null){\n        return;\n    }\n    s+=root.val;\n    if(root.left == null && root.right == null){\n        sum += (Integer.parseInt(s,2)%1000000007);\n    }else{\n        dfs(root.left, s);\n        dfs(root.right, s);\n    }\n}\n```\n\n### 📈 优化\n\n上面的方法，` Integer.parseInt `的方式本身耗时，并且每次都从头求，没有利用到之前的记录，因此效率较低。因此在二进制转十进制这一部分进行优化。\n\n我们发现，每加上一个节点值，当前路径的二进制数左移一位，然后加上当前节点。举个例子：示例中，对于路径 `110 `，加入第一个节点值时当前节点二进制数为 ` 1 `，十进制为 1，第二个节点时，原来二进制数左移1位，对应于十进制乘2，为2，然后加上第二个节点值 1，得到 ` 11 `，十进制为3，第三个节点，左移1位，加上节点值，得到 ` 110 `，十进制为3*2+0.\n\n```java\nint sum;\npublic int sumRootToLeaf(TreeNode root) {\n    dfs(root, 0);\n    return sum;\n}\npublic void dfs(TreeNode root, int cur){\n    if(root == null){\n        return;\n    }\n    cur = cur*2 + root.val;\n    if(root.left == null && root.right == null){\n        sum += cur;\n    }else{\n        dfs(root.left, cur);\n        dfs(root.right, cur);\n    }\n}\n```","source":"_posts/1022-从根到叶的二进制数之和.md","raw":"---\ntitle: 1022. 从根到叶的二进制数之和\ntags:\n  - Leetcode\n  - 二叉树\n  - 递归\n  - 深度优先搜索\ncategories:\n  - Leetcode\n  - 二叉树\nabbrlink: 39280e8c\n---\n\n> 给出一棵二叉树，其上每个结点的值都是 0 或 1 。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。例如，如果路径为 0 -> 1 -> 1 -> 0 -> 1，那么它表示二进制数 01101，也就是 13 。\n>\n> 对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。\n>\n> 以 10^9 + 7 为模，返回这些数字之和。\n\n<!-- more -->\n\n{% note info %}\n\n示例：\n\n```java\n输入：[1,0,1,0,1,0,1]\n输出：22\n解释：(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\n```\n\n{% endnote %}\n\n### 💡 思路\n\n树中的路径问题，可以使用深度优先搜索来解决。本题中，需要求每一从根节点到叶子路径组成的二进制数的和。深搜过程中，需要保存已经得到的当前路径，到达根节点的标志是左右子树都为空，将二进制转为十进制我最开始无耻地使用 ` Integer.parseInt(s,2) `，因为保存当前的路径直接用了字符串😂。\n\n### 🧾 代码\n\n```java\nint sum;\npublic int sumRootToLeaf(TreeNode root) {\n    dfs(root, \"\");\n    return sum;\n}\npublic void dfs(TreeNode root, String s){\n    if(root == null){\n        return;\n    }\n    s+=root.val;\n    if(root.left == null && root.right == null){\n        sum += (Integer.parseInt(s,2)%1000000007);\n    }else{\n        dfs(root.left, s);\n        dfs(root.right, s);\n    }\n}\n```\n\n### 📈 优化\n\n上面的方法，` Integer.parseInt `的方式本身耗时，并且每次都从头求，没有利用到之前的记录，因此效率较低。因此在二进制转十进制这一部分进行优化。\n\n我们发现，每加上一个节点值，当前路径的二进制数左移一位，然后加上当前节点。举个例子：示例中，对于路径 `110 `，加入第一个节点值时当前节点二进制数为 ` 1 `，十进制为 1，第二个节点时，原来二进制数左移1位，对应于十进制乘2，为2，然后加上第二个节点值 1，得到 ` 11 `，十进制为3，第三个节点，左移1位，加上节点值，得到 ` 110 `，十进制为3*2+0.\n\n```java\nint sum;\npublic int sumRootToLeaf(TreeNode root) {\n    dfs(root, 0);\n    return sum;\n}\npublic void dfs(TreeNode root, int cur){\n    if(root == null){\n        return;\n    }\n    cur = cur*2 + root.val;\n    if(root.left == null && root.right == null){\n        sum += cur;\n    }else{\n        dfs(root.left, cur);\n        dfs(root.right, cur);\n    }\n}\n```","slug":"1022-从根到叶的二进制数之和","published":1,"date":"2020-05-07T13:32:39.896Z","updated":"2020-05-08T15:51:35.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1o000qz4ej3t1c7rho","content":"<blockquote>\n<p>给出一棵二叉树，其上每个结点的值都是 0 或 1 。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。例如，如果路径为 0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1，那么它表示二进制数 01101，也就是 13 。</p>\n<p>对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。</p>\n<p>以 10^9 + 7 为模，返回这些数字之和。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<div class=\"note info\"><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：<span class=\"number\">22</span></span><br><span class=\"line\">解释：(<span class=\"number\">100</span>) + (<span class=\"number\">101</span>) + (<span class=\"number\">110</span>) + (<span class=\"number\">111</span>) = <span class=\"number\">4</span> + <span class=\"number\">5</span> + <span class=\"number\">6</span> + <span class=\"number\">7</span> = <span class=\"number\">22</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>树中的路径问题，可以使用深度优先搜索来解决。本题中，需要求每一从根节点到叶子路径组成的二进制数的和。深搜过程中，需要保存已经得到的当前路径，到达根节点的标志是左右子树都为空，将二进制转为十进制我最开始无耻地使用 <code>Integer.parseInt(s,2)</code>，因为保存当前的路径直接用了字符串😂。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sum;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sumRootToLeaf</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    dfs(root, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode root, String s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s+=root.val;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        sum += (Integer.parseInt(s,<span class=\"number\">2</span>)%<span class=\"number\">1000000007</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        dfs(root.left, s);</span><br><span class=\"line\">        dfs(root.right, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>上面的方法，<code>Integer.parseInt</code>的方式本身耗时，并且每次都从头求，没有利用到之前的记录，因此效率较低。因此在二进制转十进制这一部分进行优化。</p>\n<p>我们发现，每加上一个节点值，当前路径的二进制数左移一位，然后加上当前节点。举个例子：示例中，对于路径 <code>110</code>，加入第一个节点值时当前节点二进制数为 <code>1</code>，十进制为 1，第二个节点时，原来二进制数左移1位，对应于十进制乘2，为2，然后加上第二个节点值 1，得到 <code>11</code>，十进制为3，第三个节点，左移1位，加上节点值，得到 <code>110</code>，十进制为3*2+0.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sum;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sumRootToLeaf</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    dfs(root, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cur = cur*<span class=\"number\">2</span> + root.val;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        sum += cur;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        dfs(root.left, cur);</span><br><span class=\"line\">        dfs(root.right, cur);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>给出一棵二叉树，其上每个结点的值都是 0 或 1 。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。例如，如果路径为 0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1，那么它表示二进制数 01101，也就是 13 。</p>\n<p>对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。</p>\n<p>以 10^9 + 7 为模，返回这些数字之和。</p>\n</blockquote>","more":"<div class=\"note info\"><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">输出：<span class=\"number\">22</span></span><br><span class=\"line\">解释：(<span class=\"number\">100</span>) + (<span class=\"number\">101</span>) + (<span class=\"number\">110</span>) + (<span class=\"number\">111</span>) = <span class=\"number\">4</span> + <span class=\"number\">5</span> + <span class=\"number\">6</span> + <span class=\"number\">7</span> = <span class=\"number\">22</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>树中的路径问题，可以使用深度优先搜索来解决。本题中，需要求每一从根节点到叶子路径组成的二进制数的和。深搜过程中，需要保存已经得到的当前路径，到达根节点的标志是左右子树都为空，将二进制转为十进制我最开始无耻地使用 <code>Integer.parseInt(s,2)</code>，因为保存当前的路径直接用了字符串😂。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sum;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sumRootToLeaf</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    dfs(root, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode root, String s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s+=root.val;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        sum += (Integer.parseInt(s,<span class=\"number\">2</span>)%<span class=\"number\">1000000007</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        dfs(root.left, s);</span><br><span class=\"line\">        dfs(root.right, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>上面的方法，<code>Integer.parseInt</code>的方式本身耗时，并且每次都从头求，没有利用到之前的记录，因此效率较低。因此在二进制转十进制这一部分进行优化。</p>\n<p>我们发现，每加上一个节点值，当前路径的二进制数左移一位，然后加上当前节点。举个例子：示例中，对于路径 <code>110</code>，加入第一个节点值时当前节点二进制数为 <code>1</code>，十进制为 1，第二个节点时，原来二进制数左移1位，对应于十进制乘2，为2，然后加上第二个节点值 1，得到 <code>11</code>，十进制为3，第三个节点，左移1位，加上节点值，得到 <code>110</code>，十进制为3*2+0.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sum;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">sumRootToLeaf</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    dfs(root, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(TreeNode root, <span class=\"keyword\">int</span> cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cur = cur*<span class=\"number\">2</span> + root.val;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        sum += cur;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        dfs(root.left, cur);</span><br><span class=\"line\">        dfs(root.right, cur);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri May 08 2020 23:51:35 GMT+0800 (中国标准时间)","title":"1022. 从根到叶的二进制数之和","path":"posts/39280e8c.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>给出一棵二叉树，其上每个结点的值都是 0 或 1 。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。例如，如果路径为 0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1，那么它表示二进制数 01101，也就是 13 。</p>\n<p>对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。</p>\n<p>以 10^9 + 7 为模，返回这些数字之和。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-07T13:32:39.896Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-07T13:32:39.896Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode > 二叉树","tags":["Leetcode","二叉树","递归","深度优先搜索"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1287},{"title":"152. 乘积最大子数组","abbrlink":"27e1a968","_content":"\n> 给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。\n>\n\n<!-- more -->\n\n示例 1:\n\n```java\n输入: [2,3,-2,4]\n输出: 6\n解释: 子数组 [2,3] 有最大乘积 6。\n示例 2:\n\n输入: [-2,0,-1]\n输出: 0\n解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。\n```\n\n","source":"_posts/152-乘积最大子数组.md","raw":"---\ntitle: 152. 乘积最大子数组\ntags:\n  - Leetcode\n  - 数组\n  - 动态规划\ncategories:\n  - Leetcode\n  - 动态规划\nabbrlink: 27e1a968\n---\n\n> 给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。\n>\n\n<!-- more -->\n\n示例 1:\n\n```java\n输入: [2,3,-2,4]\n输出: 6\n解释: 子数组 [2,3] 有最大乘积 6。\n示例 2:\n\n输入: [-2,0,-1]\n输出: 0\n解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。\n```\n\n","slug":"152-乘积最大子数组","published":1,"date":"2020-05-18T14:45:18.875Z","updated":"2020-05-25T12:19:36.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1p000tz4ej9xdogfea","content":"<blockquote>\n<p>给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>示例 1:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">2</span>,<span class=\"number\">3</span>,-<span class=\"number\">2</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">输出: <span class=\"number\">6</span></span><br><span class=\"line\">解释: 子数组 [<span class=\"number\">2</span>,<span class=\"number\">3</span>] 有最大乘积 <span class=\"number\">6</span>。</span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: [-<span class=\"number\">2</span>,<span class=\"number\">0</span>,-<span class=\"number\">1</span>]</span><br><span class=\"line\">输出: <span class=\"number\">0</span></span><br><span class=\"line\">解释: 结果不能为 <span class=\"number\">2</span>, 因为 [-<span class=\"number\">2</span>,-<span class=\"number\">1</span>] 不是子数组。</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p>\n</blockquote>","more":"<p>示例 1:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">2</span>,<span class=\"number\">3</span>,-<span class=\"number\">2</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">输出: <span class=\"number\">6</span></span><br><span class=\"line\">解释: 子数组 [<span class=\"number\">2</span>,<span class=\"number\">3</span>] 有最大乘积 <span class=\"number\">6</span>。</span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: [-<span class=\"number\">2</span>,<span class=\"number\">0</span>,-<span class=\"number\">1</span>]</span><br><span class=\"line\">输出: <span class=\"number\">0</span></span><br><span class=\"line\">解释: 结果不能为 <span class=\"number\">2</span>, 因为 [-<span class=\"number\">2</span>,-<span class=\"number\">1</span>] 不是子数组。</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon May 25 2020 20:19:36 GMT+0800 (中国标准时间)","title":"152. 乘积最大子数组","path":"posts/27e1a968.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-18T14:45:18.875Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-18T14:45:18.875Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode > 动态规划","tags":["Leetcode","数组","动态规划"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":152},{"title":"153. 寻找旋转排序数组中的最小值","abbrlink":"e3f3cf8a","_content":"\n> 假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n>\n> ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。\n>\n> 请找出其中最小的元素。\n>\n> 你可以假设数组中不存在重复元素。\n\n<!-- more -->\n\n{% note info %}\n\n**示例 1:**\n\n```\n输入: [3,4,5,1,2]\n输出: 1\n```\n\n**示例 2:**\n\n```\n输入: [4,5,6,7,0,1,2]\n输出: 0\n```\n\n{% endnote %}\n\n### 👊 暴力解法\n\n对数组进行遍历，找到比前一个位置元素小（**降序**）的位置，即为最小值。如果没有降序，意味着数组没有旋转，旋转点为最后一个位置。那么最小值将是第一个元素。\n\n```java\npublic int findMin(int[] nums) {\n    if(nums == null){\n        return 0;\n    }\n    int min = nums[0];\n    for(int i : nums){\n        if(i < min){\n            min = i;\n            break;\n        }\n    }\n    return min;\n}\n```\n\n### ✍️ 二分查找\n\n对于有序数组的查找问题，我们总是可以考虑采用二分来解决。二分的基本思路是：根据中间位置的元素和其他位置元素的大小关系，修改左右边界，达到减小区间（**减治**）的目的。在这个问题中，我开始的想法是让中间数和其左右位置比较，但很快就推翻了这个想法，因为这样的比较无法修改边界，也就无法达到减治的目的。~~其实数组中每个位置的元素，和其左右位置的关系都是相同的，都是大于其左边的小于其右边的。只有最小值的特征是相反的。~~（这是一段废话，人家本来就说是升序的数组）。不过解题的过程大多数时候是这样的，不断地试错，找到最正确的方法。\n\n思考到这里，我们应该就可以想到让中间数和左右边界作比较。\n\n{% note danger %}\n\n中间数和左边界\n\n- 当` nums[mid] < nums[left] `，能否确定最小值在左侧？——可以，此时说明区间` [left...mid] `出现了降序\n\n- 当` nums[mid] > nums[left] `，能否确定最小值在右侧？——不能，当没有旋转的时候，最小值会在左侧\n\n{% endnote %}\n\n{% note success%}\n\n中间数和右边界\n\n- 当` nums[mid] < nums[right] `，能否确定最小值在左侧？——可以，此时说明区间` [mid...right] `保持升序\n\n- 当` nums[mid] > nums[right] `，能否确定最小值在右侧？——可以，此时说明区间` [mid...right] `出现了降序\n\n{% endnote %}\n\n### 🧾 代码\n\n经过上面的分析，我们可以尝试写出代码。二分法的代码过程，需要关注的点在循环终止条件以及最后返回什么。在这道题中，最小值一定在数组中，而我们一直在删去不可能存在最小值的区间，当区间只剩下一个元素，那么它一定是最小值。\n\n```java\npublic int findMin(int[] nums) {\n    if(nums == null){\n        return 0;\n    }\n    int left = 0, right = nums.length - 1;\n    while(left < right){//考虑终止条件\n        int mid = left + (right-left) / 2;\n        if(nums[mid] > nums[right]){\n            left = mid + 1;// +1是因为mid一定不会是最小值\n        }else{\n            right = mid;\n        }\n    }\n    return nums[left]; \n}\n```\n\n","source":"_posts/153-寻找旋转排序数组中的最小值.md","raw":"---\ntitle: 153. 寻找旋转排序数组中的最小值\ntags:\n  - Leetcode\n  - 数组\n  - 二分查找\ncategories:\n  - Leetcode\nabbrlink: e3f3cf8a\n---\n\n> 假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n>\n> ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。\n>\n> 请找出其中最小的元素。\n>\n> 你可以假设数组中不存在重复元素。\n\n<!-- more -->\n\n{% note info %}\n\n**示例 1:**\n\n```\n输入: [3,4,5,1,2]\n输出: 1\n```\n\n**示例 2:**\n\n```\n输入: [4,5,6,7,0,1,2]\n输出: 0\n```\n\n{% endnote %}\n\n### 👊 暴力解法\n\n对数组进行遍历，找到比前一个位置元素小（**降序**）的位置，即为最小值。如果没有降序，意味着数组没有旋转，旋转点为最后一个位置。那么最小值将是第一个元素。\n\n```java\npublic int findMin(int[] nums) {\n    if(nums == null){\n        return 0;\n    }\n    int min = nums[0];\n    for(int i : nums){\n        if(i < min){\n            min = i;\n            break;\n        }\n    }\n    return min;\n}\n```\n\n### ✍️ 二分查找\n\n对于有序数组的查找问题，我们总是可以考虑采用二分来解决。二分的基本思路是：根据中间位置的元素和其他位置元素的大小关系，修改左右边界，达到减小区间（**减治**）的目的。在这个问题中，我开始的想法是让中间数和其左右位置比较，但很快就推翻了这个想法，因为这样的比较无法修改边界，也就无法达到减治的目的。~~其实数组中每个位置的元素，和其左右位置的关系都是相同的，都是大于其左边的小于其右边的。只有最小值的特征是相反的。~~（这是一段废话，人家本来就说是升序的数组）。不过解题的过程大多数时候是这样的，不断地试错，找到最正确的方法。\n\n思考到这里，我们应该就可以想到让中间数和左右边界作比较。\n\n{% note danger %}\n\n中间数和左边界\n\n- 当` nums[mid] < nums[left] `，能否确定最小值在左侧？——可以，此时说明区间` [left...mid] `出现了降序\n\n- 当` nums[mid] > nums[left] `，能否确定最小值在右侧？——不能，当没有旋转的时候，最小值会在左侧\n\n{% endnote %}\n\n{% note success%}\n\n中间数和右边界\n\n- 当` nums[mid] < nums[right] `，能否确定最小值在左侧？——可以，此时说明区间` [mid...right] `保持升序\n\n- 当` nums[mid] > nums[right] `，能否确定最小值在右侧？——可以，此时说明区间` [mid...right] `出现了降序\n\n{% endnote %}\n\n### 🧾 代码\n\n经过上面的分析，我们可以尝试写出代码。二分法的代码过程，需要关注的点在循环终止条件以及最后返回什么。在这道题中，最小值一定在数组中，而我们一直在删去不可能存在最小值的区间，当区间只剩下一个元素，那么它一定是最小值。\n\n```java\npublic int findMin(int[] nums) {\n    if(nums == null){\n        return 0;\n    }\n    int left = 0, right = nums.length - 1;\n    while(left < right){//考虑终止条件\n        int mid = left + (right-left) / 2;\n        if(nums[mid] > nums[right]){\n            left = mid + 1;// +1是因为mid一定不会是最小值\n        }else{\n            right = mid;\n        }\n    }\n    return nums[left]; \n}\n```\n\n","slug":"153-寻找旋转排序数组中的最小值","published":1,"date":"2020-05-01T06:50:50.142Z","updated":"2020-05-05T03:11:57.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1q000vz4ej5z6ihdb4","content":"<blockquote>\n<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>\n<p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p>\n<p>请找出其中最小的元素。</p>\n<p>你可以假设数组中不存在重复元素。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<div class=\"note info\"><p><strong>示例 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [3,4,5,1,2]</span><br><span class=\"line\">输出: 1</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [4,5,6,7,0,1,2]</span><br><span class=\"line\">输出: 0</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"👊-暴力解法\"><a href=\"#👊-暴力解法\" class=\"headerlink\" title=\"👊 暴力解法\"></a>👊 暴力解法</h3><p>对数组进行遍历，找到比前一个位置元素小（<strong>降序</strong>）的位置，即为最小值。如果没有降序，意味着数组没有旋转，旋转点为最后一个位置。那么最小值将是第一个元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; min)&#123;</span><br><span class=\"line\">            min = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"✍️-二分查找\"><a href=\"#✍️-二分查找\" class=\"headerlink\" title=\"✍️ 二分查找\"></a>✍️ 二分查找</h3><p>对于有序数组的查找问题，我们总是可以考虑采用二分来解决。二分的基本思路是：根据中间位置的元素和其他位置元素的大小关系，修改左右边界，达到减小区间（<strong>减治</strong>）的目的。在这个问题中，我开始的想法是让中间数和其左右位置比较，但很快就推翻了这个想法，因为这样的比较无法修改边界，也就无法达到减治的目的。<del>其实数组中每个位置的元素，和其左右位置的关系都是相同的，都是大于其左边的小于其右边的。只有最小值的特征是相反的。</del>（这是一段废话，人家本来就说是升序的数组）。不过解题的过程大多数时候是这样的，不断地试错，找到最正确的方法。</p>\n<p>思考到这里，我们应该就可以想到让中间数和左右边界作比较。</p>\n<div class=\"note danger\"><p>中间数和左边界</p>\n<ul>\n<li><p>当<code>nums[mid] &lt; nums[left]</code>，能否确定最小值在左侧？——可以，此时说明区间<code>[left...mid]</code>出现了降序</p>\n</li>\n<li><p>当<code>nums[mid] &gt; nums[left]</code>，能否确定最小值在右侧？——不能，当没有旋转的时候，最小值会在左侧</p>\n</li>\n</ul></div>\n\n<div class=\"note success\"><p>中间数和右边界</p>\n<ul>\n<li><p>当<code>nums[mid] &lt; nums[right]</code>，能否确定最小值在左侧？——可以，此时说明区间<code>[mid...right]</code>保持升序</p>\n</li>\n<li><p>当<code>nums[mid] &gt; nums[right]</code>，能否确定最小值在右侧？——可以，此时说明区间<code>[mid...right]</code>出现了降序</p>\n</li>\n</ul></div>\n\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>经过上面的分析，我们可以尝试写出代码。二分法的代码过程，需要关注的点在循环终止条件以及最后返回什么。在这道题中，最小值一定在数组中，而我们一直在删去不可能存在最小值的区间，当区间只剩下一个元素，那么它一定是最小值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt; right)&#123;<span class=\"comment\">//考虑终止条件</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right-left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] &gt; nums[right])&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;<span class=\"comment\">// +1是因为mid一定不会是最小值</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[left]; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>\n<p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p>\n<p>请找出其中最小的元素。</p>\n<p>你可以假设数组中不存在重复元素。</p>\n</blockquote>","more":"<div class=\"note info\"><p><strong>示例 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [3,4,5,1,2]</span><br><span class=\"line\">输出: 1</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [4,5,6,7,0,1,2]</span><br><span class=\"line\">输出: 0</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"👊-暴力解法\"><a href=\"#👊-暴力解法\" class=\"headerlink\" title=\"👊 暴力解法\"></a>👊 暴力解法</h3><p>对数组进行遍历，找到比前一个位置元素小（<strong>降序</strong>）的位置，即为最小值。如果没有降序，意味着数组没有旋转，旋转点为最后一个位置。那么最小值将是第一个元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> min = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; min)&#123;</span><br><span class=\"line\">            min = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"✍️-二分查找\"><a href=\"#✍️-二分查找\" class=\"headerlink\" title=\"✍️ 二分查找\"></a>✍️ 二分查找</h3><p>对于有序数组的查找问题，我们总是可以考虑采用二分来解决。二分的基本思路是：根据中间位置的元素和其他位置元素的大小关系，修改左右边界，达到减小区间（<strong>减治</strong>）的目的。在这个问题中，我开始的想法是让中间数和其左右位置比较，但很快就推翻了这个想法，因为这样的比较无法修改边界，也就无法达到减治的目的。<del>其实数组中每个位置的元素，和其左右位置的关系都是相同的，都是大于其左边的小于其右边的。只有最小值的特征是相反的。</del>（这是一段废话，人家本来就说是升序的数组）。不过解题的过程大多数时候是这样的，不断地试错，找到最正确的方法。</p>\n<p>思考到这里，我们应该就可以想到让中间数和左右边界作比较。</p>\n<div class=\"note danger\"><p>中间数和左边界</p>\n<ul>\n<li><p>当<code>nums[mid] &lt; nums[left]</code>，能否确定最小值在左侧？——可以，此时说明区间<code>[left...mid]</code>出现了降序</p>\n</li>\n<li><p>当<code>nums[mid] &gt; nums[left]</code>，能否确定最小值在右侧？——不能，当没有旋转的时候，最小值会在左侧</p>\n</li>\n</ul></div>\n\n<div class=\"note success\"><p>中间数和右边界</p>\n<ul>\n<li><p>当<code>nums[mid] &lt; nums[right]</code>，能否确定最小值在左侧？——可以，此时说明区间<code>[mid...right]</code>保持升序</p>\n</li>\n<li><p>当<code>nums[mid] &gt; nums[right]</code>，能否确定最小值在右侧？——可以，此时说明区间<code>[mid...right]</code>出现了降序</p>\n</li>\n</ul></div>\n\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>经过上面的分析，我们可以尝试写出代码。二分法的代码过程，需要关注的点在循环终止条件以及最后返回什么。在这道题中，最小值一定在数组中，而我们一直在删去不可能存在最小值的区间，当区间只剩下一个元素，那么它一定是最小值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt; right)&#123;<span class=\"comment\">//考虑终止条件</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right-left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] &gt; nums[right])&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;<span class=\"comment\">// +1是因为mid一定不会是最小值</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[left]; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue May 05 2020 11:11:57 GMT+0800 (中国标准时间)","title":"153. 寻找旋转排序数组中的最小值","path":"posts/e3f3cf8a.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>\n<p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p>\n<p>请找出其中最小的元素。</p>\n<p>你可以假设数组中不存在重复元素。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-01T06:50:50.142Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-01T06:50:50.142Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["Leetcode","数组","二分查找"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1374},{"title":"21. 合并两个有序链表","abbrlink":"c8c06f39","_content":"\n> 将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 \n\n<!-- more -->\n\n{% note info %}\n\n**示例：**\n\n**输入：**1->2->4，1->3->4\n\n**输出：**1->1->2->3->4->4\n\n{% endnote %}\n\n### 💡思路\n\n这道题属于归并排序的应用，数组的归并过程是：使用两个索引` i , j `指向两个数组的左边界，每次根据两个数组中各自索引位置的元素大小来将一个元素放到结果数组中然后对应索引前进。当然了，我们还需要一个索引` k `来标识元素应该放到结果数组中的哪个位置。{% fold 点击此处查看数组的归并 %}\n\n```java\npublic int[] merge(int[] arr1, int[] arr2){\n    int[] result = new int[arr1.length+arr2.length];\n    int i = 0, j = 0, k = 0;\n    while(i < arr1.length && j < arr2.length){//终止条件是arr1用完或arr2用完\n        if(arr1[i] < arr2[j]){\n            result[k++] = arr1[i++];\n        }else{\n            result[k++] = arr2[j++];\n        }\n    }\n    while(i < arr1.length){//arr2用完\n        result[k++] = arr1[i++];\n    }\n    while(j < arr2.length){//arr1用完\n        result[k++] = arr2[j++];\n    }\n    return result;\n}\n```\n\n{% endfold %}\n\n### 🧾代码\n\n了解了数组的归并过程，做这道题也就非常简单了。由于链表不像数组那样通过索引来方便的获取/修改该位置的元素，因此我们需要通过链表的`next`指针来推进归并过程。对于链表操作需要注意的是指针之间的引用关系。\n\n```java\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n    //本着不修改输入的原则,我们应该使用两个指针指向输入,避免对l1,l2直接修改\n    ListNode h1 = l1, h2 = l2;\n    //初始化一个虚拟头节点,作为结果链表\n    ListNode dummyHead = new ListNode(0);\n    ListNode cur = dummyHead;\n    while(h1 != null && h2 != null){\n        if(h1.val < h2.val){\n            cur.next = new ListNode(h1.val);\n            cur = cur.next;\n            h1 = h1.next;\n        }else{\n            cur.next = new ListNode(h2.val);\n            cur = cur.next;\n            h2 = h2.next;\n        }\n    }\n    if(h1 != null){\n        cur.next = h1;\n    }\n    if(h2 != null){\n        cur.next = h2;\n    }\n    return dummyHead.next;\n}\n```\n\n","source":"_posts/21-合并两个有序链表.md","raw":"---\ntitle: 21. 合并两个有序链表\ntags:\n  - Leetcode\n  - 归并排序\n  - 链表\ncategories:\n  - Leetcode\nabbrlink: c8c06f39\n---\n\n> 将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 \n\n<!-- more -->\n\n{% note info %}\n\n**示例：**\n\n**输入：**1->2->4，1->3->4\n\n**输出：**1->1->2->3->4->4\n\n{% endnote %}\n\n### 💡思路\n\n这道题属于归并排序的应用，数组的归并过程是：使用两个索引` i , j `指向两个数组的左边界，每次根据两个数组中各自索引位置的元素大小来将一个元素放到结果数组中然后对应索引前进。当然了，我们还需要一个索引` k `来标识元素应该放到结果数组中的哪个位置。{% fold 点击此处查看数组的归并 %}\n\n```java\npublic int[] merge(int[] arr1, int[] arr2){\n    int[] result = new int[arr1.length+arr2.length];\n    int i = 0, j = 0, k = 0;\n    while(i < arr1.length && j < arr2.length){//终止条件是arr1用完或arr2用完\n        if(arr1[i] < arr2[j]){\n            result[k++] = arr1[i++];\n        }else{\n            result[k++] = arr2[j++];\n        }\n    }\n    while(i < arr1.length){//arr2用完\n        result[k++] = arr1[i++];\n    }\n    while(j < arr2.length){//arr1用完\n        result[k++] = arr2[j++];\n    }\n    return result;\n}\n```\n\n{% endfold %}\n\n### 🧾代码\n\n了解了数组的归并过程，做这道题也就非常简单了。由于链表不像数组那样通过索引来方便的获取/修改该位置的元素，因此我们需要通过链表的`next`指针来推进归并过程。对于链表操作需要注意的是指针之间的引用关系。\n\n```java\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n    //本着不修改输入的原则,我们应该使用两个指针指向输入,避免对l1,l2直接修改\n    ListNode h1 = l1, h2 = l2;\n    //初始化一个虚拟头节点,作为结果链表\n    ListNode dummyHead = new ListNode(0);\n    ListNode cur = dummyHead;\n    while(h1 != null && h2 != null){\n        if(h1.val < h2.val){\n            cur.next = new ListNode(h1.val);\n            cur = cur.next;\n            h1 = h1.next;\n        }else{\n            cur.next = new ListNode(h2.val);\n            cur = cur.next;\n            h2 = h2.next;\n        }\n    }\n    if(h1 != null){\n        cur.next = h1;\n    }\n    if(h2 != null){\n        cur.next = h2;\n    }\n    return dummyHead.next;\n}\n```\n\n","slug":"21-合并两个有序链表","published":1,"date":"2020-05-01T02:45:36.783Z","updated":"2020-05-05T03:11:57.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1r0010z4ejdkoiayyu","content":"<blockquote>\n<p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<div class=\"note info\"><p><strong>示例：</strong></p>\n<p><strong>输入：</strong>1-&gt;2-&gt;4，1-&gt;3-&gt;4</p>\n<p><strong>输出：</strong>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></div>\n\n<h3 id=\"💡思路\"><a href=\"#💡思路\" class=\"headerlink\" title=\"💡思路\"></a>💡思路</h3><p>这道题属于归并排序的应用，数组的归并过程是：使用两个索引<code>i , j</code>指向两个数组的左边界，每次根据两个数组中各自索引位置的元素大小来将一个元素放到结果数组中然后对应索引前进。当然了，我们还需要一个索引<code>k</code>来标识元素应该放到结果数组中的哪个位置。<div><div class=\"fold_hider\"><div class=\"close hider_title\">点击此处查看数组的归并</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] merge(<span class=\"keyword\">int</span>[] arr1, <span class=\"keyword\">int</span>[] arr2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr1.length+arr2.length];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; arr1.length &amp;&amp; j &lt; arr2.length)&#123;<span class=\"comment\">//终止条件是arr1用完或arr2用完</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr1[i] &lt; arr2[j])&#123;</span><br><span class=\"line\">            result[k++] = arr1[i++];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            result[k++] = arr2[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; arr1.length)&#123;<span class=\"comment\">//arr2用完</span></span><br><span class=\"line\">        result[k++] = arr1[i++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt; arr2.length)&#123;<span class=\"comment\">//arr1用完</span></span><br><span class=\"line\">        result[k++] = arr2[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div></p>\n<h3 id=\"🧾代码\"><a href=\"#🧾代码\" class=\"headerlink\" title=\"🧾代码\"></a>🧾代码</h3><p>了解了数组的归并过程，做这道题也就非常简单了。由于链表不像数组那样通过索引来方便的获取/修改该位置的元素，因此我们需要通过链表的<code>next</code>指针来推进归并过程。对于链表操作需要注意的是指针之间的引用关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//本着不修改输入的原则,我们应该使用两个指针指向输入,避免对l1,l2直接修改</span></span><br><span class=\"line\">    ListNode h1 = l1, h2 = l2;</span><br><span class=\"line\">    <span class=\"comment\">//初始化一个虚拟头节点,作为结果链表</span></span><br><span class=\"line\">    ListNode dummyHead = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode cur = dummyHead;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(h1 != <span class=\"keyword\">null</span> &amp;&amp; h2 != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h1.val &lt; h2.val)&#123;</span><br><span class=\"line\">            cur.next = <span class=\"keyword\">new</span> ListNode(h1.val);</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">            h1 = h1.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cur.next = <span class=\"keyword\">new</span> ListNode(h2.val);</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">            h2 = h2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(h1 != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        cur.next = h1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(h2 != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        cur.next = h2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummyHead.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>\n</blockquote>","more":"<div class=\"note info\"><p><strong>示例：</strong></p>\n<p><strong>输入：</strong>1-&gt;2-&gt;4，1-&gt;3-&gt;4</p>\n<p><strong>输出：</strong>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></div>\n\n<h3 id=\"💡思路\"><a href=\"#💡思路\" class=\"headerlink\" title=\"💡思路\"></a>💡思路</h3><p>这道题属于归并排序的应用，数组的归并过程是：使用两个索引<code>i , j</code>指向两个数组的左边界，每次根据两个数组中各自索引位置的元素大小来将一个元素放到结果数组中然后对应索引前进。当然了，我们还需要一个索引<code>k</code>来标识元素应该放到结果数组中的哪个位置。<div><div class=\"fold_hider\"><div class=\"close hider_title\">点击此处查看数组的归并</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] merge(<span class=\"keyword\">int</span>[] arr1, <span class=\"keyword\">int</span>[] arr2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr1.length+arr2.length];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; arr1.length &amp;&amp; j &lt; arr2.length)&#123;<span class=\"comment\">//终止条件是arr1用完或arr2用完</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr1[i] &lt; arr2[j])&#123;</span><br><span class=\"line\">            result[k++] = arr1[i++];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            result[k++] = arr2[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; arr1.length)&#123;<span class=\"comment\">//arr2用完</span></span><br><span class=\"line\">        result[k++] = arr1[i++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt; arr2.length)&#123;<span class=\"comment\">//arr1用完</span></span><br><span class=\"line\">        result[k++] = arr2[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div></p>\n<h3 id=\"🧾代码\"><a href=\"#🧾代码\" class=\"headerlink\" title=\"🧾代码\"></a>🧾代码</h3><p>了解了数组的归并过程，做这道题也就非常简单了。由于链表不像数组那样通过索引来方便的获取/修改该位置的元素，因此我们需要通过链表的<code>next</code>指针来推进归并过程。对于链表操作需要注意的是指针之间的引用关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//本着不修改输入的原则,我们应该使用两个指针指向输入,避免对l1,l2直接修改</span></span><br><span class=\"line\">    ListNode h1 = l1, h2 = l2;</span><br><span class=\"line\">    <span class=\"comment\">//初始化一个虚拟头节点,作为结果链表</span></span><br><span class=\"line\">    ListNode dummyHead = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ListNode cur = dummyHead;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(h1 != <span class=\"keyword\">null</span> &amp;&amp; h2 != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(h1.val &lt; h2.val)&#123;</span><br><span class=\"line\">            cur.next = <span class=\"keyword\">new</span> ListNode(h1.val);</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">            h1 = h1.next;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            cur.next = <span class=\"keyword\">new</span> ListNode(h2.val);</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">            h2 = h2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(h1 != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        cur.next = h1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(h2 != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        cur.next = h2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummyHead.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue May 05 2020 11:11:57 GMT+0800 (中国标准时间)","title":"21. 合并两个有序链表","path":"posts/c8c06f39.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-01T02:45:36.783Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-01T02:45:36.783Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["Leetcode","归并排序","链表"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1332},{"title":"202. 快乐数","date":"2020-04-30T14:14:00.000Z","abbrlink":"827e2fc4","_content":"\n> 编写一个算法来判断一个数 ` n ` 是不是快乐数。\n>\n> 快乐数定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为1，也可能是无限循环但始终变不到1。如果可以变为1，那么这个数就是快乐数。\n>\n> 如果 ` n `  是快乐数就返回True；不是，则返回False。\n\n<!-- more -->\n\n{% note info %}\n\n示例：\n\n输入： 19\n输出： true\n解释： 1²+9² = 82，8²+2² = 68，6²+8² = 100，1²+0²+0² = 1.\n\n{% endnote %}\n\n### 💡 思路\n\n第一步是写一个求平方和的方法。\n\n如何得到结果？——不断求平方和直到平方和为1的时候返回True。\n\n可以推断的是，不断求平方和的过程中，数字不会一直变大到无穷大，每一个位置上数字的范围是0-9，平方和的最大值是每一个位置都取9的情况，以3位数为例，999的平方和为9² + 9² +9²  = 243，4位数时，9999的平方和为9² + 9² +9² +9²  = 325。再往下演算可以知道，数字不会一直变大。\n\n可能出现的情况？\n\n1. 在有穷步之后，得到1。如示例\n2. 出现循环，也就是在求平方和过程中，回到了曾经到达过的某个值。\n\n于是，我们找到了可以终止循环的条件——重复出现的平方和。\n\n### 🧾 代码\n\n经过上面的分析，这里我们使用一个set来判断是否重复出现。\n\n```java\npublic boolean isHappy(int n) {\n    HashSet<Integer> set = new HashSet<>();\n    set.add(n);\n    while(n != 1){\n\t\tn = getSquare(n);\n        if(set.contains(n)){\n            return false;\n        }else{\n            set.add(n);\n        }\n    }\n    return true;\n}\n//求平方和\npublic int getSquare(int n){\n    int sum = 0;\n    while(n > 0){\n        int m = n % 10;\n        n /= 10;\n        sum += m * m;\n    }\n    return sum;\n}\n```\n\n### 📈 进阶\n\n当给定数字不是快乐数时，在不断求解下一个数的过程中会形成环，尽管我们没有保存到每一个平方数，但是依然可以将求解过程看成在一个链表找下一个节点的过程，那么问题可以转换为证明**链表存在环**问题，因此可以使用**快慢指针**来解决。**快慢指针**的过程为：快指针一次走两步，慢指针一次走一步，如果链表存在环，那么快慢指针最终会到达同一个节点。\n\n当给定数字为快乐数时，快指针会更早到达1。\n\n```java\npublic boolean isHappy(int n) {\n\tint slow = n, fast = getSquare(n);\n    while(fast != 1 && slow != fast){\n        fast = getSquare(fast);\n        fast = getSquare(fast);\n        slow = getSquare(slow);\n    }\n    return fast == 1;\n}\n```\n\n","source":"_posts/202-快乐数.md","raw":"---\ntitle: 202. 快乐数\ndate: '2020-04-30 22:14'\ntags:\n  - Leetcode\n  - 快慢指针\ncategories:\n  - Leetcode\nabbrlink: 827e2fc4\n---\n\n> 编写一个算法来判断一个数 ` n ` 是不是快乐数。\n>\n> 快乐数定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为1，也可能是无限循环但始终变不到1。如果可以变为1，那么这个数就是快乐数。\n>\n> 如果 ` n `  是快乐数就返回True；不是，则返回False。\n\n<!-- more -->\n\n{% note info %}\n\n示例：\n\n输入： 19\n输出： true\n解释： 1²+9² = 82，8²+2² = 68，6²+8² = 100，1²+0²+0² = 1.\n\n{% endnote %}\n\n### 💡 思路\n\n第一步是写一个求平方和的方法。\n\n如何得到结果？——不断求平方和直到平方和为1的时候返回True。\n\n可以推断的是，不断求平方和的过程中，数字不会一直变大到无穷大，每一个位置上数字的范围是0-9，平方和的最大值是每一个位置都取9的情况，以3位数为例，999的平方和为9² + 9² +9²  = 243，4位数时，9999的平方和为9² + 9² +9² +9²  = 325。再往下演算可以知道，数字不会一直变大。\n\n可能出现的情况？\n\n1. 在有穷步之后，得到1。如示例\n2. 出现循环，也就是在求平方和过程中，回到了曾经到达过的某个值。\n\n于是，我们找到了可以终止循环的条件——重复出现的平方和。\n\n### 🧾 代码\n\n经过上面的分析，这里我们使用一个set来判断是否重复出现。\n\n```java\npublic boolean isHappy(int n) {\n    HashSet<Integer> set = new HashSet<>();\n    set.add(n);\n    while(n != 1){\n\t\tn = getSquare(n);\n        if(set.contains(n)){\n            return false;\n        }else{\n            set.add(n);\n        }\n    }\n    return true;\n}\n//求平方和\npublic int getSquare(int n){\n    int sum = 0;\n    while(n > 0){\n        int m = n % 10;\n        n /= 10;\n        sum += m * m;\n    }\n    return sum;\n}\n```\n\n### 📈 进阶\n\n当给定数字不是快乐数时，在不断求解下一个数的过程中会形成环，尽管我们没有保存到每一个平方数，但是依然可以将求解过程看成在一个链表找下一个节点的过程，那么问题可以转换为证明**链表存在环**问题，因此可以使用**快慢指针**来解决。**快慢指针**的过程为：快指针一次走两步，慢指针一次走一步，如果链表存在环，那么快慢指针最终会到达同一个节点。\n\n当给定数字为快乐数时，快指针会更早到达1。\n\n```java\npublic boolean isHappy(int n) {\n\tint slow = n, fast = getSquare(n);\n    while(fast != 1 && slow != fast){\n        fast = getSquare(fast);\n        fast = getSquare(fast);\n        slow = getSquare(slow);\n    }\n    return fast == 1;\n}\n```\n\n","slug":"202-快乐数","published":1,"updated":"2020-05-05T03:11:57.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1s0012z4ej710y9tra","content":"<blockquote>\n<p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p>\n<p>快乐数定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为1，也可能是无限循环但始终变不到1。如果可以变为1，那么这个数就是快乐数。</p>\n<p>如果 <code>n</code>  是快乐数就返回True；不是，则返回False。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<div class=\"note info\"><p>示例：</p>\n<p>输入： 19<br>输出： true<br>解释： 1²+9² = 82，8²+2² = 68，6²+8² = 100，1²+0²+0² = 1.</p></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>第一步是写一个求平方和的方法。</p>\n<p>如何得到结果？——不断求平方和直到平方和为1的时候返回True。</p>\n<p>可以推断的是，不断求平方和的过程中，数字不会一直变大到无穷大，每一个位置上数字的范围是0-9，平方和的最大值是每一个位置都取9的情况，以3位数为例，999的平方和为9² + 9² +9²  = 243，4位数时，9999的平方和为9² + 9² +9² +9²  = 325。再往下演算可以知道，数字不会一直变大。</p>\n<p>可能出现的情况？</p>\n<ol>\n<li>在有穷步之后，得到1。如示例</li>\n<li>出现循环，也就是在求平方和过程中，回到了曾经到达过的某个值。</li>\n</ol>\n<p>于是，我们找到了可以终止循环的条件——重复出现的平方和。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>经过上面的分析，这里我们使用一个set来判断是否重复出现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHappy</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    HashSet&lt;Integer&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    set.add(n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n != <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\tn = getSquare(n);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(set.contains(n))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            set.add(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//求平方和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSquare</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = n % <span class=\"number\">10</span>;</span><br><span class=\"line\">        n /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum += m * m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-进阶\"><a href=\"#📈-进阶\" class=\"headerlink\" title=\"📈 进阶\"></a>📈 进阶</h3><p>当给定数字不是快乐数时，在不断求解下一个数的过程中会形成环，尽管我们没有保存到每一个平方数，但是依然可以将求解过程看成在一个链表找下一个节点的过程，那么问题可以转换为证明<strong>链表存在环</strong>问题，因此可以使用<strong>快慢指针</strong>来解决。<strong>快慢指针</strong>的过程为：快指针一次走两步，慢指针一次走一步，如果链表存在环，那么快慢指针最终会到达同一个节点。</p>\n<p>当给定数字为快乐数时，快指针会更早到达1。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHappy</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> slow = n, fast = getSquare(n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"number\">1</span> &amp;&amp; slow != fast)&#123;</span><br><span class=\"line\">        fast = getSquare(fast);</span><br><span class=\"line\">        fast = getSquare(fast);</span><br><span class=\"line\">        slow = getSquare(slow);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fast == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p>\n<p>快乐数定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为1，也可能是无限循环但始终变不到1。如果可以变为1，那么这个数就是快乐数。</p>\n<p>如果 <code>n</code>  是快乐数就返回True；不是，则返回False。</p>\n</blockquote>","more":"<div class=\"note info\"><p>示例：</p>\n<p>输入： 19<br>输出： true<br>解释： 1²+9² = 82，8²+2² = 68，6²+8² = 100，1²+0²+0² = 1.</p></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>第一步是写一个求平方和的方法。</p>\n<p>如何得到结果？——不断求平方和直到平方和为1的时候返回True。</p>\n<p>可以推断的是，不断求平方和的过程中，数字不会一直变大到无穷大，每一个位置上数字的范围是0-9，平方和的最大值是每一个位置都取9的情况，以3位数为例，999的平方和为9² + 9² +9²  = 243，4位数时，9999的平方和为9² + 9² +9² +9²  = 325。再往下演算可以知道，数字不会一直变大。</p>\n<p>可能出现的情况？</p>\n<ol>\n<li>在有穷步之后，得到1。如示例</li>\n<li>出现循环，也就是在求平方和过程中，回到了曾经到达过的某个值。</li>\n</ol>\n<p>于是，我们找到了可以终止循环的条件——重复出现的平方和。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>经过上面的分析，这里我们使用一个set来判断是否重复出现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHappy</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    HashSet&lt;Integer&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    set.add(n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n != <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\tn = getSquare(n);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(set.contains(n))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            set.add(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//求平方和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSquare</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = n % <span class=\"number\">10</span>;</span><br><span class=\"line\">        n /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        sum += m * m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-进阶\"><a href=\"#📈-进阶\" class=\"headerlink\" title=\"📈 进阶\"></a>📈 进阶</h3><p>当给定数字不是快乐数时，在不断求解下一个数的过程中会形成环，尽管我们没有保存到每一个平方数，但是依然可以将求解过程看成在一个链表找下一个节点的过程，那么问题可以转换为证明<strong>链表存在环</strong>问题，因此可以使用<strong>快慢指针</strong>来解决。<strong>快慢指针</strong>的过程为：快指针一次走两步，慢指针一次走一步，如果链表存在环，那么快慢指针最终会到达同一个节点。</p>\n<p>当给定数字为快乐数时，快指针会更早到达1。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHappy</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> slow = n, fast = getSquare(n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"number\">1</span> &amp;&amp; slow != fast)&#123;</span><br><span class=\"line\">        fast = getSquare(fast);</span><br><span class=\"line\">        fast = getSquare(fast);</span><br><span class=\"line\">        slow = getSquare(slow);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fast == <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue May 05 2020 11:11:57 GMT+0800 (中国标准时间)","title":"202. 快乐数","path":"posts/827e2fc4.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p>\n<p>快乐数定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为1，也可能是无限循环但始终变不到1。如果可以变为1，那么这个数就是快乐数。</p>\n<p>如果 <code>n</code>  是快乐数就返回True；不是，则返回False。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-04-30T14:14:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-04-30T14:14:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["Leetcode","快慢指针"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1247},{"title":"221. 最大正方形","abbrlink":"37cbfc16","_content":"\n> 在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。\n>\n> 示例：\n>\n> ```java\n> 输入：\n> 1 0 1 0 0\n> 1 0 1 1 1\n> 1 1 1 1 1\n> 1 0 0 1 0\n> \n> 输出: 4\n> ```\n\n<!-- more -->\n\n### 💡 思路\n\n在二维数组求解比较容易想到**动态规划**的思想，可能主要是机器人运动范围和岛屿数量这类问题的原因。于是开始考虑 ` dp[i][j] `代表什么，由于题目求只包含 1 的最大正方形，因此可以考虑让 ` dp[i][j] `代表以该位置为**右下角**的最大正方形**边长**。右下角是由于动态规划思想从之前的结果推得这次的结果，那么右下角就是最后离开这个正方形的地方。边长是由于可以通过边长求得面积。\n\n接下来考虑递推关系式，当当前位置为 0 时，` dp[i][j] ` 也为0，因为没有以这个位置为右下角的正方形。当当前位置为 1 时，就比较复杂，需要一波分析。分析也不是毫无头绪和方向的，在二维数组的动态规划问题中，一般只有三个位置需要考虑，左侧、上方、左上角。\n\n## 🧾 代码\n\n```java\npublic int maximalSquare(char[][] matrix) {\n    if(matrix == null || matrix.length == 0 || matrix[0].length == 0){\n        return 0;\n    }\n    int max = 0;\n    int n = matrix.length, m = matrix[0].length;\n    int[][] dp = new int[n][m];\n    for(int i = 0; i < m; i++){\n        dp[0][i] = matrix[0][i] == '1' ? 1 : 0;\n        max = Math.max(max, dp[0][i]);\n    }\n    for(int i = 0; i < n; i++){\n        dp[i][0] = matrix[i][0] == '1' ? 1 : 0;\n        max = Math.max(max, dp[i][0]);\n    }\n    for(int i = 1; i < n; i++){\n        for(int j = 1; j < m; j++){\n            if(matrix[i][j] == '0'){\n                dp[i][j] = 0;\n            }else{\n                dp[i][j] = Math.min(dp[i-1][j],Math.min(dp[i-1][j-1],dp[i][j-1]))+1;\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n    }\n    return max*max;\n}\n```\n\n","source":"_posts/221-最大正方形.md","raw":"---\ntitle: 221. 最大正方形\ntags:\n  - Leetcode\n  - 动态规划\ncategories:\n  - Leetcode\nabbrlink: 37cbfc16\n---\n\n> 在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。\n>\n> 示例：\n>\n> ```java\n> 输入：\n> 1 0 1 0 0\n> 1 0 1 1 1\n> 1 1 1 1 1\n> 1 0 0 1 0\n> \n> 输出: 4\n> ```\n\n<!-- more -->\n\n### 💡 思路\n\n在二维数组求解比较容易想到**动态规划**的思想，可能主要是机器人运动范围和岛屿数量这类问题的原因。于是开始考虑 ` dp[i][j] `代表什么，由于题目求只包含 1 的最大正方形，因此可以考虑让 ` dp[i][j] `代表以该位置为**右下角**的最大正方形**边长**。右下角是由于动态规划思想从之前的结果推得这次的结果，那么右下角就是最后离开这个正方形的地方。边长是由于可以通过边长求得面积。\n\n接下来考虑递推关系式，当当前位置为 0 时，` dp[i][j] ` 也为0，因为没有以这个位置为右下角的正方形。当当前位置为 1 时，就比较复杂，需要一波分析。分析也不是毫无头绪和方向的，在二维数组的动态规划问题中，一般只有三个位置需要考虑，左侧、上方、左上角。\n\n## 🧾 代码\n\n```java\npublic int maximalSquare(char[][] matrix) {\n    if(matrix == null || matrix.length == 0 || matrix[0].length == 0){\n        return 0;\n    }\n    int max = 0;\n    int n = matrix.length, m = matrix[0].length;\n    int[][] dp = new int[n][m];\n    for(int i = 0; i < m; i++){\n        dp[0][i] = matrix[0][i] == '1' ? 1 : 0;\n        max = Math.max(max, dp[0][i]);\n    }\n    for(int i = 0; i < n; i++){\n        dp[i][0] = matrix[i][0] == '1' ? 1 : 0;\n        max = Math.max(max, dp[i][0]);\n    }\n    for(int i = 1; i < n; i++){\n        for(int j = 1; j < m; j++){\n            if(matrix[i][j] == '0'){\n                dp[i][j] = 0;\n            }else{\n                dp[i][j] = Math.min(dp[i-1][j],Math.min(dp[i-1][j-1],dp[i][j-1]))+1;\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n    }\n    return max*max;\n}\n```\n\n","slug":"221-最大正方形","published":1,"date":"2020-05-08T09:20:42.425Z","updated":"2020-05-08T15:48:51.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1t0015z4ej1om7e7yi","content":"<blockquote>\n<p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>在二维数组求解比较容易想到<strong>动态规划</strong>的思想，可能主要是机器人运动范围和岛屿数量这类问题的原因。于是开始考虑 <code>dp[i][j]</code>代表什么，由于题目求只包含 1 的最大正方形，因此可以考虑让 <code>dp[i][j]</code>代表以该位置为<strong>右下角</strong>的最大正方形<strong>边长</strong>。右下角是由于动态规划思想从之前的结果推得这次的结果，那么右下角就是最后离开这个正方形的地方。边长是由于可以通过边长求得面积。</p>\n<p>接下来考虑递推关系式，当当前位置为 0 时，<code>dp[i][j]</code> 也为0，因为没有以这个位置为右下角的正方形。当当前位置为 1 时，就比较复杂，需要一波分析。分析也不是毫无头绪和方向的，在二维数组的动态规划问题中，一般只有三个位置需要考虑，左侧、上方、左上角。</p>\n<h2 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maximalSquare</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(matrix == <span class=\"keyword\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = matrix.length, m = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n][m];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][i] = matrix[<span class=\"number\">0</span>][i] == <span class=\"string\">'1'</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        max = Math.max(max, dp[<span class=\"number\">0</span>][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = matrix[i][<span class=\"number\">0</span>] == <span class=\"string\">'1'</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        max = Math.max(max, dp[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; m; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == <span class=\"string\">'0'</span>)&#123;</span><br><span class=\"line\">                dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[i][j] = Math.min(dp[i-<span class=\"number\">1</span>][j],Math.min(dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>],dp[i][j-<span class=\"number\">1</span>]))+<span class=\"number\">1</span>;</span><br><span class=\"line\">                max = Math.max(max, dp[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max*max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n</blockquote>","more":"<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>在二维数组求解比较容易想到<strong>动态规划</strong>的思想，可能主要是机器人运动范围和岛屿数量这类问题的原因。于是开始考虑 <code>dp[i][j]</code>代表什么，由于题目求只包含 1 的最大正方形，因此可以考虑让 <code>dp[i][j]</code>代表以该位置为<strong>右下角</strong>的最大正方形<strong>边长</strong>。右下角是由于动态规划思想从之前的结果推得这次的结果，那么右下角就是最后离开这个正方形的地方。边长是由于可以通过边长求得面积。</p>\n<p>接下来考虑递推关系式，当当前位置为 0 时，<code>dp[i][j]</code> 也为0，因为没有以这个位置为右下角的正方形。当当前位置为 1 时，就比较复杂，需要一波分析。分析也不是毫无头绪和方向的，在二维数组的动态规划问题中，一般只有三个位置需要考虑，左侧、上方、左上角。</p>\n<h2 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maximalSquare</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(matrix == <span class=\"keyword\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = matrix.length, m = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n][m];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][i] = matrix[<span class=\"number\">0</span>][i] == <span class=\"string\">'1'</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        max = Math.max(max, dp[<span class=\"number\">0</span>][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = matrix[i][<span class=\"number\">0</span>] == <span class=\"string\">'1'</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        max = Math.max(max, dp[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; m; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == <span class=\"string\">'0'</span>)&#123;</span><br><span class=\"line\">                dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[i][j] = Math.min(dp[i-<span class=\"number\">1</span>][j],Math.min(dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>],dp[i][j-<span class=\"number\">1</span>]))+<span class=\"number\">1</span>;</span><br><span class=\"line\">                max = Math.max(max, dp[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max*max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri May 08 2020 23:48:51 GMT+0800 (中国标准时间)","title":"221. 最大正方形","path":"posts/37cbfc16.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出: <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-08T09:20:42.425Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-08T09:20:42.425Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["Leetcode","动态规划"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1040},{"title":"287. 寻找重复数","abbrlink":"25e6dcf4","_content":"\n> 给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。\n\n{% note info %}\n\n**示例 1:**\n\n```java\n输入: [1,3,4,2,2]\n输出: 2\n```\n\n**示例 2:**\n\n```java\n输入: [3,1,3,4,2]\n输出: 3\n```\n\n{% endnote %}\n\n<!-- more -->\n\n### 💡 思路\n\n比较直接的想法有先排序再遍历（破坏输入）、hashSet去重（` O(n) `额外空间），都不是很好。\n\n再仔细地分析题目，可以发现有两个重要的信息：数组长度为 ` n + 1 `、数字范围为` [1...n] `。应用排序的思路，数组的每一个位置上应该出现的数字为该位置下标+1，我们在遍历数组通过交换位置将数字放到应该在的位置的过程中，可以找出重复的元素，其具体表现为：当遍历到位置` i `时，如果当前位置的数字没有出现在应该在的位置（` nums[i] != i + 1 `），通过交换 `nums[i] `和 ` nums[nums[i] - 1] ` ，让数字出现在应该在的位置，而当位置（` nums[i] - 1 ` ）已经存放了正确的数字时，表示出现了重复。例如，对于数组` [1,1,2,2] `，当 ` i = 1 `时，` nums[1] = 1 != 1+1 `，需要交换位置，而此时，` nums[1] - 1 = 0 ` 位置上已经存放了正确的数字 ` 1 `，于是可以得到重复的数字为1。\n\n### 🧾 代码\n\n需要注意的是，在成功交换之后，需要重新判断位置` i `。\n\n```java\nclass Solution {\n    public int findDuplicate(int[] nums) {\n        if(nums == null || nums.length == 0){\n            return -1;\n        }\n        //解法1：先sort再for\n        // Arrays.sort(nums);\n        // for(int i = 0 ; i < nums.length-1 ;i ++){\n        //     if(nums[i] == nums[i + 1]){\n        //         return nums[i];\n        //     }\n        // }\n        \n        //解法2：让元素去到其该去的位置\n        for(int i = 0 ; i < nums.length; i++){\n            if(nums[i] != i + 1){\n                int temp = nums[nums[i]-1];\n                if(temp == nums[i]){\n                    return temp;\n                }\n                nums[nums[i]-1] = nums[i];\n                nums[i] = temp;\n                i--;//成功交换后需要重新判断位置i\n            }\n        }\n        return -1;\n    }\n}\n```\n\n### 📈 二分法\n\n（这道题能想到这个做法也是对二分查找运用得登峰造极了😂）\n\n具体的做法是：左右边界分别为1和n。通过记录数组中小于等于中位数` mid ` 的个数，判断重复元素出现在左半部还是右半部，然后更新左右边界。例如：在数组` [3,1,2,2,4]`中`mid = 2 `，数组中<=2的有3个，因此重复的出现在` [1...2] `范围中；在数组` [3,1,2,3,4]` 中<=2的有2个,所以重复的出现在` [2+1,...4] `中。\n\n```java\nclass Solution {\n    public int findDuplicate(int[] nums) {\n        if(nums == null || nums.length == 0){\n            return -1;\n        }\n        //二分-不断排除不会存在重复的一边\n        int left = 1, right = nums.length-1;\n        while(left < right){\n            int mid = left + (right-left)/2;\n\n            int count = 0; \n            for(int i : nums){\n                if( i <= mid){\n                    count ++;\n                }\n            }\n            if(count > mid){\n                right = mid;\n            }else{\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n}\n```\n\n","source":"_posts/287-寻找重复数.md","raw":"---\ntitle: 287. 寻找重复数\ntags:\n  - 数组\n  - 二分查找\ncategories:\n  - Leetcode\nabbrlink: 25e6dcf4\n---\n\n> 给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。\n\n{% note info %}\n\n**示例 1:**\n\n```java\n输入: [1,3,4,2,2]\n输出: 2\n```\n\n**示例 2:**\n\n```java\n输入: [3,1,3,4,2]\n输出: 3\n```\n\n{% endnote %}\n\n<!-- more -->\n\n### 💡 思路\n\n比较直接的想法有先排序再遍历（破坏输入）、hashSet去重（` O(n) `额外空间），都不是很好。\n\n再仔细地分析题目，可以发现有两个重要的信息：数组长度为 ` n + 1 `、数字范围为` [1...n] `。应用排序的思路，数组的每一个位置上应该出现的数字为该位置下标+1，我们在遍历数组通过交换位置将数字放到应该在的位置的过程中，可以找出重复的元素，其具体表现为：当遍历到位置` i `时，如果当前位置的数字没有出现在应该在的位置（` nums[i] != i + 1 `），通过交换 `nums[i] `和 ` nums[nums[i] - 1] ` ，让数字出现在应该在的位置，而当位置（` nums[i] - 1 ` ）已经存放了正确的数字时，表示出现了重复。例如，对于数组` [1,1,2,2] `，当 ` i = 1 `时，` nums[1] = 1 != 1+1 `，需要交换位置，而此时，` nums[1] - 1 = 0 ` 位置上已经存放了正确的数字 ` 1 `，于是可以得到重复的数字为1。\n\n### 🧾 代码\n\n需要注意的是，在成功交换之后，需要重新判断位置` i `。\n\n```java\nclass Solution {\n    public int findDuplicate(int[] nums) {\n        if(nums == null || nums.length == 0){\n            return -1;\n        }\n        //解法1：先sort再for\n        // Arrays.sort(nums);\n        // for(int i = 0 ; i < nums.length-1 ;i ++){\n        //     if(nums[i] == nums[i + 1]){\n        //         return nums[i];\n        //     }\n        // }\n        \n        //解法2：让元素去到其该去的位置\n        for(int i = 0 ; i < nums.length; i++){\n            if(nums[i] != i + 1){\n                int temp = nums[nums[i]-1];\n                if(temp == nums[i]){\n                    return temp;\n                }\n                nums[nums[i]-1] = nums[i];\n                nums[i] = temp;\n                i--;//成功交换后需要重新判断位置i\n            }\n        }\n        return -1;\n    }\n}\n```\n\n### 📈 二分法\n\n（这道题能想到这个做法也是对二分查找运用得登峰造极了😂）\n\n具体的做法是：左右边界分别为1和n。通过记录数组中小于等于中位数` mid ` 的个数，判断重复元素出现在左半部还是右半部，然后更新左右边界。例如：在数组` [3,1,2,2,4]`中`mid = 2 `，数组中<=2的有3个，因此重复的出现在` [1...2] `范围中；在数组` [3,1,2,3,4]` 中<=2的有2个,所以重复的出现在` [2+1,...4] `中。\n\n```java\nclass Solution {\n    public int findDuplicate(int[] nums) {\n        if(nums == null || nums.length == 0){\n            return -1;\n        }\n        //二分-不断排除不会存在重复的一边\n        int left = 1, right = nums.length-1;\n        while(left < right){\n            int mid = left + (right-left)/2;\n\n            int count = 0; \n            for(int i : nums){\n                if( i <= mid){\n                    count ++;\n                }\n            }\n            if(count > mid){\n                right = mid;\n            }else{\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n}\n```\n\n","slug":"287-寻找重复数","published":1,"date":"2020-05-26T14:51:38.268Z","updated":"2020-05-26T15:23:51.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1u0018z4ejcrg38w1m","content":"<blockquote>\n<p>给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p>\n</blockquote>\n<div class=\"note info\"><p><strong>示例 1:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出: <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出: <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></div>\n\n<a id=\"more\"></a>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>比较直接的想法有先排序再遍历（破坏输入）、hashSet去重（<code>O(n)</code>额外空间），都不是很好。</p>\n<p>再仔细地分析题目，可以发现有两个重要的信息：数组长度为 <code>n + 1</code>、数字范围为<code>[1...n]</code>。应用排序的思路，数组的每一个位置上应该出现的数字为该位置下标+1，我们在遍历数组通过交换位置将数字放到应该在的位置的过程中，可以找出重复的元素，其具体表现为：当遍历到位置<code>i</code>时，如果当前位置的数字没有出现在应该在的位置（<code>nums[i] != i + 1</code>），通过交换 <code>nums[i]</code>和 <code>nums[nums[i] - 1]</code> ，让数字出现在应该在的位置，而当位置（<code>nums[i] - 1</code> ）已经存放了正确的数字时，表示出现了重复。例如，对于数组<code>[1,1,2,2]</code>，当 <code>i = 1</code>时，<code>nums[1] = 1 != 1+1</code>，需要交换位置，而此时，<code>nums[1] - 1 = 0</code> 位置上已经存放了正确的数字 <code>1</code>，于是可以得到重复的数字为1。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>需要注意的是，在成功交换之后，需要重新判断位置<code>i</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//解法1：先sort再for</span></span><br><span class=\"line\">        <span class=\"comment\">// Arrays.sort(nums);</span></span><br><span class=\"line\">        <span class=\"comment\">// for(int i = 0 ; i &lt; nums.length-1 ;i ++)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     if(nums[i] == nums[i + 1])&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//         return nums[i];</span></span><br><span class=\"line\">        <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//解法2：让元素去到其该去的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i] != i + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = nums[nums[i]-<span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp == nums[i])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                nums[nums[i]-<span class=\"number\">1</span>] = nums[i];</span><br><span class=\"line\">                nums[i] = temp;</span><br><span class=\"line\">                i--;<span class=\"comment\">//成功交换后需要重新判断位置i</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-二分法\"><a href=\"#📈-二分法\" class=\"headerlink\" title=\"📈 二分法\"></a>📈 二分法</h3><p>（这道题能想到这个做法也是对二分查找运用得登峰造极了😂）</p>\n<p>具体的做法是：左右边界分别为1和n。通过记录数组中小于等于中位数<code>mid</code> 的个数，判断重复元素出现在左半部还是右半部，然后更新左右边界。例如：在数组<code>[3,1,2,2,4]</code>中<code>mid = 2</code>，数组中&lt;=2的有3个，因此重复的出现在<code>[1...2]</code>范围中；在数组<code>[3,1,2,3,4]</code> 中&lt;=2的有2个,所以重复的出现在<code>[2+1,...4]</code>中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//二分-不断排除不会存在重复的一边</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">1</span>, right = nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt; right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right-left)/<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>; </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>( i &lt;= mid)&#123;</span><br><span class=\"line\">                    count ++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count &gt; mid)&#123;</span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p>\n</blockquote>\n<div class=\"note info\"><p><strong>示例 1:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出: <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出: <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></div>","more":"<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>比较直接的想法有先排序再遍历（破坏输入）、hashSet去重（<code>O(n)</code>额外空间），都不是很好。</p>\n<p>再仔细地分析题目，可以发现有两个重要的信息：数组长度为 <code>n + 1</code>、数字范围为<code>[1...n]</code>。应用排序的思路，数组的每一个位置上应该出现的数字为该位置下标+1，我们在遍历数组通过交换位置将数字放到应该在的位置的过程中，可以找出重复的元素，其具体表现为：当遍历到位置<code>i</code>时，如果当前位置的数字没有出现在应该在的位置（<code>nums[i] != i + 1</code>），通过交换 <code>nums[i]</code>和 <code>nums[nums[i] - 1]</code> ，让数字出现在应该在的位置，而当位置（<code>nums[i] - 1</code> ）已经存放了正确的数字时，表示出现了重复。例如，对于数组<code>[1,1,2,2]</code>，当 <code>i = 1</code>时，<code>nums[1] = 1 != 1+1</code>，需要交换位置，而此时，<code>nums[1] - 1 = 0</code> 位置上已经存放了正确的数字 <code>1</code>，于是可以得到重复的数字为1。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>需要注意的是，在成功交换之后，需要重新判断位置<code>i</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//解法1：先sort再for</span></span><br><span class=\"line\">        <span class=\"comment\">// Arrays.sort(nums);</span></span><br><span class=\"line\">        <span class=\"comment\">// for(int i = 0 ; i &lt; nums.length-1 ;i ++)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     if(nums[i] == nums[i + 1])&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//         return nums[i];</span></span><br><span class=\"line\">        <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//解法2：让元素去到其该去的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i] != i + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = nums[nums[i]-<span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp == nums[i])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                nums[nums[i]-<span class=\"number\">1</span>] = nums[i];</span><br><span class=\"line\">                nums[i] = temp;</span><br><span class=\"line\">                i--;<span class=\"comment\">//成功交换后需要重新判断位置i</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-二分法\"><a href=\"#📈-二分法\" class=\"headerlink\" title=\"📈 二分法\"></a>📈 二分法</h3><p>（这道题能想到这个做法也是对二分查找运用得登峰造极了😂）</p>\n<p>具体的做法是：左右边界分别为1和n。通过记录数组中小于等于中位数<code>mid</code> 的个数，判断重复元素出现在左半部还是右半部，然后更新左右边界。例如：在数组<code>[3,1,2,2,4]</code>中<code>mid = 2</code>，数组中&lt;=2的有3个，因此重复的出现在<code>[1...2]</code>范围中；在数组<code>[3,1,2,3,4]</code> 中&lt;=2的有2个,所以重复的出现在<code>[2+1,...4]</code>中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//二分-不断排除不会存在重复的一边</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">1</span>, right = nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt; right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right-left)/<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>; </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>( i &lt;= mid)&#123;</span><br><span class=\"line\">                    count ++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count &gt; mid)&#123;</span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue May 26 2020 23:23:51 GMT+0800 (中国标准时间)","title":"287. 寻找重复数","path":"posts/25e6dcf4.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p>\n</blockquote>\n<div class=\"note info\"><p><strong>示例 1:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出: <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出: <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></div>","date":{"_isAMomentObject":true,"_i":"2020-05-26T14:51:38.268Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-26T14:51:38.268Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["数组","二分查找"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1677},{"title":"3. 无重复字符的最长子串","abbrlink":"4bff4329","_content":"\n> 给定一个字符串，请你找出其中不含有重复字符的 **最长子串** 的长度。\n>\n> **示例 1:**\n>\n> ```\n> 输入: \"abcabcbb\"\n> 输出: 3 \n> 解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n> ```\n\n<!-- more -->\n\n### 👊 暴力解法\n\n只要我们知道了以每一个位置为开头的无重复最长子串，就可以求得整个字符串的无重复最长子串。这样的做法时间复杂度是O(n²)的。\n\n过程：从一个位置开始，不断向后查找，当出现重复字符时，停下，记录子串长度。判断重复这里我使用一个HashSet来实现。\n\n```java\npublic int lengthOfLongestSubstring(String s) {\n    if(s == null || s.length() == 0){\n        return 0;\n    }\n    //暴力的做法是：判断以每一个位置为起点的最长无重复字符\n    int res = 0;\n    for(int start = 0; start < s.length(); start++){\n        HashSet<Character> set = new HashSet<>();\n        set.add(s.charAt(start));\n        for(int end = start+1; end < s.length(); end++ ){\n            if(!set.contains(s.charAt(end))){\n                set.add(s.charAt(end));\n            }else{\n                //res = Math.max(res,set.size());//由于可能只有一个字符，无法进入内层循环因此不能在这里更新\n                break;\n            }\n        }\n        res = Math.max(res,set.size());//在内层循环结束后更新\n    }\n    return res;\n}\n```\n\n### ✍️ 优化\n\n在上述的过程中，我们每次找完一个位置的子串之后就将之前的记录全部清除（` set = new HashSet<>(); `)，再次从起点 ` start ` 的下一个位置开始查找，导致时间复杂度是O(N²)级别的。其实当出现重复时，` [start...end) ` 左闭右开区间上，全都不是重复的，则` [start + 1...end) ` 也是不重复的，那么我们可以保留 ` end `位置，利用上一次记录的结果，不再从 ` start + 1 `的位置重新开始查找。这个过程我们就维护了一个**滑动窗口** ` [start...end) `.\n\n```java\npublic int lengthOfLongestSubstring(String s) {\n    if(s == null || s.length() == 0){\n        return 0;\n    }\n    int n = s.length(), res = 0, right = 0, left = 0;\n    Set<Character> set = new HashSet<>();\n    while( left < n){\n        if( right < n && !set.contains(s.charAt(right)) ){\n            set.add(s.charAt(right));\n            right ++;\n        }else{\n            res = Math.max(res, right - left);\n            set.remove(s.charAt(left));\n            left++;\n        }\n    }\n    return res;\n}\n```\n\n{% note success %}\n\n更进一步的，当字符串中的出现字符的范围较小时，使用一个int数组来达到优化的效果。\n\n{% fold 点击展开 %}\n\n```java\npublic int lengthOfLongestSubstring(String s) {\n    if(s == null || s.length() == 0){\n        return 0;\n    }\n    int n = s.length(), res = 0, right = 0, left = 0;\n    int[] record = new int[128];\n    while( left < n){\n        if( right < n && record[s.charAt(right)] == 0){//未重复,右移\n            record[s.charAt(right++)] ++;\n        }else{\n            res = Math.max(res, right - left);\n            record[s.charAt(left++)]--;\n        }           \n    }\n    return res;\n}\n```\n\n{% endfold %}\n\n{% endnote %}\n\n","source":"_posts/3-无重复字符的最长子串.md","raw":"---\ntitle: 3. 无重复字符的最长子串\ntags:\n  - Leetcode\n  - 滑动窗口\ncategories:\n  - Leetcode\nabbrlink: 4bff4329\n---\n\n> 给定一个字符串，请你找出其中不含有重复字符的 **最长子串** 的长度。\n>\n> **示例 1:**\n>\n> ```\n> 输入: \"abcabcbb\"\n> 输出: 3 \n> 解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n> ```\n\n<!-- more -->\n\n### 👊 暴力解法\n\n只要我们知道了以每一个位置为开头的无重复最长子串，就可以求得整个字符串的无重复最长子串。这样的做法时间复杂度是O(n²)的。\n\n过程：从一个位置开始，不断向后查找，当出现重复字符时，停下，记录子串长度。判断重复这里我使用一个HashSet来实现。\n\n```java\npublic int lengthOfLongestSubstring(String s) {\n    if(s == null || s.length() == 0){\n        return 0;\n    }\n    //暴力的做法是：判断以每一个位置为起点的最长无重复字符\n    int res = 0;\n    for(int start = 0; start < s.length(); start++){\n        HashSet<Character> set = new HashSet<>();\n        set.add(s.charAt(start));\n        for(int end = start+1; end < s.length(); end++ ){\n            if(!set.contains(s.charAt(end))){\n                set.add(s.charAt(end));\n            }else{\n                //res = Math.max(res,set.size());//由于可能只有一个字符，无法进入内层循环因此不能在这里更新\n                break;\n            }\n        }\n        res = Math.max(res,set.size());//在内层循环结束后更新\n    }\n    return res;\n}\n```\n\n### ✍️ 优化\n\n在上述的过程中，我们每次找完一个位置的子串之后就将之前的记录全部清除（` set = new HashSet<>(); `)，再次从起点 ` start ` 的下一个位置开始查找，导致时间复杂度是O(N²)级别的。其实当出现重复时，` [start...end) ` 左闭右开区间上，全都不是重复的，则` [start + 1...end) ` 也是不重复的，那么我们可以保留 ` end `位置，利用上一次记录的结果，不再从 ` start + 1 `的位置重新开始查找。这个过程我们就维护了一个**滑动窗口** ` [start...end) `.\n\n```java\npublic int lengthOfLongestSubstring(String s) {\n    if(s == null || s.length() == 0){\n        return 0;\n    }\n    int n = s.length(), res = 0, right = 0, left = 0;\n    Set<Character> set = new HashSet<>();\n    while( left < n){\n        if( right < n && !set.contains(s.charAt(right)) ){\n            set.add(s.charAt(right));\n            right ++;\n        }else{\n            res = Math.max(res, right - left);\n            set.remove(s.charAt(left));\n            left++;\n        }\n    }\n    return res;\n}\n```\n\n{% note success %}\n\n更进一步的，当字符串中的出现字符的范围较小时，使用一个int数组来达到优化的效果。\n\n{% fold 点击展开 %}\n\n```java\npublic int lengthOfLongestSubstring(String s) {\n    if(s == null || s.length() == 0){\n        return 0;\n    }\n    int n = s.length(), res = 0, right = 0, left = 0;\n    int[] record = new int[128];\n    while( left < n){\n        if( right < n && record[s.charAt(right)] == 0){//未重复,右移\n            record[s.charAt(right++)] ++;\n        }else{\n            res = Math.max(res, right - left);\n            record[s.charAt(left++)]--;\n        }           \n    }\n    return res;\n}\n```\n\n{% endfold %}\n\n{% endnote %}\n\n","slug":"3-无重复字符的最长子串","published":1,"date":"2020-05-02T01:24:52.564Z","updated":"2020-05-05T03:11:57.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1u001bz4ej159g6fod","content":"<blockquote>\n<p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;abcabcbb&quot;</span><br><span class=\"line\">输出: 3 </span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"👊-暴力解法\"><a href=\"#👊-暴力解法\" class=\"headerlink\" title=\"👊 暴力解法\"></a>👊 暴力解法</h3><p>只要我们知道了以每一个位置为开头的无重复最长子串，就可以求得整个字符串的无重复最长子串。这样的做法时间复杂度是O(n²)的。</p>\n<p>过程：从一个位置开始，不断向后查找，当出现重复字符时，停下，记录子串长度。判断重复这里我使用一个HashSet来实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span> || s.length() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//暴力的做法是：判断以每一个位置为起点的最长无重复字符</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> start = <span class=\"number\">0</span>; start &lt; s.length(); start++)&#123;</span><br><span class=\"line\">        HashSet&lt;Character&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        set.add(s.charAt(start));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> end = start+<span class=\"number\">1</span>; end &lt; s.length(); end++ )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!set.contains(s.charAt(end)))&#123;</span><br><span class=\"line\">                set.add(s.charAt(end));</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//res = Math.max(res,set.size());//由于可能只有一个字符，无法进入内层循环因此不能在这里更新</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = Math.max(res,set.size());<span class=\"comment\">//在内层循环结束后更新</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"✍️-优化\"><a href=\"#✍️-优化\" class=\"headerlink\" title=\"✍️ 优化\"></a>✍️ 优化</h3><p>在上述的过程中，我们每次找完一个位置的子串之后就将之前的记录全部清除（<code>set = new HashSet&lt;&gt;();</code>)，再次从起点 <code>start</code> 的下一个位置开始查找，导致时间复杂度是O(N²)级别的。其实当出现重复时，<code>[start...end)</code> 左闭右开区间上，全都不是重复的，则<code>[start + 1...end)</code> 也是不重复的，那么我们可以保留 <code>end</code>位置，利用上一次记录的结果，不再从 <code>start + 1</code>的位置重新开始查找。这个过程我们就维护了一个<strong>滑动窗口</strong> <code>[start...end)</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span> || s.length() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = s.length(), res = <span class=\"number\">0</span>, right = <span class=\"number\">0</span>, left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Set&lt;Character&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( left &lt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( right &lt; n &amp;&amp; !set.contains(s.charAt(right)) )&#123;</span><br><span class=\"line\">            set.add(s.charAt(right));</span><br><span class=\"line\">            right ++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res = Math.max(res, right - left);</span><br><span class=\"line\">            set.remove(s.charAt(left));</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note success\"><p>更进一步的，当字符串中的出现字符的范围较小时，使用一个int数组来达到优化的效果。</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">点击展开</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span> || s.length() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = s.length(), res = <span class=\"number\">0</span>, right = <span class=\"number\">0</span>, left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] record = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">128</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( left &lt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( right &lt; n &amp;&amp; record[s.charAt(right)] == <span class=\"number\">0</span>)&#123;<span class=\"comment\">//未重复,右移</span></span><br><span class=\"line\">            record[s.charAt(right++)] ++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res = Math.max(res, right - left);</span><br><span class=\"line\">            record[s.charAt(left++)]--;</span><br><span class=\"line\">        &#125;           </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div></div>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;abcabcbb&quot;</span><br><span class=\"line\">输出: 3 </span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure>\n</blockquote>","more":"<h3 id=\"👊-暴力解法\"><a href=\"#👊-暴力解法\" class=\"headerlink\" title=\"👊 暴力解法\"></a>👊 暴力解法</h3><p>只要我们知道了以每一个位置为开头的无重复最长子串，就可以求得整个字符串的无重复最长子串。这样的做法时间复杂度是O(n²)的。</p>\n<p>过程：从一个位置开始，不断向后查找，当出现重复字符时，停下，记录子串长度。判断重复这里我使用一个HashSet来实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span> || s.length() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//暴力的做法是：判断以每一个位置为起点的最长无重复字符</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> start = <span class=\"number\">0</span>; start &lt; s.length(); start++)&#123;</span><br><span class=\"line\">        HashSet&lt;Character&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        set.add(s.charAt(start));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> end = start+<span class=\"number\">1</span>; end &lt; s.length(); end++ )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!set.contains(s.charAt(end)))&#123;</span><br><span class=\"line\">                set.add(s.charAt(end));</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//res = Math.max(res,set.size());//由于可能只有一个字符，无法进入内层循环因此不能在这里更新</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = Math.max(res,set.size());<span class=\"comment\">//在内层循环结束后更新</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"✍️-优化\"><a href=\"#✍️-优化\" class=\"headerlink\" title=\"✍️ 优化\"></a>✍️ 优化</h3><p>在上述的过程中，我们每次找完一个位置的子串之后就将之前的记录全部清除（<code>set = new HashSet&lt;&gt;();</code>)，再次从起点 <code>start</code> 的下一个位置开始查找，导致时间复杂度是O(N²)级别的。其实当出现重复时，<code>[start...end)</code> 左闭右开区间上，全都不是重复的，则<code>[start + 1...end)</code> 也是不重复的，那么我们可以保留 <code>end</code>位置，利用上一次记录的结果，不再从 <code>start + 1</code>的位置重新开始查找。这个过程我们就维护了一个<strong>滑动窗口</strong> <code>[start...end)</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span> || s.length() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = s.length(), res = <span class=\"number\">0</span>, right = <span class=\"number\">0</span>, left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Set&lt;Character&gt; set = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( left &lt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( right &lt; n &amp;&amp; !set.contains(s.charAt(right)) )&#123;</span><br><span class=\"line\">            set.add(s.charAt(right));</span><br><span class=\"line\">            right ++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res = Math.max(res, right - left);</span><br><span class=\"line\">            set.remove(s.charAt(left));</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note success\"><p>更进一步的，当字符串中的出现字符的范围较小时，使用一个int数组来达到优化的效果。</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">点击展开</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span> || s.length() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = s.length(), res = <span class=\"number\">0</span>, right = <span class=\"number\">0</span>, left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] record = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">128</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( left &lt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( right &lt; n &amp;&amp; record[s.charAt(right)] == <span class=\"number\">0</span>)&#123;<span class=\"comment\">//未重复,右移</span></span><br><span class=\"line\">            record[s.charAt(right++)] ++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res = Math.max(res, right - left);</span><br><span class=\"line\">            record[s.charAt(left++)]--;</span><br><span class=\"line\">        &#125;           </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div></div>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue May 05 2020 11:11:57 GMT+0800 (中国标准时间)","title":"3. 无重复字符的最长子串","path":"posts/4bff4329.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;abcabcbb&quot;</span><br><span class=\"line\">输出: 3 </span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-02T01:24:52.564Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-02T01:24:52.564Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["Leetcode","滑动窗口"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1888},{"title":"33. 搜索旋转排序数组","abbrlink":"3abd6d1e","date":"2020-05-01T08:25:32.000Z","_content":"\n> 假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n>\n> ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。\n>\n> 搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。\n>\n> 你可以假设数组中不存在重复的元素。\n>\n> 你的算法时间复杂度必须是 O(log n) 级别。\n>\n\n<!-- more -->\n\n{% note info %}\n\n示例 1:\n\n``` \n输入: nums = [4,5,6,7,0,1,2], target = 0\n输出: 4\n```\n\n示例 2:\n\n```\n输入: nums = [4,5,6,7,0,1,2], target = 3\n输出: -1\n```\n\n{% endnote %}\n\n### 💡 思路\n\n题目要求时间复杂度为O(logn)，因此考虑使用二分查找的方法。二分查找要在有序的数组中进行，往这个方向思考，我们可以发现虽然给定的数组整体并不是有序的，但是它被分为两部分有序的数组，分界点在最大值/最小值。想到了这一点，整个问题转变为在两个有序数组中查找目标值，是一个简单的二分查找过程。而求分界点的方法和Leetcode {% post_link 153-寻找旋转排序数组中的最小值 %} 问题相同。\n\n### 🧾 代码\n\n```java\npublic int search(int[] nums, int target) {\n    if(nums == null || nums.length == 0){\n        return -1;\n    }\n    //先找到最高点，然后就可以划分为在有序数组中的查找问题\n    int left = 0, right = nums.length-1;\n    while(left < right){\n        int mid = left + (right-left+1)/2;//因为mid可能一直取left导致死循环,因此+1向上取整 防止死循环\n        if(nums[mid] < nums[left]){\n            right = mid - 1;\n        }else{\n            left = mid;\n        }\n    }\n    if(target < nums[0]){//在右有序数组\n        return binarySearch(nums,target,left+1,nums.length-1);\n    }else{//在左有序数组\n        return binarySearch(nums,target,0,left);\n    }\n}\npublic int binarySearch(int[] nums, int target, int left , int right){\n    while(left <= right){\n        int mid = left + (right-left)/2;\n        if(nums[mid] == target){\n            return mid;\n        }else if(nums[mid] < target){\n            left = mid+1;\n        }else{\n            right = mid-1;\n        }\n    }\n    return -1;\n}\n```\n\n","source":"_posts/33-搜索旋转排序数组.md","raw":"---\ntitle: 33. 搜索旋转排序数组\ntags:\n  - Leetcode\n  - 二分查找\ncategories:\n  - Leetcode\nabbrlink: 3abd6d1e\ndate: 2020-05-01 16:25:32\n---\n\n> 假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n>\n> ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。\n>\n> 搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。\n>\n> 你可以假设数组中不存在重复的元素。\n>\n> 你的算法时间复杂度必须是 O(log n) 级别。\n>\n\n<!-- more -->\n\n{% note info %}\n\n示例 1:\n\n``` \n输入: nums = [4,5,6,7,0,1,2], target = 0\n输出: 4\n```\n\n示例 2:\n\n```\n输入: nums = [4,5,6,7,0,1,2], target = 3\n输出: -1\n```\n\n{% endnote %}\n\n### 💡 思路\n\n题目要求时间复杂度为O(logn)，因此考虑使用二分查找的方法。二分查找要在有序的数组中进行，往这个方向思考，我们可以发现虽然给定的数组整体并不是有序的，但是它被分为两部分有序的数组，分界点在最大值/最小值。想到了这一点，整个问题转变为在两个有序数组中查找目标值，是一个简单的二分查找过程。而求分界点的方法和Leetcode {% post_link 153-寻找旋转排序数组中的最小值 %} 问题相同。\n\n### 🧾 代码\n\n```java\npublic int search(int[] nums, int target) {\n    if(nums == null || nums.length == 0){\n        return -1;\n    }\n    //先找到最高点，然后就可以划分为在有序数组中的查找问题\n    int left = 0, right = nums.length-1;\n    while(left < right){\n        int mid = left + (right-left+1)/2;//因为mid可能一直取left导致死循环,因此+1向上取整 防止死循环\n        if(nums[mid] < nums[left]){\n            right = mid - 1;\n        }else{\n            left = mid;\n        }\n    }\n    if(target < nums[0]){//在右有序数组\n        return binarySearch(nums,target,left+1,nums.length-1);\n    }else{//在左有序数组\n        return binarySearch(nums,target,0,left);\n    }\n}\npublic int binarySearch(int[] nums, int target, int left , int right){\n    while(left <= right){\n        int mid = left + (right-left)/2;\n        if(nums[mid] == target){\n            return mid;\n        }else if(nums[mid] < target){\n            left = mid+1;\n        }else{\n            right = mid-1;\n        }\n    }\n    return -1;\n}\n```\n\n","slug":"33-搜索旋转排序数组","published":1,"updated":"2020-05-05T03:11:57.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1v001dz4ej7p0thp9x","content":"<blockquote>\n<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>\n<p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p>\n<p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p>\n<p>你可以假设数组中不存在重复的元素。</p>\n<p>你的算法时间复杂度必须是 O(log n) 级别。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<div class=\"note info\"><p>示例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0</span><br><span class=\"line\">输出: 4</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3</span><br><span class=\"line\">输出: -1</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>题目要求时间复杂度为O(logn)，因此考虑使用二分查找的方法。二分查找要在有序的数组中进行，往这个方向思考，我们可以发现虽然给定的数组整体并不是有序的，但是它被分为两部分有序的数组，分界点在最大值/最小值。想到了这一点，整个问题转变为在两个有序数组中查找目标值，是一个简单的二分查找过程。而求分界点的方法和Leetcode <a href=\"/posts/e3f3cf8a.html\" title=\"153. 寻找旋转排序数组中的最小值\">153. 寻找旋转排序数组中的最小值</a> 问题相同。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//先找到最高点，然后就可以划分为在有序数组中的查找问题</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt; right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right-left+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;<span class=\"comment\">//因为mid可能一直取left导致死循环,因此+1向上取整 防止死循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] &lt; nums[left])&#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            left = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(target &lt; nums[<span class=\"number\">0</span>])&#123;<span class=\"comment\">//在右有序数组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> binarySearch(nums,target,left+<span class=\"number\">1</span>,nums.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//在左有序数组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> binarySearch(nums,target,<span class=\"number\">0</span>,left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> left , <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right-left)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            left = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right = mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>\n<p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p>\n<p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p>\n<p>你可以假设数组中不存在重复的元素。</p>\n<p>你的算法时间复杂度必须是 O(log n) 级别。</p>\n</blockquote>","more":"<div class=\"note info\"><p>示例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0</span><br><span class=\"line\">输出: 4</span><br></pre></td></tr></table></figure>\n\n<p>示例 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3</span><br><span class=\"line\">输出: -1</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>题目要求时间复杂度为O(logn)，因此考虑使用二分查找的方法。二分查找要在有序的数组中进行，往这个方向思考，我们可以发现虽然给定的数组整体并不是有序的，但是它被分为两部分有序的数组，分界点在最大值/最小值。想到了这一点，整个问题转变为在两个有序数组中查找目标值，是一个简单的二分查找过程。而求分界点的方法和Leetcode <a href=\"/posts/e3f3cf8a.html\" title=\"153. 寻找旋转排序数组中的最小值\">153. 寻找旋转排序数组中的最小值</a> 问题相同。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//先找到最高点，然后就可以划分为在有序数组中的查找问题</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt; right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right-left+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;<span class=\"comment\">//因为mid可能一直取left导致死循环,因此+1向上取整 防止死循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] &lt; nums[left])&#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            left = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(target &lt; nums[<span class=\"number\">0</span>])&#123;<span class=\"comment\">//在右有序数组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> binarySearch(nums,target,left+<span class=\"number\">1</span>,nums.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//在左有序数组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> binarySearch(nums,target,<span class=\"number\">0</span>,left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> left , <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt;= right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right-left)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            left = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            right = mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue May 05 2020 11:11:57 GMT+0800 (中国标准时间)","title":"33. 搜索旋转排序数组","path":"posts/3abd6d1e.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p>\n<p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p>\n<p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p>\n<p>你可以假设数组中不存在重复的元素。</p>\n<p>你的算法时间复杂度必须是 O(log n) 级别。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-01T08:25:32.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-01T08:25:32.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["Leetcode","二分查找"],"internalLinks":["posts/e3f3cf8a.html"],"keywords":[],"keywordsLength":0},"length":1248},{"title":"35. 搜索插入位置","date":"2020-04-30T10:16:00.000Z","abbrlink":"a8a97330","_content":"\n> 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n>\n> 你可以假设数组中无重复元素。\n\n<!-- more -->\n\n> **示例 1:**\n>\n> ```\n> 输入: [1,3,5,6], 5\n> 输出: 2\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: [1,3,5,6], 7\n> 输出: 4\n> ```\n\n\n\n### 👊暴力解法\n\n从数组的第一个位置开始遍历，如果当前位置的值等于目标值，返回其索引值。否则继续向后查找直到第一个大于目标值的元素，返回其索引值。\n\n```java\npublic int searchInsert(int[] nums, int target) {\n    if(nums == null || nums.length == 0){\n        return 0;\n    }\n\tfor(int i = 0 ; i < nums.length; i++){\n        if(nums[i] >= target){\n            return i;\n        }\n    }\n    return nums.length;\n}\n```\n\n### ✍️二分查找\n\n对于有序数组的查找问题，通常可以使用二分来解决。如果你对二分查找并不熟悉，可以先看看Leetcode {% post_link 704-二分查找 %} 问题。二分法的整体思路是：根据设定的左边界 ` left ` 和右边界 ` right ` 计算出中间位置 ` mid ` ，然后通过 ` mid ` 位置的元素来修改 ` left ` 和 ` right ` 。\n\n本题中，根据` mid ` 位置元素和目标值 ` target `的大小关系，分为一下三种情况：\n\n- 如果 ` nums[mid] = target`，则直接返回` mid `\n- 如果 `  nums[mid] < target `，则区间` [left...mid] `都小于 ` target `，因此左边界 ` left = mid + 1 `\n- 如果 `  nums[mid] > target `，则区间` [mid...right] `都大于 ` target `，因此右边界 ` right = mid - 1 `\n\n```java\npublic int searchInsert(int[] nums, int target) {\n    if(nums == null || nums.length == 0){\n        return 0;\n    }\n    int left = 0, right = nums.length - 1 ;\n    while(left <= right){//循环结束条件是left> right\n        int mid = left + (right - left) / 2;\n        if(nums[mid] == target){\n            return mid;\n        }else if( nums[mid] < target ){\n            left = mid + 1;\n        }else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n```\n\n","source":"_posts/35-搜索插入位置.md","raw":"---\ntitle: 35. 搜索插入位置\ndate: '2020-04-30 18:16'\ntags:\n  - 二分查找\n  - Leetcode\n  - 数组\ncategories:\n  - Leetcode\nabbrlink: a8a97330\n---\n\n> 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n>\n> 你可以假设数组中无重复元素。\n\n<!-- more -->\n\n> **示例 1:**\n>\n> ```\n> 输入: [1,3,5,6], 5\n> 输出: 2\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: [1,3,5,6], 7\n> 输出: 4\n> ```\n\n\n\n### 👊暴力解法\n\n从数组的第一个位置开始遍历，如果当前位置的值等于目标值，返回其索引值。否则继续向后查找直到第一个大于目标值的元素，返回其索引值。\n\n```java\npublic int searchInsert(int[] nums, int target) {\n    if(nums == null || nums.length == 0){\n        return 0;\n    }\n\tfor(int i = 0 ; i < nums.length; i++){\n        if(nums[i] >= target){\n            return i;\n        }\n    }\n    return nums.length;\n}\n```\n\n### ✍️二分查找\n\n对于有序数组的查找问题，通常可以使用二分来解决。如果你对二分查找并不熟悉，可以先看看Leetcode {% post_link 704-二分查找 %} 问题。二分法的整体思路是：根据设定的左边界 ` left ` 和右边界 ` right ` 计算出中间位置 ` mid ` ，然后通过 ` mid ` 位置的元素来修改 ` left ` 和 ` right ` 。\n\n本题中，根据` mid ` 位置元素和目标值 ` target `的大小关系，分为一下三种情况：\n\n- 如果 ` nums[mid] = target`，则直接返回` mid `\n- 如果 `  nums[mid] < target `，则区间` [left...mid] `都小于 ` target `，因此左边界 ` left = mid + 1 `\n- 如果 `  nums[mid] > target `，则区间` [mid...right] `都大于 ` target `，因此右边界 ` right = mid - 1 `\n\n```java\npublic int searchInsert(int[] nums, int target) {\n    if(nums == null || nums.length == 0){\n        return 0;\n    }\n    int left = 0, right = nums.length - 1 ;\n    while(left <= right){//循环结束条件是left> right\n        int mid = left + (right - left) / 2;\n        if(nums[mid] == target){\n            return mid;\n        }else if( nums[mid] < target ){\n            left = mid + 1;\n        }else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n```\n\n","slug":"35-搜索插入位置","published":1,"updated":"2020-05-05T03:11:57.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1x001gz4ej42n66pou","content":"<blockquote>\n<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n<p>你可以假设数组中无重复元素。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<blockquote>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,3,5,6], 5</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,3,5,6], 7</span><br><span class=\"line\">输出: 4</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"👊暴力解法\"><a href=\"#👊暴力解法\" class=\"headerlink\" title=\"👊暴力解法\"></a>👊暴力解法</h3><p>从数组的第一个位置开始遍历，如果当前位置的值等于目标值，返回其索引值。否则继续向后查找直到第一个大于目标值的元素，返回其索引值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">searchInsert</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] &gt;= target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums.length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"✍️二分查找\"><a href=\"#✍️二分查找\" class=\"headerlink\" title=\"✍️二分查找\"></a>✍️二分查找</h3><p>对于有序数组的查找问题，通常可以使用二分来解决。如果你对二分查找并不熟悉，可以先看看Leetcode <a href=\"/posts/41f30363.html\" title=\"704. 二分查找\">704. 二分查找</a> 问题。二分法的整体思路是：根据设定的左边界 <code>left</code> 和右边界 <code>right</code> 计算出中间位置 <code>mid</code> ，然后通过 <code>mid</code> 位置的元素来修改 <code>left</code> 和 <code>right</code> 。</p>\n<p>本题中，根据<code>mid</code> 位置元素和目标值 <code>target</code>的大小关系，分为一下三种情况：</p>\n<ul>\n<li>如果 <code>nums[mid] = target</code>，则直接返回<code>mid</code></li>\n<li>如果 <code>nums[mid] &lt; target</code>，则区间<code>[left...mid]</code>都小于 <code>target</code>，因此左边界 <code>left = mid + 1</code></li>\n<li>如果 <code>nums[mid] &gt; target</code>，则区间<code>[mid...right]</code>都大于 <code>target</code>，因此右边界 <code>right = mid - 1</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">searchInsert</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt;= right)&#123;<span class=\"comment\">//循环结束条件是left&gt; right</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( nums[mid] &lt; target )&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n<p>你可以假设数组中无重复元素。</p>\n</blockquote>","more":"<blockquote>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,3,5,6], 5</span><br><span class=\"line\">输出: 2</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,3,5,6], 7</span><br><span class=\"line\">输出: 4</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"👊暴力解法\"><a href=\"#👊暴力解法\" class=\"headerlink\" title=\"👊暴力解法\"></a>👊暴力解法</h3><p>从数组的第一个位置开始遍历，如果当前位置的值等于目标值，返回其索引值。否则继续向后查找直到第一个大于目标值的元素，返回其索引值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">searchInsert</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] &gt;= target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums.length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"✍️二分查找\"><a href=\"#✍️二分查找\" class=\"headerlink\" title=\"✍️二分查找\"></a>✍️二分查找</h3><p>对于有序数组的查找问题，通常可以使用二分来解决。如果你对二分查找并不熟悉，可以先看看Leetcode <a href=\"/posts/41f30363.html\" title=\"704. 二分查找\">704. 二分查找</a> 问题。二分法的整体思路是：根据设定的左边界 <code>left</code> 和右边界 <code>right</code> 计算出中间位置 <code>mid</code> ，然后通过 <code>mid</code> 位置的元素来修改 <code>left</code> 和 <code>right</code> 。</p>\n<p>本题中，根据<code>mid</code> 位置元素和目标值 <code>target</code>的大小关系，分为一下三种情况：</p>\n<ul>\n<li>如果 <code>nums[mid] = target</code>，则直接返回<code>mid</code></li>\n<li>如果 <code>nums[mid] &lt; target</code>，则区间<code>[left...mid]</code>都小于 <code>target</code>，因此左边界 <code>left = mid + 1</code></li>\n<li>如果 <code>nums[mid] &gt; target</code>，则区间<code>[mid...right]</code>都大于 <code>target</code>，因此右边界 <code>right = mid - 1</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">searchInsert</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt;= right)&#123;<span class=\"comment\">//循环结束条件是left&gt; right</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( nums[mid] &lt; target )&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue May 05 2020 11:11:57 GMT+0800 (中国标准时间)","title":"35. 搜索插入位置","path":"posts/a8a97330.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n<p>你可以假设数组中无重复元素。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-04-30T10:16:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-04-30T10:16:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["Leetcode","数组","二分查找"],"internalLinks":["posts/41f30363.html"],"keywords":[],"keywordsLength":0},"length":1112},{"title":"45. 跳跃游戏 II","abbrlink":"f579176b","_content":"\n>给定一个非负整数数组，你最初位于数组的第一个位置。\n>\n>数组中的每个元素代表你在该位置可以跳跃的最大长度。\n>\n>你的目标是使用最少的跳跃次数到达数组的最后一个位置。\n>\n\n<!-- more -->\n\n{% note info %}\n\n示例:\n\n```\n输入: [2,3,1,1,4]\n输出: 2\n解释: 跳到最后一个位置的最小跳跃数是 2。\n     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。\n```\n\n{% endnote %}\n\n### 💡 思路\n\n采用广度优先遍历的方式，记录从当前位置可以到达的所有位置，当可以到达最后一个位置时，返回结果。同时需要使用记录下一位置是否已经使用过用于**剪枝**，查找可以到达的下一个位置时，使用从大到小查找的**贪心**策略。\n\n```java\npublic int jump(int[] nums) {\n    if(nums == null || nums.length < 2){\n        return 0;\n    }\n    int n = nums.length;\n    //bfs找到最快到达n-1的\n    Queue<Integer> queue = new LinkedList<>();\n    queue.add(0);\n    boolean[] used = new boolean[n];//记录是否使用过\n    used[0] = true;\n    int res = 0;\n    while(!queue.isEmpty()){\n        int size = queue.size();\n        res ++;\n        for(int i =0 ; i < size; i++){\n            int index = queue.poll();\n            for(int j = nums[index]; j > 0; j--){//从大到小,一种贪心,一定程度提高效率,没有这个策略会超时\n                if(j + index >= n-1){\n                    return res;\n                }\n                if(!used[j + index]){\n                    queue.add(j + index);\n                    used[j+index] = true;\n                }\n            }\n        }\n    }\n    return 0;\n}\n```\n\n### 📈 优化\n\n上述过程中，每一次都把接下来可以到达的、未使用过的**所有**位置放入队列，因此我们可以考虑如何在所有位置中选出最优的位置，最优的依据是：当前位置的能够到达的所有位置中，能够到达最远的位置。听起来有点绕，看个例子：\n\n> 对于示例 ` [2,3,1,1,4] `，从下标 0 开始，可以到达的所有位置是：下标 1 ，2。在1和2中，最优的位置是 1，原因是：` nums[1] = 3 `，即从下标 1 可以到达最远位置是 ` 1 + 3 = 4 ` ，而从下标 2 可以到达的最远位置是 ` 2 + 1 = 3 `。\n\n根据这样的思路，其实很容易写成复杂度更高的，如果把找出最优位置的过程写成内层循环那就得不偿失了。那么还能通过什么方式来知道最优位置呢？答案是需要换个思路。我们的终止条件是到达数组**最后一个位置**，因此在查找过程中维护当前所能到达的最右边界，而最右边界的选取则采用上述的贪心策略。\n\n` maxRight ` 记录位置 ` cur ` 能到达的最远位置,  ` [cur...end] `是所有能到达的下一位置，在这个区间内表示的是同一次跳跃，而当 ` cur ` 超过 ` end `时，表示这次跳跃能够到达的所有位置已经查找结束，因此 `step + 1 ` ，同时将 ` end ` 更新为 ` [cur...end] ` 所能到达的最远位置。\n\n```java\npublic int jump(int[] nums) {\n    if(nums == null || nums.length < 2){\n        return 0;\n    }\n    int n = nums.length-1;//遍历到最后一个位置的前一个位置\n    //贪心 \n    int end = 0, maxRight = 0, step = 0 , cur = 0;\n    while( end < n){\n        maxRight = Math.max(maxRight, cur + nums[cur]);\n        if(cur == end){\n            end = maxRight;\n            step++;\n        }\n        cur ++;\n    }\n    return step;\n}\n```\n\n","source":"_posts/45-跳跃游戏II.md","raw":"---\ntitle: 45. 跳跃游戏 II\ntags:\n  - Leetcode\n  - 贪心算法\ncategories:\n  - Leetcode\nabbrlink: f579176b\n---\n\n>给定一个非负整数数组，你最初位于数组的第一个位置。\n>\n>数组中的每个元素代表你在该位置可以跳跃的最大长度。\n>\n>你的目标是使用最少的跳跃次数到达数组的最后一个位置。\n>\n\n<!-- more -->\n\n{% note info %}\n\n示例:\n\n```\n输入: [2,3,1,1,4]\n输出: 2\n解释: 跳到最后一个位置的最小跳跃数是 2。\n     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。\n```\n\n{% endnote %}\n\n### 💡 思路\n\n采用广度优先遍历的方式，记录从当前位置可以到达的所有位置，当可以到达最后一个位置时，返回结果。同时需要使用记录下一位置是否已经使用过用于**剪枝**，查找可以到达的下一个位置时，使用从大到小查找的**贪心**策略。\n\n```java\npublic int jump(int[] nums) {\n    if(nums == null || nums.length < 2){\n        return 0;\n    }\n    int n = nums.length;\n    //bfs找到最快到达n-1的\n    Queue<Integer> queue = new LinkedList<>();\n    queue.add(0);\n    boolean[] used = new boolean[n];//记录是否使用过\n    used[0] = true;\n    int res = 0;\n    while(!queue.isEmpty()){\n        int size = queue.size();\n        res ++;\n        for(int i =0 ; i < size; i++){\n            int index = queue.poll();\n            for(int j = nums[index]; j > 0; j--){//从大到小,一种贪心,一定程度提高效率,没有这个策略会超时\n                if(j + index >= n-1){\n                    return res;\n                }\n                if(!used[j + index]){\n                    queue.add(j + index);\n                    used[j+index] = true;\n                }\n            }\n        }\n    }\n    return 0;\n}\n```\n\n### 📈 优化\n\n上述过程中，每一次都把接下来可以到达的、未使用过的**所有**位置放入队列，因此我们可以考虑如何在所有位置中选出最优的位置，最优的依据是：当前位置的能够到达的所有位置中，能够到达最远的位置。听起来有点绕，看个例子：\n\n> 对于示例 ` [2,3,1,1,4] `，从下标 0 开始，可以到达的所有位置是：下标 1 ，2。在1和2中，最优的位置是 1，原因是：` nums[1] = 3 `，即从下标 1 可以到达最远位置是 ` 1 + 3 = 4 ` ，而从下标 2 可以到达的最远位置是 ` 2 + 1 = 3 `。\n\n根据这样的思路，其实很容易写成复杂度更高的，如果把找出最优位置的过程写成内层循环那就得不偿失了。那么还能通过什么方式来知道最优位置呢？答案是需要换个思路。我们的终止条件是到达数组**最后一个位置**，因此在查找过程中维护当前所能到达的最右边界，而最右边界的选取则采用上述的贪心策略。\n\n` maxRight ` 记录位置 ` cur ` 能到达的最远位置,  ` [cur...end] `是所有能到达的下一位置，在这个区间内表示的是同一次跳跃，而当 ` cur ` 超过 ` end `时，表示这次跳跃能够到达的所有位置已经查找结束，因此 `step + 1 ` ，同时将 ` end ` 更新为 ` [cur...end] ` 所能到达的最远位置。\n\n```java\npublic int jump(int[] nums) {\n    if(nums == null || nums.length < 2){\n        return 0;\n    }\n    int n = nums.length-1;//遍历到最后一个位置的前一个位置\n    //贪心 \n    int end = 0, maxRight = 0, step = 0 , cur = 0;\n    while( end < n){\n        maxRight = Math.max(maxRight, cur + nums[cur]);\n        if(cur == end){\n            end = maxRight;\n            step++;\n        }\n        cur ++;\n    }\n    return step;\n}\n```\n\n","slug":"45-跳跃游戏II","published":1,"date":"2020-05-04T01:35:00.112Z","updated":"2020-05-05T03:11:57.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1y001iz4ej0l212ncz","content":"<blockquote>\n<p>给定一个非负整数数组，你最初位于数组的第一个位置。</p>\n<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>\n<p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<div class=\"note info\"><p>示例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [2,3,1,1,4]</span><br><span class=\"line\">输出: 2</span><br><span class=\"line\">解释: 跳到最后一个位置的最小跳跃数是 2。</span><br><span class=\"line\">     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>采用广度优先遍历的方式，记录从当前位置可以到达的所有位置，当可以到达最后一个位置时，返回结果。同时需要使用记录下一位置是否已经使用过用于<strong>剪枝</strong>，查找可以到达的下一个位置时，使用从大到小查找的<strong>贪心</strong>策略。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">jump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"comment\">//bfs找到最快到达n-1的</span></span><br><span class=\"line\">    Queue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[] used = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[n];<span class=\"comment\">//记录是否使用过</span></span><br><span class=\"line\">    used[<span class=\"number\">0</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">        res ++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span> ; i &lt; size; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = queue.poll();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = nums[index]; j &gt; <span class=\"number\">0</span>; j--)&#123;<span class=\"comment\">//从大到小,一种贪心,一定程度提高效率,没有这个策略会超时</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j + index &gt;= n-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!used[j + index])&#123;</span><br><span class=\"line\">                    queue.add(j + index);</span><br><span class=\"line\">                    used[j+index] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>上述过程中，每一次都把接下来可以到达的、未使用过的<strong>所有</strong>位置放入队列，因此我们可以考虑如何在所有位置中选出最优的位置，最优的依据是：当前位置的能够到达的所有位置中，能够到达最远的位置。听起来有点绕，看个例子：</p>\n<blockquote>\n<p>对于示例 <code>[2,3,1,1,4]</code>，从下标 0 开始，可以到达的所有位置是：下标 1 ，2。在1和2中，最优的位置是 1，原因是：<code>nums[1] = 3</code>，即从下标 1 可以到达最远位置是 <code>1 + 3 = 4</code> ，而从下标 2 可以到达的最远位置是 <code>2 + 1 = 3</code>。</p>\n</blockquote>\n<p>根据这样的思路，其实很容易写成复杂度更高的，如果把找出最优位置的过程写成内层循环那就得不偿失了。那么还能通过什么方式来知道最优位置呢？答案是需要换个思路。我们的终止条件是到达数组<strong>最后一个位置</strong>，因此在查找过程中维护当前所能到达的最右边界，而最右边界的选取则采用上述的贪心策略。</p>\n<p><code>maxRight</code> 记录位置 <code>cur</code> 能到达的最远位置,  <code>[cur...end]</code>是所有能到达的下一位置，在这个区间内表示的是同一次跳跃，而当 <code>cur</code> 超过 <code>end</code>时，表示这次跳跃能够到达的所有位置已经查找结束，因此 <code>step + 1</code> ，同时将 <code>end</code> 更新为 <code>[cur...end]</code> 所能到达的最远位置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">jump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length-<span class=\"number\">1</span>;<span class=\"comment\">//遍历到最后一个位置的前一个位置</span></span><br><span class=\"line\">    <span class=\"comment\">//贪心 </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = <span class=\"number\">0</span>, maxRight = <span class=\"number\">0</span>, step = <span class=\"number\">0</span> , cur = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( end &lt; n)&#123;</span><br><span class=\"line\">        maxRight = Math.max(maxRight, cur + nums[cur]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur == end)&#123;</span><br><span class=\"line\">            end = maxRight;</span><br><span class=\"line\">            step++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> step;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>给定一个非负整数数组，你最初位于数组的第一个位置。</p>\n<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>\n<p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p>\n</blockquote>","more":"<div class=\"note info\"><p>示例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [2,3,1,1,4]</span><br><span class=\"line\">输出: 2</span><br><span class=\"line\">解释: 跳到最后一个位置的最小跳跃数是 2。</span><br><span class=\"line\">     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>采用广度优先遍历的方式，记录从当前位置可以到达的所有位置，当可以到达最后一个位置时，返回结果。同时需要使用记录下一位置是否已经使用过用于<strong>剪枝</strong>，查找可以到达的下一个位置时，使用从大到小查找的<strong>贪心</strong>策略。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">jump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"comment\">//bfs找到最快到达n-1的</span></span><br><span class=\"line\">    Queue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    queue.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[] used = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[n];<span class=\"comment\">//记录是否使用过</span></span><br><span class=\"line\">    used[<span class=\"number\">0</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = queue.size();</span><br><span class=\"line\">        res ++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span> ; i &lt; size; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = queue.poll();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = nums[index]; j &gt; <span class=\"number\">0</span>; j--)&#123;<span class=\"comment\">//从大到小,一种贪心,一定程度提高效率,没有这个策略会超时</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j + index &gt;= n-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!used[j + index])&#123;</span><br><span class=\"line\">                    queue.add(j + index);</span><br><span class=\"line\">                    used[j+index] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>上述过程中，每一次都把接下来可以到达的、未使用过的<strong>所有</strong>位置放入队列，因此我们可以考虑如何在所有位置中选出最优的位置，最优的依据是：当前位置的能够到达的所有位置中，能够到达最远的位置。听起来有点绕，看个例子：</p>\n<blockquote>\n<p>对于示例 <code>[2,3,1,1,4]</code>，从下标 0 开始，可以到达的所有位置是：下标 1 ，2。在1和2中，最优的位置是 1，原因是：<code>nums[1] = 3</code>，即从下标 1 可以到达最远位置是 <code>1 + 3 = 4</code> ，而从下标 2 可以到达的最远位置是 <code>2 + 1 = 3</code>。</p>\n</blockquote>\n<p>根据这样的思路，其实很容易写成复杂度更高的，如果把找出最优位置的过程写成内层循环那就得不偿失了。那么还能通过什么方式来知道最优位置呢？答案是需要换个思路。我们的终止条件是到达数组<strong>最后一个位置</strong>，因此在查找过程中维护当前所能到达的最右边界，而最右边界的选取则采用上述的贪心策略。</p>\n<p><code>maxRight</code> 记录位置 <code>cur</code> 能到达的最远位置,  <code>[cur...end]</code>是所有能到达的下一位置，在这个区间内表示的是同一次跳跃，而当 <code>cur</code> 超过 <code>end</code>时，表示这次跳跃能够到达的所有位置已经查找结束，因此 <code>step + 1</code> ，同时将 <code>end</code> 更新为 <code>[cur...end]</code> 所能到达的最远位置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">jump</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length-<span class=\"number\">1</span>;<span class=\"comment\">//遍历到最后一个位置的前一个位置</span></span><br><span class=\"line\">    <span class=\"comment\">//贪心 </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = <span class=\"number\">0</span>, maxRight = <span class=\"number\">0</span>, step = <span class=\"number\">0</span> , cur = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( end &lt; n)&#123;</span><br><span class=\"line\">        maxRight = Math.max(maxRight, cur + nums[cur]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur == end)&#123;</span><br><span class=\"line\">            end = maxRight;</span><br><span class=\"line\">            step++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cur ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> step;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue May 05 2020 11:11:57 GMT+0800 (中国标准时间)","title":"45. 跳跃游戏 II","path":"posts/f579176b.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>给定一个非负整数数组，你最初位于数组的第一个位置。</p>\n<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>\n<p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-04T01:35:00.112Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-04T01:35:00.112Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["Leetcode","贪心算法"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1668},{"title":"53. 最大子序和","abbrlink":"a42162e0","_content":"\n> 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n>\n> 示例:\n>\n> 输入: [-2,1,-3,4,-1,2,1,-5,4],\n> 输出: 6\n> 解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n\n<!-- more -->\n\n### 👊 暴力解法\n\n具有最大和的连续子数组一定是以数组中的某个元素开头的，因此我们只要求得每个位置的最长连续子数组自然也可以得到结果。稍加分析之后，信心满满的写下了这样的代码。{% fold 展开 %}\n\n``` java\npublic int maxSubArray(int[] nums){\n    if(nums == null || nums.length == 0){\n        return 0;\n    }\n    int res = 0;\n    for(int i = 0; i < nums.length; i++){\n        int sum = nums[i];\n        for(int j = i+1; j < nums.length; j++){\n            if(nums[j] < 0){\n                break;\n            }else{\n                sum += nums[j];\n            }\n        }\n        res = Math.max(res, sum);\n    }\n    return res;\n}\n```\n\n{% endfold %}\n\n跑一下发现连测试用例都过不了。错误的原因在于：当下一个数为负时并**不能跳出循环**，因为可能后面还会有更大的正数，即使加上这个负数，但是由于后面正数更大，自然应该继续累加。\n\n> 对于 ` [1,-3,4] `，即使 ` 1 ` 后面是 ` -3 `，但是如果就此跳出循环，则求得的最大和为` 1 `，但是正确的最大和是 ` 1 + -3 + 4 = 2 `。\n\n于是我们尝试修改代码，由于我们只需要求得最大和是多少，因此在内层循环累加的过程中不断更新结果，那么最大值一定能够被找到。{% fold 改正之后的代码 %}\n\n```java\npublic int maxSubArray(int[] nums) {\n    if(nums == null || nums.length == 0){\n        return 0;\n    }\n    int res = Integer.MIN_VALUE;\n    for(int i = 0; i < nums.length; i++){\n        int sum = 0;\n        for(int j = i; j < nums.length; j++){\n            res = Math.max(res, sum+=nums[j]);\n        }\n    }\n    return res;\n}\n```\n\n{% endfold %}\n\n### 📈 优化\n\n上述的思路，为了知道以某个位置的元素为开头的最大和，我们遍历了后续的所有元素，通过**枚举**来求得最大值，而这仅仅能求得这一个位置。这也导致算法的时间复杂度是O(N²)的。于是我们换个思路，当我们考虑以当前位置的元素作为结尾时的最大和，可以根据**前一个位置**求得的最大和 `sum ` 的**正负**，来决定当前位置是加在前一个元素之后，还是自己成为一个新的子数组。当 ` sum > 0 `，对于当前数，加上这个 ` sum `，有增加的效果；当 ` sum <= 0 ` ，对于当前数，加上这个 ` sum ` ，有减小的效果，因此可以丢弃之前的 ` sum ` ，重新开始计算。\n\n{% note success %}\n\n根据前一个位置的结果得到当前位置的结果，这是典型的**动态规划**思想。\n\n{% endnote %}\n\n### 🧾 代码\n\n```java\npublic int maxSubArray(int[] nums) {\n    if(nums == null || nums.length == 0){\n        return 0;\n    }\n    int n = nums.length;\n    int[] dp = new int[n];\n    dp[0] = nums[0];\n    int res = dp[0];\n    for(int i = 1; i < n; i++){\n        dp[i] = dp[i-1]>0 ? dp[i-1]+nums[i] : nums[i];\n        res = Math.max(dp[i],res);\n    }\n    return res;\n}\n```\n\n更进一步的，因为我们只需要知道前一个位置的结果，因此使用一个变量 ` sum ` 记录，优化空间复杂度。{% fold 查看 %}\n\n```java\npublic int maxSubArray(int[] nums) {\n    int res = nums[0];\n    int sum = 0;\n    for (int num : nums) {\n        sum = sum > 0 ? sum+num : num;\n        res = Math.max(res, sum);\n    }\n    return res;\n}\n```\n\n{% endfold %}","source":"_posts/53-最大子序和.md","raw":"---\ntitle: 53. 最大子序和\ntags:\n  - Leetcode\n  - 分治算法\n  - 动态规划\ncategories:\n  - Leetcode\nabbrlink: a42162e0\n---\n\n> 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n>\n> 示例:\n>\n> 输入: [-2,1,-3,4,-1,2,1,-5,4],\n> 输出: 6\n> 解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n\n<!-- more -->\n\n### 👊 暴力解法\n\n具有最大和的连续子数组一定是以数组中的某个元素开头的，因此我们只要求得每个位置的最长连续子数组自然也可以得到结果。稍加分析之后，信心满满的写下了这样的代码。{% fold 展开 %}\n\n``` java\npublic int maxSubArray(int[] nums){\n    if(nums == null || nums.length == 0){\n        return 0;\n    }\n    int res = 0;\n    for(int i = 0; i < nums.length; i++){\n        int sum = nums[i];\n        for(int j = i+1; j < nums.length; j++){\n            if(nums[j] < 0){\n                break;\n            }else{\n                sum += nums[j];\n            }\n        }\n        res = Math.max(res, sum);\n    }\n    return res;\n}\n```\n\n{% endfold %}\n\n跑一下发现连测试用例都过不了。错误的原因在于：当下一个数为负时并**不能跳出循环**，因为可能后面还会有更大的正数，即使加上这个负数，但是由于后面正数更大，自然应该继续累加。\n\n> 对于 ` [1,-3,4] `，即使 ` 1 ` 后面是 ` -3 `，但是如果就此跳出循环，则求得的最大和为` 1 `，但是正确的最大和是 ` 1 + -3 + 4 = 2 `。\n\n于是我们尝试修改代码，由于我们只需要求得最大和是多少，因此在内层循环累加的过程中不断更新结果，那么最大值一定能够被找到。{% fold 改正之后的代码 %}\n\n```java\npublic int maxSubArray(int[] nums) {\n    if(nums == null || nums.length == 0){\n        return 0;\n    }\n    int res = Integer.MIN_VALUE;\n    for(int i = 0; i < nums.length; i++){\n        int sum = 0;\n        for(int j = i; j < nums.length; j++){\n            res = Math.max(res, sum+=nums[j]);\n        }\n    }\n    return res;\n}\n```\n\n{% endfold %}\n\n### 📈 优化\n\n上述的思路，为了知道以某个位置的元素为开头的最大和，我们遍历了后续的所有元素，通过**枚举**来求得最大值，而这仅仅能求得这一个位置。这也导致算法的时间复杂度是O(N²)的。于是我们换个思路，当我们考虑以当前位置的元素作为结尾时的最大和，可以根据**前一个位置**求得的最大和 `sum ` 的**正负**，来决定当前位置是加在前一个元素之后，还是自己成为一个新的子数组。当 ` sum > 0 `，对于当前数，加上这个 ` sum `，有增加的效果；当 ` sum <= 0 ` ，对于当前数，加上这个 ` sum ` ，有减小的效果，因此可以丢弃之前的 ` sum ` ，重新开始计算。\n\n{% note success %}\n\n根据前一个位置的结果得到当前位置的结果，这是典型的**动态规划**思想。\n\n{% endnote %}\n\n### 🧾 代码\n\n```java\npublic int maxSubArray(int[] nums) {\n    if(nums == null || nums.length == 0){\n        return 0;\n    }\n    int n = nums.length;\n    int[] dp = new int[n];\n    dp[0] = nums[0];\n    int res = dp[0];\n    for(int i = 1; i < n; i++){\n        dp[i] = dp[i-1]>0 ? dp[i-1]+nums[i] : nums[i];\n        res = Math.max(dp[i],res);\n    }\n    return res;\n}\n```\n\n更进一步的，因为我们只需要知道前一个位置的结果，因此使用一个变量 ` sum ` 记录，优化空间复杂度。{% fold 查看 %}\n\n```java\npublic int maxSubArray(int[] nums) {\n    int res = nums[0];\n    int sum = 0;\n    for (int num : nums) {\n        sum = sum > 0 ? sum+num : num;\n        res = Math.max(res, sum);\n    }\n    return res;\n}\n```\n\n{% endfold %}","slug":"53-最大子序和","published":1,"date":"2020-05-03T00:00:07.043Z","updated":"2020-05-05T03:11:57.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1z001kz4ejf3qzfbaq","content":"<blockquote>\n<p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p>示例:</p>\n<p>输入: [-2,1,-3,4,-1,2,1,-5,4],<br>输出: 6<br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"👊-暴力解法\"><a href=\"#👊-暴力解法\" class=\"headerlink\" title=\"👊 暴力解法\"></a>👊 暴力解法</h3><p>具有最大和的连续子数组一定是以数组中的某个元素开头的，因此我们只要求得每个位置的最长连续子数组自然也可以得到结果。稍加分析之后，信心满满的写下了这样的代码。<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i+<span class=\"number\">1</span>; j &lt; nums.length; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[j] &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                sum += nums[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = Math.max(res, sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div></p>\n<p>跑一下发现连测试用例都过不了。错误的原因在于：当下一个数为负时并<strong>不能跳出循环</strong>，因为可能后面还会有更大的正数，即使加上这个负数，但是由于后面正数更大，自然应该继续累加。</p>\n<blockquote>\n<p>对于 <code>[1,-3,4]</code>，即使 <code>1</code> 后面是 <code>-3</code>，但是如果就此跳出循环，则求得的最大和为<code>1</code>，但是正确的最大和是 <code>1 + -3 + 4 = 2</code>。</p>\n</blockquote>\n<p>于是我们尝试修改代码，由于我们只需要求得最大和是多少，因此在内层循环累加的过程中不断更新结果，那么最大值一定能够被找到。<div><div class=\"fold_hider\"><div class=\"close hider_title\">改正之后的代码</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = Integer.MIN_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; nums.length; j++)&#123;</span><br><span class=\"line\">            res = Math.max(res, sum+=nums[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div></p>\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>上述的思路，为了知道以某个位置的元素为开头的最大和，我们遍历了后续的所有元素，通过<strong>枚举</strong>来求得最大值，而这仅仅能求得这一个位置。这也导致算法的时间复杂度是O(N²)的。于是我们换个思路，当我们考虑以当前位置的元素作为结尾时的最大和，可以根据<strong>前一个位置</strong>求得的最大和 <code>sum</code> 的<strong>正负</strong>，来决定当前位置是加在前一个元素之后，还是自己成为一个新的子数组。当 <code>sum &gt; 0</code>，对于当前数，加上这个 <code>sum</code>，有增加的效果；当 <code>sum &lt;= 0</code> ，对于当前数，加上这个 <code>sum</code> ，有减小的效果，因此可以丢弃之前的 <code>sum</code> ，重新开始计算。</p>\n<div class=\"note success\"><p>根据前一个位置的结果得到当前位置的结果，这是典型的<strong>动态规划</strong>思想。</p></div>\n\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = dp[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        dp[i] = dp[i-<span class=\"number\">1</span>]&gt;<span class=\"number\">0</span> ? dp[i-<span class=\"number\">1</span>]+nums[i] : nums[i];</span><br><span class=\"line\">        res = Math.max(dp[i],res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更进一步的，因为我们只需要知道前一个位置的结果，因此使用一个变量 <code>sum</code> 记录，优化空间复杂度。<div><div class=\"fold_hider\"><div class=\"close hider_title\">查看</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">        sum = sum &gt; <span class=\"number\">0</span> ? sum+num : num;</span><br><span class=\"line\">        res = Math.max(res, sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p>示例:</p>\n<p>输入: [-2,1,-3,4,-1,2,1,-5,4],<br>输出: 6<br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p>\n</blockquote>","more":"<h3 id=\"👊-暴力解法\"><a href=\"#👊-暴力解法\" class=\"headerlink\" title=\"👊 暴力解法\"></a>👊 暴力解法</h3><p>具有最大和的连续子数组一定是以数组中的某个元素开头的，因此我们只要求得每个位置的最长连续子数组自然也可以得到结果。稍加分析之后，信心满满的写下了这样的代码。<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i+<span class=\"number\">1</span>; j &lt; nums.length; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[j] &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                sum += nums[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = Math.max(res, sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div></p>\n<p>跑一下发现连测试用例都过不了。错误的原因在于：当下一个数为负时并<strong>不能跳出循环</strong>，因为可能后面还会有更大的正数，即使加上这个负数，但是由于后面正数更大，自然应该继续累加。</p>\n<blockquote>\n<p>对于 <code>[1,-3,4]</code>，即使 <code>1</code> 后面是 <code>-3</code>，但是如果就此跳出循环，则求得的最大和为<code>1</code>，但是正确的最大和是 <code>1 + -3 + 4 = 2</code>。</p>\n</blockquote>\n<p>于是我们尝试修改代码，由于我们只需要求得最大和是多少，因此在内层循环累加的过程中不断更新结果，那么最大值一定能够被找到。<div><div class=\"fold_hider\"><div class=\"close hider_title\">改正之后的代码</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = Integer.MIN_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; nums.length; j++)&#123;</span><br><span class=\"line\">            res = Math.max(res, sum+=nums[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div></p>\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>上述的思路，为了知道以某个位置的元素为开头的最大和，我们遍历了后续的所有元素，通过<strong>枚举</strong>来求得最大值，而这仅仅能求得这一个位置。这也导致算法的时间复杂度是O(N²)的。于是我们换个思路，当我们考虑以当前位置的元素作为结尾时的最大和，可以根据<strong>前一个位置</strong>求得的最大和 <code>sum</code> 的<strong>正负</strong>，来决定当前位置是加在前一个元素之后，还是自己成为一个新的子数组。当 <code>sum &gt; 0</code>，对于当前数，加上这个 <code>sum</code>，有增加的效果；当 <code>sum &lt;= 0</code> ，对于当前数，加上这个 <code>sum</code> ，有减小的效果，因此可以丢弃之前的 <code>sum</code> ，重新开始计算。</p>\n<div class=\"note success\"><p>根据前一个位置的结果得到当前位置的结果，这是典型的<strong>动态规划</strong>思想。</p></div>\n\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = dp[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        dp[i] = dp[i-<span class=\"number\">1</span>]&gt;<span class=\"number\">0</span> ? dp[i-<span class=\"number\">1</span>]+nums[i] : nums[i];</span><br><span class=\"line\">        res = Math.max(dp[i],res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更进一步的，因为我们只需要知道前一个位置的结果，因此使用一个变量 <code>sum</code> 记录，优化空间复杂度。<div><div class=\"fold_hider\"><div class=\"close hider_title\">查看</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">        sum = sum &gt; <span class=\"number\">0</span> ? sum+num : num;</span><br><span class=\"line\">        res = Math.max(res, sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div></p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue May 05 2020 11:11:57 GMT+0800 (中国标准时间)","title":"53. 最大子序和","path":"posts/a42162e0.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p>示例:</p>\n<p>输入: [-2,1,-3,4,-1,2,1,-5,4],<br>输出: 6<br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-03T00:00:07.043Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-03T00:00:07.043Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["Leetcode","动态规划","分治算法"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1792},{"title":"530. 二叉搜索树的最小绝对差","abbrlink":"56aa34eb","_content":"\n> 给你一棵所有节点非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。\n\n{% note info %}\n\n示例：\n\n```java\n输入：\n   1\n    \\\n     3\n    /\n   2\n\n输出：\n1\n解释：\n最小绝对差为 1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。\n```\n\n{% endnote %}\n\n<!-- more -->\n\n### 💡 思路\n\n二叉树的问题通常使用递归来解决，需要考虑的是在递归过程中需要收集什么信息，足以判断是否符合题意条件。\n\n对于以某一个节点为根的树，它任意两个节点差值的最小值在其左子树求得的最小值、右子树求得的最小值、其**前驱**和**后继**节点与根节点的差值中产生（因为这是一棵二分搜索树）。\n\n**前驱节点**：位于左子树的最右位置。数值上是左子树的最大值。\n\n**后继节点**：位于右子树的最左位置。数值上是右子树的最小值。\n\n### 🧾 代码\n\n当节点为空/没有前驱后继节点时，返回整型最大值以避免影响判断。\n\n```java\npublic int getMinimumDifference(TreeNode root) {\n    //二分搜索数, 前驱和后继是和根差值最小的\n    //左子树上的和右子树上的和当前的求最小的\n    return process(root);\n}\nprivate int process(TreeNode node){\n    if(node == null){\n        return Integer.MAX_VALUE;\n    }\n    int left = process(node.left);\n    int right = process(node.right);\n\n    int cur = Integer.MAX_VALUE;\n    TreeNode precursor = pre(node.left);\n    if(precursor != null){\n        cur = Math.min( cur, Math.abs(node.val - precursor.val));\n    }\n    TreeNode successor = suc(node.right);\n    if( successor != null){\n        cur = Math.min( cur, Math.abs(node.val - successor.val));\n    }\n\n    return Math.min(left, Math.min(right, cur));\n}\n//求前驱\nprivate TreeNode pre(TreeNode node){\n    if(node == null){\n        return null;\n    }\n    while (node.right != null){\n        node = node.right;\n    }\n    return node;\n}\n//求后继\nprivate TreeNode suc(TreeNode node){\n    if(node == null){\n        return null;\n    }\n    while (node.left != null){\n        node = node.left;\n    }\n    return node;\n}\n```\n\n### 📈 优化\n\n二分搜索树还有一个重要性质是其中序遍历序列是递增的。于是这道题可以通过在中序遍历时计算当前和前一个节点的差值与上一次的差值比较更新结果。\n\n```java\nint min = Integer.MAX_VALUE;\nTreeNode pre = null;\npublic int getMinimumDifference(TreeNode root) {\n    inOrder(root);\n    return min;\n}\npublic void inOrder(TreeNode node){\n    if(node != null){\n        inOrder(node.left);\n        if(pre != null){\n            min = Math.min(min, Math.abs(node.val- pre.val));\n        }\n        pre = node;\n        inOrder(node.right);\n    }\n}\n```\n\n","source":"_posts/530-二叉搜索树的最小绝对差.md","raw":"---\ntitle: 530. 二叉搜索树的最小绝对差\ntags:\n  - Leetcode\n  - 二叉树\n  - 递归\ncategories:\n  - Leetcode\n  - 二叉树\nabbrlink: 56aa34eb\n---\n\n> 给你一棵所有节点非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。\n\n{% note info %}\n\n示例：\n\n```java\n输入：\n   1\n    \\\n     3\n    /\n   2\n\n输出：\n1\n解释：\n最小绝对差为 1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。\n```\n\n{% endnote %}\n\n<!-- more -->\n\n### 💡 思路\n\n二叉树的问题通常使用递归来解决，需要考虑的是在递归过程中需要收集什么信息，足以判断是否符合题意条件。\n\n对于以某一个节点为根的树，它任意两个节点差值的最小值在其左子树求得的最小值、右子树求得的最小值、其**前驱**和**后继**节点与根节点的差值中产生（因为这是一棵二分搜索树）。\n\n**前驱节点**：位于左子树的最右位置。数值上是左子树的最大值。\n\n**后继节点**：位于右子树的最左位置。数值上是右子树的最小值。\n\n### 🧾 代码\n\n当节点为空/没有前驱后继节点时，返回整型最大值以避免影响判断。\n\n```java\npublic int getMinimumDifference(TreeNode root) {\n    //二分搜索数, 前驱和后继是和根差值最小的\n    //左子树上的和右子树上的和当前的求最小的\n    return process(root);\n}\nprivate int process(TreeNode node){\n    if(node == null){\n        return Integer.MAX_VALUE;\n    }\n    int left = process(node.left);\n    int right = process(node.right);\n\n    int cur = Integer.MAX_VALUE;\n    TreeNode precursor = pre(node.left);\n    if(precursor != null){\n        cur = Math.min( cur, Math.abs(node.val - precursor.val));\n    }\n    TreeNode successor = suc(node.right);\n    if( successor != null){\n        cur = Math.min( cur, Math.abs(node.val - successor.val));\n    }\n\n    return Math.min(left, Math.min(right, cur));\n}\n//求前驱\nprivate TreeNode pre(TreeNode node){\n    if(node == null){\n        return null;\n    }\n    while (node.right != null){\n        node = node.right;\n    }\n    return node;\n}\n//求后继\nprivate TreeNode suc(TreeNode node){\n    if(node == null){\n        return null;\n    }\n    while (node.left != null){\n        node = node.left;\n    }\n    return node;\n}\n```\n\n### 📈 优化\n\n二分搜索树还有一个重要性质是其中序遍历序列是递增的。于是这道题可以通过在中序遍历时计算当前和前一个节点的差值与上一次的差值比较更新结果。\n\n```java\nint min = Integer.MAX_VALUE;\nTreeNode pre = null;\npublic int getMinimumDifference(TreeNode root) {\n    inOrder(root);\n    return min;\n}\npublic void inOrder(TreeNode node){\n    if(node != null){\n        inOrder(node.left);\n        if(pre != null){\n            min = Math.min(min, Math.abs(node.val- pre.val));\n        }\n        pre = node;\n        inOrder(node.right);\n    }\n}\n```\n\n","slug":"530-二叉搜索树的最小绝对差","published":1,"date":"2020-05-07T07:01:13.026Z","updated":"2020-05-08T15:51:50.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck1z001oz4ej8naw89mi","content":"<blockquote>\n<p>给你一棵所有节点非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。</p>\n</blockquote>\n<div class=\"note info\"><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\">   <span class=\"number\">1</span></span><br><span class=\"line\">    \\</span><br><span class=\"line\">     <span class=\"number\">3</span></span><br><span class=\"line\">    /</span><br><span class=\"line\">   <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">解释：</span><br><span class=\"line\">最小绝对差为 <span class=\"number\">1</span>，其中 <span class=\"number\">2</span> 和 <span class=\"number\">1</span> 的差的绝对值为 <span class=\"number\">1</span>（或者 <span class=\"number\">2</span> 和 <span class=\"number\">3</span>）。</span><br></pre></td></tr></table></figure></div>\n\n<a id=\"more\"></a>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>二叉树的问题通常使用递归来解决，需要考虑的是在递归过程中需要收集什么信息，足以判断是否符合题意条件。</p>\n<p>对于以某一个节点为根的树，它任意两个节点差值的最小值在其左子树求得的最小值、右子树求得的最小值、其<strong>前驱</strong>和<strong>后继</strong>节点与根节点的差值中产生（因为这是一棵二分搜索树）。</p>\n<p><strong>前驱节点</strong>：位于左子树的最右位置。数值上是左子树的最大值。</p>\n<p><strong>后继节点</strong>：位于右子树的最左位置。数值上是右子树的最小值。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>当节点为空/没有前驱后继节点时，返回整型最大值以避免影响判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMinimumDifference</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//二分搜索数, 前驱和后继是和根差值最小的</span></span><br><span class=\"line\">    <span class=\"comment\">//左子树上的和右子树上的和当前的求最小的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> process(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">process</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.MAX_VALUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = process(node.left);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = process(node.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cur = Integer.MAX_VALUE;</span><br><span class=\"line\">    TreeNode precursor = pre(node.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(precursor != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        cur = Math.min( cur, Math.abs(node.val - precursor.val));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    TreeNode successor = suc(node.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( successor != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        cur = Math.min( cur, Math.abs(node.val - successor.val));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.min(left, Math.min(right, cur));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//求前驱</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">pre</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        node = node.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//求后继</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">suc</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        node = node.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>二分搜索树还有一个重要性质是其中序遍历序列是递增的。于是这道题可以通过在中序遍历时计算当前和前一个节点的差值与上一次的差值比较更新结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\">TreeNode pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMinimumDifference</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    inOrder(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        inOrder(node.left);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pre != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            min = Math.min(min, Math.abs(node.val- pre.val));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre = node;</span><br><span class=\"line\">        inOrder(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>给你一棵所有节点非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。</p>\n</blockquote>\n<div class=\"note info\"><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\">   <span class=\"number\">1</span></span><br><span class=\"line\">    \\</span><br><span class=\"line\">     <span class=\"number\">3</span></span><br><span class=\"line\">    /</span><br><span class=\"line\">   <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">解释：</span><br><span class=\"line\">最小绝对差为 <span class=\"number\">1</span>，其中 <span class=\"number\">2</span> 和 <span class=\"number\">1</span> 的差的绝对值为 <span class=\"number\">1</span>（或者 <span class=\"number\">2</span> 和 <span class=\"number\">3</span>）。</span><br></pre></td></tr></table></figure></div>","more":"<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>二叉树的问题通常使用递归来解决，需要考虑的是在递归过程中需要收集什么信息，足以判断是否符合题意条件。</p>\n<p>对于以某一个节点为根的树，它任意两个节点差值的最小值在其左子树求得的最小值、右子树求得的最小值、其<strong>前驱</strong>和<strong>后继</strong>节点与根节点的差值中产生（因为这是一棵二分搜索树）。</p>\n<p><strong>前驱节点</strong>：位于左子树的最右位置。数值上是左子树的最大值。</p>\n<p><strong>后继节点</strong>：位于右子树的最左位置。数值上是右子树的最小值。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>当节点为空/没有前驱后继节点时，返回整型最大值以避免影响判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMinimumDifference</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//二分搜索数, 前驱和后继是和根差值最小的</span></span><br><span class=\"line\">    <span class=\"comment\">//左子树上的和右子树上的和当前的求最小的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> process(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">process</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.MAX_VALUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = process(node.left);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = process(node.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cur = Integer.MAX_VALUE;</span><br><span class=\"line\">    TreeNode precursor = pre(node.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(precursor != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        cur = Math.min( cur, Math.abs(node.val - precursor.val));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    TreeNode successor = suc(node.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( successor != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        cur = Math.min( cur, Math.abs(node.val - successor.val));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.min(left, Math.min(right, cur));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//求前驱</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">pre</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        node = node.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//求后继</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">suc</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        node = node.left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>二分搜索树还有一个重要性质是其中序遍历序列是递增的。于是这道题可以通过在中序遍历时计算当前和前一个节点的差值与上一次的差值比较更新结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\">TreeNode pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMinimumDifference</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    inOrder(root);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        inOrder(node.left);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pre != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            min = Math.min(min, Math.abs(node.val- pre.val));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre = node;</span><br><span class=\"line\">        inOrder(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri May 08 2020 23:51:50 GMT+0800 (中国标准时间)","title":"530. 二叉搜索树的最小绝对差","path":"posts/56aa34eb.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>给你一棵所有节点非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。</p>\n</blockquote>\n<div class=\"note info\"><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\">   <span class=\"number\">1</span></span><br><span class=\"line\">    \\</span><br><span class=\"line\">     <span class=\"number\">3</span></span><br><span class=\"line\">    /</span><br><span class=\"line\">   <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">解释：</span><br><span class=\"line\">最小绝对差为 <span class=\"number\">1</span>，其中 <span class=\"number\">2</span> 和 <span class=\"number\">1</span> 的差的绝对值为 <span class=\"number\">1</span>（或者 <span class=\"number\">2</span> 和 <span class=\"number\">3</span>）。</span><br></pre></td></tr></table></figure></div>","date":{"_isAMomentObject":true,"_i":"2020-05-07T07:01:13.026Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-07T07:01:13.026Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode > 二叉树","tags":["Leetcode","二叉树","递归"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1664},{"title":"538. 把二叉搜索树转换为累加树","abbrlink":"7da63a80","_content":"\n> 给定一个二叉搜索树，把它转换为累加树，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。\n\n{% note info %}\n\n示例：\n\n```java\n输入: 原始二叉搜索树:\n              5\n            /   \\\n           2     13\n\n输出: 转换为累加树:\n             18\n            /   \\\n          20     13\n```\n\n{% endnote %}\n\n<!-- more -->\n\n### 💡 思路\n\n根据题意，需要求每个节点比它大的所有节点值的和，对于一棵二叉搜索树，当题目所求和大小关系有关时，应该想到**中序遍历**。在二叉搜索树的中序遍历序列中，每个节点比它大的所有节点都在它的右侧。\n\n如示例中，中序遍历序列为 `[2,5,13] `，对于2，需要加上 `5+13` ，对于5，需要加上 `13 `。我们可以发现，第一个节点加上了整个序列之和减去自身的值，接下来的节点也是类似。因此最直接的思路是先求所有节点之和 `add `，然后根据中序遍历顺序，`add `作为所有大于当前节点的值的和，修改每个节点的值并更新`add `即可。\n\n### 🧾 代码\n\n```java\nint add = 0;\npublic TreeNode convertBST(TreeNode root) {\n    inOrderForAdd(root);//求和\n    inOrderForConvert(root);//加值\n    return root;\n}\npublic void inOrderForAdd(TreeNode node){\n    if(node != null){\n        inOrderForAdd(node.left);\n        add+=node.val;\n        inOrderForAdd(node.right);\n    }\n}\npublic void inOrderForConvert(TreeNode node){\n    if(node != null){\n        inOrderForConvert(node.left);\n        add-=node.val;\n        node.val+=add;\n        inOrderForConvert(node.right);\n    }\n}\n```\n\n### 📈 优化\n\n上述思路虽然直接，但是有些迂回了。我们需要转换一下想法，中序遍历是递增的，因此我们遍历的时候第一个到达的节点是最小值，需要加上其他所有值，这也导致了我们需要先进行一次遍历求得所有和。反过来向，如果能将中序遍历改造成递减的，那么第一个到达的节点是最大值，不需要加其他值，下一个节点只需要加上前一个节点即可，于是我们只需要遍历一次即可。\n\n```java\nint add = 0;\npublic TreeNode convertBST(TreeNode root) {\n    if(root != null){\n        convertBST(root.right);// 反向中序遍历\n        root.val += add;\n        add = root.val;//更新add\n        convertBST(root.left);\n    }\n    return root;\n}\n```","source":"_posts/538-把二叉搜索树转换为累加树.md","raw":"---\ntitle: 538. 把二叉搜索树转换为累加树\ntags:\n  - Leetcode\n  - 二叉树\n  - 递归\ncategories:\n  - Leetcode\n  - 二叉树\nabbrlink: 7da63a80\n---\n\n> 给定一个二叉搜索树，把它转换为累加树，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。\n\n{% note info %}\n\n示例：\n\n```java\n输入: 原始二叉搜索树:\n              5\n            /   \\\n           2     13\n\n输出: 转换为累加树:\n             18\n            /   \\\n          20     13\n```\n\n{% endnote %}\n\n<!-- more -->\n\n### 💡 思路\n\n根据题意，需要求每个节点比它大的所有节点值的和，对于一棵二叉搜索树，当题目所求和大小关系有关时，应该想到**中序遍历**。在二叉搜索树的中序遍历序列中，每个节点比它大的所有节点都在它的右侧。\n\n如示例中，中序遍历序列为 `[2,5,13] `，对于2，需要加上 `5+13` ，对于5，需要加上 `13 `。我们可以发现，第一个节点加上了整个序列之和减去自身的值，接下来的节点也是类似。因此最直接的思路是先求所有节点之和 `add `，然后根据中序遍历顺序，`add `作为所有大于当前节点的值的和，修改每个节点的值并更新`add `即可。\n\n### 🧾 代码\n\n```java\nint add = 0;\npublic TreeNode convertBST(TreeNode root) {\n    inOrderForAdd(root);//求和\n    inOrderForConvert(root);//加值\n    return root;\n}\npublic void inOrderForAdd(TreeNode node){\n    if(node != null){\n        inOrderForAdd(node.left);\n        add+=node.val;\n        inOrderForAdd(node.right);\n    }\n}\npublic void inOrderForConvert(TreeNode node){\n    if(node != null){\n        inOrderForConvert(node.left);\n        add-=node.val;\n        node.val+=add;\n        inOrderForConvert(node.right);\n    }\n}\n```\n\n### 📈 优化\n\n上述思路虽然直接，但是有些迂回了。我们需要转换一下想法，中序遍历是递增的，因此我们遍历的时候第一个到达的节点是最小值，需要加上其他所有值，这也导致了我们需要先进行一次遍历求得所有和。反过来向，如果能将中序遍历改造成递减的，那么第一个到达的节点是最大值，不需要加其他值，下一个节点只需要加上前一个节点即可，于是我们只需要遍历一次即可。\n\n```java\nint add = 0;\npublic TreeNode convertBST(TreeNode root) {\n    if(root != null){\n        convertBST(root.right);// 反向中序遍历\n        root.val += add;\n        add = root.val;//更新add\n        convertBST(root.left);\n    }\n    return root;\n}\n```","slug":"538-把二叉搜索树转换为累加树","published":1,"date":"2020-05-07T07:34:01.853Z","updated":"2020-05-08T15:51:43.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck20001rz4ejb8s9glr2","content":"<blockquote>\n<p>给定一个二叉搜索树，把它转换为累加树，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</p>\n</blockquote>\n<div class=\"note info\"><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 原始二叉搜索树:</span><br><span class=\"line\">              <span class=\"number\">5</span></span><br><span class=\"line\">            /   \\</span><br><span class=\"line\">           <span class=\"number\">2</span>     <span class=\"number\">13</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出: 转换为累加树:</span><br><span class=\"line\">             <span class=\"number\">18</span></span><br><span class=\"line\">            /   \\</span><br><span class=\"line\">          <span class=\"number\">20</span>     <span class=\"number\">13</span></span><br></pre></td></tr></table></figure></div>\n\n<a id=\"more\"></a>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>根据题意，需要求每个节点比它大的所有节点值的和，对于一棵二叉搜索树，当题目所求和大小关系有关时，应该想到<strong>中序遍历</strong>。在二叉搜索树的中序遍历序列中，每个节点比它大的所有节点都在它的右侧。</p>\n<p>如示例中，中序遍历序列为 <code>[2,5,13]</code>，对于2，需要加上 <code>5+13</code> ，对于5，需要加上 <code>13</code>。我们可以发现，第一个节点加上了整个序列之和减去自身的值，接下来的节点也是类似。因此最直接的思路是先求所有节点之和 <code>add</code>，然后根据中序遍历顺序，<code>add</code>作为所有大于当前节点的值的和，修改每个节点的值并更新<code>add</code>即可。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> add = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">convertBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    inOrderForAdd(root);<span class=\"comment\">//求和</span></span><br><span class=\"line\">    inOrderForConvert(root);<span class=\"comment\">//加值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inOrderForAdd</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        inOrderForAdd(node.left);</span><br><span class=\"line\">        add+=node.val;</span><br><span class=\"line\">        inOrderForAdd(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inOrderForConvert</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        inOrderForConvert(node.left);</span><br><span class=\"line\">        add-=node.val;</span><br><span class=\"line\">        node.val+=add;</span><br><span class=\"line\">        inOrderForConvert(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>上述思路虽然直接，但是有些迂回了。我们需要转换一下想法，中序遍历是递增的，因此我们遍历的时候第一个到达的节点是最小值，需要加上其他所有值，这也导致了我们需要先进行一次遍历求得所有和。反过来向，如果能将中序遍历改造成递减的，那么第一个到达的节点是最大值，不需要加其他值，下一个节点只需要加上前一个节点即可，于是我们只需要遍历一次即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> add = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">convertBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        convertBST(root.right);<span class=\"comment\">// 反向中序遍历</span></span><br><span class=\"line\">        root.val += add;</span><br><span class=\"line\">        add = root.val;<span class=\"comment\">//更新add</span></span><br><span class=\"line\">        convertBST(root.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>给定一个二叉搜索树，把它转换为累加树，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</p>\n</blockquote>\n<div class=\"note info\"><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 原始二叉搜索树:</span><br><span class=\"line\">              <span class=\"number\">5</span></span><br><span class=\"line\">            /   \\</span><br><span class=\"line\">           <span class=\"number\">2</span>     <span class=\"number\">13</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出: 转换为累加树:</span><br><span class=\"line\">             <span class=\"number\">18</span></span><br><span class=\"line\">            /   \\</span><br><span class=\"line\">          <span class=\"number\">20</span>     <span class=\"number\">13</span></span><br></pre></td></tr></table></figure></div>","more":"<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>根据题意，需要求每个节点比它大的所有节点值的和，对于一棵二叉搜索树，当题目所求和大小关系有关时，应该想到<strong>中序遍历</strong>。在二叉搜索树的中序遍历序列中，每个节点比它大的所有节点都在它的右侧。</p>\n<p>如示例中，中序遍历序列为 <code>[2,5,13]</code>，对于2，需要加上 <code>5+13</code> ，对于5，需要加上 <code>13</code>。我们可以发现，第一个节点加上了整个序列之和减去自身的值，接下来的节点也是类似。因此最直接的思路是先求所有节点之和 <code>add</code>，然后根据中序遍历顺序，<code>add</code>作为所有大于当前节点的值的和，修改每个节点的值并更新<code>add</code>即可。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> add = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">convertBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    inOrderForAdd(root);<span class=\"comment\">//求和</span></span><br><span class=\"line\">    inOrderForConvert(root);<span class=\"comment\">//加值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inOrderForAdd</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        inOrderForAdd(node.left);</span><br><span class=\"line\">        add+=node.val;</span><br><span class=\"line\">        inOrderForAdd(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inOrderForConvert</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        inOrderForConvert(node.left);</span><br><span class=\"line\">        add-=node.val;</span><br><span class=\"line\">        node.val+=add;</span><br><span class=\"line\">        inOrderForConvert(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>上述思路虽然直接，但是有些迂回了。我们需要转换一下想法，中序遍历是递增的，因此我们遍历的时候第一个到达的节点是最小值，需要加上其他所有值，这也导致了我们需要先进行一次遍历求得所有和。反过来向，如果能将中序遍历改造成递减的，那么第一个到达的节点是最大值，不需要加其他值，下一个节点只需要加上前一个节点即可，于是我们只需要遍历一次即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> add = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">convertBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        convertBST(root.right);<span class=\"comment\">// 反向中序遍历</span></span><br><span class=\"line\">        root.val += add;</span><br><span class=\"line\">        add = root.val;<span class=\"comment\">//更新add</span></span><br><span class=\"line\">        convertBST(root.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri May 08 2020 23:51:43 GMT+0800 (中国标准时间)","title":"538. 把二叉搜索树转换为累加树","path":"posts/7da63a80.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>给定一个二叉搜索树，把它转换为累加树，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</p>\n</blockquote>\n<div class=\"note info\"><p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 原始二叉搜索树:</span><br><span class=\"line\">              <span class=\"number\">5</span></span><br><span class=\"line\">            /   \\</span><br><span class=\"line\">           <span class=\"number\">2</span>     <span class=\"number\">13</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出: 转换为累加树:</span><br><span class=\"line\">             <span class=\"number\">18</span></span><br><span class=\"line\">            /   \\</span><br><span class=\"line\">          <span class=\"number\">20</span>     <span class=\"number\">13</span></span><br></pre></td></tr></table></figure></div>","date":{"_isAMomentObject":true,"_i":"2020-05-07T07:34:01.853Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-07T07:34:01.853Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode > 二叉树","tags":["Leetcode","二叉树","递归"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1170},{"title":"572. 另一个树的子树","abbrlink":"689f55a9","_content":"\n> 给定两个非空二叉树 s 和 t ，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。\n\n<!-- more -->\n\n{% note info %}\n\n示例 1:\n\n    给定的树 s:\n    \t 3\n        / \\\n       4   5\n      / \\\n     1   2\n    给定的树 t：\n    \n       4 \n      / \\\n     1   2\n    返回 true，因为 t 与 s 的一个子树拥有相同的结构和节点值。\n示例 2:\n\n    给定的树 s：\n    \t 3\n        / \\\n       4   5\n      / \\\n     1   2\n        /\n       0\n    给定的树 t：\n       4\n      / \\\n     1   2\n    返回 false。\n{% endnote %}\n\n### 💡 思路\n\n二叉树的问题，通常可以使用递归来求解，因为树本身具有天然的递归结构。通常的做法是，判断当前树/当前树的左子树/当前树的右子树是否符合条件。求解这类问题的时候，可以先不考虑具体的边界/递归终止问题，只需要先把框架写出来，用几个示例套入框架，可以较快地确定递归终止条件。\n\n本题中，求一棵树是否为另一颗树的子树，根据上述的思路，可以先得到 ` return isSub(s, t) || isSubTree(s.left , t) || isSubTree(s.right, t); ` 这样的框架。然后我们需要写 ` isSub(s , t) ` 的逻辑，这个函数处理传入的两个树是否相等，需要满足以下三个条件：1. 节点值相等，即` s.val = t.val ` 2. 节点左子树相等，即` isSub(s.left, t.left) ` 3. 节点右子树相等，即` isSub(s.right, t.right) ` 。\n\n### 🧾 代码\n\n于是我们综合上面的过程，再套入示例（这个过程最好自己实操一下），确定边界和终止条件。可以写出如下的代码。\n\n```java\n public boolean isSubtree(TreeNode s, TreeNode t) {\n     //s当前节点-t, s.left-t, s.right-t\n     if(t == null){\n         return true;\n     }\n     if(s == null){\n         return false;\n     }\n     return isSub(s, t) || isSubtree(s.left, t) || isSubtree(s.right, t);\n}\npublic boolean isSub(TreeNode s, TreeNode t){\n    if(t == null && s == null){\n        return true;\n    }\n    if(s == null || t == null){\n        return false;\n    }\n    if(s.val == t.val){\n        return isSub(s.left , t.left) && isSub(s.right, t.right);\n    }\n    return false;\n}\n```\n\n","source":"_posts/572-另一个树的子树.md","raw":"---\ntitle: 572. 另一个树的子树\ntags:\n  - Leetcode\n  - 二叉树\n  - 递归\ncategories:\n  - Leetcode\nabbrlink: 689f55a9\n---\n\n> 给定两个非空二叉树 s 和 t ，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。\n\n<!-- more -->\n\n{% note info %}\n\n示例 1:\n\n    给定的树 s:\n    \t 3\n        / \\\n       4   5\n      / \\\n     1   2\n    给定的树 t：\n    \n       4 \n      / \\\n     1   2\n    返回 true，因为 t 与 s 的一个子树拥有相同的结构和节点值。\n示例 2:\n\n    给定的树 s：\n    \t 3\n        / \\\n       4   5\n      / \\\n     1   2\n        /\n       0\n    给定的树 t：\n       4\n      / \\\n     1   2\n    返回 false。\n{% endnote %}\n\n### 💡 思路\n\n二叉树的问题，通常可以使用递归来求解，因为树本身具有天然的递归结构。通常的做法是，判断当前树/当前树的左子树/当前树的右子树是否符合条件。求解这类问题的时候，可以先不考虑具体的边界/递归终止问题，只需要先把框架写出来，用几个示例套入框架，可以较快地确定递归终止条件。\n\n本题中，求一棵树是否为另一颗树的子树，根据上述的思路，可以先得到 ` return isSub(s, t) || isSubTree(s.left , t) || isSubTree(s.right, t); ` 这样的框架。然后我们需要写 ` isSub(s , t) ` 的逻辑，这个函数处理传入的两个树是否相等，需要满足以下三个条件：1. 节点值相等，即` s.val = t.val ` 2. 节点左子树相等，即` isSub(s.left, t.left) ` 3. 节点右子树相等，即` isSub(s.right, t.right) ` 。\n\n### 🧾 代码\n\n于是我们综合上面的过程，再套入示例（这个过程最好自己实操一下），确定边界和终止条件。可以写出如下的代码。\n\n```java\n public boolean isSubtree(TreeNode s, TreeNode t) {\n     //s当前节点-t, s.left-t, s.right-t\n     if(t == null){\n         return true;\n     }\n     if(s == null){\n         return false;\n     }\n     return isSub(s, t) || isSubtree(s.left, t) || isSubtree(s.right, t);\n}\npublic boolean isSub(TreeNode s, TreeNode t){\n    if(t == null && s == null){\n        return true;\n    }\n    if(s == null || t == null){\n        return false;\n    }\n    if(s.val == t.val){\n        return isSub(s.left , t.left) && isSub(s.right, t.right);\n    }\n    return false;\n}\n```\n\n","slug":"572-另一个树的子树","published":1,"date":"2020-05-07T01:23:02.252Z","updated":"2020-05-07T03:23:12.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck21001vz4ej3qxk9su1","content":"<blockquote>\n<p>给定两个非空二叉树 s 和 t ，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<div class=\"note info\"><p>示例 1:</p>\n<pre><code>给定的树 s:\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n给定的树 t：\n\n   4 \n  / \\\n 1   2\n返回 true，因为 t 与 s 的一个子树拥有相同的结构和节点值。</code></pre><p>示例 2:</p>\n<pre><code>给定的树 s：\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n    /\n   0\n给定的树 t：\n   4\n  / \\\n 1   2\n返回 false。</code></pre></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>二叉树的问题，通常可以使用递归来求解，因为树本身具有天然的递归结构。通常的做法是，判断当前树/当前树的左子树/当前树的右子树是否符合条件。求解这类问题的时候，可以先不考虑具体的边界/递归终止问题，只需要先把框架写出来，用几个示例套入框架，可以较快地确定递归终止条件。</p>\n<p>本题中，求一棵树是否为另一颗树的子树，根据上述的思路，可以先得到 <code>return isSub(s, t) || isSubTree(s.left , t) || isSubTree(s.right, t);</code> 这样的框架。然后我们需要写 <code>isSub(s , t)</code> 的逻辑，这个函数处理传入的两个树是否相等，需要满足以下三个条件：1. 节点值相等，即<code>s.val = t.val</code> 2. 节点左子树相等，即<code>isSub(s.left, t.left)</code> 3. 节点右子树相等，即<code>isSub(s.right, t.right)</code> 。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>于是我们综合上面的过程，再套入示例（这个过程最好自己实操一下），确定边界和终止条件。可以写出如下的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSubtree</span><span class=\"params\">(TreeNode s, TreeNode t)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//s当前节点-t, s.left-t, s.right-t</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(t == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> isSub(s, t) || isSubtree(s.left, t) || isSubtree(s.right, t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSub</span><span class=\"params\">(TreeNode s, TreeNode t)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t == <span class=\"keyword\">null</span> &amp;&amp; s == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span> || t == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.val == t.val)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSub(s.left , t.left) &amp;&amp; isSub(s.right, t.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>给定两个非空二叉树 s 和 t ，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。</p>\n</blockquote>","more":"<div class=\"note info\"><p>示例 1:</p>\n<pre><code>给定的树 s:\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n给定的树 t：\n\n   4 \n  / \\\n 1   2\n返回 true，因为 t 与 s 的一个子树拥有相同的结构和节点值。</code></pre><p>示例 2:</p>\n<pre><code>给定的树 s：\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n    /\n   0\n给定的树 t：\n   4\n  / \\\n 1   2\n返回 false。</code></pre></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>二叉树的问题，通常可以使用递归来求解，因为树本身具有天然的递归结构。通常的做法是，判断当前树/当前树的左子树/当前树的右子树是否符合条件。求解这类问题的时候，可以先不考虑具体的边界/递归终止问题，只需要先把框架写出来，用几个示例套入框架，可以较快地确定递归终止条件。</p>\n<p>本题中，求一棵树是否为另一颗树的子树，根据上述的思路，可以先得到 <code>return isSub(s, t) || isSubTree(s.left , t) || isSubTree(s.right, t);</code> 这样的框架。然后我们需要写 <code>isSub(s , t)</code> 的逻辑，这个函数处理传入的两个树是否相等，需要满足以下三个条件：1. 节点值相等，即<code>s.val = t.val</code> 2. 节点左子树相等，即<code>isSub(s.left, t.left)</code> 3. 节点右子树相等，即<code>isSub(s.right, t.right)</code> 。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>于是我们综合上面的过程，再套入示例（这个过程最好自己实操一下），确定边界和终止条件。可以写出如下的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSubtree</span><span class=\"params\">(TreeNode s, TreeNode t)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//s当前节点-t, s.left-t, s.right-t</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(t == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> isSub(s, t) || isSubtree(s.left, t) || isSubtree(s.right, t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSub</span><span class=\"params\">(TreeNode s, TreeNode t)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t == <span class=\"keyword\">null</span> &amp;&amp; s == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span> || t == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.val == t.val)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSub(s.left , t.left) &amp;&amp; isSub(s.right, t.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu May 07 2020 11:23:12 GMT+0800 (中国标准时间)","title":"572. 另一个树的子树","path":"posts/689f55a9.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>给定两个非空二叉树 s 和 t ，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-07T01:23:02.252Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-07T01:23:02.252Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["Leetcode","二叉树","递归"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1093},{"title":"704. 二分查找","date":"2020-04-30T11:50:00.000Z","abbrlink":"41f30363","_content":"\n> 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n>\n> **提示：**\n>\n> 1. 你可以假设 `nums` 中的所有元素是不重复的。\n> 2. `n` 将在 `[1, 10000]`之间。\n> 3. `nums` 的每个元素都将在 `[-9999, 9999]`之间。\n\n<!-- more -->\n\n{% note default %}\n\n示例 1:\n\n输入: nums = [-1,0,3,5,9,12], target = 9\n输出: 4\n解释: 9 出现在 nums 中并且下标为 4\n示例 2:\n\n输入: nums = [-1,0,3,5,9,12], target = 2\n输出: -1\n解释: 2 不存在 nums 中因此返回 -1\n\n{% endnote %}\n\n### 💡 思路\n\n ~~不用什么思路，直接二分就完了~~😝\n\n##### 二分基本步骤\n\n1. 确定左右边界，考虑开闭区间。这里我的左右边界分别是 ` left = 0 `，` right = nums.length - 1 `，形成一个` [left ... right] `的左闭右闭区间。你也可以使用其他的边界类似 ` right = nums.length `等，**最重要的是**你要知道你所定义的这些变量，在运行过程中代表什么，如何变化。\n2. 确定循环终止条件，考虑跳出循环的时候，` left ` 和 ` right ` 的关系，返回时的处理。\n3. 通过中间位置的数 `nums[mid] ` 与 `target ` 的大小关系，修改边界，缩小区间，达到**减治**的目的。这里介绍下 `mid` 的几种求法。\n\n{% note info %}\n\n` int mid = (left + right) / 2 `：当` left ` 和 ` right ` 值太大时，`left + right ` 会溢出，导致结果不正确\n\n` int mid = left + (right - left) / 2 `：通常使用这种。\n\n` int mid = left + (right - left) >> 1 ` ：有一种说法是位运算比四则运算更快，但是其实优秀的编译器会帮我们做这步优化，因此使用第二种即可。\n\n` int mid = (left + right) >>> 1 `：即使产生溢出，无符号右移也可以返回正确的结果。但是不够直观，影响代码的可读性。\n\n{% endnote %}\n\n### 🧾 代码\n\n```java\npublic int binarySearch(int[] nums, int target){\n    if(nums == null || nums.length == 0){\n        return -1;\n    }\n    int left = 0, right = nums.length - 1;\n    while(left <= right){//循环终止条件left>right,区间长度<0,表示不存在target\n        int mid = left + (right-left) / 2;\n        if(nums[mid] == target){\n            return mid;\n        }else if(nums[mid] < target){\n            left = mid + 1; //±1 -- 因为mid已经被排除\n        }else {\n            right = mid - 1;\n        }\n    }\n    return -1;\n}\n```\n\n","source":"_posts/704-二分查找.md","raw":"---\ntitle: 704. 二分查找\ndate: '2020-04-30 19:50'\ntags:\n  - Leetcode\n  - 二分查找\ncategories:\n  - Leetcode\nabbrlink: 41f30363\n---\n\n> 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。\n>\n> **提示：**\n>\n> 1. 你可以假设 `nums` 中的所有元素是不重复的。\n> 2. `n` 将在 `[1, 10000]`之间。\n> 3. `nums` 的每个元素都将在 `[-9999, 9999]`之间。\n\n<!-- more -->\n\n{% note default %}\n\n示例 1:\n\n输入: nums = [-1,0,3,5,9,12], target = 9\n输出: 4\n解释: 9 出现在 nums 中并且下标为 4\n示例 2:\n\n输入: nums = [-1,0,3,5,9,12], target = 2\n输出: -1\n解释: 2 不存在 nums 中因此返回 -1\n\n{% endnote %}\n\n### 💡 思路\n\n ~~不用什么思路，直接二分就完了~~😝\n\n##### 二分基本步骤\n\n1. 确定左右边界，考虑开闭区间。这里我的左右边界分别是 ` left = 0 `，` right = nums.length - 1 `，形成一个` [left ... right] `的左闭右闭区间。你也可以使用其他的边界类似 ` right = nums.length `等，**最重要的是**你要知道你所定义的这些变量，在运行过程中代表什么，如何变化。\n2. 确定循环终止条件，考虑跳出循环的时候，` left ` 和 ` right ` 的关系，返回时的处理。\n3. 通过中间位置的数 `nums[mid] ` 与 `target ` 的大小关系，修改边界，缩小区间，达到**减治**的目的。这里介绍下 `mid` 的几种求法。\n\n{% note info %}\n\n` int mid = (left + right) / 2 `：当` left ` 和 ` right ` 值太大时，`left + right ` 会溢出，导致结果不正确\n\n` int mid = left + (right - left) / 2 `：通常使用这种。\n\n` int mid = left + (right - left) >> 1 ` ：有一种说法是位运算比四则运算更快，但是其实优秀的编译器会帮我们做这步优化，因此使用第二种即可。\n\n` int mid = (left + right) >>> 1 `：即使产生溢出，无符号右移也可以返回正确的结果。但是不够直观，影响代码的可读性。\n\n{% endnote %}\n\n### 🧾 代码\n\n```java\npublic int binarySearch(int[] nums, int target){\n    if(nums == null || nums.length == 0){\n        return -1;\n    }\n    int left = 0, right = nums.length - 1;\n    while(left <= right){//循环终止条件left>right,区间长度<0,表示不存在target\n        int mid = left + (right-left) / 2;\n        if(nums[mid] == target){\n            return mid;\n        }else if(nums[mid] < target){\n            left = mid + 1; //±1 -- 因为mid已经被排除\n        }else {\n            right = mid - 1;\n        }\n    }\n    return -1;\n}\n```\n\n","slug":"704-二分查找","published":1,"updated":"2020-05-05T03:11:57.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck22001yz4ejaal0ha6m","content":"<blockquote>\n<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n<p><strong>提示：</strong></p>\n<ol>\n<li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li>\n<li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li>\n<li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li>\n</ol>\n</blockquote>\n<a id=\"more\"></a>\n\n<div class=\"note default\"><p>示例 1:</p>\n<p>输入: nums = [-1,0,3,5,9,12], target = 9<br>输出: 4<br>解释: 9 出现在 nums 中并且下标为 4<br>示例 2:</p>\n<p>输入: nums = [-1,0,3,5,9,12], target = 2<br>输出: -1<br>解释: 2 不存在 nums 中因此返回 -1</p></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p> <del>不用什么思路，直接二分就完了</del>😝</p>\n<h5 id=\"二分基本步骤\"><a href=\"#二分基本步骤\" class=\"headerlink\" title=\"二分基本步骤\"></a>二分基本步骤</h5><ol>\n<li>确定左右边界，考虑开闭区间。这里我的左右边界分别是 <code>left = 0</code>，<code>right = nums.length - 1</code>，形成一个<code>[left ... right]</code>的左闭右闭区间。你也可以使用其他的边界类似 <code>right = nums.length</code>等，<strong>最重要的是</strong>你要知道你所定义的这些变量，在运行过程中代表什么，如何变化。</li>\n<li>确定循环终止条件，考虑跳出循环的时候，<code>left</code> 和 <code>right</code> 的关系，返回时的处理。</li>\n<li>通过中间位置的数 <code>nums[mid]</code> 与 <code>target</code> 的大小关系，修改边界，缩小区间，达到<strong>减治</strong>的目的。这里介绍下 <code>mid</code> 的几种求法。</li>\n</ol>\n<div class=\"note info\"><p><code>int mid = (left + right) / 2</code>：当<code>left</code> 和 <code>right</code> 值太大时，<code>left + right</code> 会溢出，导致结果不正确</p>\n<p><code>int mid = left + (right - left) / 2</code>：通常使用这种。</p>\n<p><code>int mid = left + (right - left) &gt;&gt; 1</code> ：有一种说法是位运算比四则运算更快，但是其实优秀的编译器会帮我们做这步优化，因此使用第二种即可。</p>\n<p><code>int mid = (left + right) &gt;&gt;&gt; 1</code>：即使产生溢出，无符号右移也可以返回正确的结果。但是不够直观，影响代码的可读性。</p></div>\n\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt;= right)&#123;<span class=\"comment\">//循环终止条件left&gt;right,区间长度&lt;0,表示不存在target</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right-left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>; <span class=\"comment\">//±1 -- 因为mid已经被排除</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n<p><strong>提示：</strong></p>\n<ol>\n<li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li>\n<li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li>\n<li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li>\n</ol>\n</blockquote>","more":"<div class=\"note default\"><p>示例 1:</p>\n<p>输入: nums = [-1,0,3,5,9,12], target = 9<br>输出: 4<br>解释: 9 出现在 nums 中并且下标为 4<br>示例 2:</p>\n<p>输入: nums = [-1,0,3,5,9,12], target = 2<br>输出: -1<br>解释: 2 不存在 nums 中因此返回 -1</p></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p> <del>不用什么思路，直接二分就完了</del>😝</p>\n<h5 id=\"二分基本步骤\"><a href=\"#二分基本步骤\" class=\"headerlink\" title=\"二分基本步骤\"></a>二分基本步骤</h5><ol>\n<li>确定左右边界，考虑开闭区间。这里我的左右边界分别是 <code>left = 0</code>，<code>right = nums.length - 1</code>，形成一个<code>[left ... right]</code>的左闭右闭区间。你也可以使用其他的边界类似 <code>right = nums.length</code>等，<strong>最重要的是</strong>你要知道你所定义的这些变量，在运行过程中代表什么，如何变化。</li>\n<li>确定循环终止条件，考虑跳出循环的时候，<code>left</code> 和 <code>right</code> 的关系，返回时的处理。</li>\n<li>通过中间位置的数 <code>nums[mid]</code> 与 <code>target</code> 的大小关系，修改边界，缩小区间，达到<strong>减治</strong>的目的。这里介绍下 <code>mid</code> 的几种求法。</li>\n</ol>\n<div class=\"note info\"><p><code>int mid = (left + right) / 2</code>：当<code>left</code> 和 <code>right</code> 值太大时，<code>left + right</code> 会溢出，导致结果不正确</p>\n<p><code>int mid = left + (right - left) / 2</code>：通常使用这种。</p>\n<p><code>int mid = left + (right - left) &gt;&gt; 1</code> ：有一种说法是位运算比四则运算更快，但是其实优秀的编译器会帮我们做这步优化，因此使用第二种即可。</p>\n<p><code>int mid = (left + right) &gt;&gt;&gt; 1</code>：即使产生溢出，无符号右移也可以返回正确的结果。但是不够直观，影响代码的可读性。</p></div>\n\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt;= right)&#123;<span class=\"comment\">//循环终止条件left&gt;right,区间长度&lt;0,表示不存在target</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right-left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target)&#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>; <span class=\"comment\">//±1 -- 因为mid已经被排除</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue May 05 2020 11:11:57 GMT+0800 (中国标准时间)","title":"704. 二分查找","path":"posts/41f30363.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>\n<p><strong>提示：</strong></p>\n<ol>\n<li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li>\n<li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li>\n<li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li>\n</ol>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-04-30T11:50:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-04-30T11:50:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["Leetcode","二分查找"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1190},{"wtitle":"739. 每日温度","abbrlink":"f2adbb58","_content":"\n> 请根据每日气温列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。\n>\n> 例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。\n>\n> 提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。\n>\n\n<!-- more -->\n\n### 💡 思路\n\n比较直观的做法就是对于每个位置，往后遍历，当遇到第一个比自身大的元素时就停下来，记录位置；如果直到最后都没有遇到，则表示气温在这之后都不会升高。\n\n### 🧾 代码\n\n```java\npublic int[] dailyTemperatures(int[] T) {\n    if(T == null || T.length == 0) return T;\n    int n = T.length;\n    int[] res = new int[n];\n    //暴力\n    for(int i = 0 ; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            if(T[j] > T[i]){\n                res[i] = j-i;\n                break;\n            }\n        }\n    }\n    return res;\n}\n```\n\n\n\n### 📈 优化\n\n暴力遍历的方式虽然可以获得一个accept，但是效率是非常低的。因为每一次我们都是重新开始遍历，没有利用之前的结果。因此有了以下两种优化方式。\n\n#### 单调栈\n\n单调栈的含义是，一个栈中从栈顶到栈底一直保持着递增/递减的性质。当遇到新的元素入栈时，如果破坏了性质，则要通过出栈直到剩余的元素和新元素仍保持性质。\n\n本题中，通过维护一个递减的单调栈，可以求出结果。将数组中元素（下标）逐个入栈，当**新元素比栈顶元素大**时，对于栈顶元素来说，即遇到了**第一个比它大**的元素，也就是气温升高，因此将栈顶出栈，并记录结果（下标差）。\n\n```java\npublic int[] dailyTemperatures(int[] T) {\n    if(T == null || T.length == 0) return T;\n    int n = T.length;\n    int[] res = new int[n];\n\n    //单调栈\n    Stack<Integer> stack = new Stack<>();\n    for(int i = 0; i < n; i++){\n        while(!stack.isEmpty() && T[i] > T[stack.peek()]){\n            int index = stack.pop();\n            res[index] = i - index;\n        }\n        stack.push(i);\n    }\n    \n    return res;\n}\n```\n\n\n\n#### 逆向+跳跃\n\n对于数组的最后一个元素，由于其后面没有元素，因此该位置结果为0。基于最后一个位置，我们尝试不断地推出前一个元素的结果。先看一下代码\n\n```java\npublic int[] dailyTemperatures(int[] T) {\n    if(T == null || T.length == 0) return T;\n    int n = T.length;\n    int[] res = new int[n];\n    \n    //跳跃\n    for(int i = n - 1; i >= 0; i--){\n        int j = i + 1;\n        while(j < n){\n            if(T[j] > T[i]){\n                res[i] = j - i;\n                break;\n            }else if(res[j] == 0){\n                break;\n            }else{\n                j += res[j];\n            }\n        }\n    }\n    return res;\n}\n```\n\n外层for循环从后往前遍历，对于每一个位置`i `，内层while循环起点是后一个元素`j `，如果`T[j] > T[i]`，即气温升高，则记录结果（下标差）；如果位置`j`不大于`i`，按照暴力的逻辑，我们会逐个往后遍历，而这里我们通过判断已求得的结果`res[j]`是否为0来进行“跳跃”。对于`res[j]`：\n\n- `res[j] == 0`，即`j`之后气温不再升高，那么由于`T[i]>=T[j] `，可得`res[i] = 0`\n- `res[j] > 0`，即`j`之后`res[j] `天气温升高，在`[j...j+res[j]]`间没有比`T[i]`大的值，可以进行跳跃，加快效率，在对新的`j`进行判断","source":"_posts/739-每日温度.md","raw":"---\nwtitle: 739. 每日温度\ncategories:\n  - Leetcode\ntags:\n  - 单调栈\nabbrlink: f2adbb58\n---\n\n> 请根据每日气温列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。\n>\n> 例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。\n>\n> 提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。\n>\n\n<!-- more -->\n\n### 💡 思路\n\n比较直观的做法就是对于每个位置，往后遍历，当遇到第一个比自身大的元素时就停下来，记录位置；如果直到最后都没有遇到，则表示气温在这之后都不会升高。\n\n### 🧾 代码\n\n```java\npublic int[] dailyTemperatures(int[] T) {\n    if(T == null || T.length == 0) return T;\n    int n = T.length;\n    int[] res = new int[n];\n    //暴力\n    for(int i = 0 ; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            if(T[j] > T[i]){\n                res[i] = j-i;\n                break;\n            }\n        }\n    }\n    return res;\n}\n```\n\n\n\n### 📈 优化\n\n暴力遍历的方式虽然可以获得一个accept，但是效率是非常低的。因为每一次我们都是重新开始遍历，没有利用之前的结果。因此有了以下两种优化方式。\n\n#### 单调栈\n\n单调栈的含义是，一个栈中从栈顶到栈底一直保持着递增/递减的性质。当遇到新的元素入栈时，如果破坏了性质，则要通过出栈直到剩余的元素和新元素仍保持性质。\n\n本题中，通过维护一个递减的单调栈，可以求出结果。将数组中元素（下标）逐个入栈，当**新元素比栈顶元素大**时，对于栈顶元素来说，即遇到了**第一个比它大**的元素，也就是气温升高，因此将栈顶出栈，并记录结果（下标差）。\n\n```java\npublic int[] dailyTemperatures(int[] T) {\n    if(T == null || T.length == 0) return T;\n    int n = T.length;\n    int[] res = new int[n];\n\n    //单调栈\n    Stack<Integer> stack = new Stack<>();\n    for(int i = 0; i < n; i++){\n        while(!stack.isEmpty() && T[i] > T[stack.peek()]){\n            int index = stack.pop();\n            res[index] = i - index;\n        }\n        stack.push(i);\n    }\n    \n    return res;\n}\n```\n\n\n\n#### 逆向+跳跃\n\n对于数组的最后一个元素，由于其后面没有元素，因此该位置结果为0。基于最后一个位置，我们尝试不断地推出前一个元素的结果。先看一下代码\n\n```java\npublic int[] dailyTemperatures(int[] T) {\n    if(T == null || T.length == 0) return T;\n    int n = T.length;\n    int[] res = new int[n];\n    \n    //跳跃\n    for(int i = n - 1; i >= 0; i--){\n        int j = i + 1;\n        while(j < n){\n            if(T[j] > T[i]){\n                res[i] = j - i;\n                break;\n            }else if(res[j] == 0){\n                break;\n            }else{\n                j += res[j];\n            }\n        }\n    }\n    return res;\n}\n```\n\n外层for循环从后往前遍历，对于每一个位置`i `，内层while循环起点是后一个元素`j `，如果`T[j] > T[i]`，即气温升高，则记录结果（下标差）；如果位置`j`不大于`i`，按照暴力的逻辑，我们会逐个往后遍历，而这里我们通过判断已求得的结果`res[j]`是否为0来进行“跳跃”。对于`res[j]`：\n\n- `res[j] == 0`，即`j`之后气温不再升高，那么由于`T[i]>=T[j] `，可得`res[i] = 0`\n- `res[j] > 0`，即`j`之后`res[j] `天气温升高，在`[j...j+res[j]]`间没有比`T[i]`大的值，可以进行跳跃，加快效率，在对新的`j`进行判断","slug":"739-每日温度","published":1,"date":"2020-06-11T15:28:49.292Z","updated":"2020-06-13T15:48:08.582Z","title":"739-每日温度","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck230022z4ej46kffne4","content":"<blockquote>\n<p>请根据每日气温列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。</p>\n<p>例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。</p>\n<p>提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>比较直观的做法就是对于每个位置，往后遍历，当遇到第一个比自身大的元素时就停下来，记录位置；如果直到最后都没有遇到，则表示气温在这之后都不会升高。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] dailyTemperatures(<span class=\"keyword\">int</span>[] T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T == <span class=\"keyword\">null</span> || T.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> T;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = T.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">    <span class=\"comment\">//暴力</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T[j] &gt; T[i])&#123;</span><br><span class=\"line\">                res[i] = j-i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>暴力遍历的方式虽然可以获得一个accept，但是效率是非常低的。因为每一次我们都是重新开始遍历，没有利用之前的结果。因此有了以下两种优化方式。</p>\n<h4 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h4><p>单调栈的含义是，一个栈中从栈顶到栈底一直保持着递增/递减的性质。当遇到新的元素入栈时，如果破坏了性质，则要通过出栈直到剩余的元素和新元素仍保持性质。</p>\n<p>本题中，通过维护一个递减的单调栈，可以求出结果。将数组中元素（下标）逐个入栈，当<strong>新元素比栈顶元素大</strong>时，对于栈顶元素来说，即遇到了<strong>第一个比它大</strong>的元素，也就是气温升高，因此将栈顶出栈，并记录结果（下标差）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] dailyTemperatures(<span class=\"keyword\">int</span>[] T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T == <span class=\"keyword\">null</span> || T.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> T;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = T.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//单调栈</span></span><br><span class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stack.isEmpty() &amp;&amp; T[i] &gt; T[stack.peek()])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = stack.pop();</span><br><span class=\"line\">            res[index] = i - index;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stack.push(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"逆向-跳跃\"><a href=\"#逆向-跳跃\" class=\"headerlink\" title=\"逆向+跳跃\"></a>逆向+跳跃</h4><p>对于数组的最后一个元素，由于其后面没有元素，因此该位置结果为0。基于最后一个位置，我们尝试不断地推出前一个元素的结果。先看一下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] dailyTemperatures(<span class=\"keyword\">int</span>[] T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T == <span class=\"keyword\">null</span> || T.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> T;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = T.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//跳跃</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &lt; n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T[j] &gt; T[i])&#123;</span><br><span class=\"line\">                res[i] = j - i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(res[j] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                j += res[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>外层for循环从后往前遍历，对于每一个位置<code>i</code>，内层while循环起点是后一个元素<code>j</code>，如果<code>T[j] &gt; T[i]</code>，即气温升高，则记录结果（下标差）；如果位置<code>j</code>不大于<code>i</code>，按照暴力的逻辑，我们会逐个往后遍历，而这里我们通过判断已求得的结果<code>res[j]</code>是否为0来进行“跳跃”。对于<code>res[j]</code>：</p>\n<ul>\n<li><code>res[j] == 0</code>，即<code>j</code>之后气温不再升高，那么由于<code>T[i]&gt;=T[j]</code>，可得<code>res[i] = 0</code></li>\n<li><code>res[j] &gt; 0</code>，即<code>j</code>之后<code>res[j]</code>天气温升高，在<code>[j...j+res[j]]</code>间没有比<code>T[i]</code>大的值，可以进行跳跃，加快效率，在对新的<code>j</code>进行判断</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>请根据每日气温列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。</p>\n<p>例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。</p>\n<p>提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。</p>\n</blockquote>","more":"<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>比较直观的做法就是对于每个位置，往后遍历，当遇到第一个比自身大的元素时就停下来，记录位置；如果直到最后都没有遇到，则表示气温在这之后都不会升高。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] dailyTemperatures(<span class=\"keyword\">int</span>[] T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T == <span class=\"keyword\">null</span> || T.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> T;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = T.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">    <span class=\"comment\">//暴力</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T[j] &gt; T[i])&#123;</span><br><span class=\"line\">                res[i] = j-i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>暴力遍历的方式虽然可以获得一个accept，但是效率是非常低的。因为每一次我们都是重新开始遍历，没有利用之前的结果。因此有了以下两种优化方式。</p>\n<h4 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h4><p>单调栈的含义是，一个栈中从栈顶到栈底一直保持着递增/递减的性质。当遇到新的元素入栈时，如果破坏了性质，则要通过出栈直到剩余的元素和新元素仍保持性质。</p>\n<p>本题中，通过维护一个递减的单调栈，可以求出结果。将数组中元素（下标）逐个入栈，当<strong>新元素比栈顶元素大</strong>时，对于栈顶元素来说，即遇到了<strong>第一个比它大</strong>的元素，也就是气温升高，因此将栈顶出栈，并记录结果（下标差）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] dailyTemperatures(<span class=\"keyword\">int</span>[] T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T == <span class=\"keyword\">null</span> || T.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> T;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = T.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//单调栈</span></span><br><span class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stack.isEmpty() &amp;&amp; T[i] &gt; T[stack.peek()])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = stack.pop();</span><br><span class=\"line\">            res[index] = i - index;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stack.push(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"逆向-跳跃\"><a href=\"#逆向-跳跃\" class=\"headerlink\" title=\"逆向+跳跃\"></a>逆向+跳跃</h4><p>对于数组的最后一个元素，由于其后面没有元素，因此该位置结果为0。基于最后一个位置，我们尝试不断地推出前一个元素的结果。先看一下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] dailyTemperatures(<span class=\"keyword\">int</span>[] T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(T == <span class=\"keyword\">null</span> || T.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> T;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = T.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//跳跃</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &lt; n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T[j] &gt; T[i])&#123;</span><br><span class=\"line\">                res[i] = j - i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(res[j] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                j += res[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>外层for循环从后往前遍历，对于每一个位置<code>i</code>，内层while循环起点是后一个元素<code>j</code>，如果<code>T[j] &gt; T[i]</code>，即气温升高，则记录结果（下标差）；如果位置<code>j</code>不大于<code>i</code>，按照暴力的逻辑，我们会逐个往后遍历，而这里我们通过判断已求得的结果<code>res[j]</code>是否为0来进行“跳跃”。对于<code>res[j]</code>：</p>\n<ul>\n<li><code>res[j] == 0</code>，即<code>j</code>之后气温不再升高，那么由于<code>T[i]&gt;=T[j]</code>，可得<code>res[i] = 0</code></li>\n<li><code>res[j] &gt; 0</code>，即<code>j</code>之后<code>res[j]</code>天气温升高，在<code>[j...j+res[j]]</code>间没有比<code>T[i]</code>大的值，可以进行跳跃，加快效率，在对新的<code>j</code>进行判断</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sat Jun 13 2020 23:48:08 GMT+0800 (中国标准时间)","title":"739-每日温度","path":"posts/f2adbb58.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>请根据每日气温列表，重新生成一个列表。对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。</p>\n<p>例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。</p>\n<p>提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-06-11T15:28:49.292Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-06-11T15:28:49.292Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["单调栈"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1827},{"title":"983. 最低票价","abbrlink":"dcddc4fc","_content":"\n> 在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。\n>\n> 火车票有三种不同的销售方式：\n>\n> 一张为期一天的通行证售价为 costs[0] 美元；\n> 一张为期七天的通行证售价为 costs[1] 美元；\n> 一张为期三十天的通行证售价为 costs[2] 美元。\n> 通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。\n>\n> 返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费\n>\n\n<!-- more -->\n\n{% note info %}\n\n示例 1：\n\n```java\n输入：days = [1,4,6,7,8,20], costs = [2,7,15]\n输出：11\n解释： \n例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：\n在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。\n在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, ..., 9 天生效。\n在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。\n你总共花了 $11，并完成了你计划的每一天旅行。\n```\n\n{% endnote %}\n\n### 💡 思路\n\n分析题目，针对于某一天，它是否花费决定于上一次花费购买的类型，比如在第31天，它的上一次购买可能是1天前、7天前、30天前。第 `31-30 ` 天可以购买30天的通行证，这样可以在 ` [1...30] `天旅行；第 `31-7 ` 天可以购买7天的通行证，这样可以在 ` [24...30] `天旅行；第 `31-1 ` 天可以购买1天的通行证，这样可以在 ` [30...30] `天旅行；因此第31天可以有3种购买方式产生3种花费，在这三种花费中选择最低的价格。\n\n### 🧾 代码\n\n```java\n public int mincostTickets(int[] days, int[] costs) {\n        if(days == null || days.length == 0 || costs == null || costs.length == 0){\n            return 0;\n        }\n     int[] dp = new int[days[days.length-1] + 1]; //最大天数\n     dp[0] = 0; //第一天\n     for(int i : days){\n         dp[i] = -1; //标志需要旅游的天数\n     }\n     for(int i = 1; i < dp.length ; i++){\n         if(dp[i] == 0){//不需要旅游的\n             dp[i] = dp[i-1];\n         }else{\n             int c1 = dp[i-1] + costs[0];\n             int c7 = dp[i-7] + costs[1];\n             int c30 = dp[i-30] + costs[2];\n             dp[i] = Math.min(c1, Math.min(c7, c30));\n         }\n     }\n     return dp[dp.length-1];\n }\n```\n\n","source":"_posts/983-最低票价.md","raw":"---\ntitle: 983. 最低票价\ntags:\n  - Leetcode\n  - 动态规划\n  - 记忆化搜索\ncategories:\n  - Leetcode\nabbrlink: dcddc4fc\n---\n\n> 在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。\n>\n> 火车票有三种不同的销售方式：\n>\n> 一张为期一天的通行证售价为 costs[0] 美元；\n> 一张为期七天的通行证售价为 costs[1] 美元；\n> 一张为期三十天的通行证售价为 costs[2] 美元。\n> 通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。\n>\n> 返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费\n>\n\n<!-- more -->\n\n{% note info %}\n\n示例 1：\n\n```java\n输入：days = [1,4,6,7,8,20], costs = [2,7,15]\n输出：11\n解释： \n例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：\n在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。\n在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, ..., 9 天生效。\n在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。\n你总共花了 $11，并完成了你计划的每一天旅行。\n```\n\n{% endnote %}\n\n### 💡 思路\n\n分析题目，针对于某一天，它是否花费决定于上一次花费购买的类型，比如在第31天，它的上一次购买可能是1天前、7天前、30天前。第 `31-30 ` 天可以购买30天的通行证，这样可以在 ` [1...30] `天旅行；第 `31-7 ` 天可以购买7天的通行证，这样可以在 ` [24...30] `天旅行；第 `31-1 ` 天可以购买1天的通行证，这样可以在 ` [30...30] `天旅行；因此第31天可以有3种购买方式产生3种花费，在这三种花费中选择最低的价格。\n\n### 🧾 代码\n\n```java\n public int mincostTickets(int[] days, int[] costs) {\n        if(days == null || days.length == 0 || costs == null || costs.length == 0){\n            return 0;\n        }\n     int[] dp = new int[days[days.length-1] + 1]; //最大天数\n     dp[0] = 0; //第一天\n     for(int i : days){\n         dp[i] = -1; //标志需要旅游的天数\n     }\n     for(int i = 1; i < dp.length ; i++){\n         if(dp[i] == 0){//不需要旅游的\n             dp[i] = dp[i-1];\n         }else{\n             int c1 = dp[i-1] + costs[0];\n             int c7 = dp[i-7] + costs[1];\n             int c30 = dp[i-30] + costs[2];\n             dp[i] = Math.min(c1, Math.min(c7, c30));\n         }\n     }\n     return dp[dp.length-1];\n }\n```\n\n","slug":"983-最低票价","published":1,"date":"2020-05-06T03:07:20.891Z","updated":"2020-05-06T06:14:37.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck230025z4ej5i9jcdtl","content":"<blockquote>\n<p>在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。</p>\n<p>火车票有三种不同的销售方式：</p>\n<p>一张为期一天的通行证售价为 costs[0] 美元；<br>一张为期七天的通行证售价为 costs[1] 美元；<br>一张为期三十天的通行证售价为 costs[2] 美元。<br>通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。</p>\n<p>返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<div class=\"note info\"><p>示例 1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：days = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">20</span>], costs = [<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">15</span>]</span><br><span class=\"line\">输出：<span class=\"number\">11</span></span><br><span class=\"line\">解释： </span><br><span class=\"line\">例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：</span><br><span class=\"line\">在第 <span class=\"number\">1</span> 天，你花了 costs[<span class=\"number\">0</span>] = $<span class=\"number\">2</span> 买了一张为期 <span class=\"number\">1</span> 天的通行证，它将在第 <span class=\"number\">1</span> 天生效。</span><br><span class=\"line\">在第 <span class=\"number\">3</span> 天，你花了 costs[<span class=\"number\">1</span>] = $<span class=\"number\">7</span> 买了一张为期 <span class=\"number\">7</span> 天的通行证，它将在第 <span class=\"number\">3</span>, <span class=\"number\">4</span>, ..., <span class=\"number\">9</span> 天生效。</span><br><span class=\"line\">在第 <span class=\"number\">20</span> 天，你花了 costs[<span class=\"number\">0</span>] = $<span class=\"number\">2</span> 买了一张为期 <span class=\"number\">1</span> 天的通行证，它将在第 <span class=\"number\">20</span> 天生效。</span><br><span class=\"line\">你总共花了 $<span class=\"number\">11</span>，并完成了你计划的每一天旅行。</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>分析题目，针对于某一天，它是否花费决定于上一次花费购买的类型，比如在第31天，它的上一次购买可能是1天前、7天前、30天前。第 <code>31-30</code> 天可以购买30天的通行证，这样可以在 <code>[1...30]</code>天旅行；第 <code>31-7</code> 天可以购买7天的通行证，这样可以在 <code>[24...30]</code>天旅行；第 <code>31-1</code> 天可以购买1天的通行证，这样可以在 <code>[30...30]</code>天旅行；因此第31天可以有3种购买方式产生3种花费，在这三种花费中选择最低的价格。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">mincostTickets</span><span class=\"params\">(<span class=\"keyword\">int</span>[] days, <span class=\"keyword\">int</span>[] costs)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(days == <span class=\"keyword\">null</span> || days.length == <span class=\"number\">0</span> || costs == <span class=\"keyword\">null</span> || costs.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[days[days.length-<span class=\"number\">1</span>] + <span class=\"number\">1</span>]; <span class=\"comment\">//最大天数</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>; <span class=\"comment\">//第一天</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : days)&#123;</span><br><span class=\"line\">        dp[i] = -<span class=\"number\">1</span>; <span class=\"comment\">//标志需要旅游的天数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; dp.length ; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dp[i] == <span class=\"number\">0</span>)&#123;<span class=\"comment\">//不需要旅游的</span></span><br><span class=\"line\">            dp[i] = dp[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> c1 = dp[i-<span class=\"number\">1</span>] + costs[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> c7 = dp[i-<span class=\"number\">7</span>] + costs[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> c30 = dp[i-<span class=\"number\">30</span>] + costs[<span class=\"number\">2</span>];</span><br><span class=\"line\">            dp[i] = Math.min(c1, Math.min(c7, c30));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[dp.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。</p>\n<p>火车票有三种不同的销售方式：</p>\n<p>一张为期一天的通行证售价为 costs[0] 美元；<br>一张为期七天的通行证售价为 costs[1] 美元；<br>一张为期三十天的通行证售价为 costs[2] 美元。<br>通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。</p>\n<p>返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费</p>\n</blockquote>","more":"<div class=\"note info\"><p>示例 1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：days = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">20</span>], costs = [<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">15</span>]</span><br><span class=\"line\">输出：<span class=\"number\">11</span></span><br><span class=\"line\">解释： </span><br><span class=\"line\">例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：</span><br><span class=\"line\">在第 <span class=\"number\">1</span> 天，你花了 costs[<span class=\"number\">0</span>] = $<span class=\"number\">2</span> 买了一张为期 <span class=\"number\">1</span> 天的通行证，它将在第 <span class=\"number\">1</span> 天生效。</span><br><span class=\"line\">在第 <span class=\"number\">3</span> 天，你花了 costs[<span class=\"number\">1</span>] = $<span class=\"number\">7</span> 买了一张为期 <span class=\"number\">7</span> 天的通行证，它将在第 <span class=\"number\">3</span>, <span class=\"number\">4</span>, ..., <span class=\"number\">9</span> 天生效。</span><br><span class=\"line\">在第 <span class=\"number\">20</span> 天，你花了 costs[<span class=\"number\">0</span>] = $<span class=\"number\">2</span> 买了一张为期 <span class=\"number\">1</span> 天的通行证，它将在第 <span class=\"number\">20</span> 天生效。</span><br><span class=\"line\">你总共花了 $<span class=\"number\">11</span>，并完成了你计划的每一天旅行。</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>分析题目，针对于某一天，它是否花费决定于上一次花费购买的类型，比如在第31天，它的上一次购买可能是1天前、7天前、30天前。第 <code>31-30</code> 天可以购买30天的通行证，这样可以在 <code>[1...30]</code>天旅行；第 <code>31-7</code> 天可以购买7天的通行证，这样可以在 <code>[24...30]</code>天旅行；第 <code>31-1</code> 天可以购买1天的通行证，这样可以在 <code>[30...30]</code>天旅行；因此第31天可以有3种购买方式产生3种花费，在这三种花费中选择最低的价格。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">mincostTickets</span><span class=\"params\">(<span class=\"keyword\">int</span>[] days, <span class=\"keyword\">int</span>[] costs)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(days == <span class=\"keyword\">null</span> || days.length == <span class=\"number\">0</span> || costs == <span class=\"keyword\">null</span> || costs.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[days[days.length-<span class=\"number\">1</span>] + <span class=\"number\">1</span>]; <span class=\"comment\">//最大天数</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>; <span class=\"comment\">//第一天</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : days)&#123;</span><br><span class=\"line\">        dp[i] = -<span class=\"number\">1</span>; <span class=\"comment\">//标志需要旅游的天数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; dp.length ; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dp[i] == <span class=\"number\">0</span>)&#123;<span class=\"comment\">//不需要旅游的</span></span><br><span class=\"line\">            dp[i] = dp[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> c1 = dp[i-<span class=\"number\">1</span>] + costs[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> c7 = dp[i-<span class=\"number\">7</span>] + costs[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> c30 = dp[i-<span class=\"number\">30</span>] + costs[<span class=\"number\">2</span>];</span><br><span class=\"line\">            dp[i] = Math.min(c1, Math.min(c7, c30));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[dp.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed May 06 2020 14:14:37 GMT+0800 (中国标准时间)","title":"983. 最低票价","path":"posts/dcddc4fc.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。</p>\n<p>火车票有三种不同的销售方式：</p>\n<p>一张为期一天的通行证售价为 costs[0] 美元；<br>一张为期七天的通行证售价为 costs[1] 美元；<br>一张为期三十天的通行证售价为 costs[2] 美元。<br>通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。</p>\n<p>返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-06T03:07:20.891Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-06T03:07:20.891Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["Leetcode","动态规划","记忆化搜索"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1241},{"title":"98. 验证二叉搜索树","categoires":["Leetcode"],"abbrlink":"5e0c5aa8","_content":"\n> 给定一个二叉树，判断其是否是一个有效的二叉搜索树。假定一个二叉搜索树有以下特征：\n>\n> - 节点的左子树只包含**小于**当前节点的数\n> - 节点的右子树只包含**大于**当前节点的数\n> - 所有左子树和右子树自身必须也是二叉搜索树\n\n<!-- more -->\n\n{% note info %}\n\n示例 1:\n\n```\n输入:\n    2\n   / \\\n  1   3\n输出: true\n```\n\n\n示例 2:\n\n```\n输入:\n    5\n   / \\\n  1   4\n     / \\\n    3   6\n输出: false\n解释: 输入为: [5,1,4,null,null,3,6]。\n     根节点的值为 5 ，但是其右子节点值为 4 。\n```\n\n{% endnote %}\n\n### 💡 思路\n\n二叉树由于天然的具有递归结构，因此大多数问题都可以通过**递归**来解决。本题需要判断当前树是否为二叉搜索树，则当当前节点为二叉搜索树、其左子树为二叉搜索树、其右子树为二叉搜索树时返回 `true ` 。需要注意的是，作为一棵二叉搜索树，它左子树的所有节点都必须小于它，因此不能仅仅判断它和它的左子节点，这样只能判断父子关系而没有判断爷孙关系。\n\n### 🧾 代码\n\n```java\npublic boolean isValidBST(TreeNode root) {\n    return valid(root, Long.MIN_VALUE, Long.MAX_VALUE);\n}\npublic boolean valid(TreeNode node, long min , long max){\n    if(node == null){\n        return true;\n    }\n    if(node.val < min || node.val > max){\n        return false;\n    }\n    return valid(node.left, min, node.val) && valid(node.right, node.val, max);\n}\n```\n\n### ✍️ 中序遍历\n\n对于一颗二叉搜索树，它的中序遍历序列是递增的。根据这个特征，我们在中序遍历的时候判断当前值是否大于上一个值即可。如果对树的遍历还不熟悉，可以查看这篇文章 {% post_link 二叉树的遍历 %}\n\n```java\nprivate long pre = Long.MIN_VALUE;\npublic boolean isValidBST(TreeNode root) {\n    //递归版\n    if(root == null){\n        return true;\n    }\n    if(!isValidBST(root.left)){\n        return false;\n    }\n    if(pre >= root.val){\n        return false;\n    }\n    pre = root.val;\n    \n    return isValidBST(root.right);\n    \n    //非递归版\n    if(root == null){\n        return true;\n    }\n    Stack<Node> stack = new Stack<>();\n    while(!stack.isEmpty() || root != null){\n        if(root != null){\n            stack.push(root);\n            root = root.left;\n        }else{\n            root = stack.pop();\n            if(root.val <= pre){\n                return false;\n            }\n            pre = root.val;\n            root = root.right;\n        }\n    }\n    return true;\n}\n```\n\n","source":"_posts/98-验证二叉搜索树.md","raw":"---\ntitle: 98. 验证二叉搜索树\ntags:\n  - Leetcode\n  - 二叉搜索树\n  - 递归\ncategoires:\n  - Leetcode\nabbrlink: 5e0c5aa8\n---\n\n> 给定一个二叉树，判断其是否是一个有效的二叉搜索树。假定一个二叉搜索树有以下特征：\n>\n> - 节点的左子树只包含**小于**当前节点的数\n> - 节点的右子树只包含**大于**当前节点的数\n> - 所有左子树和右子树自身必须也是二叉搜索树\n\n<!-- more -->\n\n{% note info %}\n\n示例 1:\n\n```\n输入:\n    2\n   / \\\n  1   3\n输出: true\n```\n\n\n示例 2:\n\n```\n输入:\n    5\n   / \\\n  1   4\n     / \\\n    3   6\n输出: false\n解释: 输入为: [5,1,4,null,null,3,6]。\n     根节点的值为 5 ，但是其右子节点值为 4 。\n```\n\n{% endnote %}\n\n### 💡 思路\n\n二叉树由于天然的具有递归结构，因此大多数问题都可以通过**递归**来解决。本题需要判断当前树是否为二叉搜索树，则当当前节点为二叉搜索树、其左子树为二叉搜索树、其右子树为二叉搜索树时返回 `true ` 。需要注意的是，作为一棵二叉搜索树，它左子树的所有节点都必须小于它，因此不能仅仅判断它和它的左子节点，这样只能判断父子关系而没有判断爷孙关系。\n\n### 🧾 代码\n\n```java\npublic boolean isValidBST(TreeNode root) {\n    return valid(root, Long.MIN_VALUE, Long.MAX_VALUE);\n}\npublic boolean valid(TreeNode node, long min , long max){\n    if(node == null){\n        return true;\n    }\n    if(node.val < min || node.val > max){\n        return false;\n    }\n    return valid(node.left, min, node.val) && valid(node.right, node.val, max);\n}\n```\n\n### ✍️ 中序遍历\n\n对于一颗二叉搜索树，它的中序遍历序列是递增的。根据这个特征，我们在中序遍历的时候判断当前值是否大于上一个值即可。如果对树的遍历还不熟悉，可以查看这篇文章 {% post_link 二叉树的遍历 %}\n\n```java\nprivate long pre = Long.MIN_VALUE;\npublic boolean isValidBST(TreeNode root) {\n    //递归版\n    if(root == null){\n        return true;\n    }\n    if(!isValidBST(root.left)){\n        return false;\n    }\n    if(pre >= root.val){\n        return false;\n    }\n    pre = root.val;\n    \n    return isValidBST(root.right);\n    \n    //非递归版\n    if(root == null){\n        return true;\n    }\n    Stack<Node> stack = new Stack<>();\n    while(!stack.isEmpty() || root != null){\n        if(root != null){\n            stack.push(root);\n            root = root.left;\n        }else{\n            root = stack.pop();\n            if(root.val <= pre){\n                return false;\n            }\n            pre = root.val;\n            root = root.right;\n        }\n    }\n    return true;\n}\n```\n\n","slug":"98-验证二叉搜索树","published":1,"date":"2020-05-05T00:31:01.358Z","updated":"2020-05-05T03:11:57.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck240029z4ej6p33gbr4","content":"<blockquote>\n<p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。假定一个二叉搜索树有以下特征：</p>\n<ul>\n<li>节点的左子树只包含<strong>小于</strong>当前节点的数</li>\n<li>节点的右子树只包含<strong>大于</strong>当前节点的数</li>\n<li>所有左子树和右子树自身必须也是二叉搜索树</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n\n<div class=\"note info\"><p>示例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">    2</span><br><span class=\"line\">   &#x2F; \\</span><br><span class=\"line\">  1   3</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">    5</span><br><span class=\"line\">   &#x2F; \\</span><br><span class=\"line\">  1   4</span><br><span class=\"line\">     &#x2F; \\</span><br><span class=\"line\">    3   6</span><br><span class=\"line\">输出: false</span><br><span class=\"line\">解释: 输入为: [5,1,4,null,null,3,6]。</span><br><span class=\"line\">     根节点的值为 5 ，但是其右子节点值为 4 。</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>二叉树由于天然的具有递归结构，因此大多数问题都可以通过<strong>递归</strong>来解决。本题需要判断当前树是否为二叉搜索树，则当当前节点为二叉搜索树、其左子树为二叉搜索树、其右子树为二叉搜索树时返回 <code>true</code> 。需要注意的是，作为一棵二叉搜索树，它左子树的所有节点都必须小于它，因此不能仅仅判断它和它的左子节点，这样只能判断父子关系而没有判断爷孙关系。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> valid(root, Long.MIN_VALUE, Long.MAX_VALUE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">valid</span><span class=\"params\">(TreeNode node, <span class=\"keyword\">long</span> min , <span class=\"keyword\">long</span> max)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.val &lt; min || node.val &gt; max)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> valid(node.left, min, node.val) &amp;&amp; valid(node.right, node.val, max);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"✍️-中序遍历\"><a href=\"#✍️-中序遍历\" class=\"headerlink\" title=\"✍️ 中序遍历\"></a>✍️ 中序遍历</h3><p>对于一颗二叉搜索树，它的中序遍历序列是递增的。根据这个特征，我们在中序遍历的时候判断当前值是否大于上一个值即可。如果对树的遍历还不熟悉，可以查看这篇文章 <a href=\"/posts/ea4681d0.html\" title=\"二叉树的遍历\">二叉树的遍历</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> pre = Long.MIN_VALUE;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//递归版</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isValidBST(root.left))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pre &gt;= root.val)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pre = root.val;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> isValidBST(root.right);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//非递归版</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Stack&lt;Node&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!stack.isEmpty() || root != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            stack.push(root);</span><br><span class=\"line\">            root = root.left;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            root = stack.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.val &lt;= pre)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre = root.val;</span><br><span class=\"line\">            root = root.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。假定一个二叉搜索树有以下特征：</p>\n<ul>\n<li>节点的左子树只包含<strong>小于</strong>当前节点的数</li>\n<li>节点的右子树只包含<strong>大于</strong>当前节点的数</li>\n<li>所有左子树和右子树自身必须也是二叉搜索树</li>\n</ul>\n</blockquote>","more":"<div class=\"note info\"><p>示例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">    2</span><br><span class=\"line\">   &#x2F; \\</span><br><span class=\"line\">  1   3</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure>\n\n\n<p>示例 2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">    5</span><br><span class=\"line\">   &#x2F; \\</span><br><span class=\"line\">  1   4</span><br><span class=\"line\">     &#x2F; \\</span><br><span class=\"line\">    3   6</span><br><span class=\"line\">输出: false</span><br><span class=\"line\">解释: 输入为: [5,1,4,null,null,3,6]。</span><br><span class=\"line\">     根节点的值为 5 ，但是其右子节点值为 4 。</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>二叉树由于天然的具有递归结构，因此大多数问题都可以通过<strong>递归</strong>来解决。本题需要判断当前树是否为二叉搜索树，则当当前节点为二叉搜索树、其左子树为二叉搜索树、其右子树为二叉搜索树时返回 <code>true</code> 。需要注意的是，作为一棵二叉搜索树，它左子树的所有节点都必须小于它，因此不能仅仅判断它和它的左子节点，这样只能判断父子关系而没有判断爷孙关系。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> valid(root, Long.MIN_VALUE, Long.MAX_VALUE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">valid</span><span class=\"params\">(TreeNode node, <span class=\"keyword\">long</span> min , <span class=\"keyword\">long</span> max)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.val &lt; min || node.val &gt; max)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> valid(node.left, min, node.val) &amp;&amp; valid(node.right, node.val, max);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"✍️-中序遍历\"><a href=\"#✍️-中序遍历\" class=\"headerlink\" title=\"✍️ 中序遍历\"></a>✍️ 中序遍历</h3><p>对于一颗二叉搜索树，它的中序遍历序列是递增的。根据这个特征，我们在中序遍历的时候判断当前值是否大于上一个值即可。如果对树的遍历还不熟悉，可以查看这篇文章 <a href=\"/posts/ea4681d0.html\" title=\"二叉树的遍历\">二叉树的遍历</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> pre = Long.MIN_VALUE;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//递归版</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isValidBST(root.left))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pre &gt;= root.val)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pre = root.val;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> isValidBST(root.right);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//非递归版</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Stack&lt;Node&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!stack.isEmpty() || root != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            stack.push(root);</span><br><span class=\"line\">            root = root.left;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            root = stack.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.val &lt;= pre)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            pre = root.val;</span><br><span class=\"line\">            root = root.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue May 05 2020 11:11:57 GMT+0800 (中国标准时间)","title":"98. 验证二叉搜索树","path":"posts/5e0c5aa8.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。假定一个二叉搜索树有以下特征：</p>\n<ul>\n<li>节点的左子树只包含<strong>小于</strong>当前节点的数</li>\n<li>节点的右子树只包含<strong>大于</strong>当前节点的数</li>\n<li>所有左子树和右子树自身必须也是二叉搜索树</li>\n</ul>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-05T00:31:01.358Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-05T00:31:01.358Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Leetcode","递归","二叉搜索树"],"internalLinks":["posts/ea4681d0.html"],"keywords":[],"keywordsLength":0},"length":1445},{"title":"990. 等式方程的可满足性","abbrlink":"19551cf1","_content":"\n> 给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 equations[i] 的长度为 4，并采用两种不同的形式之一：\"a==b\" 或 \"a!=b\"。在这里，a 和 b 是小写字母（不一定不同），表示单字母变量名。\n>\n> 只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回 true，否则返回 false。 \n>\n\n<!-- more -->\n\n### 💡 思路\n\n看懂题目之后一顿狂喜，~~苦学已久的~~并查集终于要派上用场了。\n\n题目的意思就是，给定的数组里每个字符串都是` a==b `或者`a!=b` ，其中a，b代表变量，要求赋值之后所有方程都成立。例如，`[a == b, b == c, c == d, a != d, e == f, b != e] `，所有等式要成立要求`[a=b=c=d ,e=f]`（如下图）\n\n![UnionFindSet](https://gitee.com/jingshanccc/image/raw/master/image/20200722002913.jpg)\n\n由于`b!=e`中`b`和`e`属于在形成的两条等式里（颜色不同），符合要求，但对于不等式`a!=d `，发现它在形成的同一条等式里（颜色相同），因此不满足要求。\n\n#### 并查集\n\n可以将并发集中的元素看作一棵树，像上图所示，满足相同性质（本题是相等）的节点在同一棵树上，拥有相同的根节点。有以下两个基本操作：\n\n1. 并：将满足性质的节点（树）合并为同一棵树。\n2. 查：查找某个节点的根节点，可以用来判断两个节点是否满足相同性质。\n\n因此本题的解法是先将所有等式两边的节点添加到并查集中，然后判断不等式两边的节点是否在同一棵树上，如果在，则表示他们必须相等，因此不等式也就不成立了。\n\n### 🧾 代码\n\n并查集可以使用一个数组`parent`来实现，以0-25来代表26个小写字母，数组中每个位置存放该位置（字母）的父亲节点，如` [1,2,3,3,5,5] `，位置0值为1，表示a的父亲节点是b，位置1值为2，表示b的父亲节点是c，位置3值为3，表示d的父亲节点是d，则d为和d相等的节点形成的树的根节点。\n\n```java\npublic boolean equationsPossible(String[] equations) {\n    int[] parent = new int[26];\n    for(int i = 0 ; i < 26; i++){\n        parent[i] = i;//初始每个节点的父亲节点是自身\n    }\n\n    for(String s : equations){\n        if(s.charAt(1) == '='){\n            int a = s.charAt(0) - 'a';\n            int b = s.charAt(3) - 'a';\n            union(a,b, parent, rank);\n        }\n    }\n    for(String s: equations){\n        if(s.charAt(1) == '!'){\n            int a = s.charAt(0) - 'a';\n            int b = s.charAt(3) - 'a';\n            if(find(a,parent) == find(b,parent)){\n                return false;\n            }\n        }\n    }\n    return true;\n}\npublic void union(int a, int b, int[] parent, int[] rank){\n    parent[find(a, parent)] = find(b, parent);//合并a,b形成的树--a的根节点的父亲节点指向b的根节点\n}\npublic int find(int index, int[] parent){\n    while(parent[index] != index){//当父亲节点是自身时跳出循环\n        parent[index] = parent[parent[index]];//让父亲节点指向爷爷节点\n        index = parent[index];//此时index为爷爷节点\n    }\n    return index;//循环结束时index为根节点\n}\n```\n\n\n\n### 📈 优化\n\n优化是对于并查集的优化，通常有两种策略：加权合并规则法、路径压缩法。这里介绍基于树高度的路径压缩法。\n\n增加`rank`数组记录每个节点所在树的高度，在进行合并时，将选择合并后树高度最低的方案。这样在进行查找操作时，迭代次数少（递归深度低），达到优化目的。这种优化在数据量大时优化效果明显。\n\n```java\npublic boolean equationsPossible(String[] equations) {\n    int[] parent = new int[26];\n    int[] rank = new int[26];//基于rank的路径压缩\n    for(int i = 0 ; i < 26; i++){\n        parent[i] = i;\n        rank[i] = 1;//初始化树高度为1\n    }\n\n    for(String s : equations){\n        if(s.charAt(1) == '='){\n            int a = s.charAt(0) - 'a';\n            int b = s.charAt(3) - 'a';\n            union(a,b, parent, rank);\n        }\n    }\n    for(String s: equations){\n        if(s.charAt(1) == '!'){\n            int a = s.charAt(0) - 'a';\n            int b = s.charAt(3) - 'a';\n            if(find(a,parent) == find(b,parent)){\n                return false;\n            }\n        }\n    }\n    return true;\n}\npublic void union(int a, int b, int[] parent, int[] rank){\n    // parent[find(a, parent)] = find(b, parent);\n    int aRoot = find(a,parent);\n    int bRoot = find(b,parent);\n    if(aRoot == bRoot){\n        return;\n    }\n    //让高度低的并到高度高的--高度越小 find越快\n    if(rank[aRoot] < rank[bRoot]){\n        parent[aRoot] = bRoot;\n    }else if(rank[aRoot] > rank[bRoot]){\n        parent[bRoot] = aRoot;\n    }else{//高度相同\n        parent[aRoot] = bRoot;\n        rank[bRoot] ++;\n    }\n}\npublic int find(int index, int[] parent){\n    while(parent[index] != index){\n        parent[index] = parent[parent[index]];\n        index = parent[index];\n    }\n    return index;\n}\n```\n\n","source":"_posts/990-等式方程的可满足性.md","raw":"---\ntitle: 990. 等式方程的可满足性\ntags:\n  - 并查集\ncategories:\n  - Leetcode\nabbrlink: 19551cf1\n---\n\n> 给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 equations[i] 的长度为 4，并采用两种不同的形式之一：\"a==b\" 或 \"a!=b\"。在这里，a 和 b 是小写字母（不一定不同），表示单字母变量名。\n>\n> 只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回 true，否则返回 false。 \n>\n\n<!-- more -->\n\n### 💡 思路\n\n看懂题目之后一顿狂喜，~~苦学已久的~~并查集终于要派上用场了。\n\n题目的意思就是，给定的数组里每个字符串都是` a==b `或者`a!=b` ，其中a，b代表变量，要求赋值之后所有方程都成立。例如，`[a == b, b == c, c == d, a != d, e == f, b != e] `，所有等式要成立要求`[a=b=c=d ,e=f]`（如下图）\n\n![UnionFindSet](https://gitee.com/jingshanccc/image/raw/master/image/20200722002913.jpg)\n\n由于`b!=e`中`b`和`e`属于在形成的两条等式里（颜色不同），符合要求，但对于不等式`a!=d `，发现它在形成的同一条等式里（颜色相同），因此不满足要求。\n\n#### 并查集\n\n可以将并发集中的元素看作一棵树，像上图所示，满足相同性质（本题是相等）的节点在同一棵树上，拥有相同的根节点。有以下两个基本操作：\n\n1. 并：将满足性质的节点（树）合并为同一棵树。\n2. 查：查找某个节点的根节点，可以用来判断两个节点是否满足相同性质。\n\n因此本题的解法是先将所有等式两边的节点添加到并查集中，然后判断不等式两边的节点是否在同一棵树上，如果在，则表示他们必须相等，因此不等式也就不成立了。\n\n### 🧾 代码\n\n并查集可以使用一个数组`parent`来实现，以0-25来代表26个小写字母，数组中每个位置存放该位置（字母）的父亲节点，如` [1,2,3,3,5,5] `，位置0值为1，表示a的父亲节点是b，位置1值为2，表示b的父亲节点是c，位置3值为3，表示d的父亲节点是d，则d为和d相等的节点形成的树的根节点。\n\n```java\npublic boolean equationsPossible(String[] equations) {\n    int[] parent = new int[26];\n    for(int i = 0 ; i < 26; i++){\n        parent[i] = i;//初始每个节点的父亲节点是自身\n    }\n\n    for(String s : equations){\n        if(s.charAt(1) == '='){\n            int a = s.charAt(0) - 'a';\n            int b = s.charAt(3) - 'a';\n            union(a,b, parent, rank);\n        }\n    }\n    for(String s: equations){\n        if(s.charAt(1) == '!'){\n            int a = s.charAt(0) - 'a';\n            int b = s.charAt(3) - 'a';\n            if(find(a,parent) == find(b,parent)){\n                return false;\n            }\n        }\n    }\n    return true;\n}\npublic void union(int a, int b, int[] parent, int[] rank){\n    parent[find(a, parent)] = find(b, parent);//合并a,b形成的树--a的根节点的父亲节点指向b的根节点\n}\npublic int find(int index, int[] parent){\n    while(parent[index] != index){//当父亲节点是自身时跳出循环\n        parent[index] = parent[parent[index]];//让父亲节点指向爷爷节点\n        index = parent[index];//此时index为爷爷节点\n    }\n    return index;//循环结束时index为根节点\n}\n```\n\n\n\n### 📈 优化\n\n优化是对于并查集的优化，通常有两种策略：加权合并规则法、路径压缩法。这里介绍基于树高度的路径压缩法。\n\n增加`rank`数组记录每个节点所在树的高度，在进行合并时，将选择合并后树高度最低的方案。这样在进行查找操作时，迭代次数少（递归深度低），达到优化目的。这种优化在数据量大时优化效果明显。\n\n```java\npublic boolean equationsPossible(String[] equations) {\n    int[] parent = new int[26];\n    int[] rank = new int[26];//基于rank的路径压缩\n    for(int i = 0 ; i < 26; i++){\n        parent[i] = i;\n        rank[i] = 1;//初始化树高度为1\n    }\n\n    for(String s : equations){\n        if(s.charAt(1) == '='){\n            int a = s.charAt(0) - 'a';\n            int b = s.charAt(3) - 'a';\n            union(a,b, parent, rank);\n        }\n    }\n    for(String s: equations){\n        if(s.charAt(1) == '!'){\n            int a = s.charAt(0) - 'a';\n            int b = s.charAt(3) - 'a';\n            if(find(a,parent) == find(b,parent)){\n                return false;\n            }\n        }\n    }\n    return true;\n}\npublic void union(int a, int b, int[] parent, int[] rank){\n    // parent[find(a, parent)] = find(b, parent);\n    int aRoot = find(a,parent);\n    int bRoot = find(b,parent);\n    if(aRoot == bRoot){\n        return;\n    }\n    //让高度低的并到高度高的--高度越小 find越快\n    if(rank[aRoot] < rank[bRoot]){\n        parent[aRoot] = bRoot;\n    }else if(rank[aRoot] > rank[bRoot]){\n        parent[bRoot] = aRoot;\n    }else{//高度相同\n        parent[aRoot] = bRoot;\n        rank[bRoot] ++;\n    }\n}\npublic int find(int index, int[] parent){\n    while(parent[index] != index){\n        parent[index] = parent[parent[index]];\n        index = parent[index];\n    }\n    return index;\n}\n```\n\n","slug":"990-等式方程的可满足性","published":1,"date":"2020-06-08T14:45:56.255Z","updated":"2020-07-21T16:29:29.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck26002cz4ejchqrgadf","content":"<blockquote>\n<p>给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 equations[i] 的长度为 4，并采用两种不同的形式之一：”a==b” 或 “a!=b”。在这里，a 和 b 是小写字母（不一定不同），表示单字母变量名。</p>\n<p>只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回 true，否则返回 false。 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>看懂题目之后一顿狂喜，<del>苦学已久的</del>并查集终于要派上用场了。</p>\n<p>题目的意思就是，给定的数组里每个字符串都是<code>a==b</code>或者<code>a!=b</code> ，其中a，b代表变量，要求赋值之后所有方程都成立。例如，<code>[a == b, b == c, c == d, a != d, e == f, b != e]</code>，所有等式要成立要求<code>[a=b=c=d ,e=f]</code>（如下图）</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722002913.jpg\" alt=\"UnionFindSet\"></p>\n<p>由于<code>b!=e</code>中<code>b</code>和<code>e</code>属于在形成的两条等式里（颜色不同），符合要求，但对于不等式<code>a!=d</code>，发现它在形成的同一条等式里（颜色相同），因此不满足要求。</p>\n<h4 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h4><p>可以将并发集中的元素看作一棵树，像上图所示，满足相同性质（本题是相等）的节点在同一棵树上，拥有相同的根节点。有以下两个基本操作：</p>\n<ol>\n<li>并：将满足性质的节点（树）合并为同一棵树。</li>\n<li>查：查找某个节点的根节点，可以用来判断两个节点是否满足相同性质。</li>\n</ol>\n<p>因此本题的解法是先将所有等式两边的节点添加到并查集中，然后判断不等式两边的节点是否在同一棵树上，如果在，则表示他们必须相等，因此不等式也就不成立了。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>并查集可以使用一个数组<code>parent</code>来实现，以0-25来代表26个小写字母，数组中每个位置存放该位置（字母）的父亲节点，如<code>[1,2,3,3,5,5]</code>，位置0值为1，表示a的父亲节点是b，位置1值为2，表示b的父亲节点是c，位置3值为3，表示d的父亲节点是d，则d为和d相等的节点形成的树的根节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equationsPossible</span><span class=\"params\">(String[] equations)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] parent = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">26</span>; i++)&#123;</span><br><span class=\"line\">        parent[i] = i;<span class=\"comment\">//初始每个节点的父亲节点是自身</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String s : equations)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(<span class=\"number\">1</span>) == <span class=\"string\">'='</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = s.charAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> b = s.charAt(<span class=\"number\">3</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            union(a,b, parent, rank);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String s: equations)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(<span class=\"number\">1</span>) == <span class=\"string\">'!'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = s.charAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> b = s.charAt(<span class=\"number\">3</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(find(a,parent) == find(b,parent))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span>[] parent, <span class=\"keyword\">int</span>[] rank)</span></span>&#123;</span><br><span class=\"line\">    parent[find(a, parent)] = find(b, parent);<span class=\"comment\">//合并a,b形成的树--a的根节点的父亲节点指向b的根节点</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span>[] parent)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(parent[index] != index)&#123;<span class=\"comment\">//当父亲节点是自身时跳出循环</span></span><br><span class=\"line\">        parent[index] = parent[parent[index]];<span class=\"comment\">//让父亲节点指向爷爷节点</span></span><br><span class=\"line\">        index = parent[index];<span class=\"comment\">//此时index为爷爷节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index;<span class=\"comment\">//循环结束时index为根节点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>优化是对于并查集的优化，通常有两种策略：加权合并规则法、路径压缩法。这里介绍基于树高度的路径压缩法。</p>\n<p>增加<code>rank</code>数组记录每个节点所在树的高度，在进行合并时，将选择合并后树高度最低的方案。这样在进行查找操作时，迭代次数少（递归深度低），达到优化目的。这种优化在数据量大时优化效果明显。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equationsPossible</span><span class=\"params\">(String[] equations)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] parent = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] rank = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];<span class=\"comment\">//基于rank的路径压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">26</span>; i++)&#123;</span><br><span class=\"line\">        parent[i] = i;</span><br><span class=\"line\">        rank[i] = <span class=\"number\">1</span>;<span class=\"comment\">//初始化树高度为1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String s : equations)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(<span class=\"number\">1</span>) == <span class=\"string\">'='</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = s.charAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> b = s.charAt(<span class=\"number\">3</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            union(a,b, parent, rank);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String s: equations)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(<span class=\"number\">1</span>) == <span class=\"string\">'!'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = s.charAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> b = s.charAt(<span class=\"number\">3</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(find(a,parent) == find(b,parent))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span>[] parent, <span class=\"keyword\">int</span>[] rank)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// parent[find(a, parent)] = find(b, parent);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> aRoot = find(a,parent);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bRoot = find(b,parent);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(aRoot == bRoot)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//让高度低的并到高度高的--高度越小 find越快</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rank[aRoot] &lt; rank[bRoot])&#123;</span><br><span class=\"line\">        parent[aRoot] = bRoot;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rank[aRoot] &gt; rank[bRoot])&#123;</span><br><span class=\"line\">        parent[bRoot] = aRoot;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//高度相同</span></span><br><span class=\"line\">        parent[aRoot] = bRoot;</span><br><span class=\"line\">        rank[bRoot] ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span>[] parent)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(parent[index] != index)&#123;</span><br><span class=\"line\">        parent[index] = parent[parent[index]];</span><br><span class=\"line\">        index = parent[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 equations[i] 的长度为 4，并采用两种不同的形式之一：”a==b” 或 “a!=b”。在这里，a 和 b 是小写字母（不一定不同），表示单字母变量名。</p>\n<p>只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回 true，否则返回 false。 </p>\n</blockquote>","more":"<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>看懂题目之后一顿狂喜，<del>苦学已久的</del>并查集终于要派上用场了。</p>\n<p>题目的意思就是，给定的数组里每个字符串都是<code>a==b</code>或者<code>a!=b</code> ，其中a，b代表变量，要求赋值之后所有方程都成立。例如，<code>[a == b, b == c, c == d, a != d, e == f, b != e]</code>，所有等式要成立要求<code>[a=b=c=d ,e=f]</code>（如下图）</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722002913.jpg\" alt=\"UnionFindSet\"></p>\n<p>由于<code>b!=e</code>中<code>b</code>和<code>e</code>属于在形成的两条等式里（颜色不同），符合要求，但对于不等式<code>a!=d</code>，发现它在形成的同一条等式里（颜色相同），因此不满足要求。</p>\n<h4 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h4><p>可以将并发集中的元素看作一棵树，像上图所示，满足相同性质（本题是相等）的节点在同一棵树上，拥有相同的根节点。有以下两个基本操作：</p>\n<ol>\n<li>并：将满足性质的节点（树）合并为同一棵树。</li>\n<li>查：查找某个节点的根节点，可以用来判断两个节点是否满足相同性质。</li>\n</ol>\n<p>因此本题的解法是先将所有等式两边的节点添加到并查集中，然后判断不等式两边的节点是否在同一棵树上，如果在，则表示他们必须相等，因此不等式也就不成立了。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>并查集可以使用一个数组<code>parent</code>来实现，以0-25来代表26个小写字母，数组中每个位置存放该位置（字母）的父亲节点，如<code>[1,2,3,3,5,5]</code>，位置0值为1，表示a的父亲节点是b，位置1值为2，表示b的父亲节点是c，位置3值为3，表示d的父亲节点是d，则d为和d相等的节点形成的树的根节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equationsPossible</span><span class=\"params\">(String[] equations)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] parent = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">26</span>; i++)&#123;</span><br><span class=\"line\">        parent[i] = i;<span class=\"comment\">//初始每个节点的父亲节点是自身</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String s : equations)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(<span class=\"number\">1</span>) == <span class=\"string\">'='</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = s.charAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> b = s.charAt(<span class=\"number\">3</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            union(a,b, parent, rank);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String s: equations)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(<span class=\"number\">1</span>) == <span class=\"string\">'!'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = s.charAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> b = s.charAt(<span class=\"number\">3</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(find(a,parent) == find(b,parent))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span>[] parent, <span class=\"keyword\">int</span>[] rank)</span></span>&#123;</span><br><span class=\"line\">    parent[find(a, parent)] = find(b, parent);<span class=\"comment\">//合并a,b形成的树--a的根节点的父亲节点指向b的根节点</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span>[] parent)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(parent[index] != index)&#123;<span class=\"comment\">//当父亲节点是自身时跳出循环</span></span><br><span class=\"line\">        parent[index] = parent[parent[index]];<span class=\"comment\">//让父亲节点指向爷爷节点</span></span><br><span class=\"line\">        index = parent[index];<span class=\"comment\">//此时index为爷爷节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index;<span class=\"comment\">//循环结束时index为根节点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>优化是对于并查集的优化，通常有两种策略：加权合并规则法、路径压缩法。这里介绍基于树高度的路径压缩法。</p>\n<p>增加<code>rank</code>数组记录每个节点所在树的高度，在进行合并时，将选择合并后树高度最低的方案。这样在进行查找操作时，迭代次数少（递归深度低），达到优化目的。这种优化在数据量大时优化效果明显。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equationsPossible</span><span class=\"params\">(String[] equations)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] parent = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] rank = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];<span class=\"comment\">//基于rank的路径压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">26</span>; i++)&#123;</span><br><span class=\"line\">        parent[i] = i;</span><br><span class=\"line\">        rank[i] = <span class=\"number\">1</span>;<span class=\"comment\">//初始化树高度为1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String s : equations)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(<span class=\"number\">1</span>) == <span class=\"string\">'='</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = s.charAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> b = s.charAt(<span class=\"number\">3</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            union(a,b, parent, rank);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String s: equations)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(<span class=\"number\">1</span>) == <span class=\"string\">'!'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = s.charAt(<span class=\"number\">0</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> b = s.charAt(<span class=\"number\">3</span>) - <span class=\"string\">'a'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(find(a,parent) == find(b,parent))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">union</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span>[] parent, <span class=\"keyword\">int</span>[] rank)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// parent[find(a, parent)] = find(b, parent);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> aRoot = find(a,parent);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bRoot = find(b,parent);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(aRoot == bRoot)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//让高度低的并到高度高的--高度越小 find越快</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rank[aRoot] &lt; rank[bRoot])&#123;</span><br><span class=\"line\">        parent[aRoot] = bRoot;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(rank[aRoot] &gt; rank[bRoot])&#123;</span><br><span class=\"line\">        parent[bRoot] = aRoot;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//高度相同</span></span><br><span class=\"line\">        parent[aRoot] = bRoot;</span><br><span class=\"line\">        rank[bRoot] ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span>[] parent)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(parent[index] != index)&#123;</span><br><span class=\"line\">        parent[index] = parent[parent[index]];</span><br><span class=\"line\">        index = parent[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722002913.jpg","popularPost_tmp_gaData":{"updated":"Wed Jul 22 2020 00:29:29 GMT+0800 (中国标准时间)","title":"990. 等式方程的可满足性","path":"posts/19551cf1.html","eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722002913.jpg","excerpt":"<blockquote>\n<p>给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 equations[i] 的长度为 4，并采用两种不同的形式之一：”a==b” 或 “a!=b”。在这里，a 和 b 是小写字母（不一定不同），表示单字母变量名。</p>\n<p>只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回 true，否则返回 false。 </p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-06-08T14:45:56.255Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-06-08T14:45:56.255Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["并查集"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2847},{"title":"Java开发环境搭建（闲时更新）","image":"https://gitee.com/jingshanccc/image/raw/master/image/20200803104632.jpg","abbrlink":"27c7c088","_content":"<p/>\n\n<!-- more -->\n\n## 前言\n\n{% note info %}\n本文主要用于个人记录开发环境的搭建，便于环境迁移时的重建工作，文中提及相关文件可在[曲奇云盘](https://quqi.com/)中获取\n{% endnote %}\n## Java\n1. Windows\n   运行jdk-8u181-windows-x64.exe以安装JDK\n2. Linux\n   解压`tar -zxvf jdk-xxx.tar.gz `，配置环境变量\n\n## Maven\n解压apache-maven-3.6.3-bin.zip，配置环境变量\n## Git\n1. 安装Git-2.27.0-64-bit.exe\n2. 配置ssh key\n```bash\n#配置身份信息\ngit config --global user.name \"xx\"\ngit config --global user.email \"xx@xx.com\"\n#生成密钥\nssh-keygen -t rsa -C \"xx@xx.com\"\n```\n进入.ssh文件夹下复制公钥id_rsa_pub文本内容，在` Github->settings->ssh and gpg keys->new ssh key `\n```bash\n# 测试是否配置成功\nssh -T git@github.com\n```\n多用户Git配置请参考{% post_link 本地配置Git多账户 %}\n\n## Mysql\n1. 解压mysql-8.0.20-winx64.zip，进入bin目录\n2. 创建my.ini\n   ```bash\n   [mysqld]\n    # 设置3306端口\n    port=3306\n    # 设置mysql的安装目录\n    basedir=C:\\\\Program Files\\\\mysql-8.0.20\n    # 设置mysql数据库的数据的存放目录\n    datadir=C:\\\\Program Files\\\\mysql-8.0.20\\\\Data\n    # 允许最大连接数\n    max_connections=200\n    # 允许连接失败的次数。\n    max_connect_errors=10\n    # 服务端使用的字符集默认为utf8mb4\n    character-set-server=utf8mb4\n    # 创建新表时将使用的默认存储引擎\n    default-storage-engine=INNODB\n    # 默认使用“mysql_native_password”插件认证\n    #mysql_native_password\n    default_authentication_plugin=mysql_native_password\n    [mysql]\n    # 设置mysql客户端默认字符集\n    default-character-set=utf8mb4\n    [client]\n    # 设置mysql客户端连接服务端时默认使用的端口\n    port=3306\n    default-character-set=utf8mb4\n   ```\n3. 初始化Mysql\n   在命令行窗口进入bin目录，执行` mysqld --initialize --console `，记录随机生成的密码\n4. 安装并启动\n   ```bash\n   mysql --install\n   # 启动服务\n   net start mysql\n   ```\n5. 设置密码\n   `mysql -u root -p`输入密码进入mysql控制台，通过`set password = password('xxx');`修改默认密码\n6. 忘记默认密码？\n   ```bash\n    # 关闭服务 \n    net stop mysql\n    # 跳过验证\n    mysqld --console --skip-grant-tables --shared-memory \n    # 新开一个cmd窗口，启动mysql服务，使用空密码进入 \n    mysql -u root -p\n    # 使用mysql数据表\n    use mysql;\n    update user set authentication_string='' where user='root';（将密码置为空）\n    quit;\n\n    # 关闭第二步的cmd窗口，新开一个cmd窗口，先关闭服务，重新打开。\n    mysql -u -root -p进入，此时使用空密码进入\n    # 修改密码即可\n    ALTER USER 'root'@'localhost' IDENTIFIED BY '新密码';\n   ```\n\n## NPM\n1. nvm：用于npm版本控制，运行nvm-setup.exe\n2. 设置nvm镜像：\n```bash\nnvm npm_mirror https://npm.taobao.org/mirrors/npm/\nnvm node_mirror https://npm.taobao.org/mirrors/node/\n```\n3. 安装指定版本nodejs\n```bash   \nnvm install x.x.x\n```\n4. 设置npm镜像\n```bash   \nnpm config set registry https://registry.npm.taobao.org\n```\n5. 使用cnpm\n```bash\nnpm install -g cnpm\n```\n\n## 博客迁移\n有以下三种方法\n1. [Cloud Studio](https://realmicah.cloudstudio.net/dashboard/workspace)线上开发\n2. 从[Coding仓库](https://realmicah.coding.net/)克隆到本地后安装hexo和其他依赖即可\n3. 复制scaffolds、source、themes、_config.yml、package.json，在新文件夹下安装hexo和其他依赖\n   \n## 虚拟机相关\n### Vmware\n1. 解压vmware-pro15.zip，安装\n2. 使用镜像CentOS-7-x86_64-Minimal-1908.iso，创建虚拟机\n   \n### 远程连接工具\n访问[XShell官网](https://www.netsarang.com/zh/xshell/)，获取家庭/学校版，填写邮箱和名字，收到邮件下载即可\n","source":"_posts/JAVA开发环境搭建.md","raw":"---\ntitle: Java开发环境搭建（闲时更新）\ncategories:\n- 笔记\nimage: 'https://gitee.com/jingshanccc/image/raw/master/image/20200803104632.jpg'\nabbrlink: 27c7c088\n---\n<p/>\n\n<!-- more -->\n\n## 前言\n\n{% note info %}\n本文主要用于个人记录开发环境的搭建，便于环境迁移时的重建工作，文中提及相关文件可在[曲奇云盘](https://quqi.com/)中获取\n{% endnote %}\n## Java\n1. Windows\n   运行jdk-8u181-windows-x64.exe以安装JDK\n2. Linux\n   解压`tar -zxvf jdk-xxx.tar.gz `，配置环境变量\n\n## Maven\n解压apache-maven-3.6.3-bin.zip，配置环境变量\n## Git\n1. 安装Git-2.27.0-64-bit.exe\n2. 配置ssh key\n```bash\n#配置身份信息\ngit config --global user.name \"xx\"\ngit config --global user.email \"xx@xx.com\"\n#生成密钥\nssh-keygen -t rsa -C \"xx@xx.com\"\n```\n进入.ssh文件夹下复制公钥id_rsa_pub文本内容，在` Github->settings->ssh and gpg keys->new ssh key `\n```bash\n# 测试是否配置成功\nssh -T git@github.com\n```\n多用户Git配置请参考{% post_link 本地配置Git多账户 %}\n\n## Mysql\n1. 解压mysql-8.0.20-winx64.zip，进入bin目录\n2. 创建my.ini\n   ```bash\n   [mysqld]\n    # 设置3306端口\n    port=3306\n    # 设置mysql的安装目录\n    basedir=C:\\\\Program Files\\\\mysql-8.0.20\n    # 设置mysql数据库的数据的存放目录\n    datadir=C:\\\\Program Files\\\\mysql-8.0.20\\\\Data\n    # 允许最大连接数\n    max_connections=200\n    # 允许连接失败的次数。\n    max_connect_errors=10\n    # 服务端使用的字符集默认为utf8mb4\n    character-set-server=utf8mb4\n    # 创建新表时将使用的默认存储引擎\n    default-storage-engine=INNODB\n    # 默认使用“mysql_native_password”插件认证\n    #mysql_native_password\n    default_authentication_plugin=mysql_native_password\n    [mysql]\n    # 设置mysql客户端默认字符集\n    default-character-set=utf8mb4\n    [client]\n    # 设置mysql客户端连接服务端时默认使用的端口\n    port=3306\n    default-character-set=utf8mb4\n   ```\n3. 初始化Mysql\n   在命令行窗口进入bin目录，执行` mysqld --initialize --console `，记录随机生成的密码\n4. 安装并启动\n   ```bash\n   mysql --install\n   # 启动服务\n   net start mysql\n   ```\n5. 设置密码\n   `mysql -u root -p`输入密码进入mysql控制台，通过`set password = password('xxx');`修改默认密码\n6. 忘记默认密码？\n   ```bash\n    # 关闭服务 \n    net stop mysql\n    # 跳过验证\n    mysqld --console --skip-grant-tables --shared-memory \n    # 新开一个cmd窗口，启动mysql服务，使用空密码进入 \n    mysql -u root -p\n    # 使用mysql数据表\n    use mysql;\n    update user set authentication_string='' where user='root';（将密码置为空）\n    quit;\n\n    # 关闭第二步的cmd窗口，新开一个cmd窗口，先关闭服务，重新打开。\n    mysql -u -root -p进入，此时使用空密码进入\n    # 修改密码即可\n    ALTER USER 'root'@'localhost' IDENTIFIED BY '新密码';\n   ```\n\n## NPM\n1. nvm：用于npm版本控制，运行nvm-setup.exe\n2. 设置nvm镜像：\n```bash\nnvm npm_mirror https://npm.taobao.org/mirrors/npm/\nnvm node_mirror https://npm.taobao.org/mirrors/node/\n```\n3. 安装指定版本nodejs\n```bash   \nnvm install x.x.x\n```\n4. 设置npm镜像\n```bash   \nnpm config set registry https://registry.npm.taobao.org\n```\n5. 使用cnpm\n```bash\nnpm install -g cnpm\n```\n\n## 博客迁移\n有以下三种方法\n1. [Cloud Studio](https://realmicah.cloudstudio.net/dashboard/workspace)线上开发\n2. 从[Coding仓库](https://realmicah.coding.net/)克隆到本地后安装hexo和其他依赖即可\n3. 复制scaffolds、source、themes、_config.yml、package.json，在新文件夹下安装hexo和其他依赖\n   \n## 虚拟机相关\n### Vmware\n1. 解压vmware-pro15.zip，安装\n2. 使用镜像CentOS-7-x86_64-Minimal-1908.iso，创建虚拟机\n   \n### 远程连接工具\n访问[XShell官网](https://www.netsarang.com/zh/xshell/)，获取家庭/学校版，填写邮箱和名字，收到邮件下载即可\n","slug":"JAVA开发环境搭建","published":1,"date":"2020-08-03T02:45:13.960Z","updated":"2020-08-06T01:24:49.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck27002fz4ej2ys72ee5","content":"<p/>\n\n<a id=\"more\"></a>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><div class=\"note info\"><p>本文主要用于个人记录开发环境的搭建，便于环境迁移时的重建工作，文中提及相关文件可在<a href=\"https://quqi.com/\" target=\"_blank\" rel=\"noopener\">曲奇云盘</a>中获取</p></div>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><ol>\n<li>Windows<br>运行jdk-8u181-windows-x64.exe以安装JDK</li>\n<li>Linux<br>解压<code>tar -zxvf jdk-xxx.tar.gz</code>，配置环境变量</li>\n</ol>\n<h2 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h2><p>解压apache-maven-3.6.3-bin.zip，配置环境变量</p>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><ol>\n<li>安装Git-2.27.0-64-bit.exe</li>\n<li>配置ssh key<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置身份信息</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">\"xx\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"xx@xx.com\"</span></span><br><span class=\"line\"><span class=\"comment\">#生成密钥</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"xx@xx.com\"</span></span><br></pre></td></tr></table></figure>\n进入.ssh文件夹下复制公钥id_rsa_pub文本内容，在<code>Github-&gt;settings-&gt;ssh and gpg keys-&gt;new ssh key</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试是否配置成功</span></span><br><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n多用户Git配置请参考<a href=\"/posts/372eebb7.html\" title=\"本地配置Git多账户\">本地配置Git多账户</a></li>\n</ol>\n<h2 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h2><ol>\n<li>解压mysql-8.0.20-winx64.zip，进入bin目录</li>\n<li>创建my.ini<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"> <span class=\"comment\"># 设置3306端口</span></span><br><span class=\"line\"> port=3306</span><br><span class=\"line\"> <span class=\"comment\"># 设置mysql的安装目录</span></span><br><span class=\"line\"> basedir=C:\\\\Program Files\\\\mysql-8.0.20</span><br><span class=\"line\"> <span class=\"comment\"># 设置mysql数据库的数据的存放目录</span></span><br><span class=\"line\"> datadir=C:\\\\Program Files\\\\mysql-8.0.20\\\\Data</span><br><span class=\"line\"> <span class=\"comment\"># 允许最大连接数</span></span><br><span class=\"line\"> max_connections=200</span><br><span class=\"line\"> <span class=\"comment\"># 允许连接失败的次数。</span></span><br><span class=\"line\"> max_connect_errors=10</span><br><span class=\"line\"> <span class=\"comment\"># 服务端使用的字符集默认为utf8mb4</span></span><br><span class=\"line\"> character-set-server=utf8mb4</span><br><span class=\"line\"> <span class=\"comment\"># 创建新表时将使用的默认存储引擎</span></span><br><span class=\"line\"> default-storage-engine=INNODB</span><br><span class=\"line\"> <span class=\"comment\"># 默认使用“mysql_native_password”插件认证</span></span><br><span class=\"line\"> <span class=\"comment\">#mysql_native_password</span></span><br><span class=\"line\"> default_authentication_plugin=mysql_native_password</span><br><span class=\"line\"> [mysql]</span><br><span class=\"line\"> <span class=\"comment\"># 设置mysql客户端默认字符集</span></span><br><span class=\"line\"> default-character-set=utf8mb4</span><br><span class=\"line\"> [client]</span><br><span class=\"line\"> <span class=\"comment\"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class=\"line\"> port=3306</span><br><span class=\"line\"> default-character-set=utf8mb4</span><br></pre></td></tr></table></figure></li>\n<li>初始化Mysql<br>在命令行窗口进入bin目录，执行<code>mysqld --initialize --console</code>，记录随机生成的密码</li>\n<li>安装并启动<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql --install</span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">net start mysql</span><br></pre></td></tr></table></figure></li>\n<li>设置密码<br><code>mysql -u root -p</code>输入密码进入mysql控制台，通过<code>set password = password(&#39;xxx&#39;);</code>修改默认密码</li>\n<li>忘记默认密码？<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭服务 </span></span><br><span class=\"line\">net stop mysql</span><br><span class=\"line\"><span class=\"comment\"># 跳过验证</span></span><br><span class=\"line\">mysqld --console --skip-grant-tables --shared-memory </span><br><span class=\"line\"><span class=\"comment\"># 新开一个cmd窗口，启动mysql服务，使用空密码进入 </span></span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\"><span class=\"comment\"># 使用mysql数据表</span></span><br><span class=\"line\">use mysql;</span><br><span class=\"line\">update user <span class=\"built_in\">set</span> authentication_string=<span class=\"string\">''</span> <span class=\"built_in\">where</span> user=<span class=\"string\">'root'</span>;（将密码置为空）</span><br><span class=\"line\">quit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭第二步的cmd窗口，新开一个cmd窗口，先关闭服务，重新打开。</span></span><br><span class=\"line\">mysql -u -root -p进入，此时使用空密码进入</span><br><span class=\"line\"><span class=\"comment\"># 修改密码即可</span></span><br><span class=\"line\">ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED BY <span class=\"string\">'新密码'</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><ol>\n<li>nvm：用于npm版本控制，运行nvm-setup.exe</li>\n<li>设置nvm镜像：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br><span class=\"line\">nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br></pre></td></tr></table></figure></li>\n<li>安装指定版本nodejs<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install x.x.x</span><br></pre></td></tr></table></figure></li>\n<li>设置npm镜像<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>\n<li>使用cnpm<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"博客迁移\"><a href=\"#博客迁移\" class=\"headerlink\" title=\"博客迁移\"></a>博客迁移</h2><p>有以下三种方法</p>\n<ol>\n<li><a href=\"https://realmicah.cloudstudio.net/dashboard/workspace\" target=\"_blank\" rel=\"noopener\">Cloud Studio</a>线上开发</li>\n<li>从<a href=\"https://realmicah.coding.net/\" target=\"_blank\" rel=\"noopener\">Coding仓库</a>克隆到本地后安装hexo和其他依赖即可</li>\n<li>复制scaffolds、source、themes、_config.yml、package.json，在新文件夹下安装hexo和其他依赖</li>\n</ol>\n<h2 id=\"虚拟机相关\"><a href=\"#虚拟机相关\" class=\"headerlink\" title=\"虚拟机相关\"></a>虚拟机相关</h2><h3 id=\"Vmware\"><a href=\"#Vmware\" class=\"headerlink\" title=\"Vmware\"></a>Vmware</h3><ol>\n<li>解压vmware-pro15.zip，安装</li>\n<li>使用镜像CentOS-7-x86_64-Minimal-1908.iso，创建虚拟机</li>\n</ol>\n<h3 id=\"远程连接工具\"><a href=\"#远程连接工具\" class=\"headerlink\" title=\"远程连接工具\"></a>远程连接工具</h3><p>访问<a href=\"https://www.netsarang.com/zh/xshell/\" target=\"_blank\" rel=\"noopener\">XShell官网</a>，获取家庭/学校版，填写邮箱和名字，收到邮件下载即可</p>\n","site":{"data":{}},"excerpt":"<p/>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><div class=\"note info\"><p>本文主要用于个人记录开发环境的搭建，便于环境迁移时的重建工作，文中提及相关文件可在<a href=\"https://quqi.com/\" target=\"_blank\" rel=\"noopener\">曲奇云盘</a>中获取</p></div>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><ol>\n<li>Windows<br>运行jdk-8u181-windows-x64.exe以安装JDK</li>\n<li>Linux<br>解压<code>tar -zxvf jdk-xxx.tar.gz</code>，配置环境变量</li>\n</ol>\n<h2 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h2><p>解压apache-maven-3.6.3-bin.zip，配置环境变量</p>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><ol>\n<li>安装Git-2.27.0-64-bit.exe</li>\n<li>配置ssh key<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置身份信息</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">\"xx\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"xx@xx.com\"</span></span><br><span class=\"line\"><span class=\"comment\">#生成密钥</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"xx@xx.com\"</span></span><br></pre></td></tr></table></figure>\n进入.ssh文件夹下复制公钥id_rsa_pub文本内容，在<code>Github-&gt;settings-&gt;ssh and gpg keys-&gt;new ssh key</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试是否配置成功</span></span><br><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n多用户Git配置请参考<a href=\"/posts/372eebb7.html\" title=\"本地配置Git多账户\">本地配置Git多账户</a></li>\n</ol>\n<h2 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h2><ol>\n<li>解压mysql-8.0.20-winx64.zip，进入bin目录</li>\n<li>创建my.ini<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"> <span class=\"comment\"># 设置3306端口</span></span><br><span class=\"line\"> port=3306</span><br><span class=\"line\"> <span class=\"comment\"># 设置mysql的安装目录</span></span><br><span class=\"line\"> basedir=C:\\\\Program Files\\\\mysql-8.0.20</span><br><span class=\"line\"> <span class=\"comment\"># 设置mysql数据库的数据的存放目录</span></span><br><span class=\"line\"> datadir=C:\\\\Program Files\\\\mysql-8.0.20\\\\Data</span><br><span class=\"line\"> <span class=\"comment\"># 允许最大连接数</span></span><br><span class=\"line\"> max_connections=200</span><br><span class=\"line\"> <span class=\"comment\"># 允许连接失败的次数。</span></span><br><span class=\"line\"> max_connect_errors=10</span><br><span class=\"line\"> <span class=\"comment\"># 服务端使用的字符集默认为utf8mb4</span></span><br><span class=\"line\"> character-set-server=utf8mb4</span><br><span class=\"line\"> <span class=\"comment\"># 创建新表时将使用的默认存储引擎</span></span><br><span class=\"line\"> default-storage-engine=INNODB</span><br><span class=\"line\"> <span class=\"comment\"># 默认使用“mysql_native_password”插件认证</span></span><br><span class=\"line\"> <span class=\"comment\">#mysql_native_password</span></span><br><span class=\"line\"> default_authentication_plugin=mysql_native_password</span><br><span class=\"line\"> [mysql]</span><br><span class=\"line\"> <span class=\"comment\"># 设置mysql客户端默认字符集</span></span><br><span class=\"line\"> default-character-set=utf8mb4</span><br><span class=\"line\"> [client]</span><br><span class=\"line\"> <span class=\"comment\"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class=\"line\"> port=3306</span><br><span class=\"line\"> default-character-set=utf8mb4</span><br></pre></td></tr></table></figure></li>\n<li>初始化Mysql<br>在命令行窗口进入bin目录，执行<code>mysqld --initialize --console</code>，记录随机生成的密码</li>\n<li>安装并启动<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql --install</span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">net start mysql</span><br></pre></td></tr></table></figure></li>\n<li>设置密码<br><code>mysql -u root -p</code>输入密码进入mysql控制台，通过<code>set password = password(&#39;xxx&#39;);</code>修改默认密码</li>\n<li>忘记默认密码？<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭服务 </span></span><br><span class=\"line\">net stop mysql</span><br><span class=\"line\"><span class=\"comment\"># 跳过验证</span></span><br><span class=\"line\">mysqld --console --skip-grant-tables --shared-memory </span><br><span class=\"line\"><span class=\"comment\"># 新开一个cmd窗口，启动mysql服务，使用空密码进入 </span></span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\"><span class=\"comment\"># 使用mysql数据表</span></span><br><span class=\"line\">use mysql;</span><br><span class=\"line\">update user <span class=\"built_in\">set</span> authentication_string=<span class=\"string\">''</span> <span class=\"built_in\">where</span> user=<span class=\"string\">'root'</span>;（将密码置为空）</span><br><span class=\"line\">quit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭第二步的cmd窗口，新开一个cmd窗口，先关闭服务，重新打开。</span></span><br><span class=\"line\">mysql -u -root -p进入，此时使用空密码进入</span><br><span class=\"line\"><span class=\"comment\"># 修改密码即可</span></span><br><span class=\"line\">ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED BY <span class=\"string\">'新密码'</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h2><ol>\n<li>nvm：用于npm版本控制，运行nvm-setup.exe</li>\n<li>设置nvm镜像：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br><span class=\"line\">nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br></pre></td></tr></table></figure></li>\n<li>安装指定版本nodejs<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install x.x.x</span><br></pre></td></tr></table></figure></li>\n<li>设置npm镜像<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>\n<li>使用cnpm<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"博客迁移\"><a href=\"#博客迁移\" class=\"headerlink\" title=\"博客迁移\"></a>博客迁移</h2><p>有以下三种方法</p>\n<ol>\n<li><a href=\"https://realmicah.cloudstudio.net/dashboard/workspace\" target=\"_blank\" rel=\"noopener\">Cloud Studio</a>线上开发</li>\n<li>从<a href=\"https://realmicah.coding.net/\" target=\"_blank\" rel=\"noopener\">Coding仓库</a>克隆到本地后安装hexo和其他依赖即可</li>\n<li>复制scaffolds、source、themes、_config.yml、package.json，在新文件夹下安装hexo和其他依赖</li>\n</ol>\n<h2 id=\"虚拟机相关\"><a href=\"#虚拟机相关\" class=\"headerlink\" title=\"虚拟机相关\"></a>虚拟机相关</h2><h3 id=\"Vmware\"><a href=\"#Vmware\" class=\"headerlink\" title=\"Vmware\"></a>Vmware</h3><ol>\n<li>解压vmware-pro15.zip，安装</li>\n<li>使用镜像CentOS-7-x86_64-Minimal-1908.iso，创建虚拟机</li>\n</ol>\n<h3 id=\"远程连接工具\"><a href=\"#远程连接工具\" class=\"headerlink\" title=\"远程连接工具\"></a>远程连接工具</h3><p>访问<a href=\"https://www.netsarang.com/zh/xshell/\" target=\"_blank\" rel=\"noopener\">XShell官网</a>，获取家庭/学校版，填写邮箱和名字，收到邮件下载即可</p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Aug 06 2020 09:24:49 GMT+0800 (中国标准时间)","title":"Java开发环境搭建（闲时更新）","path":"posts/27c7c088.html","eyeCatchImage":null,"excerpt":"<p/>","date":{"_isAMomentObject":true,"_i":"2020-08-03T02:45:13.960Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-08-03T02:45:13.960Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"笔记","tags":[],"internalLinks":["posts/372eebb7.html"],"keywords":[],"keywordsLength":0},"length":2059},{"title":"Leetcode周赛-187","image":"https://gitee.com/jingshanccc/image/raw/master/image/20200722004843.png","abbrlink":"2b34ab19","_content":"\n<p/>\n\n<!-- more -->\n\n### 旅行终点站\n\n> 给你一份旅游线路图，该线路图中的旅行线路用数组 `paths` 表示，其中 `paths[i] = [cityAi, cityBi]` 表示该线路将会从 `cityAi` 直接前往 `cityBi` 。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市*。*\n>\n> 题目数据保证线路图会形成一条不存在循环的线路，因此只会有一个旅行终点站。\n\n{% note info %}\n\n**示例 1：**\n\n```\n输入：paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]\n输出：\"Sao Paulo\" \n解释：从 \"London\" 出发，最后抵达终点站 \"Sao Paulo\" 。本次旅行的路线是 \"London\" -> \"New York\" -> \"Lima\" -> \"Sao Paulo\" 。\n```\n\n**示例 2：**\n\n```\n输入：paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]\n输出：\"A\"\n解释：所有可能的线路是：\n\"D\" -> \"B\" -> \"C\" -> \"A\". \n\"B\" -> \"C\" -> \"A\". \n\"C\" -> \"A\". \n\"A\". \n显然，旅行终点站是 \"A\" 。\n```\n\n**示例 3：**\n\n```\n输入：paths = [[\"A\",\"Z\"]]\n输出：\"Z\"\n```\n\n{% endnote %}\n\n### 💡 解法\n\n终点站不会出现在任何线路的起点，因此将所有终点存入一个set，然后将出现在起点的站点从set中删除，最终剩下的就是终点站。\n\n```java\npublic String destCity(List<List<String>> paths) {\n    Set<String> city = new HashSet<>();\n    for(List<String> cs : paths){\n        city.add(cs.get(1));\n\n    }\n    for(List<String> cd : paths){\n        if(city.contains(cd.get(0))){\n            city.remove(cd.get(0));\n        }\n    }\n    return city.iterator().next();\n}\n```\n\n## 是否所有 1 都至少相隔 k 个元素\n\n> 给你一个由若干 `0` 和 `1` 组成的数组 `nums` 以及整数 `k`。如果所有 `1` 都至少相隔 `k` 个元素，则返回 `True` ；否则，返回 `False` 。\n\n{% note info %}\n\n**示例 1：**\n\n**![img](https://gitee.com/jingshanccc/image/raw/master/image/20200722004857.png)**\n\n```\n输入：nums = [1,0,0,0,1,0,0,1], k = 2\n输出：true\n解释：每个 1 都至少相隔 2 个元素。\n```\n\n**示例 2：**\n\n**![img](https://gitee.com/jingshanccc/image/raw/master/image/20200722004907.png)**\n\n```\n输入：nums = [1,0,0,1,0,1], k = 2\n输出：false\n解释：第二个 1 和第三个 1 之间只隔了 1 个元素。\n```\n\n**示例 3：**\n\n```\n输入：nums = [1,1,1,1,1], k = 0\n输出：true\n```\n\n**示例 4：**\n\n```\n输入：nums = [0,1,0,1], k = 1\n输出：true\n```\n\n{% endnote %}\n\n### 💡 解法\n\n只要所有1之间最小的间隔等于k即可。换句话说，如果还没出现k个0就再次出现1，返回false。\n\n```java\npublic boolean kLengthApart(int[] nums, int k) {\n    int distance = k;\n\n    for(int i = 0 ; i < nums.length; i++){\n        if(nums[i] == 1 && distance < k){\n            return false;\n        }\n        distance = nums[i]==0 ? distance + 1 : 0;\n    }\n    return true;\n}\n```\n\n## 绝对差不超过限制的最长连续子数组\n\n> 给你一个整数数组 `nums` ，和一个表示限制的整数 `limit`，请你返回最长连续子数组的长度，该子数组中的任意两个元素之间的绝对差必须小于或者等于 `limit` *。*\n>\n> 如果不存在满足条件的子数组，则返回 `0` 。\n\n{% note info %}\n\n**示例 1：**\n\n```\n输入：nums = [10,1,2,4,7,2], limit = 5\n输出：4 \n解释：满足题意的最长子数组是 [2,4,7,2]，其最大绝对差 |2-7| = 5 <= 5 。\n```\n\n{% endnote %}\n\n### 💡 解法\n\n最长连续子数组问题，都可以通过暴力枚举以每一个位置开头的最长连续子数组来求解。要求子数组任意两个元素之间绝对差小于等于` limit `，而最大的绝对差来自最大值和最小值的差，因此需要动态维护子数组中的最大值和最小值。\n\n```java\npublic int longestSubarray(int[] nums, int limit) {\n    if(nums == null || nums.length == 0){\n        return 0;\n    }\n    int n = nums.length;\n    int res = 1;\n    for(int i = 0; i < n; i++){\n        int min = nums[i];\n        int max = nums[i];\n        int count = 1;\n        for(int j = i + 1; j < n; j++){\n            if(Math.abs(nums[j]-min) > limit || Math.abs(max-nums[j]) > limit){\n                break;\n            }else{\n                count ++;\n                max = Math.max(max, nums[j]);\n                min = Math.min(min, nums[j]);\n            }\n        }\n        res = Math.max(count, res);\n    }\n    return res;\n}\n```\n\n提交之后会获得一个**超时**的结果😂。\n\n### 📈 优化\n\n上述过程中，由于没有利用到上一次求取过程中的信息，每一个位置的求解都需要遍历该位置元素之后的整个数组，因此是O(N²)的复杂度。解题和优化的思路和Leetcode第 {% post_link 3-无重复字符的最长子串 %} 题类似，既然开头行不通，那么我们可以反过来求解以每一个位置为结尾的满足要求的最长连续子数组。遍历每一个位置，从右向左查找满足条件的。` [left...i-1] `一定是满足条件的，通过 ` i ` 和其左边的数字，更新left，表示包含 ` i` 之后，符合条件的最左下标。\n\n```java\npublic int longestSubarray(int[] nums, int limit) {\n    int left = 0;//满足条件的最小下标数组值。\n    int res= 0 ;\n    if(nums.length == 1) return 1;\n    for(int i = 1 ; i < nums.length; ++ i){\n        //队列维护\n        for(int j = i - 1; j >= left; j --){\n            //如果存在相同的值，直接跳过，不处理left\n            if(nums[i] == nums[j]){\n                break;\n            }\n            // 从右往左处理，如果有不满足，直接更新left.\n            if(Math.abs(nums[j] - nums[i])> limit){\n                left = j + 1;\n                break;\n            }\n        }\n        res = Math.max(res, i - left + 1);\n    }\n    return res;\n}\n```\n\n{% note warning %}\n\n文中题目以及图片来自 [Leetcode 第 187 场周赛](https://leetcode-cn.com/contest/weekly-contest-187/) .\n\n{% endnote %}","source":"_posts/Leetcode周赛-187.md","raw":"---\ntitle: Leetcode周赛-187\ntags:\n  - Leetcode周赛\ncategories:\n  - Leetcode\nimage: 'https://gitee.com/jingshanccc/image/raw/master/image/20200722004843.png'\nabbrlink: 2b34ab19\n---\n\n<p/>\n\n<!-- more -->\n\n### 旅行终点站\n\n> 给你一份旅游线路图，该线路图中的旅行线路用数组 `paths` 表示，其中 `paths[i] = [cityAi, cityBi]` 表示该线路将会从 `cityAi` 直接前往 `cityBi` 。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市*。*\n>\n> 题目数据保证线路图会形成一条不存在循环的线路，因此只会有一个旅行终点站。\n\n{% note info %}\n\n**示例 1：**\n\n```\n输入：paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]\n输出：\"Sao Paulo\" \n解释：从 \"London\" 出发，最后抵达终点站 \"Sao Paulo\" 。本次旅行的路线是 \"London\" -> \"New York\" -> \"Lima\" -> \"Sao Paulo\" 。\n```\n\n**示例 2：**\n\n```\n输入：paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]\n输出：\"A\"\n解释：所有可能的线路是：\n\"D\" -> \"B\" -> \"C\" -> \"A\". \n\"B\" -> \"C\" -> \"A\". \n\"C\" -> \"A\". \n\"A\". \n显然，旅行终点站是 \"A\" 。\n```\n\n**示例 3：**\n\n```\n输入：paths = [[\"A\",\"Z\"]]\n输出：\"Z\"\n```\n\n{% endnote %}\n\n### 💡 解法\n\n终点站不会出现在任何线路的起点，因此将所有终点存入一个set，然后将出现在起点的站点从set中删除，最终剩下的就是终点站。\n\n```java\npublic String destCity(List<List<String>> paths) {\n    Set<String> city = new HashSet<>();\n    for(List<String> cs : paths){\n        city.add(cs.get(1));\n\n    }\n    for(List<String> cd : paths){\n        if(city.contains(cd.get(0))){\n            city.remove(cd.get(0));\n        }\n    }\n    return city.iterator().next();\n}\n```\n\n## 是否所有 1 都至少相隔 k 个元素\n\n> 给你一个由若干 `0` 和 `1` 组成的数组 `nums` 以及整数 `k`。如果所有 `1` 都至少相隔 `k` 个元素，则返回 `True` ；否则，返回 `False` 。\n\n{% note info %}\n\n**示例 1：**\n\n**![img](https://gitee.com/jingshanccc/image/raw/master/image/20200722004857.png)**\n\n```\n输入：nums = [1,0,0,0,1,0,0,1], k = 2\n输出：true\n解释：每个 1 都至少相隔 2 个元素。\n```\n\n**示例 2：**\n\n**![img](https://gitee.com/jingshanccc/image/raw/master/image/20200722004907.png)**\n\n```\n输入：nums = [1,0,0,1,0,1], k = 2\n输出：false\n解释：第二个 1 和第三个 1 之间只隔了 1 个元素。\n```\n\n**示例 3：**\n\n```\n输入：nums = [1,1,1,1,1], k = 0\n输出：true\n```\n\n**示例 4：**\n\n```\n输入：nums = [0,1,0,1], k = 1\n输出：true\n```\n\n{% endnote %}\n\n### 💡 解法\n\n只要所有1之间最小的间隔等于k即可。换句话说，如果还没出现k个0就再次出现1，返回false。\n\n```java\npublic boolean kLengthApart(int[] nums, int k) {\n    int distance = k;\n\n    for(int i = 0 ; i < nums.length; i++){\n        if(nums[i] == 1 && distance < k){\n            return false;\n        }\n        distance = nums[i]==0 ? distance + 1 : 0;\n    }\n    return true;\n}\n```\n\n## 绝对差不超过限制的最长连续子数组\n\n> 给你一个整数数组 `nums` ，和一个表示限制的整数 `limit`，请你返回最长连续子数组的长度，该子数组中的任意两个元素之间的绝对差必须小于或者等于 `limit` *。*\n>\n> 如果不存在满足条件的子数组，则返回 `0` 。\n\n{% note info %}\n\n**示例 1：**\n\n```\n输入：nums = [10,1,2,4,7,2], limit = 5\n输出：4 \n解释：满足题意的最长子数组是 [2,4,7,2]，其最大绝对差 |2-7| = 5 <= 5 。\n```\n\n{% endnote %}\n\n### 💡 解法\n\n最长连续子数组问题，都可以通过暴力枚举以每一个位置开头的最长连续子数组来求解。要求子数组任意两个元素之间绝对差小于等于` limit `，而最大的绝对差来自最大值和最小值的差，因此需要动态维护子数组中的最大值和最小值。\n\n```java\npublic int longestSubarray(int[] nums, int limit) {\n    if(nums == null || nums.length == 0){\n        return 0;\n    }\n    int n = nums.length;\n    int res = 1;\n    for(int i = 0; i < n; i++){\n        int min = nums[i];\n        int max = nums[i];\n        int count = 1;\n        for(int j = i + 1; j < n; j++){\n            if(Math.abs(nums[j]-min) > limit || Math.abs(max-nums[j]) > limit){\n                break;\n            }else{\n                count ++;\n                max = Math.max(max, nums[j]);\n                min = Math.min(min, nums[j]);\n            }\n        }\n        res = Math.max(count, res);\n    }\n    return res;\n}\n```\n\n提交之后会获得一个**超时**的结果😂。\n\n### 📈 优化\n\n上述过程中，由于没有利用到上一次求取过程中的信息，每一个位置的求解都需要遍历该位置元素之后的整个数组，因此是O(N²)的复杂度。解题和优化的思路和Leetcode第 {% post_link 3-无重复字符的最长子串 %} 题类似，既然开头行不通，那么我们可以反过来求解以每一个位置为结尾的满足要求的最长连续子数组。遍历每一个位置，从右向左查找满足条件的。` [left...i-1] `一定是满足条件的，通过 ` i ` 和其左边的数字，更新left，表示包含 ` i` 之后，符合条件的最左下标。\n\n```java\npublic int longestSubarray(int[] nums, int limit) {\n    int left = 0;//满足条件的最小下标数组值。\n    int res= 0 ;\n    if(nums.length == 1) return 1;\n    for(int i = 1 ; i < nums.length; ++ i){\n        //队列维护\n        for(int j = i - 1; j >= left; j --){\n            //如果存在相同的值，直接跳过，不处理left\n            if(nums[i] == nums[j]){\n                break;\n            }\n            // 从右往左处理，如果有不满足，直接更新left.\n            if(Math.abs(nums[j] - nums[i])> limit){\n                left = j + 1;\n                break;\n            }\n        }\n        res = Math.max(res, i - left + 1);\n    }\n    return res;\n}\n```\n\n{% note warning %}\n\n文中题目以及图片来自 [Leetcode 第 187 场周赛](https://leetcode-cn.com/contest/weekly-contest-187/) .\n\n{% endnote %}","slug":"Leetcode周赛-187","published":1,"date":"2020-05-03T05:28:15.773Z","updated":"2020-07-21T16:49:13.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck28002jz4ej4bdk0rfv","content":"<p/>\n\n<a id=\"more\"></a>\n\n<h3 id=\"旅行终点站\"><a href=\"#旅行终点站\" class=\"headerlink\" title=\"旅行终点站\"></a>旅行终点站</h3><blockquote>\n<p>给你一份旅游线路图，该线路图中的旅行线路用数组 <code>paths</code> 表示，其中 <code>paths[i] = [cityAi, cityBi]</code> 表示该线路将会从 <code>cityAi</code> 直接前往 <code>cityBi</code> 。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市<em>。</em></p>\n<p>题目数据保证线路图会形成一条不存在循环的线路，因此只会有一个旅行终点站。</p>\n</blockquote>\n<div class=\"note info\"><p><strong>示例 1：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：paths &#x3D; [[&quot;London&quot;,&quot;New York&quot;],[&quot;New York&quot;,&quot;Lima&quot;],[&quot;Lima&quot;,&quot;Sao Paulo&quot;]]</span><br><span class=\"line\">输出：&quot;Sao Paulo&quot; </span><br><span class=\"line\">解释：从 &quot;London&quot; 出发，最后抵达终点站 &quot;Sao Paulo&quot; 。本次旅行的路线是 &quot;London&quot; -&gt; &quot;New York&quot; -&gt; &quot;Lima&quot; -&gt; &quot;Sao Paulo&quot; 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：paths &#x3D; [[&quot;B&quot;,&quot;C&quot;],[&quot;D&quot;,&quot;B&quot;],[&quot;C&quot;,&quot;A&quot;]]</span><br><span class=\"line\">输出：&quot;A&quot;</span><br><span class=\"line\">解释：所有可能的线路是：</span><br><span class=\"line\">&quot;D&quot; -&gt; &quot;B&quot; -&gt; &quot;C&quot; -&gt; &quot;A&quot;. </span><br><span class=\"line\">&quot;B&quot; -&gt; &quot;C&quot; -&gt; &quot;A&quot;. </span><br><span class=\"line\">&quot;C&quot; -&gt; &quot;A&quot;. </span><br><span class=\"line\">&quot;A&quot;. </span><br><span class=\"line\">显然，旅行终点站是 &quot;A&quot; 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：paths &#x3D; [[&quot;A&quot;,&quot;Z&quot;]]</span><br><span class=\"line\">输出：&quot;Z&quot;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-解法\"><a href=\"#💡-解法\" class=\"headerlink\" title=\"💡 解法\"></a>💡 解法</h3><p>终点站不会出现在任何线路的起点，因此将所有终点存入一个set，然后将出现在起点的站点从set中删除，最终剩下的就是终点站。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">destCity</span><span class=\"params\">(List&lt;List&lt;String&gt;&gt; paths)</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;String&gt; city = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(List&lt;String&gt; cs : paths)&#123;</span><br><span class=\"line\">        city.add(cs.get(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(List&lt;String&gt; cd : paths)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(city.contains(cd.get(<span class=\"number\">0</span>)))&#123;</span><br><span class=\"line\">            city.remove(cd.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> city.iterator().next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"是否所有-1-都至少相隔-k-个元素\"><a href=\"#是否所有-1-都至少相隔-k-个元素\" class=\"headerlink\" title=\"是否所有 1 都至少相隔 k 个元素\"></a>是否所有 1 都至少相隔 k 个元素</h2><blockquote>\n<p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的数组 <code>nums</code> 以及整数 <code>k</code>。如果所有 <code>1</code> 都至少相隔 <code>k</code> 个元素，则返回 <code>True</code> ；否则，返回 <code>False</code> 。</p>\n</blockquote>\n<div class=\"note info\"><p><strong>示例 1：</strong></p>\n<p><strong><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004857.png\" alt=\"img\"></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums &#x3D; [1,0,0,0,1,0,0,1], k &#x3D; 2</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：每个 1 都至少相隔 2 个元素。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<p><strong><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004907.png\" alt=\"img\"></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums &#x3D; [1,0,0,1,0,1], k &#x3D; 2</span><br><span class=\"line\">输出：false</span><br><span class=\"line\">解释：第二个 1 和第三个 1 之间只隔了 1 个元素。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums &#x3D; [1,1,1,1,1], k &#x3D; 0</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 4：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums &#x3D; [0,1,0,1], k &#x3D; 1</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-解法-1\"><a href=\"#💡-解法-1\" class=\"headerlink\" title=\"💡 解法\"></a>💡 解法</h3><p>只要所有1之间最小的间隔等于k即可。换句话说，如果还没出现k个0就再次出现1，返回false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">kLengthApart</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> distance = k;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] == <span class=\"number\">1</span> &amp;&amp; distance &lt; k)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        distance = nums[i]==<span class=\"number\">0</span> ? distance + <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"绝对差不超过限制的最长连续子数组\"><a href=\"#绝对差不超过限制的最长连续子数组\" class=\"headerlink\" title=\"绝对差不超过限制的最长连续子数组\"></a>绝对差不超过限制的最长连续子数组</h2><blockquote>\n<p>给你一个整数数组 <code>nums</code> ，和一个表示限制的整数 <code>limit</code>，请你返回最长连续子数组的长度，该子数组中的任意两个元素之间的绝对差必须小于或者等于 <code>limit</code> <em>。</em></p>\n<p>如果不存在满足条件的子数组，则返回 <code>0</code> 。</p>\n</blockquote>\n<div class=\"note info\"><p><strong>示例 1：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums &#x3D; [10,1,2,4,7,2], limit &#x3D; 5</span><br><span class=\"line\">输出：4 </span><br><span class=\"line\">解释：满足题意的最长子数组是 [2,4,7,2]，其最大绝对差 |2-7| &#x3D; 5 &lt;&#x3D; 5 。</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-解法-2\"><a href=\"#💡-解法-2\" class=\"headerlink\" title=\"💡 解法\"></a>💡 解法</h3><p>最长连续子数组问题，都可以通过暴力枚举以每一个位置开头的最长连续子数组来求解。要求子数组任意两个元素之间绝对差小于等于<code>limit</code>，而最大的绝对差来自最大值和最小值的差，因此需要动态维护子数组中的最大值和最小值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestSubarray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> limit)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Math.abs(nums[j]-min) &gt; limit || Math.abs(max-nums[j]) &gt; limit)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                count ++;</span><br><span class=\"line\">                max = Math.max(max, nums[j]);</span><br><span class=\"line\">                min = Math.min(min, nums[j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = Math.max(count, res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>提交之后会获得一个<strong>超时</strong>的结果😂。</p>\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>上述过程中，由于没有利用到上一次求取过程中的信息，每一个位置的求解都需要遍历该位置元素之后的整个数组，因此是O(N²)的复杂度。解题和优化的思路和Leetcode第 <a href=\"/posts/4bff4329.html\" title=\"3. 无重复字符的最长子串\">3. 无重复字符的最长子串</a> 题类似，既然开头行不通，那么我们可以反过来求解以每一个位置为结尾的满足要求的最长连续子数组。遍历每一个位置，从右向左查找满足条件的。<code>[left...i-1]</code>一定是满足条件的，通过 <code>i</code> 和其左边的数字，更新left，表示包含 <code>i</code> 之后，符合条件的最左下标。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestSubarray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> limit)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;<span class=\"comment\">//满足条件的最小下标数组值。</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res= <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.length == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt; nums.length; ++ i)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//队列维护</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= left; j --)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果存在相同的值，直接跳过，不处理left</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i] == nums[j])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 从右往左处理，如果有不满足，直接更新left.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Math.abs(nums[j] - nums[i])&gt; limit)&#123;</span><br><span class=\"line\">                left = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = Math.max(res, i - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note warning\"><p>文中题目以及图片来自 <a href=\"https://leetcode-cn.com/contest/weekly-contest-187/\" target=\"_blank\" rel=\"noopener\">Leetcode 第 187 场周赛</a> .</p></div>","site":{"data":{}},"excerpt":"<p/>","more":"<h3 id=\"旅行终点站\"><a href=\"#旅行终点站\" class=\"headerlink\" title=\"旅行终点站\"></a>旅行终点站</h3><blockquote>\n<p>给你一份旅游线路图，该线路图中的旅行线路用数组 <code>paths</code> 表示，其中 <code>paths[i] = [cityAi, cityBi]</code> 表示该线路将会从 <code>cityAi</code> 直接前往 <code>cityBi</code> 。请你找出这次旅行的终点站，即没有任何可以通往其他城市的线路的城市<em>。</em></p>\n<p>题目数据保证线路图会形成一条不存在循环的线路，因此只会有一个旅行终点站。</p>\n</blockquote>\n<div class=\"note info\"><p><strong>示例 1：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：paths &#x3D; [[&quot;London&quot;,&quot;New York&quot;],[&quot;New York&quot;,&quot;Lima&quot;],[&quot;Lima&quot;,&quot;Sao Paulo&quot;]]</span><br><span class=\"line\">输出：&quot;Sao Paulo&quot; </span><br><span class=\"line\">解释：从 &quot;London&quot; 出发，最后抵达终点站 &quot;Sao Paulo&quot; 。本次旅行的路线是 &quot;London&quot; -&gt; &quot;New York&quot; -&gt; &quot;Lima&quot; -&gt; &quot;Sao Paulo&quot; 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：paths &#x3D; [[&quot;B&quot;,&quot;C&quot;],[&quot;D&quot;,&quot;B&quot;],[&quot;C&quot;,&quot;A&quot;]]</span><br><span class=\"line\">输出：&quot;A&quot;</span><br><span class=\"line\">解释：所有可能的线路是：</span><br><span class=\"line\">&quot;D&quot; -&gt; &quot;B&quot; -&gt; &quot;C&quot; -&gt; &quot;A&quot;. </span><br><span class=\"line\">&quot;B&quot; -&gt; &quot;C&quot; -&gt; &quot;A&quot;. </span><br><span class=\"line\">&quot;C&quot; -&gt; &quot;A&quot;. </span><br><span class=\"line\">&quot;A&quot;. </span><br><span class=\"line\">显然，旅行终点站是 &quot;A&quot; 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：paths &#x3D; [[&quot;A&quot;,&quot;Z&quot;]]</span><br><span class=\"line\">输出：&quot;Z&quot;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-解法\"><a href=\"#💡-解法\" class=\"headerlink\" title=\"💡 解法\"></a>💡 解法</h3><p>终点站不会出现在任何线路的起点，因此将所有终点存入一个set，然后将出现在起点的站点从set中删除，最终剩下的就是终点站。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">destCity</span><span class=\"params\">(List&lt;List&lt;String&gt;&gt; paths)</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;String&gt; city = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(List&lt;String&gt; cs : paths)&#123;</span><br><span class=\"line\">        city.add(cs.get(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(List&lt;String&gt; cd : paths)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(city.contains(cd.get(<span class=\"number\">0</span>)))&#123;</span><br><span class=\"line\">            city.remove(cd.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> city.iterator().next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"是否所有-1-都至少相隔-k-个元素\"><a href=\"#是否所有-1-都至少相隔-k-个元素\" class=\"headerlink\" title=\"是否所有 1 都至少相隔 k 个元素\"></a>是否所有 1 都至少相隔 k 个元素</h2><blockquote>\n<p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的数组 <code>nums</code> 以及整数 <code>k</code>。如果所有 <code>1</code> 都至少相隔 <code>k</code> 个元素，则返回 <code>True</code> ；否则，返回 <code>False</code> 。</p>\n</blockquote>\n<div class=\"note info\"><p><strong>示例 1：</strong></p>\n<p><strong><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004857.png\" alt=\"img\"></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums &#x3D; [1,0,0,0,1,0,0,1], k &#x3D; 2</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：每个 1 都至少相隔 2 个元素。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<p><strong><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004907.png\" alt=\"img\"></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums &#x3D; [1,0,0,1,0,1], k &#x3D; 2</span><br><span class=\"line\">输出：false</span><br><span class=\"line\">解释：第二个 1 和第三个 1 之间只隔了 1 个元素。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums &#x3D; [1,1,1,1,1], k &#x3D; 0</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 4：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums &#x3D; [0,1,0,1], k &#x3D; 1</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-解法-1\"><a href=\"#💡-解法-1\" class=\"headerlink\" title=\"💡 解法\"></a>💡 解法</h3><p>只要所有1之间最小的间隔等于k即可。换句话说，如果还没出现k个0就再次出现1，返回false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">kLengthApart</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> distance = k;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] == <span class=\"number\">1</span> &amp;&amp; distance &lt; k)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        distance = nums[i]==<span class=\"number\">0</span> ? distance + <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"绝对差不超过限制的最长连续子数组\"><a href=\"#绝对差不超过限制的最长连续子数组\" class=\"headerlink\" title=\"绝对差不超过限制的最长连续子数组\"></a>绝对差不超过限制的最长连续子数组</h2><blockquote>\n<p>给你一个整数数组 <code>nums</code> ，和一个表示限制的整数 <code>limit</code>，请你返回最长连续子数组的长度，该子数组中的任意两个元素之间的绝对差必须小于或者等于 <code>limit</code> <em>。</em></p>\n<p>如果不存在满足条件的子数组，则返回 <code>0</code> 。</p>\n</blockquote>\n<div class=\"note info\"><p><strong>示例 1：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums &#x3D; [10,1,2,4,7,2], limit &#x3D; 5</span><br><span class=\"line\">输出：4 </span><br><span class=\"line\">解释：满足题意的最长子数组是 [2,4,7,2]，其最大绝对差 |2-7| &#x3D; 5 &lt;&#x3D; 5 。</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-解法-2\"><a href=\"#💡-解法-2\" class=\"headerlink\" title=\"💡 解法\"></a>💡 解法</h3><p>最长连续子数组问题，都可以通过暴力枚举以每一个位置开头的最长连续子数组来求解。要求子数组任意两个元素之间绝对差小于等于<code>limit</code>，而最大的绝对差来自最大值和最小值的差，因此需要动态维护子数组中的最大值和最小值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestSubarray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> limit)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Math.abs(nums[j]-min) &gt; limit || Math.abs(max-nums[j]) &gt; limit)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                count ++;</span><br><span class=\"line\">                max = Math.max(max, nums[j]);</span><br><span class=\"line\">                min = Math.min(min, nums[j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = Math.max(count, res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>提交之后会获得一个<strong>超时</strong>的结果😂。</p>\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>上述过程中，由于没有利用到上一次求取过程中的信息，每一个位置的求解都需要遍历该位置元素之后的整个数组，因此是O(N²)的复杂度。解题和优化的思路和Leetcode第 <a href=\"/posts/4bff4329.html\" title=\"3. 无重复字符的最长子串\">3. 无重复字符的最长子串</a> 题类似，既然开头行不通，那么我们可以反过来求解以每一个位置为结尾的满足要求的最长连续子数组。遍历每一个位置，从右向左查找满足条件的。<code>[left...i-1]</code>一定是满足条件的，通过 <code>i</code> 和其左边的数字，更新left，表示包含 <code>i</code> 之后，符合条件的最左下标。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestSubarray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> limit)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;<span class=\"comment\">//满足条件的最小下标数组值。</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res= <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.length == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt; nums.length; ++ i)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//队列维护</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= left; j --)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果存在相同的值，直接跳过，不处理left</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i] == nums[j])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 从右往左处理，如果有不满足，直接更新left.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Math.abs(nums[j] - nums[i])&gt; limit)&#123;</span><br><span class=\"line\">                left = j + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res = Math.max(res, i - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note warning\"><p>文中题目以及图片来自 <a href=\"https://leetcode-cn.com/contest/weekly-contest-187/\" target=\"_blank\" rel=\"noopener\">Leetcode 第 187 场周赛</a> .</p></div>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722004857.png","popularPost_tmp_gaData":{"updated":"Wed Jul 22 2020 00:49:13 GMT+0800 (中国标准时间)","title":"Leetcode周赛-187","path":"posts/2b34ab19.html","eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722004857.png","excerpt":"<p/>","date":{"_isAMomentObject":true,"_i":"2020-05-03T05:28:15.773Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-03T05:28:15.773Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Leetcode","tags":["Leetcode周赛"],"internalLinks":["posts/4bff4329.html"],"keywords":[],"keywordsLength":0},"length":3336},{"title":"Java异常体系","image":"https://gitee.com/jingshanccc/image/raw/master/image/20200722004813.png","abbrlink":"f885a170","_content":"\n<p></p>\n\n<!-- more -->\n\n## Java的异常体系\n\nJava中的异常都是Throwable的子类，分为Error和Exception，Error用来表示JVM无法处理的错误，Exception分为受检异常和不受检异常，又叫编译期异常和运行时异常，其区别是编译期异常如果不处理会编译失败，运行时异常可以通过编译。\n\n运行时异常时RuntimeException及其所有子类，除此之外都是编译期异常。其体系结构如下图：\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722004826.png)\n\nError下有OutOfMemoryError和StackOverflowError，Exception下有RuntimeException和IOException。常见的Runtime有NumberFormatException，ClassNotFoundException，ClassCastException，CloneNotSpportException，IndexOutOfBoundException，常见的IOException有FileNotFoundException，FileExistsException，EncodeException，DecodeException，SocketException等。\n\n## 异常的处理\n\n### try catch finally\n\n1. 逻辑：如果有finally，执行完try会执行finally，如果有finally有return或者让程序结束的语句，则直接结束，否则会回到try中执行。\n\n2. 字节码：先是try中的翻译成机器指令(比如4-8条)，然后是finally块的指令(比如9-10条)，然后是return(11条)。接下来的字节码是catch中的指令(12-14)，然后是final的指令(15-16跟第一个finally一样的)，最后是goto指令(17)。每个catch有这么一段，goto指令都指向最后一句return(38)。最后还会有未被catch的其他异常，字节码结构为astore存储异常(33)，finally的指令(34-35)，aload取出异常，然后是抛出异常的athrow指令，最后一句是return(38条).也就是所有catch之后goto的位置。接下来是异常表Exception Table决定在抛异常后跳转到的位置，格式如下：\n\n   | from指令开始行 | to指令最后行 | target跳转到目标指令行号 |   type异常类型    |                             说明                             |\n   | :------------: | :----------: | :----------------------: | :---------------: | :----------------------------------------------------------: |\n   |       4        |      8       |            12            | Exception1--异常1 |                 在try中抛出了异常Exception1                  |\n   |       4        |      8       |            18            | Exception2--异常2 |                 在try中抛出了异常Exception2                  |\n   |       4        |      8       |            33            |   any--其他异常   |                 在try中抛出了未被catch的异常                 |\n   |       12       |      17      |            33            |   any--其他异常   |               在处理Exception1时抛出了其他异常               |\n   |       18       |      23      |            33            |   any--其他异常   |               在处理Exception2时抛出了其他异常               |\n   |       33       |      37      |            33            |   any--其他异常   | 在处理其他异常的时候抛出了异常，准确来说是处理其他异常时finally抛出的异常 |\n\n### throw和throws\n\n1. throw：用在方法体内，抛出异常，在运行时是一定会抛出的，由上层调用者处理抛出的异常\n2. throws：用在方法声明中，表示在运行时可能抛出异常，由上层调用者处理","source":"_posts/Java异常体系.md","raw":"---\ntitle: Java异常体系\ntags:\n  - Java\ncategories:\n  - 笔记\nimage: 'https://gitee.com/jingshanccc/image/raw/master/image/20200722004813.png'\nabbrlink: f885a170\n---\n\n<p></p>\n\n<!-- more -->\n\n## Java的异常体系\n\nJava中的异常都是Throwable的子类，分为Error和Exception，Error用来表示JVM无法处理的错误，Exception分为受检异常和不受检异常，又叫编译期异常和运行时异常，其区别是编译期异常如果不处理会编译失败，运行时异常可以通过编译。\n\n运行时异常时RuntimeException及其所有子类，除此之外都是编译期异常。其体系结构如下图：\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722004826.png)\n\nError下有OutOfMemoryError和StackOverflowError，Exception下有RuntimeException和IOException。常见的Runtime有NumberFormatException，ClassNotFoundException，ClassCastException，CloneNotSpportException，IndexOutOfBoundException，常见的IOException有FileNotFoundException，FileExistsException，EncodeException，DecodeException，SocketException等。\n\n## 异常的处理\n\n### try catch finally\n\n1. 逻辑：如果有finally，执行完try会执行finally，如果有finally有return或者让程序结束的语句，则直接结束，否则会回到try中执行。\n\n2. 字节码：先是try中的翻译成机器指令(比如4-8条)，然后是finally块的指令(比如9-10条)，然后是return(11条)。接下来的字节码是catch中的指令(12-14)，然后是final的指令(15-16跟第一个finally一样的)，最后是goto指令(17)。每个catch有这么一段，goto指令都指向最后一句return(38)。最后还会有未被catch的其他异常，字节码结构为astore存储异常(33)，finally的指令(34-35)，aload取出异常，然后是抛出异常的athrow指令，最后一句是return(38条).也就是所有catch之后goto的位置。接下来是异常表Exception Table决定在抛异常后跳转到的位置，格式如下：\n\n   | from指令开始行 | to指令最后行 | target跳转到目标指令行号 |   type异常类型    |                             说明                             |\n   | :------------: | :----------: | :----------------------: | :---------------: | :----------------------------------------------------------: |\n   |       4        |      8       |            12            | Exception1--异常1 |                 在try中抛出了异常Exception1                  |\n   |       4        |      8       |            18            | Exception2--异常2 |                 在try中抛出了异常Exception2                  |\n   |       4        |      8       |            33            |   any--其他异常   |                 在try中抛出了未被catch的异常                 |\n   |       12       |      17      |            33            |   any--其他异常   |               在处理Exception1时抛出了其他异常               |\n   |       18       |      23      |            33            |   any--其他异常   |               在处理Exception2时抛出了其他异常               |\n   |       33       |      37      |            33            |   any--其他异常   | 在处理其他异常的时候抛出了异常，准确来说是处理其他异常时finally抛出的异常 |\n\n### throw和throws\n\n1. throw：用在方法体内，抛出异常，在运行时是一定会抛出的，由上层调用者处理抛出的异常\n2. throws：用在方法声明中，表示在运行时可能抛出异常，由上层调用者处理","slug":"Java异常体系","published":1,"date":"2020-07-16T14:45:35.463Z","updated":"2020-07-21T16:48:33.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck29002nz4ej06j19prj","content":"<p></p>\n\n<a id=\"more\"></a>\n\n<h2 id=\"Java的异常体系\"><a href=\"#Java的异常体系\" class=\"headerlink\" title=\"Java的异常体系\"></a>Java的异常体系</h2><p>Java中的异常都是Throwable的子类，分为Error和Exception，Error用来表示JVM无法处理的错误，Exception分为受检异常和不受检异常，又叫编译期异常和运行时异常，其区别是编译期异常如果不处理会编译失败，运行时异常可以通过编译。</p>\n<p>运行时异常时RuntimeException及其所有子类，除此之外都是编译期异常。其体系结构如下图：</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004826.png\" alt=\"图片\"></p>\n<p>Error下有OutOfMemoryError和StackOverflowError，Exception下有RuntimeException和IOException。常见的Runtime有NumberFormatException，ClassNotFoundException，ClassCastException，CloneNotSpportException，IndexOutOfBoundException，常见的IOException有FileNotFoundException，FileExistsException，EncodeException，DecodeException，SocketException等。</p>\n<h2 id=\"异常的处理\"><a href=\"#异常的处理\" class=\"headerlink\" title=\"异常的处理\"></a>异常的处理</h2><h3 id=\"try-catch-finally\"><a href=\"#try-catch-finally\" class=\"headerlink\" title=\"try catch finally\"></a>try catch finally</h3><ol>\n<li><p>逻辑：如果有finally，执行完try会执行finally，如果有finally有return或者让程序结束的语句，则直接结束，否则会回到try中执行。</p>\n</li>\n<li><p>字节码：先是try中的翻译成机器指令(比如4-8条)，然后是finally块的指令(比如9-10条)，然后是return(11条)。接下来的字节码是catch中的指令(12-14)，然后是final的指令(15-16跟第一个finally一样的)，最后是goto指令(17)。每个catch有这么一段，goto指令都指向最后一句return(38)。最后还会有未被catch的其他异常，字节码结构为astore存储异常(33)，finally的指令(34-35)，aload取出异常，然后是抛出异常的athrow指令，最后一句是return(38条).也就是所有catch之后goto的位置。接下来是异常表Exception Table决定在抛异常后跳转到的位置，格式如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">from指令开始行</th>\n<th align=\"center\">to指令最后行</th>\n<th align=\"center\">target跳转到目标指令行号</th>\n<th align=\"center\">type异常类型</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">4</td>\n<td align=\"center\">8</td>\n<td align=\"center\">12</td>\n<td align=\"center\">Exception1–异常1</td>\n<td align=\"center\">在try中抛出了异常Exception1</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">8</td>\n<td align=\"center\">18</td>\n<td align=\"center\">Exception2–异常2</td>\n<td align=\"center\">在try中抛出了异常Exception2</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">8</td>\n<td align=\"center\">33</td>\n<td align=\"center\">any–其他异常</td>\n<td align=\"center\">在try中抛出了未被catch的异常</td>\n</tr>\n<tr>\n<td align=\"center\">12</td>\n<td align=\"center\">17</td>\n<td align=\"center\">33</td>\n<td align=\"center\">any–其他异常</td>\n<td align=\"center\">在处理Exception1时抛出了其他异常</td>\n</tr>\n<tr>\n<td align=\"center\">18</td>\n<td align=\"center\">23</td>\n<td align=\"center\">33</td>\n<td align=\"center\">any–其他异常</td>\n<td align=\"center\">在处理Exception2时抛出了其他异常</td>\n</tr>\n<tr>\n<td align=\"center\">33</td>\n<td align=\"center\">37</td>\n<td align=\"center\">33</td>\n<td align=\"center\">any–其他异常</td>\n<td align=\"center\">在处理其他异常的时候抛出了异常，准确来说是处理其他异常时finally抛出的异常</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<h3 id=\"throw和throws\"><a href=\"#throw和throws\" class=\"headerlink\" title=\"throw和throws\"></a>throw和throws</h3><ol>\n<li>throw：用在方法体内，抛出异常，在运行时是一定会抛出的，由上层调用者处理抛出的异常</li>\n<li>throws：用在方法声明中，表示在运行时可能抛出异常，由上层调用者处理</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p></p>","more":"<h2 id=\"Java的异常体系\"><a href=\"#Java的异常体系\" class=\"headerlink\" title=\"Java的异常体系\"></a>Java的异常体系</h2><p>Java中的异常都是Throwable的子类，分为Error和Exception，Error用来表示JVM无法处理的错误，Exception分为受检异常和不受检异常，又叫编译期异常和运行时异常，其区别是编译期异常如果不处理会编译失败，运行时异常可以通过编译。</p>\n<p>运行时异常时RuntimeException及其所有子类，除此之外都是编译期异常。其体系结构如下图：</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004826.png\" alt=\"图片\"></p>\n<p>Error下有OutOfMemoryError和StackOverflowError，Exception下有RuntimeException和IOException。常见的Runtime有NumberFormatException，ClassNotFoundException，ClassCastException，CloneNotSpportException，IndexOutOfBoundException，常见的IOException有FileNotFoundException，FileExistsException，EncodeException，DecodeException，SocketException等。</p>\n<h2 id=\"异常的处理\"><a href=\"#异常的处理\" class=\"headerlink\" title=\"异常的处理\"></a>异常的处理</h2><h3 id=\"try-catch-finally\"><a href=\"#try-catch-finally\" class=\"headerlink\" title=\"try catch finally\"></a>try catch finally</h3><ol>\n<li><p>逻辑：如果有finally，执行完try会执行finally，如果有finally有return或者让程序结束的语句，则直接结束，否则会回到try中执行。</p>\n</li>\n<li><p>字节码：先是try中的翻译成机器指令(比如4-8条)，然后是finally块的指令(比如9-10条)，然后是return(11条)。接下来的字节码是catch中的指令(12-14)，然后是final的指令(15-16跟第一个finally一样的)，最后是goto指令(17)。每个catch有这么一段，goto指令都指向最后一句return(38)。最后还会有未被catch的其他异常，字节码结构为astore存储异常(33)，finally的指令(34-35)，aload取出异常，然后是抛出异常的athrow指令，最后一句是return(38条).也就是所有catch之后goto的位置。接下来是异常表Exception Table决定在抛异常后跳转到的位置，格式如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">from指令开始行</th>\n<th align=\"center\">to指令最后行</th>\n<th align=\"center\">target跳转到目标指令行号</th>\n<th align=\"center\">type异常类型</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">4</td>\n<td align=\"center\">8</td>\n<td align=\"center\">12</td>\n<td align=\"center\">Exception1–异常1</td>\n<td align=\"center\">在try中抛出了异常Exception1</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">8</td>\n<td align=\"center\">18</td>\n<td align=\"center\">Exception2–异常2</td>\n<td align=\"center\">在try中抛出了异常Exception2</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">8</td>\n<td align=\"center\">33</td>\n<td align=\"center\">any–其他异常</td>\n<td align=\"center\">在try中抛出了未被catch的异常</td>\n</tr>\n<tr>\n<td align=\"center\">12</td>\n<td align=\"center\">17</td>\n<td align=\"center\">33</td>\n<td align=\"center\">any–其他异常</td>\n<td align=\"center\">在处理Exception1时抛出了其他异常</td>\n</tr>\n<tr>\n<td align=\"center\">18</td>\n<td align=\"center\">23</td>\n<td align=\"center\">33</td>\n<td align=\"center\">any–其他异常</td>\n<td align=\"center\">在处理Exception2时抛出了其他异常</td>\n</tr>\n<tr>\n<td align=\"center\">33</td>\n<td align=\"center\">37</td>\n<td align=\"center\">33</td>\n<td align=\"center\">any–其他异常</td>\n<td align=\"center\">在处理其他异常的时候抛出了异常，准确来说是处理其他异常时finally抛出的异常</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<h3 id=\"throw和throws\"><a href=\"#throw和throws\" class=\"headerlink\" title=\"throw和throws\"></a>throw和throws</h3><ol>\n<li>throw：用在方法体内，抛出异常，在运行时是一定会抛出的，由上层调用者处理抛出的异常</li>\n<li>throws：用在方法声明中，表示在运行时可能抛出异常，由上层调用者处理</li>\n</ol>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722004826.png","popularPost_tmp_gaData":{"updated":"Wed Jul 22 2020 00:48:33 GMT+0800 (中国标准时间)","title":"Java异常体系","path":"posts/f885a170.html","eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722004826.png","excerpt":"<p></p>","date":{"_isAMomentObject":true,"_i":"2020-07-16T14:45:35.463Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-07-16T14:45:35.463Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"笔记","tags":["Java"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1296},{"title":"Java基础问题总结","image":"https://gitee.com/jingshanccc/image/raw/master/image/20200722004655.jpg","abbrlink":"503970b4","_content":"\n<p/>\n\n<!-- more -->\n\n{% note info %}\n\n长文预警  🤣 谨慎食用 💡 善用搜索和目录\n\n{% endnote %}\n\n## 语言特性\n\n### 说说Java语言的特点？\n\n1. 平台无关性：实现一次编译，到处运行\n2. 相对安全的内存管理和访问机制，避免大部分内存泄露和指针越界\n3. 热点代码检测和运行时编译及优化，使程序随运行时间增长获得更高性能\n\n### Java如何实现平台无关？\n\nJava的源代码经过编译后生成的字节码是和计算机体系结构无关的指令，可以在任何机器上解释执行，动态地转换成本地机器代码，而这个过程是由JVM完成的，不同平台使用不同的JVM，屏蔽了不同操作系统的差异。\n\n### Java是值传递还是引用传递？\n\n> 值传递是指方法接收调用者提供的值，引用传递是指方法接收调用者提供的变量地址\n\nJava是值传递，方法接受的是参数的副本，对于基本数据类型，改变入参不会影响实参；对于对象，接受的是对象的引用，改变其属性值会影响实参，但是改变这个引用并不会让实参引用新的对象\n\n### 谈谈深拷贝和浅拷贝？\n\n深拷贝完全拷贝基本数据类型和引用数据类型，浅拷贝值复制基本引用类型和引用变量，没有复制引用变量指向的实际对象。修改克隆对象可能影响原对象，不安全。\n\n### 什么是反射？\n\n反射是指在运行状态中，可以获得任意一个类的属性和方法，可以调用任意一个对象的方法和属性。反射破坏了**封装性**和**泛型约束**。\n\n### Class类的作用？\n\n在程序运行期间，Java运行时系统为所有对象维护一个运行时类型标识，这个信息会跟踪每个对象所属的类，虚拟机利用运行时类型信息选择要执行的正确方法，保存这些信息的类就是Class，可以通过`类名.class`、`对象.getClass()`、`Class.forName(类的全限定名)`来获取Class对象\n\n### 什么是注解、元注解？\n\n注解是一种标记，使类/接口/方法/属性附加额外信息，完成特定功能。\n\n元注解是注解的注解，用于标识注解的相关信息。\n\n1. @Target({参数列表})：注解作用域，可填参数为：CONSTRUCTOR-构造方法、FIELD-属性、METHOD-方法、PACKAGE-包、LOCAL_VARIABLE-局部变量、TYPE-类/接口\n2. @Retention(参数)：生命周期，可填参数为：RUNTIME-运行时注解，可以通过**反射**获取、SOURCE-源代码注解、CLASS-编译时注解，运行时注解\n3. @Inherited：可继承到子类，但不能继承到子类的方法\n4. @Document：生成java-doc会包含注解信息\n\n{% fold 如何获取注解 %}\n\n通过反射获取运行时的注解信息，getAnnotations方法\n\n{% endfold %}\n\n### 什么是泛型？\n\n泛型可以看作一种数据类型，用来接收未知的数据类型，解决不确定对象具体类型时可能发生强制转换异常等问题，Java中的泛型时防止有效输入的，在编译器有效。通过反编译可以看到如果泛型T没有被指定，则会转换为多态，即类型声明为Object；在使用对应数据时将在返回之前加一条checkcast来做类型转换。\n\n### 异常体系\n\nThrowable下有Error和Exception，Error用来标识JVM无法处理的错误，Exception分为受检异常和不受检异常，也叫编译期异常和运行时异常，编译期异常如果不处理会编译失败，运行时异常可以通过编译，RuntimeException及其所有子类都是运行时异常，除此之外都是编译期异常。其体系结构图如下：\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722004710.png)\n\n处理过程参见{% post_link Java异常体系 %}\n\n## 数据类型\n\n### 基本数据类型\n\n1. byte：1字节\n2. char：2字节\n3. int：4字节\n4. short：2字节\n5. long：8字节\n6. float：4字节\n7. double：8字节\n8. boolean：JVM编译时会转为int类型存储，true->1,false->0\n\n### 包装类型自动装箱/拆箱是什么？\n\n{% note info %}\n\n每个基本数据类型都有自己的包装类型，之间的自动转化称为拆箱和装箱。封装成包装类型主要是面向对象的设计，可以提供更方便的操作某种数据类型的方法，例如` parseInt() `。\n\n包装类型设有缓存池，在使用` valueOf() `的方法时先查看是否在缓存池中，没有再通过 ` new Integer() `在堆中创建一个新对象。\n\n{% endnote %}\n\n### String为什么是不可变对象？但是又可以修改它的值？\n\n在Java中String被**final**关键字修饰，因此是不可被继承的。存储字符串内容的char数组也通过**final**修饰，并且不提供修改数组的方法，因此String是不可变的。Java9中改用byte数组存放，并用coder指定编码类型（0-单字节Latin-1，1-双字节UTF-16）。主要是为了节省空间。\n\n对一个String对象的修改实际上都是创建了一个新String对象，再引用该对象。\n\n### String和StringBuidler和StringBuffer的区别\n\nString字符串相加时底层通过StringBuilder实现，但每次都会新生成一个StringBuidler对象且最终通过toString方法返回拼接后的字符串。StringBuilder可解决在字符串相加时创建多个字符串占用空间多效率低下的问题，底层是未被final修饰的初始容量为16的byte数组，可自动扩容。StringBuffer使用synchronized修饰，线程安全。\n\n## 面向对象\n\n### 谈谈你对面向对象的理解？\n\n面向过程让计算机有步骤地顺序做一件事，是过程化思维，使用面向过程语言开发大型项目，模块之间耦合严重，面向对象区别与面向过程，强调高内聚低耦合，对现实事物进行抽象并映射成对象，定义共性行为，再解决实际问题。\n\n### 面向对象的三个特性？\n\n1. 封装：是对象功能内聚的表现形式，对属性、数据、敏感行为实现隐藏，对属性的访问和修改必须通过公共接口实现。封装使对象关系变得简单。\n2. 继承：用来扩展一个类，子类继承父类的部分属性和行为使模块具有复用性，继承是“is a”的关系。\n3. 多态：以封装和继承为基础，根据运行时对象实际类型使同一行为具有不同表现形式。因为在编译时无法确定最终调用的方法体，在运行时由JVM动态绑定，调用合适的重写方法。\n\n### 重载和重写的区别？\n\n1. 重载：在同一个类中，对同名函数的不同实现，其参数类型/顺序/个数不同。但不能以返回值来作为标准，因为我们在调用方法时有时并不关注返回值。对于编译器来说，方法名称和参数列表构成了一个唯一的方法签名，重载在编译时就知道该调用哪个方法，因此属于静态绑定，并不属于**多态**。\n2. 重写：在子类中，重写父类方法，要求返回相同类型或子类型，且访问权限不能变小，抛出的异常类型不能变大。\n\n### 对象的通用方法？\n\n1. equals：判断对象是否相等，默认使用==，可重写equals方法实现自定义比较逻辑。对于基本数据类型，判断值是否相等，对于引用类型，判断是否引用自同一对象\n2. hashCode：对象的散列值，等价的对象散列值一定相等，反之不然。在重写equals方法时应同时重写hashCode，保证等价的对象散列值相等\n3. toString：默认返回类名+@+数值，数值为散列值的无符号十六进制表示\n4. clone：克隆，默认用protected修饰，如果没有显式重写clone方法编译器报错时protected的访问错误了；如果重写了clone但没有让类实现Cloneable接口，将会抛出CloneNotSupported异常。默认实现的是浅拷贝，可以通过重写实现深拷贝\n5. getClass：获取对象的类类型\n6. finalize：在对象被回收时可能被调用。在finalize中重新与引用链上的对象建立关联就可以被移出回收集合不被回收\n7. 作为锁的几个方法：wait、notify、notifyAll\n\n### 内部类的作用是什么，有哪些分类？\n\n内部类方法可以访问定义这个内部类的作用域中的数据，包括private。编译器会将内部类转换为常规的类文件，以$分隔外部类和内部类名。\n\n1. 静态内部类：只加载一次，可通过外部类名.内部类名直接访问，可以访问外部类的所有静态属性和方法。HashMap的Node节点、ReentrantLock中的Sync都是静态内部类\n2. 成员内部类：外部类的每个对象都会加载一次，不可以定义静态成员和方法，可访问外部类的所有内容\n3. 局部内部类：定义在方法内，不能声明访问修饰符，只能定义实例成员变量和实例方法\n4. 匿名内部类：只用一次的没名字的类，字节码文件以数字编号命名\n\n### 接口和抽象类的异同？\n\n> 接口和抽象类对实体类进行更高层次的抽象，仅定义公共行为和特征。\n\n|   维度   |                       接口                       |                            抽象类                            |\n| :------: | :----------------------------------------------: | :----------------------------------------------------------: |\n| 成员变量 |                      无要求                      |                 默认public static final常量                  |\n| 构造方法 |              有构造方法，不能实例化              |                   没有构造方法，不能实例化                   |\n|   方法   | 抽象类可以没有抽象方法，但有抽象方法一定是抽象类 | 默认public abstract，JKD8支持默认/静态方法，JDK9支持私有方法 |\n|   继承   |                      单继承                      |                            多继承                            |\n\n抽象类体现is-a关系，接口体现like-a关系。抽象类是对同类事物相对具体的抽象，接口是对行为的定义。\n\n### 子类初始化顺序？\n\n父类静态代码块和静态变量->子类静态代码块和静态变量->父类普通代码块和普通变量->父类构造方法->子类普通代码块和普通变量->子类构造方法\n\n## 集合\n\n### 说一说ArrayList\n\nArrayList是容量可变的非线程安全列表，使用数组实现，因此支持对元素的快速随机访问，但是插入和删除速度慢，扩容时会创建更大的数组，把原有数组复制到新数组。\n\n1. elementData是ArrayList的数据域，被transient修饰，序列化时会调用writeObject写入流，反序列化时调用readObject重新赋值到新对象的elementData\n2. size是当前实际大小，即为elementData大小\n3. modCount记录了ArrayList结构性变化的次数，继承自AbstractList，所有涉及结构变化的方法都会增加该值。通过比较expectModCount和modCount值是否相等，抛出ConcurrentModificationException，保证了在序列化和迭代过程中数组不会被修改，称为**fail-fast**机制\n\n### 说一说LinkedList\n\nLinkedList本质是双向链表，在插入和删除上速度更快，但是随机访问元素慢，实现了Deque接口，具有队列和栈的性质。通过附加引用的方式将零散的内存单元关联起来，内存利用率高\n\n### Set有什么特点，有哪些实现？\n\nSet不允许元素重复，常用实现有HashSet、LinkedHashSet、TreeSet\n\n1. HashSet：通过HashMap实现，map的key即set存储的元素，所有value都为Object类型常量，不保证有序，线程不安全。对于包装类型通过值判重，对于引用类型，通过hashCode和equals判重\n2. LinkedHashSet：继承自HashSet，通过LinkedHashMap实现，使用双向链表维护元素插入顺序\n3. TreeSet：通过TreeMap实现，添加元素到集合时按照比较规则将其插入到合适的位置，保证集合有序\n\n### TreeMap有什么特点？\n\nTreeMap基于红黑树实现，增删改查的平均和最差时间复杂度均为O(logn)，最大特点是key有序，key必须实现Comparable接口或提供Comparator比较器，因此不能为null。\n\n在排序时，如果比较器不为空，则通过比较器的compare方法，否则使用key实现的Comparable接口的compareTo方法，如果都没有则抛出异常。\n\n关于红黑树的其他特性，参见{% post_link 红黑树 %}\n\n### HashMap相关问题\n\n#### HashMap有什么特性？\n\n1. HashMap存储键值对实现快速存取，允许为null（因为对null做了特殊处理），key不可重复，重复则覆盖原值\n2. 非同步，线程不安全\n3. 无序\n\n#### HashMap底层原理是什么？\n\n在JDK8之前底层实现是数组+链表，在JDK8改为数组+链表/红黑树，节点类型从Entry变为Node。成员变量包括存储数据的table数组、元素数量size、负载因子loadFactor。默认初始化容量是16，扩容容量必须是2的幂，默认负载因子为0.75\n\n#### 如何计算key在table数组中的位置？\n\n在JDK8之前：对于字符串类型，调用stringHash32计算；对于其他类型，使用一个不变的随机值hashSeed和key的hashCode异或之后，再通过移位和异或，最终和表的长度与运算获得最终的地址。这样既减少了哈希冲突又比取模效率更高\n\n在JDK8：当key为null时，返回0；否则通过key的hashCode与高16位做异或运算得到在数组中的位置，这种hash计算将高位的变化扩展到低位，避免因表范围的限制，高位不会在索引计算中使用，可以减少哈希冲突。\n\n#### get函数的实现？\n\n① JDK8之前：\n\n{% note warning %}\n\nkey为null，调用getForNullKey方法，如果size为0表示链表为空，返回null；否则遍历table[0]链表，找到key为null的节点则返回其value，否则返回null。\n\n{% endnote %}\n\n{% note info %}\n\nkey不为null，调用getEntry方法，当size不为0，计算key的hash值，遍历对应位置的链表，如果key和hash都相等则返回该节点的value\n\n{% endnote %}\n\n② JDK8：\n\n调用getNode函数，如果table数组不为空，则判断第一个节点和查找的key和hash相等则返回；否则判断其他节点，如果是TreeNode则以getTreeNode在树中查找，否则遍历链表查找，最终返回对应的节点的值或null。\n\n#### put函数的实现？\n\n① JDK8之前：\n\n{% note warning %}\n\nkey为null，直接存入table[0]。\n\n{% endnote %}\n\n{% note info %}\n\nkey不为null，计算hash值，遍历对应位置的链表，如果key存在更新value，返回旧value；否则将modCount++，使用addEntry方法增加一个节点并返回null\n\n{% endnote %}\n\n② JDK8：\n\n如果table为空/长度为0则进行扩容，否则计算key对应的位置，不存在则调用newNode创建一个节点。如果存在且是TreeNode，则调用putTreeVal增加一个树节点，并维持平衡；如果是链表，则遍历插入/更新。此时如果树的size超过阈值8则通过treeifyBin方法，当table的长度大于64时将其转为红黑树，没超过时进行扩容。\n\n#### 扩容为什么要2的幂，具体是怎么扩容的？\n\n保证为2的幂首先是在进行hash计算的时候，可以用与来替代取模运算，提高效率，其次可以减少碰撞，均匀分布。\n\n① JDK8之前：\n\n如果当前容量达到了最大容量`MAXIMUM_CAPACITY`，将阈值设置为Integer最大值，停止扩容；否则计算新容量，将阈值设为`newCapacity * loadFactor`和`MAXIMUM_CAPACITY + 1`的较小值，创建新容量的Entry数组，通过transfer将数据转移。遍历链表，重新计算位置，使用头插法将元素转移。\n\n② JDK8：\n\n如果当前容量`oldCap`达到了最大容量，将阈值设置为Integer最大值，停止扩容；当`oldCap<<1`不超过最大容量则扩大为两倍；当当前扩容阈值`oldThr>0`，则将其作为新容量；否则将新容量设为默认的16，阈值为12\n\n数据的转移：当节点为TreeNode，调用split方法对树进行修建，当树的结点数小于6则将其转为链表；当节点为链表，将其拆分为hash值超过旧容量的部分和未超出的部分，对于`hash & oldCap = 0`的部分不需要处理，否则通过旧下表+旧容量计算出新下标并完成转移。\n\n#### 为什么负载因子是0.75？\n\n这是个折中的数字，0.5造成了一半空间的浪费，1则在扩容时无法处理其他put，0.75是空间和时间的均衡，避免了较多的hash冲突（实验获得）。\n\n#### HashMap扩容容易死循环你了解吗？\n\n在JDK8之前，使用头插法迁移元素，链表节点之间存在指针引用关系，因此在并发修改时容易出现死循环。JDK8改用尾插法，并且没有指针引用关系，解决了死循环的问题。\n\n但是在并发下扩容时容易造成数据丢失：首先是当某个线程在transfer时，其他线程新增的元素可能在已遍历过的链表上，因此这部分数据就丢失了；在多个线程resize的过程中，新创建了多个newTable，这是线程内的局部变量，线程之间不可见，在`table=newTable`时会覆盖其他线程的操作。因此HashMap是**线程不安全**的。\n\n### 有哪些线程安全的容器？\n\n1. 使用synchronized修饰：Vector、HashTable、Collections.synchronizedXX\n\n2. 并发容器：\n\n   {% note info %}\n\n   CopyOnWriteArrayList：add中使用可重入锁，复制一份，读写分离，在写操作时操作副本，然后将原数组指向新数组，保证最终一致性\n\n   {% endnote %}\n\n   {% note success %}\n\n   ConcurrentHashMap：1.7使用分段锁不锁整张表仅锁住某一段seagment。1.8使用红黑树，通过CAS操作和synchronized保证线程安全同时提高效率。\n\n   {% endnote %}\n\n## 多线程高并发\n\n### JMM是什么？有什么作用？\n\n> JMM是Java内存模型，JMM主要是影响线程共享的内存可见性问题，Java线程之间的通信由JMM控制。\n\n所有变量存储于主内存，每个线程有自己的工作内存，保存被该线程使用的变量的主内存副本，线程对变量的操作必须在工作内存中进行，不能直接读写主内存数据。不同线程间无法直接访问对方工作内存的变量，线程通信必须经过主内存。关于工作内存和主内存的交互，JMM定义了8种原子操作：\n\n|  操作  | 作用变量范围 |                  作用                  |\n| :----: | :----------: | :------------------------------------: |\n|  lock  |    主内存    |        把变量标识为线程独占状态        |\n| unlock |    主内存    |         释放处于锁定状态的变量         |\n|  read  |    主内存    |       把变量从主内存传到工作内存       |\n|  load  |   工作内存   |    把read的值放入工作内存的变量副本    |\n|  use   |   工作内存   |     把工作内存的变量值传给执行引擎     |\n| assign |   工作内存   | 把从执行引擎接收的值赋给工作内存的变量 |\n| store  |   工作内存   |      把工作内存的变量值传到主内存      |\n| write  |    主内存    |   把store取到的变量值放入主内存变量    |\n\n### 什么是指令重排序？\n\n为了提高性能，编译器和处理器通常会对指令进行重排序，重排序指从源代码到指令序列的重排序，分为以下三种：\n\n1. 编译器优化的重排序：在不改变单线程程序语义的前提下重排语句的执行顺序\n2. 指令级并行的重排序：如果不存在数据依赖，处理器可以改变语句对应机器指令的执行顺序\n3. 内存系统的重排序\n\n### as-if-serial和happens-before了解吗？\n\nas-if-serial语义是指不论如何重排序，**单线程**程序的执行结果不能改变。因此，编译器和处理器不会对存在数据依赖关系的操作重排序\n\nhappens-before是先行发生原则，对有顺序性保障的禁止重排序，保证了正确同步的**多线程**程序的执行结果不变\n\n两者都是为了不改变程序执行结果的前提下尽可能提高程序执行**并行度**\n\n### 什么是原子性、可见性、有序性？\n\n1. 原子性：基本数据类型的访问都具备原子性，但是64位长度的long和double需要被划分为两次32位操作，因此不具备原子性。更大范围的原子性，JMM提供了lock和unlock操作，对应到更高层次的字节码指令monitorenter和monitorexit，也就是Java代码中的synchronized\n2. 可见性：指当一个线程修改了共享变量之后，其他线程能够立即得知修改。JMM通过在变量修改后将值同步会主内存，在变量读取前从主内存刷新的方式实现可见性。volatile通过这种方式保证可见性，synchronized则通过unlock前必须先执行sotre和write来保证\n3. 有序性：在本线程内观察所有操作是有序的，在一个线程内观察另一个线程，所有操作都是无序的。前半句指as-if-serial语义，后半句指指令重排序和工作内存与主内存延迟现象。\n\n### 对volatile有什么理解？\n\nvolatile的内存语义是：在写一个volatile变量时，把该线程工作内存的值立即刷新到主内存中；在读一个volatile变量时，把该线程的工作内存值置为无效，从主内存中读取\n\n当变量被volatile修饰后，具备两种特性：\n\n1. 保证变量对所有线程可见\n2. 禁止指令重排序优化：在写操作之前，汇编指令有**lock**前缀，相当于一个内存屏障，后面的指令不能排在内存屏障之前，同时会先对缓存变量做一次**store和write**操作，写回主内存中\n\n### final可以保证可见性吗？\n\n可以，被final修饰的字段在构造方法中一旦被初始化完成，并且构造方法没有把this引用传递出去（this引用逃逸），在其他线程中就能看见final字段值。\n\nJMM禁止把**写final域**重排序到构造方法之外，在写final之后，构造方法return之前，有一个**Store屏障**，确保在对象引用为其他线程课件只之前，对象的final域已初始化过。\n\n在初次**读final域**时，JMM要求必须先读这个final域所在的对象引用，通过一个**Load屏障**，确保初次读对象引用和初次读final域不会被重排序\n\n### 谈一谈synchronized\n\nsynchronized关键字解决的是多个线程之间访问同一资源的同步问题，被synchronized修饰的同步代码块可以保证在任意时刻只能有一个线程执行。可以通过javap看到相关的字节码，在进入和退出同步块时有monitorenter和monitorexit指令，这里的monitor是存在Java对象头中的监视器，对象头中有两部分数据，一是classPointer指向对象的类，二是MarkWord，存储运行时对象的各种信息，包括hashCode、gc年龄、**锁状态**等。锁状态由锁标志位标识，标志位的指针指向monitor对象。\n\n#### monitor对象\n\n```c++\nObjectMonitor() {\n    _header       = NULL;\n    _count        = 0; // 记录个数\n    _waiters      = 0,\n    _recursions   = 0;\n    _object       = NULL;\n    _owner        = NULL; //指向拥有锁的线程\n    _WaitSet      = NULL; // 处于wait状态的线程，会被加入到_WaitSet\n    _WaitSetLock  = 0 ;\n    _Responsible  = NULL ;\n    _succ         = NULL ;\n    _cxq          = NULL ;\n    FreeNext      = NULL ;\n    _EntryList    = NULL ; // 处于等待锁block状态的线程，会被加入到该列表\n    _SpinFreq     = 0 ;\n    _SpinClock    = 0 ;\n    OwnerIsThread = 0 ;\n}\n```\n\n多个线程进入同步代码块后，首先进入**_EntryList**，当线程获取对象的monitor之后，将 **_owner** 设置为当前线程，同时**count**++；当线程调用**wait**方法，将释放当前持有的monitor， **_owner**设置为null，**count**--，同时进入 **_WaitSet**等待被唤醒；当前线程执行完毕后，也将释放monitor，同时复位**count**，以便其他线程进入获取monitor\n\n#### 锁类型\n\n在早期版本中，synchronized属于重量级锁，基于操作系统底层的**MutexLock互斥锁**来实现，线程的挂起和切换需要从用户态到内核态的转换，时间成本高；JDK6对synchronized做了优化，引入了自旋锁、偏向锁、轻量级锁、锁粗化和锁消除等，提高锁的效率，因此锁一共有四个状态，分别是无锁（01-0）、偏向锁（01-1）、轻量级锁（00）、重量级锁（10）\n\n1. 自旋锁：如果获取不到锁则会等待一段时间，不直接挂起线程，避免上下文切换的时间消耗。后来又引进了**自适应自旋锁**，其等待次数是自适应的，更加聪明\n2. 偏向锁：认为每次获取当前锁的都是同一线程，对象头MarkWord中的偏向线程ID存储了这个线程，因此加锁时只需要检查MarkWord中的偏向线程iID是否是当前线程，如果是则直接获取锁，否则就要检测当前锁状态是否是偏向锁，如果是则将当前线程id设置到MarkWord中的偏向线程ID，否则通过CAS竞争锁。此时如果有第二个线程竞争锁，会发现偏向线程id已指向了线程1，则出现了锁竞争，会触发重新偏向或升级到轻量级锁，大部分情况下是升级\n3. 轻量级锁：线程1获取锁，如果锁为无锁状态，将MarkWord拷贝到当前线程栈帧中的锁记录LockRecord，JVM将通过CAS尝试将MarkWord中的Lock Word指向LockRecord、将LockRecord的owner指向MarkWord，如果成功则将对象锁状态更新为轻量级锁，否则表示当前轻量级锁已经被获取了，将进入自旋，达到一定次数后膨胀为重量级锁（将MarkWord指向**互斥量Mutex**）。在释放锁时如果CAS将当前线程的LockRecord替换为MarkWord成功，则释放锁成功，进入无锁状态，否则说明MarkWord已经指向互斥量，锁为重量级锁，需要通知被阻塞的线程\n4. 重量级锁：当线程想要获取锁发现是重量级锁时，将被阻塞，等待锁释放时被唤醒。这样的操作需要操作系统来执行，从**用户态转换为内核态**，开销大，耗时。\n\n#### 什么是锁消除、锁粗化？\n\n- 锁消除：JVM判断不存在竞争，则不进行加锁，节省无意义的加解锁。\n\n- 锁粗化：一般来讲，我们尽量的让同步代码块的范围更小，这样影响的范围会更小，**并发程度高**，即使存在竞争也不需要等待太长时间，但是如果有一连续的加锁解锁，那么反而会造成性能降低 因此锁粗化就是在这种情况下，一连续的加锁解锁**合并**成一次加锁解锁，扩展锁的范围\n\n### 什么是CAS？它会有什么问题？\n\nCAS是指Compare And Swap，比较并交换，有3个操作数，分别是内存位置V、旧的预期值A和准备设置的新值B。CAS指令执行时，当且仅当V的值为A时，处理器才会用B更新V的值。其处理过程是原子操作，不会被其他线程打断。\n\n从语义上来说，如果V初次读取时A，并且在准备更新时仍为A，这并不能说明它没有被修改过，因为它可能已经**先变为C再被改回A**，但是CAS是察觉不到的，这个问题称为**ABA问题**。可以通过引入版本号、时间戳来解决这一问题。\n\n### 了解ReentrantLock吗？和synchronized有什么区别\n\nReentrantLock是JUC Lock接口的实现，synchronized是由JVM实现的，很多优化并不直接暴露给我们，ReentrantLock是API层面实现的，比synchronized拥有更细粒度的控制和更高级的功能，可实现中断响应、限时等待、等待通知、公平锁等。在性能上，JDK6之后做了许多优化，二者性能基本持平\n\n1. 中断响应：通过lockInterrupt获取锁，能在获取过程中响应中断，如果中断则不再等待获取锁直接返回。而不响应中断的获取锁则是等待到获取锁成功再将线程置于中断状态\n2. 等待通知：通过Condition的await将当前线程放入等待队列，直到获得信号唤醒线程，可以通过多个Condition实现**选择性唤醒**\n3. 公平锁：按照先来先服务的原则，等待时间长的先获得锁，代码上通过`!hasQueuedPredecessors`来判断是否有之前已经在等待的线程，再CAS获取锁\n4. 可重入锁：已获取锁的线程可以**重复获取**锁\n\n### 你提到了JUC，还了解JUC包的其他东西吗？\n\nJUC的核心是AQS队列同步器，内部维护一个双向等待队列，内部类Node作为结点包含前置后置指针以及线程标识，它使用一个 volatile int state 变量作为共享资源，当state为1则为**独占式**，一次只能有一个线程获取锁，否则为**共享式**；如果线程获取资源失败，则通过addWaiter进入同步队列等待；如果获取成功就执行临界区代码，释放资源时会通知同步队列中的等待线程。通过getState/setState/compareAndSetState来进行状态变更。采用**模板方法**设计模式，提供了tryAcquire、tryRelease等方法由子类实现。\n\n1. CountDownLatch：用于阻塞线程，等待所有线程（子任务）完成才继续执行，初始化传入子任务数量，通过countDown方法递减，当任务数量为0时await方法返回，继续执行当前线程；可以限制超时时间\n\n2. Semaphore：信号量，控制并发线程数，初始化传入并发数，每次通过acquire获取一个/多个资源，执行结束后通过release释放，tryAcquire尝试获取，也可以设置超时\n\n3. CyclicBarrier：多个线程同步等待，await方法会在准备好的线程达到要求的数量返回，继续执行，在count为0时会将count重置为原先输入的数量开启新一轮等待\n\n4. FutureTask：可以获取线程执行的返回值，可以取消，可以等待\n\n5. fork/join：切分子任务并行执行，把子任务放在不同的队列，从队列头部取出任务，执行完自己的任务后去其他子线程的任务队列尾部窃取一个任务。\n\n6. BlockingQueue：阻塞队列，当队列为空时消费者等待新的可消费对象，当队列满时生产者等待被消费再把可消费对象放入队列，有以下几个分类：\n\n   {% note info %}\n\n   ① ArrayBlockingQueue：先进先出，有界\n\n   ② DelayQueue：延迟队列，按执行时间排序\n\n   ③ LinkedBlockQueue：无界队列，可不指定大小\n\n   ④ PriorityBlockQueue：优先级，可插入null对象\n\n   ⑤ SynchronizedQueue：同步队列，不存储元素，只有元素被消耗才能再次插入\n\n   {% endnote %}\n\n### 创建线程有哪些方式？分别有什么优缺点\n\n1. 使用new Thread创建线程，可以使用实现了Runable和Callable接口的类，后者可以通过FutureTask获取返回值；继承Thread类，重写run方法。使用这种方式性能差，缺乏统一管理，占用过多资源容易导致oom，并且功能单一\n2. 使用线程池ThreadPoolExecutor：可重用存在的线程减小对象创建消亡的开销，可以控制最大并发线程数避免阻塞，可以定期执行定时执行单线程并发数控制等\n\n### 线程有哪些方法？\n\n1. sleep方法会让当前线程进入休眠状态，与wait不同的是该方法不会释放锁资源，进入的是TIME_WAITING状态\n2. yield方法会让出CPU时间片，回到RUNNABLE状态，与其他线程一起竞争时间片\n3. join方法用于等待其他线程运行终止，如果当前线程调用了其他线程的join方法，则当前线程进入BLOCKED状态，当另一个线程结束时，当前线程转为RUNNABLE，等待CPU时间片，底层使用的是wait，会释放锁\n\n### 线程有哪些状态？\n\n1. NEW：新建状态，尚未调用start启动\n2. RUNNABLE：Java将操作系统中的就绪和运行两种状态统称为RUNNABLE，此时线程可能在等待时间片或者正在执行\n3. BLOCKED：阻塞状态，可能由于锁被其他线程占用、调用了`sleep`/`join`方法\n4. WAITING：等待状态，不会被分配时间片，需要其他线程通知或终端，可能由于调用了无参的`wait`和`join`方法\n5. TIME_WAITING：限期等待状态，可以在指定时间内自行返回，可能由于调用了带参的`wait`和`join`方法\n6. TERMINATED：终止状态，表示当前线程已执行完毕或异常退出\n\n### 线程通信的方式有哪些？\n\n> 命令式编程中线程通信的方式有共享内存和消息传递两种，在共享内存的并发模型中线程间共享内存的公开状态，通过读-写内存中的公共状态进行隐式通信，在消息传递的并发模型中线程间没有公告状态，必须通过发送消息来显式通信。Java并发采用共享内存模型，线程间的通信隐式进行，对程序员完全透明。\n\n[volatie](#对volatile有什么理解？)：读取变量需要从主存中获取，写必须同步刷新回主存，保证所有线程对变量访问的可见性\n\n[synchronized](#谈一谈synchronized)：确保多个线程在同一时刻只能有一个处于方法/同步块中，保证线程对变量访问的原子性、可见性\n\nwait/notify：等待通知机制，线程A调用了对象的wait方法进入等待状态，线程B调用了对象的notify方法，线程A收到通知后结束组测并执行后续操作\n\n管道I/O流：用于线程间数据传输，媒介为内存，生产者消费者模式\n\n[ThreadLocal](#谈一谈ThreadLocal)：线程共享变量，可以为每个线程创建单独的副本，副本值时线程私有的，互相之间互不影响\n\n### 创建线程池有哪些参数，线程池有哪些分类？\n\n#### 参数：\n\n1. corePoolSize：核心线程数\n2. maximumPoolSize：最大线程数\n3. keepAliveTime：线程没有任务执行时最大存活时间\n4. unit：时间单位\n5. threadFactory：线程工厂，用来创建线程\n6. rejectHandler：拒绝策略，默认抛异常，可设为丢弃任务，丢弃最老任务，让当前线程转为执行该任务\n\n{% note warning %}\n\n小于核心线程数量：直接创建新线程处理任务。\n\n{% endnote %}\n\n{% note info %}\n\n在核心和最大之间：只有当workingQueue满才创建新线程。\n\n{% endnote %}\n\n{% note success %}\n\n当线程数到达max时，如果阻塞队列未满则放入阻塞队列等待空闲线程处理，否则，根据线程池设置的拒绝策略处理(抛异常等)\n\n{% endnote %}\n\n#### 分类：\n\n1. newFixThreadPool：核心线程和最大线程相同，指定核心线程和最大线程数，采用无界队列，当无空闲线程将任务放到无界队列等待被处理（可能造成**oom**）。适用于**CPU密集型**，确保CPU在长期被工作线程占用时，尽可能减少分配线程，适用执行**长期任务**\n2. newCachedThreadPool：核心线程为0，最大线程为整型最大值，使用同步队列，因为没有核心线程所以任务直接放在队列中，如果有空闲线程则取出任务执行，否则创建新线程执行任务。keepAliveTime为60s。适用于**并发执行量大短期的小任务**\n3. newSingleThreadPool：核心线程和最大线程都为1，使用无界队列，串行执行任务，keepAliveTime为0，通常是一个线程不停的串行执行所有任务\n4. newScheduleThreadPool：核心可选，最大线程数是整型最大值，keepAliveTime为0，使用延迟队列，线程从延迟队列中取出执行时间大于等于当前时间的任务执行完成后修改该任务的时间为当前时间并放回队列。适用于**周期/定期执行的任务**。\n\n### 线程池有哪些状态？\n\n1. running：可以接受新任务，处理队列中的任务。通过`shutdown `进入shutdown状态，`shutdownNow`进入stop状态\n\n2. shutdown：不再接受新任务，可以处理队列中的任务。等待队列中无任务，正在处理的任务也结束进入tidying状态\n\n3. stop：不再接受新任务，停止处理正在处理的任务/队列中的任务。进入tidying状态\n\n4. tidying：线程池的任务数为0。terminate执行完成进入terminated状态。\n\n5. terminated：彻底终止。\n\n### 谈一谈ThreadLocal\n\nThreadLocal是线程共享变量，主要用于一个线程内跨类、方法传递数据，ThreadLocal有一个静态内部类ThreadLocalMap，其key是ThreadLocal对象，值是Entry对象，Entry内只有一个Object的value，ThreadLocal是线程共享的，但ThreadLocalMap是线程私有的，ThreadLocal主要有get、set、remove三个方法\n\n- set：首先获取当前线程，然后再获取当前线程对应的ThreadLocalMap类型的对象map，如果map存在就设置key，key是当前的ThreadLocal对象，value是传入的参数；否则通过createMap方法创建一个ThreadLocalMap，再设置值\n- get：首先获取当前线程，然后再获取当前线程对应的ThreadLocalMap类型的对象map，如果map存在就以当前ThreadLocal对象作为key获取Entry类型的对象e，如果e存在就返回它的value；如果map或者e不存在，就调用setInitialValue方法先为当前线程创建一个ThreadLocalMap对象然后返回默认的初始值null\n- remove：获取ThreadLocalMap类型的对象map，如果map不为空，则解除ThreadLocal这个key及其value的联系\n\n#### 存在的问题\n\n1. 脏数据：线程池会复用Thread，因此ThreadLocal也会被复用，而如果没有通过remove方法清理与线程相关的ThreadLocal数据，则下一个线程可能会get到之前的数据\n2. 内存泄漏：由于ThreadLocal是弱引用，但Entry的value是强引用，因此当ThreadLocal被回收后，value没有被释放，造成内存泄漏，因此需要及时调用remove清理\n\n## I/O流问题\n\n### 同步、异步、阻塞、非阻塞都是什么概念？\n\n{% note info %}\n\n同步和异步是通信机制，阻塞和非阻塞是调用状态。\n\n{% endnote %}\n\n同步IO是用户线程发现IO请求后需要等待或轮询内核IO操作完成后才能继续执行；异步IO是用户线程发起IO请求后可以继续执行，当内核IO操作完成后会通知用户线程，或调用用户线程注册的回调函数。\n\n阻塞IO是IO操作需要彻底完成后才能返回用户空间；非阻塞IO是IO操作调用后立即返回一个状态值，无需等IO操作彻底完成。\n\n### Java中有哪些IO模型，简单介绍下\n\n1. BIO：**同步阻塞式**IO，JDK1.4之前的IO模型，服务器实现模式为一个连接请求对应一个线程，也就是一个客户端请求需要创建一个线程，适用于**连接数目少**且服务器资源多的情景。\n2. NIO：**同步非阻塞**IO，JDK1.4引入，服务器实现模式为多个连接请求对应一个线程，客户端连接请求会注册到一个多路复用器Selector，Selector轮询到连接有IO请求时才启动以恶搞线程处理，适用于连接**数目多**且连接**时间短**的场景。\n3. AIO：**异步非阻塞**IO，JDK7引入，服务器实现模式为一个有效请求对应一个线程，客户端的IO请求都是由操作系统先完成IO操作再通知服务器应用来直接使用准备好的数据，适用于连接**数目多**且连接**时间长**的场景。\n\n#### 详细介绍下NIO\n\n不同于传统的IO，NIO以块的方式传输数据，一次处理一个数据块，可以控制读取某个位置的数据，速度更快。它有几个重要的组件：\n\n1. Buffer：缓冲区，本质是一块可读写的内存，用来简化数据读写，不再以字节来处理数据，并提供flip、clear、compact来切换读写状态，通过读写位置position和极限位置limit来实现\n2. Channel：通道是对IO中流的模拟，通过Channel读写数据，将数据读取到Buffer/通过Buffer将数据写出，一个Buffer可以切换读写，被不同的Channel使用，这让NIO成为了非阻塞的IO，通过Channel的返回就可以知道缓冲区是否有数据，而不是和IO流一样需要阻塞等待数据。\n3. Selector：多路复用器，轮询检查多个Channel的状态，判断注册事件是否发生，即判断Channel是否处于可读/可写状态\n\n其工作流程是通过Selector的静态方法open实例化一个选择器，通过Channel的register方法将通道的某个事件和Selector绑定起来，事件有CONNECT、ACCEPT、READ、WRITE。Selector的select方法返回目前就绪的通道数，通过selectKeys得到对应的集合，处理其中的事件\n\n### IO包下有哪些流？\n\n主要分为字符流和字节流，字符流一般用于处理文本文件，其他类型用字节流处理\n\n- 字节流：使用了**装饰器模式**，InputStream和OutputStream是抽象组件，FileInputStream、ByteArrayInputStream是基础实现类，FilterInputStream是抽象装饰器，其实现类BufferInputStream、PushBackInputStream等为基础实现类提供了额外的功能，使用BufferInputStream装饰FileInputStream（在FileInputStream外套上BufferInputStream）可以实现具有缓存的输入流；使用PushBackInputStream装饰ByteArrayInputStream可以实现具有回退读取unread的功能的输入流；**DataInputStream**提供了读取Java基本数据类型的方法，实现上并未改变基本的读写方法，只是动态的处理成需要的类型。\n- 字符流：在程序中一般操作的是字符形式的数据，Java提供了基本的InputStreamReader和OutputStreamWriter完成了字节流和字符流之间的编解码转换，家族结构和Stream类似也采用了**装饰器模式**。\n\n### 序列化和反序列化是什么？\n\nJava对象在JVM退出时会全部销毁，如果需要将对象及状态持久化，就要通过**序列化**实现，将内存中的对象保存在二进制流中，需要时再将二进制流**反序列化**为对象。对象序列化保存的是对象的状态，因此类的**静态变量**不会被序列化。常见的序列化方式有以下几种：\n\n1. Java原生：实现Serializable接口，Java 序列化保留了对象类的元数据（如类、成员变量、继承类信息）以及对象数据，兼容性最好，但不支持跨语言，性能一般。序列化和反序列化必须保证序列化ID一致，如果没有序列化ID，则会抛异常。具体的序列化过程：判断对象类型，写入**对象类型标记**；写入**对象类信息**，包括类名、序列化ID、字段数、字段名等；写入**实例数据**，基本类型直接写入，引用类型**递归**调用**writeObject**写入\n2. Hessian：支持跨语言、动态类型，用一个字节表示常用基础类型，极大缩短二进制流，更加高效\n3. JSON：转化为JSON字符串，不记录类型信息，因此反序列化需要提供类型信息才能正确进行；可读性高\n\n## JVM相关\n\n### 介绍一下Java虚拟机的整体结构？各个模块的作用\n\n在Java程序的执行过程中，JVM把它管理的内存划分为不同的数据区，其中线程私有的有程序计数器、虚拟机栈、本地方法栈，线程共享的有堆、方法区，虚拟机的类加载器负责将类信息加载到内存中，执行引擎负责执行字节码，采用即时编译技术。\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722004726.png)\n\n1. 程序计数器：每个线程有自己的计数器，指示当前线程所执行字节码的行号，改变计数器的值选取下一条指令。对于Java方法记录了字节码的指令地址；对于本地方法，值为undefined\n2. 虚拟机栈：每个栈帧中有局部变量表存储方法内使用的变量、操作数栈、动态链接、返回地址，每新调用一个方法就创建一个栈帧，因此递归过深超过虚拟机允许的深度会报StackOverflowError\n3. 本地方法栈：native方法的栈，调用本地方法时虚拟机栈不变，动态链接并直接调用指定本地方法，同样会报StackOverflowError\n4. 方法区：存储类信息、常量、静态变量、即时编译的代码缓存等。JDK8之前使用永久代实现方法区，容易内存溢出，JDK7中把放在永久代的字符串常量池、静态变量等移出，JDK8废弃永久代，采用本地内存实现的元空间代替\n\n### 运行时常量池、字符串常量池、Class常量池\n\n- Class常量池：class文件中包含了类的版本、字段、方法、接口等信息，还有常量池（Constant Pool Table），存放编译器生成的字面量和符号引用\n- 运行时常量池：类会经过加载、验证、准备、解析、初始化加载到内存，JVM会将class常量池中的内容存放到运行时常量池，class常量池存放的并不是对象实例，因此在解析阶段将会查找字符串常量池，将符号引用转换为直接引用\n- 字符串常量池：在经过验证、准备阶段后，在堆中生成字符串实例，将其引用值存放到字符串常量池中，被所有类共享\n\n### Java程序是怎样运行的？\n\n首先通过javac将.java编译为JVM可加载的.class字节码文件，之后通过即时编译器JIT把字节码文件翻译为本地机器码，之后执行引擎将执行指令代码\n\n### 有哪些类加载器？类加载的过程是怎样的？\n\n启动类加载器**BootstrapClassLoader**负责加载/lib/rt/下的核心类库java.* ；由C++编写，平台/扩展类加载器**ExtClassLoader**加载/lib/ext下的扩展类库javax.* ；应用类加载器**AppClassLoader**加载用户写的类，位置在classpath下；另外，还可以通过继承ClassLoader实现自定义的类加载器，通过findClass方法将字节数组传入由defineClass方法负责加载到JVM中。\n\n类加载采用双亲委派机制：一个类加载器接收到类加载请求会将请求**委派给父加载器**，只有当父加载器没法完成时，才会由子加载器尝试加载。可以确保类在每个类加载器环境都是同一个，避免重复加载。\n\n类加载过程分为**加载**、**链接**、**初始化**三个阶段，加载阶段将class字节码加载到JVM，生成class对象，链接阶段先通过**验证**检查class的安全性和正确性，之后为类变量分配空间并设置初始值，称为**准备**，在**解析**时将常量池内的符号引用转换为直接引用，最后的初始化阶段执行类变量赋值和静态代码块。\n\n### 创建对象new的时候发生了什么？\n\n1. 当JVM遇到字节码new指令时，首先检查该指令的参数能否在常量池定位到一个类的符号引用，并检查引用代表的类是否已被加载、解析、初始化，如果没有则执行类加载\n2. 类加载检查通过后，虚拟机将为新生对象分配内存\n3. 内存分配完成后虚拟机将成员变量设为初始值，保证对象的实例字段可以不赋初值就使用\n4. 设置对象头，包括hashCode、GC信息、锁信息、类类型等\n5. 执行init方法，初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋给引用变量\n\n### 如何判断对象是否为需要被回收？\n\n- 引用计数：在对象中添加一个引用计数器，如果被引用计数器加 1，引用失效时计数器减 1，如果计数器为 0 则被标记为垃圾。原理简单，效率高，但是存在对象间循环引用的问题，导致计数器无法清零。\n- 可达性分析：判断对象的引用链是否可达。将所有对象组成图，从一系列GC Root对象开始向下搜索其他对象，路径称为引用链，如果所有的GC Root都无法到达的对象则判定为垃圾。可以作为GC Root对象的有虚拟机栈和本地方法栈中引用的对象、类静态属性引用的对象、常量引用的对象。\n\n### Java中有哪些引用类型？\n\n1. 强引用：最常见的引用，只要对象有强引用且GC Root可达，在垃圾回收时即使内存耗尽也不会被回收\n2. 软引用：在内存即将耗尽时，会把软引用关联的对象加入回收范围\n3. 弱引用：只能生存到下次年轻代GC前\n4. 虚引用：定义完成后无法通过引用来获取该对象，只是为了在对象被回收时收到一个系统通知\n\n### 有哪些GC算法？\n\n- 复制算法：对内存分为对象面和空闲面，将存货的对象复制到空闲面，然后将对象面所有对象从内存清除。减少碎片，适合对象存活率低的场景，复制越少越快。但是意味着要有一块空闲空间不能使用\n- 标记-清除算法：使用可达性算法标记垃圾，之后将垃圾清除。会产生碎片\n- 标记-整理算法：使用可达性算法标记，移动存货的对象，将对象顺序排列，之后清除最后一个对象的地址之后的内存空间。减少碎片，也不需要设置两块内存，适用于存活率高的场景\n\n### 常见的垃圾收集器有哪些？\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722004738.png)\n\n1. Serial：单线程收集，采用复制算法，会STW，Client模式年轻代默认收集器\n2. ParNew：多线程收集，其他于Serial相同，追求低停顿\n3. ParallelScavenge：多线程收集，采用复制算法，更关注系统吞吐量，Server模式年轻代默认收集器\n4. Serial Old：单线程收集，采用标记-整理算法，Client模式老年代默认收集器\n5. Parallel Old：多线程收集，采用标记-整理算法，追求吞吐量\n6. CMS：追求最短停顿时间，采用标记-清除算法，过程较复杂\n7. G1：不再区分以老年代/年轻代简单区分内存，以Region内存布局面向局部收集，实现了可预测的停顿\n\n#### CMS回收过程\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722004753.png)\n\n**初始标记**阶段进入STW，使用单线程标记GC Root直接关联的对象；**并发标记**阶段从初始标记的对象开始遍历，耗时较长但是不需要停顿；**重新标记**阶段修正在并发标记期间因用户程序运作而导致标记产生变动的部分记录，需要STW；**并发清除**清理垃圾，不需要移动对象，可以并发执行\n\n#### G1回收过程\n\n**初始标记**阶段进入STW，标记GC Root直接关联的对象，让下一阶段用户线程并发运行时能正确地在可用的Region中分配新对象；**并发标记**阶段从初始标记的对象开始遍历，查找整个堆，扫描完成后要重新处理此过程中变化的部分；**最终标记**进入短暂的STW，处理并发阶段结束后仍遗留的少量SATB记录；**筛选回收**对各Region的回收价值排序，根据用户期望停顿事件制定回收计划，需要暂停用户线程，多线程并发完成\n\n### 你知道哪些内存分配和回收策略？\n\n1. 对象优先在Eden区分配：大多数情况下对象在新生代Eden区分配，当Eden不足时会触发Minor GC\n2. 大对象直接进入老年代：通过指定-XX:PretenureSizeThreshold参数，大于该值的直接在老年代分配\n3. 长期存活对象进入老年代：通过指定-XX:MaxTenuringThreshold参数，对象年龄大于该值的进入老年代，没经过一次Minor GC，年龄+1\n4. 动态对象年龄判定：当Survivor中相同年龄所有对象大小的总和大于Survivor的一半，则将年龄不小于该年龄的对象放入老年代\n5. 空间分配担保：Minor GC前虚拟机必须检查老年代最大连续可用空间是否大于新生代对象总空间，满足则说明Minor GC安全；如果不满足，虚拟机会查看-XX:HandlePromotionFailure是否允许担保失败，允许则检查老年代最大连续可用空间是否大于历次晋升老年代对象的平均大小，如果满足则冒险尝试Minor GC，否则进行Full GC\n\n### 了解哪些JVM调优工具？\n\n1. JVisualVM：自带，不需要配置，可以看到内存信息、线程信息、dump和CPU分析\n2. JPS：查看指定host的JVM进程、PID、启动路径和参数等等\n3. JConsole：监控某个JAVA应用程序，在overview中查看内存、线程、类及CPU使用情况\n\n## 常见的设计模式\n\n### 设计模式要遵循哪些原则？\n\n1. 开闭原则：面向对象的基本原则，指一个实体应该对扩展开放，对修改关闭，提高代码的可复用性和可维护性\n2. 单一职责原则：一个类、接口或方法只负责一个职责，降低代码复杂度以及变更引起的风险\n3. 依赖倒置原则：程序应该依赖于抽象类/接口，而不是具体的实现类\n4. 接口隔离原则：将不同功能定义在不同接口中实现接口隔离，避免类依赖了它不需要的接口，减少接口之间依赖的冗余和复杂性\n5. 里氏替换原则：开闭原则的补充，规定了任何父类可以出现的地方子类都可以出现，可以约束继承泛滥，加强程序健壮性\n6. 迪米特原则：也叫最少知道原则，每个模块对其他模块都要尽可能少地了解和依赖，降低代码耦合度\n7. 合成/聚合原则：尽量使用组合（has-a）、聚合（contains-a）而不是继承（is-a）达到软件复用的目的\n\n### 你了解哪些设计模式？\n\n> 设计模式分为创建型、结构型和行为型。创建型在创建对象时**隐藏创建逻辑**，不适用new直接实例化对象；结构型通过类和接口间的**继承和引用**实现创建复杂结构的对象；行为型通过类之间**不同通信方式**实现不同的行为\n\n{% note info %}\n\n创建型：单例模式、工厂模式、建造者模式、原型模式\n\n{% endnote %}\n\n{% note success %}\n\n结构型：适配器模式、桥接模式、装饰器模式、代理模式、组合模式\n\n{% endnote %}\n\n{% note warning %}\n\n行为型：模板方法模式、策略模式、责任链模式、观察者模式、命令模式\n\n{% endnote %}\n\n#### 讲讲单例模式？\n\n单例模式属于创建型模式，一个单例类在任何情况下只存在一个实例，私有化构造方法，提供一个静态方法向外提供静态实例变量。数据库连接池、ServletContext、Spring的单例Bean等都是单例模式的应用\n\n- 饿汉式：线程安全，在加载时完成实例的创建，提供静态方法获取实例变量\n\n  ```java\n  public class HungrySingleton{\n      private HungrySingleton(){\n          \n      }\n      private static HungrySingleton instance = new HungrySingleton();\n      \n      public static HungrySingleton getInstance(){\n          return instance;\n      }\n  }\n  ```\n\n  \n\n- 懒汉式：在外部调用时才会创建实例，通过双重检测锁、静态内部类、枚举等方法来保证线程安全\n\n  双重检测锁：synchronized加锁，volatile禁止指令重排序\n\n  静态内部类：线程安全、延迟加载\n\n  枚举：简洁、序列化和反序列化无法破解。反射的newInstance方法会判断是否类被枚举修饰，是则抛出异常。序列化时枚举的每个变量都是静态的所以在jvm中只有一份。\n\n  {% fold 展开代码 %}\n\n  ```java\n  /*\n   * 线程不安全\n   */\n  public class LazySingleton{\n      private LazySingleton(){\n          \n      }\n      private static LazySingleton instance = null;\n      \n      public static LazySingleton getInstance(){\n          if(instance == null){\n              instance = new LazySingleton();\n          }\n          return instance;\n      }\n  }\n  /*\n   * 双重检测锁机制\n   */\n  public class LazySingleton{\n      private LazySingleton(){}\n      \n      private volatile static LazySingleton instance; //禁止内存重排序\n      \n      public static LazySingleton getInstance() {\n          if(instance == null) {\n              synchronized (LazySingleton.class) {\n                  if (instance == null) {\n                      instance = new LazySingleton();\n                  }\n              }\n          }\n          return instance;\n      }\n  }\n  /*\n   * 静态内部类\n   */\n  public class LazySingleton {\n      private LazySingleton(){}\n      \n      public static LazySingleton getInstance() {\n          return SingletonHolder.instance;\n      }\n      \n      private static class SingletonHolder {\n          private static final LazySingleton instance = new LazySingleton();\n      }\n  }\n  /*\n   * 枚举实现\n   */\n  public enum LazySingleton{\n      INSTANCE;\n  }\n  ```\n\n  {% endfold %}\n\n#### 讲讲工厂模式\n\n工厂模式属于创建型模式，有**简单工厂**模式、**工厂方法**模式、**抽象工厂**模式三种\n\n1. 简单工厂模式：由工厂对象来创建实例，客户端只需要传入参数即可，由工厂对象进行判断和创建具体类型的实例。适用于创建对象类型较少的场景，如果要增加新类型，需要修改工厂对象的判断逻辑，违背了**开闭原则**。Calendar抽象类的getInstance方法调用了createCalendar根据不同的地区参数创建不同的日历对象，Spring的BeanFactory通过Bean唯一标识来获取Bean\n2. 工厂方法模式：定义一个创建对象的接口，让接口的实现类决定创建哪种对象，让类的实例化推迟到子类中进行，解决了简单工厂中产品扩展的问题。Collection接口中定义了一个iterator工厂方法，返回了一个Iterator类的抽象产品，该方法由ArrayList、HashMap等具体工厂实现；Spring的FactoryBean接口的getObject方法也是工厂方阿飞\n3. 抽象工厂模式：提供一个创建一系列相关或相互依赖对象的接口，无需指定它们的具体类，主要用于系统的产品有多于一个的产品族，而系统只消费其中某一个产品族产品的情况。Connection接口应用了抽象工厂，其中包括Statement、Blob、Savepoint等抽象产品\n\n#### 建造者模式了解吗？\n\n建造者模式属于创建型模式，一个类由多个部件构成，一个不见可以有多种实现，通过组合可以创建出不同的实例，在创建该类时，使用者通过一个指挥者实例，实例中有一个抽象建造者，抽象建造者定义了待实现的建造方法(针对不同部件)，抽象建造者的实现类则做出了具体实现。指挥者通过建造者就可以完成对产品的建造，最后将结果返回给使用者。\n\n#### 讲一讲代理模式\n\n代理模式属于结构型模式，为其他对象提供一种代理以控制对被代理对象的访问，可以增强目标对象的功能，降低代码耦合度，扩展性好。分为静态代理和动态代理两种方式，静态代理在运行前就已经确定了代理类和被代理类的关系，动态代理具有更强的适用性\n\nJDK动态代理和CGLib动态代理详细介绍参见 [JDK和CGLib](http://realmicah.xyz/posts/caab1d3c.html#JDK动态代理).\n\n#### 讲一讲装饰器模式？\n\n装饰器模式属于结构型模式，不改变类原有的属性，动态的增加其他属性，装饰器是一个抽象制定了待实现的装饰方法，可以有不同的实现，将已有的类传入装饰器后对其进行装饰。[Java IO流家族](#IO包下有哪些流？)应用了这种模式\n\n#### 装饰器和代理有什么区别？\n\n装饰器模式的关注点在于给对象动态**添加方法**，而动态代理更注重对象的**访问控制**。动态代理通常会在代理类中**创建被代理对象的实例**，而装饰器模式会将被装饰者作为构造方法的**参数**。\n\n#### 适配器模式了解吗？有什么应用？\n\n适配器模式属于结构型模式，将一个类的接口转换为使用者接受的另一种接口，解决由于**不兼容**而不能一起工作的问题。适配器Adapter继承/实现期待的类/接口，在实现期待的接口时，使用用于适配的不兼容者来实现。这样在外部看来就是期待的状态但我们内部通过适配器将原本不兼容的转换为可接受的状态。Java的字符流操作应用了适配器模式，SpringMVC的HandlerAdapter通过适配规则调用不同的处理请求handle方法，Arrays.asList将数组转换为对应的集合\n\n#### 模板方法模式有了解吗？\n\n模板方法模式属于行为型模式，使子类可以在不改变算法结构的情况下重新定义算法的某些步骤，适用于抽取子类重复代码到公共父类，[JUC的AQS](#你提到了JUC，还了解JUC包的其他东西吗？)应用了模板方法模式，HttpServlet定义了一套处理HTTP请求的模板，service为模板方法定义了基本处理流程，doGet/doPost为基本方法，子类可重写这些方法\n\n#### 讲讲责任链模式\n\n责任链模式属于行为型模式，责任链是指由多个继承了抽象处理类的子类组成的处理链条，通过next连接，将对于某个请求的处理交给一条处理链，子类会不断地转发给下一个子类一直向下处理。Spring的拦截器中HandlerExecutionChain将拦截器放在一个list中，前置处理做正向循环直到被拦截就停下，后置处理从这个位置开始逆向循环做后置处理\n\n#### 对观察者模式有什么了解？\n\n观察者模式属于行为型模式，也叫发布订阅模式，定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都能得到通知并被自动更新。ServletContextLister能够监听ServletContext对象的生命周期，当启动时调用contextInitialized方法，终止时调用contextDestroyed方法\n\n如何实现：一个包含了观察者集合和对观察者集合进行操作以及通知观察者的方法的抽象类。一个包含了更新自己的抽象方法，在收到被观察者状态改变通知时被调用。被观察者实现类实现具体的通知方法，当实现类状态改变时通过通知方法调用观察者更新自己的方法。\n\n## 海量数据处理面试问题\n\n1. 海量日志数据，提取出某日访问百度次数最多的IP\n\n   每个IP为32位，最多2^32个，可以通过Hash取模将整个大文件映射为n个小文件，再找出每个小文件中出现次数最多的IP（可以使用HashMap统计次数），再从这个1000个中找到最多的那个\n\n2. 搜索引擎会通过日志记录用户检索的检索串，每个检索串长度为1-255字节，假设有一千万个记录，去重后不超过三百万个，统计最热门的10个检索串\n\n   首先可以通过Hash取模的方法将其分为n个小文件，再利用HashMap完成排序；借助堆结构，维护一个K大小的小根堆，遍历三百万个数据，放入小根堆。\n\n3. 有一个1G大小的文件，每一行是一个词，词的大小不超过16字节，内存限制是1M，返回出现次数最多的100个词\n\n   通过Hash取模将文件分成n个小文件中，保证一个文件大小小于1M，对每个小文件通过HashMap统计出其频率，取出频率最高的100个词，写入新的文件，这样有得到了n个小文件，然后再对这n个小文件执行归并排序\n\n4. 有10个文件，每个文件1G，每行存放用户的query，每个文件的query都可能重复，按query的频次排序\n\n   \n\n5. \n\n","source":"_posts/Java基础面试总结.md","raw":"---\ntitle: Java基础问题总结\ntags:\n- Java\ncategories:\n- Java后端面试\nimage: 'https://gitee.com/jingshanccc/image/raw/master/image/20200722004655.jpg'\nabbrlink: 503970b4\n---\n\n<p/>\n\n<!-- more -->\n\n{% note info %}\n\n长文预警  🤣 谨慎食用 💡 善用搜索和目录\n\n{% endnote %}\n\n## 语言特性\n\n### 说说Java语言的特点？\n\n1. 平台无关性：实现一次编译，到处运行\n2. 相对安全的内存管理和访问机制，避免大部分内存泄露和指针越界\n3. 热点代码检测和运行时编译及优化，使程序随运行时间增长获得更高性能\n\n### Java如何实现平台无关？\n\nJava的源代码经过编译后生成的字节码是和计算机体系结构无关的指令，可以在任何机器上解释执行，动态地转换成本地机器代码，而这个过程是由JVM完成的，不同平台使用不同的JVM，屏蔽了不同操作系统的差异。\n\n### Java是值传递还是引用传递？\n\n> 值传递是指方法接收调用者提供的值，引用传递是指方法接收调用者提供的变量地址\n\nJava是值传递，方法接受的是参数的副本，对于基本数据类型，改变入参不会影响实参；对于对象，接受的是对象的引用，改变其属性值会影响实参，但是改变这个引用并不会让实参引用新的对象\n\n### 谈谈深拷贝和浅拷贝？\n\n深拷贝完全拷贝基本数据类型和引用数据类型，浅拷贝值复制基本引用类型和引用变量，没有复制引用变量指向的实际对象。修改克隆对象可能影响原对象，不安全。\n\n### 什么是反射？\n\n反射是指在运行状态中，可以获得任意一个类的属性和方法，可以调用任意一个对象的方法和属性。反射破坏了**封装性**和**泛型约束**。\n\n### Class类的作用？\n\n在程序运行期间，Java运行时系统为所有对象维护一个运行时类型标识，这个信息会跟踪每个对象所属的类，虚拟机利用运行时类型信息选择要执行的正确方法，保存这些信息的类就是Class，可以通过`类名.class`、`对象.getClass()`、`Class.forName(类的全限定名)`来获取Class对象\n\n### 什么是注解、元注解？\n\n注解是一种标记，使类/接口/方法/属性附加额外信息，完成特定功能。\n\n元注解是注解的注解，用于标识注解的相关信息。\n\n1. @Target({参数列表})：注解作用域，可填参数为：CONSTRUCTOR-构造方法、FIELD-属性、METHOD-方法、PACKAGE-包、LOCAL_VARIABLE-局部变量、TYPE-类/接口\n2. @Retention(参数)：生命周期，可填参数为：RUNTIME-运行时注解，可以通过**反射**获取、SOURCE-源代码注解、CLASS-编译时注解，运行时注解\n3. @Inherited：可继承到子类，但不能继承到子类的方法\n4. @Document：生成java-doc会包含注解信息\n\n{% fold 如何获取注解 %}\n\n通过反射获取运行时的注解信息，getAnnotations方法\n\n{% endfold %}\n\n### 什么是泛型？\n\n泛型可以看作一种数据类型，用来接收未知的数据类型，解决不确定对象具体类型时可能发生强制转换异常等问题，Java中的泛型时防止有效输入的，在编译器有效。通过反编译可以看到如果泛型T没有被指定，则会转换为多态，即类型声明为Object；在使用对应数据时将在返回之前加一条checkcast来做类型转换。\n\n### 异常体系\n\nThrowable下有Error和Exception，Error用来标识JVM无法处理的错误，Exception分为受检异常和不受检异常，也叫编译期异常和运行时异常，编译期异常如果不处理会编译失败，运行时异常可以通过编译，RuntimeException及其所有子类都是运行时异常，除此之外都是编译期异常。其体系结构图如下：\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722004710.png)\n\n处理过程参见{% post_link Java异常体系 %}\n\n## 数据类型\n\n### 基本数据类型\n\n1. byte：1字节\n2. char：2字节\n3. int：4字节\n4. short：2字节\n5. long：8字节\n6. float：4字节\n7. double：8字节\n8. boolean：JVM编译时会转为int类型存储，true->1,false->0\n\n### 包装类型自动装箱/拆箱是什么？\n\n{% note info %}\n\n每个基本数据类型都有自己的包装类型，之间的自动转化称为拆箱和装箱。封装成包装类型主要是面向对象的设计，可以提供更方便的操作某种数据类型的方法，例如` parseInt() `。\n\n包装类型设有缓存池，在使用` valueOf() `的方法时先查看是否在缓存池中，没有再通过 ` new Integer() `在堆中创建一个新对象。\n\n{% endnote %}\n\n### String为什么是不可变对象？但是又可以修改它的值？\n\n在Java中String被**final**关键字修饰，因此是不可被继承的。存储字符串内容的char数组也通过**final**修饰，并且不提供修改数组的方法，因此String是不可变的。Java9中改用byte数组存放，并用coder指定编码类型（0-单字节Latin-1，1-双字节UTF-16）。主要是为了节省空间。\n\n对一个String对象的修改实际上都是创建了一个新String对象，再引用该对象。\n\n### String和StringBuidler和StringBuffer的区别\n\nString字符串相加时底层通过StringBuilder实现，但每次都会新生成一个StringBuidler对象且最终通过toString方法返回拼接后的字符串。StringBuilder可解决在字符串相加时创建多个字符串占用空间多效率低下的问题，底层是未被final修饰的初始容量为16的byte数组，可自动扩容。StringBuffer使用synchronized修饰，线程安全。\n\n## 面向对象\n\n### 谈谈你对面向对象的理解？\n\n面向过程让计算机有步骤地顺序做一件事，是过程化思维，使用面向过程语言开发大型项目，模块之间耦合严重，面向对象区别与面向过程，强调高内聚低耦合，对现实事物进行抽象并映射成对象，定义共性行为，再解决实际问题。\n\n### 面向对象的三个特性？\n\n1. 封装：是对象功能内聚的表现形式，对属性、数据、敏感行为实现隐藏，对属性的访问和修改必须通过公共接口实现。封装使对象关系变得简单。\n2. 继承：用来扩展一个类，子类继承父类的部分属性和行为使模块具有复用性，继承是“is a”的关系。\n3. 多态：以封装和继承为基础，根据运行时对象实际类型使同一行为具有不同表现形式。因为在编译时无法确定最终调用的方法体，在运行时由JVM动态绑定，调用合适的重写方法。\n\n### 重载和重写的区别？\n\n1. 重载：在同一个类中，对同名函数的不同实现，其参数类型/顺序/个数不同。但不能以返回值来作为标准，因为我们在调用方法时有时并不关注返回值。对于编译器来说，方法名称和参数列表构成了一个唯一的方法签名，重载在编译时就知道该调用哪个方法，因此属于静态绑定，并不属于**多态**。\n2. 重写：在子类中，重写父类方法，要求返回相同类型或子类型，且访问权限不能变小，抛出的异常类型不能变大。\n\n### 对象的通用方法？\n\n1. equals：判断对象是否相等，默认使用==，可重写equals方法实现自定义比较逻辑。对于基本数据类型，判断值是否相等，对于引用类型，判断是否引用自同一对象\n2. hashCode：对象的散列值，等价的对象散列值一定相等，反之不然。在重写equals方法时应同时重写hashCode，保证等价的对象散列值相等\n3. toString：默认返回类名+@+数值，数值为散列值的无符号十六进制表示\n4. clone：克隆，默认用protected修饰，如果没有显式重写clone方法编译器报错时protected的访问错误了；如果重写了clone但没有让类实现Cloneable接口，将会抛出CloneNotSupported异常。默认实现的是浅拷贝，可以通过重写实现深拷贝\n5. getClass：获取对象的类类型\n6. finalize：在对象被回收时可能被调用。在finalize中重新与引用链上的对象建立关联就可以被移出回收集合不被回收\n7. 作为锁的几个方法：wait、notify、notifyAll\n\n### 内部类的作用是什么，有哪些分类？\n\n内部类方法可以访问定义这个内部类的作用域中的数据，包括private。编译器会将内部类转换为常规的类文件，以$分隔外部类和内部类名。\n\n1. 静态内部类：只加载一次，可通过外部类名.内部类名直接访问，可以访问外部类的所有静态属性和方法。HashMap的Node节点、ReentrantLock中的Sync都是静态内部类\n2. 成员内部类：外部类的每个对象都会加载一次，不可以定义静态成员和方法，可访问外部类的所有内容\n3. 局部内部类：定义在方法内，不能声明访问修饰符，只能定义实例成员变量和实例方法\n4. 匿名内部类：只用一次的没名字的类，字节码文件以数字编号命名\n\n### 接口和抽象类的异同？\n\n> 接口和抽象类对实体类进行更高层次的抽象，仅定义公共行为和特征。\n\n|   维度   |                       接口                       |                            抽象类                            |\n| :------: | :----------------------------------------------: | :----------------------------------------------------------: |\n| 成员变量 |                      无要求                      |                 默认public static final常量                  |\n| 构造方法 |              有构造方法，不能实例化              |                   没有构造方法，不能实例化                   |\n|   方法   | 抽象类可以没有抽象方法，但有抽象方法一定是抽象类 | 默认public abstract，JKD8支持默认/静态方法，JDK9支持私有方法 |\n|   继承   |                      单继承                      |                            多继承                            |\n\n抽象类体现is-a关系，接口体现like-a关系。抽象类是对同类事物相对具体的抽象，接口是对行为的定义。\n\n### 子类初始化顺序？\n\n父类静态代码块和静态变量->子类静态代码块和静态变量->父类普通代码块和普通变量->父类构造方法->子类普通代码块和普通变量->子类构造方法\n\n## 集合\n\n### 说一说ArrayList\n\nArrayList是容量可变的非线程安全列表，使用数组实现，因此支持对元素的快速随机访问，但是插入和删除速度慢，扩容时会创建更大的数组，把原有数组复制到新数组。\n\n1. elementData是ArrayList的数据域，被transient修饰，序列化时会调用writeObject写入流，反序列化时调用readObject重新赋值到新对象的elementData\n2. size是当前实际大小，即为elementData大小\n3. modCount记录了ArrayList结构性变化的次数，继承自AbstractList，所有涉及结构变化的方法都会增加该值。通过比较expectModCount和modCount值是否相等，抛出ConcurrentModificationException，保证了在序列化和迭代过程中数组不会被修改，称为**fail-fast**机制\n\n### 说一说LinkedList\n\nLinkedList本质是双向链表，在插入和删除上速度更快，但是随机访问元素慢，实现了Deque接口，具有队列和栈的性质。通过附加引用的方式将零散的内存单元关联起来，内存利用率高\n\n### Set有什么特点，有哪些实现？\n\nSet不允许元素重复，常用实现有HashSet、LinkedHashSet、TreeSet\n\n1. HashSet：通过HashMap实现，map的key即set存储的元素，所有value都为Object类型常量，不保证有序，线程不安全。对于包装类型通过值判重，对于引用类型，通过hashCode和equals判重\n2. LinkedHashSet：继承自HashSet，通过LinkedHashMap实现，使用双向链表维护元素插入顺序\n3. TreeSet：通过TreeMap实现，添加元素到集合时按照比较规则将其插入到合适的位置，保证集合有序\n\n### TreeMap有什么特点？\n\nTreeMap基于红黑树实现，增删改查的平均和最差时间复杂度均为O(logn)，最大特点是key有序，key必须实现Comparable接口或提供Comparator比较器，因此不能为null。\n\n在排序时，如果比较器不为空，则通过比较器的compare方法，否则使用key实现的Comparable接口的compareTo方法，如果都没有则抛出异常。\n\n关于红黑树的其他特性，参见{% post_link 红黑树 %}\n\n### HashMap相关问题\n\n#### HashMap有什么特性？\n\n1. HashMap存储键值对实现快速存取，允许为null（因为对null做了特殊处理），key不可重复，重复则覆盖原值\n2. 非同步，线程不安全\n3. 无序\n\n#### HashMap底层原理是什么？\n\n在JDK8之前底层实现是数组+链表，在JDK8改为数组+链表/红黑树，节点类型从Entry变为Node。成员变量包括存储数据的table数组、元素数量size、负载因子loadFactor。默认初始化容量是16，扩容容量必须是2的幂，默认负载因子为0.75\n\n#### 如何计算key在table数组中的位置？\n\n在JDK8之前：对于字符串类型，调用stringHash32计算；对于其他类型，使用一个不变的随机值hashSeed和key的hashCode异或之后，再通过移位和异或，最终和表的长度与运算获得最终的地址。这样既减少了哈希冲突又比取模效率更高\n\n在JDK8：当key为null时，返回0；否则通过key的hashCode与高16位做异或运算得到在数组中的位置，这种hash计算将高位的变化扩展到低位，避免因表范围的限制，高位不会在索引计算中使用，可以减少哈希冲突。\n\n#### get函数的实现？\n\n① JDK8之前：\n\n{% note warning %}\n\nkey为null，调用getForNullKey方法，如果size为0表示链表为空，返回null；否则遍历table[0]链表，找到key为null的节点则返回其value，否则返回null。\n\n{% endnote %}\n\n{% note info %}\n\nkey不为null，调用getEntry方法，当size不为0，计算key的hash值，遍历对应位置的链表，如果key和hash都相等则返回该节点的value\n\n{% endnote %}\n\n② JDK8：\n\n调用getNode函数，如果table数组不为空，则判断第一个节点和查找的key和hash相等则返回；否则判断其他节点，如果是TreeNode则以getTreeNode在树中查找，否则遍历链表查找，最终返回对应的节点的值或null。\n\n#### put函数的实现？\n\n① JDK8之前：\n\n{% note warning %}\n\nkey为null，直接存入table[0]。\n\n{% endnote %}\n\n{% note info %}\n\nkey不为null，计算hash值，遍历对应位置的链表，如果key存在更新value，返回旧value；否则将modCount++，使用addEntry方法增加一个节点并返回null\n\n{% endnote %}\n\n② JDK8：\n\n如果table为空/长度为0则进行扩容，否则计算key对应的位置，不存在则调用newNode创建一个节点。如果存在且是TreeNode，则调用putTreeVal增加一个树节点，并维持平衡；如果是链表，则遍历插入/更新。此时如果树的size超过阈值8则通过treeifyBin方法，当table的长度大于64时将其转为红黑树，没超过时进行扩容。\n\n#### 扩容为什么要2的幂，具体是怎么扩容的？\n\n保证为2的幂首先是在进行hash计算的时候，可以用与来替代取模运算，提高效率，其次可以减少碰撞，均匀分布。\n\n① JDK8之前：\n\n如果当前容量达到了最大容量`MAXIMUM_CAPACITY`，将阈值设置为Integer最大值，停止扩容；否则计算新容量，将阈值设为`newCapacity * loadFactor`和`MAXIMUM_CAPACITY + 1`的较小值，创建新容量的Entry数组，通过transfer将数据转移。遍历链表，重新计算位置，使用头插法将元素转移。\n\n② JDK8：\n\n如果当前容量`oldCap`达到了最大容量，将阈值设置为Integer最大值，停止扩容；当`oldCap<<1`不超过最大容量则扩大为两倍；当当前扩容阈值`oldThr>0`，则将其作为新容量；否则将新容量设为默认的16，阈值为12\n\n数据的转移：当节点为TreeNode，调用split方法对树进行修建，当树的结点数小于6则将其转为链表；当节点为链表，将其拆分为hash值超过旧容量的部分和未超出的部分，对于`hash & oldCap = 0`的部分不需要处理，否则通过旧下表+旧容量计算出新下标并完成转移。\n\n#### 为什么负载因子是0.75？\n\n这是个折中的数字，0.5造成了一半空间的浪费，1则在扩容时无法处理其他put，0.75是空间和时间的均衡，避免了较多的hash冲突（实验获得）。\n\n#### HashMap扩容容易死循环你了解吗？\n\n在JDK8之前，使用头插法迁移元素，链表节点之间存在指针引用关系，因此在并发修改时容易出现死循环。JDK8改用尾插法，并且没有指针引用关系，解决了死循环的问题。\n\n但是在并发下扩容时容易造成数据丢失：首先是当某个线程在transfer时，其他线程新增的元素可能在已遍历过的链表上，因此这部分数据就丢失了；在多个线程resize的过程中，新创建了多个newTable，这是线程内的局部变量，线程之间不可见，在`table=newTable`时会覆盖其他线程的操作。因此HashMap是**线程不安全**的。\n\n### 有哪些线程安全的容器？\n\n1. 使用synchronized修饰：Vector、HashTable、Collections.synchronizedXX\n\n2. 并发容器：\n\n   {% note info %}\n\n   CopyOnWriteArrayList：add中使用可重入锁，复制一份，读写分离，在写操作时操作副本，然后将原数组指向新数组，保证最终一致性\n\n   {% endnote %}\n\n   {% note success %}\n\n   ConcurrentHashMap：1.7使用分段锁不锁整张表仅锁住某一段seagment。1.8使用红黑树，通过CAS操作和synchronized保证线程安全同时提高效率。\n\n   {% endnote %}\n\n## 多线程高并发\n\n### JMM是什么？有什么作用？\n\n> JMM是Java内存模型，JMM主要是影响线程共享的内存可见性问题，Java线程之间的通信由JMM控制。\n\n所有变量存储于主内存，每个线程有自己的工作内存，保存被该线程使用的变量的主内存副本，线程对变量的操作必须在工作内存中进行，不能直接读写主内存数据。不同线程间无法直接访问对方工作内存的变量，线程通信必须经过主内存。关于工作内存和主内存的交互，JMM定义了8种原子操作：\n\n|  操作  | 作用变量范围 |                  作用                  |\n| :----: | :----------: | :------------------------------------: |\n|  lock  |    主内存    |        把变量标识为线程独占状态        |\n| unlock |    主内存    |         释放处于锁定状态的变量         |\n|  read  |    主内存    |       把变量从主内存传到工作内存       |\n|  load  |   工作内存   |    把read的值放入工作内存的变量副本    |\n|  use   |   工作内存   |     把工作内存的变量值传给执行引擎     |\n| assign |   工作内存   | 把从执行引擎接收的值赋给工作内存的变量 |\n| store  |   工作内存   |      把工作内存的变量值传到主内存      |\n| write  |    主内存    |   把store取到的变量值放入主内存变量    |\n\n### 什么是指令重排序？\n\n为了提高性能，编译器和处理器通常会对指令进行重排序，重排序指从源代码到指令序列的重排序，分为以下三种：\n\n1. 编译器优化的重排序：在不改变单线程程序语义的前提下重排语句的执行顺序\n2. 指令级并行的重排序：如果不存在数据依赖，处理器可以改变语句对应机器指令的执行顺序\n3. 内存系统的重排序\n\n### as-if-serial和happens-before了解吗？\n\nas-if-serial语义是指不论如何重排序，**单线程**程序的执行结果不能改变。因此，编译器和处理器不会对存在数据依赖关系的操作重排序\n\nhappens-before是先行发生原则，对有顺序性保障的禁止重排序，保证了正确同步的**多线程**程序的执行结果不变\n\n两者都是为了不改变程序执行结果的前提下尽可能提高程序执行**并行度**\n\n### 什么是原子性、可见性、有序性？\n\n1. 原子性：基本数据类型的访问都具备原子性，但是64位长度的long和double需要被划分为两次32位操作，因此不具备原子性。更大范围的原子性，JMM提供了lock和unlock操作，对应到更高层次的字节码指令monitorenter和monitorexit，也就是Java代码中的synchronized\n2. 可见性：指当一个线程修改了共享变量之后，其他线程能够立即得知修改。JMM通过在变量修改后将值同步会主内存，在变量读取前从主内存刷新的方式实现可见性。volatile通过这种方式保证可见性，synchronized则通过unlock前必须先执行sotre和write来保证\n3. 有序性：在本线程内观察所有操作是有序的，在一个线程内观察另一个线程，所有操作都是无序的。前半句指as-if-serial语义，后半句指指令重排序和工作内存与主内存延迟现象。\n\n### 对volatile有什么理解？\n\nvolatile的内存语义是：在写一个volatile变量时，把该线程工作内存的值立即刷新到主内存中；在读一个volatile变量时，把该线程的工作内存值置为无效，从主内存中读取\n\n当变量被volatile修饰后，具备两种特性：\n\n1. 保证变量对所有线程可见\n2. 禁止指令重排序优化：在写操作之前，汇编指令有**lock**前缀，相当于一个内存屏障，后面的指令不能排在内存屏障之前，同时会先对缓存变量做一次**store和write**操作，写回主内存中\n\n### final可以保证可见性吗？\n\n可以，被final修饰的字段在构造方法中一旦被初始化完成，并且构造方法没有把this引用传递出去（this引用逃逸），在其他线程中就能看见final字段值。\n\nJMM禁止把**写final域**重排序到构造方法之外，在写final之后，构造方法return之前，有一个**Store屏障**，确保在对象引用为其他线程课件只之前，对象的final域已初始化过。\n\n在初次**读final域**时，JMM要求必须先读这个final域所在的对象引用，通过一个**Load屏障**，确保初次读对象引用和初次读final域不会被重排序\n\n### 谈一谈synchronized\n\nsynchronized关键字解决的是多个线程之间访问同一资源的同步问题，被synchronized修饰的同步代码块可以保证在任意时刻只能有一个线程执行。可以通过javap看到相关的字节码，在进入和退出同步块时有monitorenter和monitorexit指令，这里的monitor是存在Java对象头中的监视器，对象头中有两部分数据，一是classPointer指向对象的类，二是MarkWord，存储运行时对象的各种信息，包括hashCode、gc年龄、**锁状态**等。锁状态由锁标志位标识，标志位的指针指向monitor对象。\n\n#### monitor对象\n\n```c++\nObjectMonitor() {\n    _header       = NULL;\n    _count        = 0; // 记录个数\n    _waiters      = 0,\n    _recursions   = 0;\n    _object       = NULL;\n    _owner        = NULL; //指向拥有锁的线程\n    _WaitSet      = NULL; // 处于wait状态的线程，会被加入到_WaitSet\n    _WaitSetLock  = 0 ;\n    _Responsible  = NULL ;\n    _succ         = NULL ;\n    _cxq          = NULL ;\n    FreeNext      = NULL ;\n    _EntryList    = NULL ; // 处于等待锁block状态的线程，会被加入到该列表\n    _SpinFreq     = 0 ;\n    _SpinClock    = 0 ;\n    OwnerIsThread = 0 ;\n}\n```\n\n多个线程进入同步代码块后，首先进入**_EntryList**，当线程获取对象的monitor之后，将 **_owner** 设置为当前线程，同时**count**++；当线程调用**wait**方法，将释放当前持有的monitor， **_owner**设置为null，**count**--，同时进入 **_WaitSet**等待被唤醒；当前线程执行完毕后，也将释放monitor，同时复位**count**，以便其他线程进入获取monitor\n\n#### 锁类型\n\n在早期版本中，synchronized属于重量级锁，基于操作系统底层的**MutexLock互斥锁**来实现，线程的挂起和切换需要从用户态到内核态的转换，时间成本高；JDK6对synchronized做了优化，引入了自旋锁、偏向锁、轻量级锁、锁粗化和锁消除等，提高锁的效率，因此锁一共有四个状态，分别是无锁（01-0）、偏向锁（01-1）、轻量级锁（00）、重量级锁（10）\n\n1. 自旋锁：如果获取不到锁则会等待一段时间，不直接挂起线程，避免上下文切换的时间消耗。后来又引进了**自适应自旋锁**，其等待次数是自适应的，更加聪明\n2. 偏向锁：认为每次获取当前锁的都是同一线程，对象头MarkWord中的偏向线程ID存储了这个线程，因此加锁时只需要检查MarkWord中的偏向线程iID是否是当前线程，如果是则直接获取锁，否则就要检测当前锁状态是否是偏向锁，如果是则将当前线程id设置到MarkWord中的偏向线程ID，否则通过CAS竞争锁。此时如果有第二个线程竞争锁，会发现偏向线程id已指向了线程1，则出现了锁竞争，会触发重新偏向或升级到轻量级锁，大部分情况下是升级\n3. 轻量级锁：线程1获取锁，如果锁为无锁状态，将MarkWord拷贝到当前线程栈帧中的锁记录LockRecord，JVM将通过CAS尝试将MarkWord中的Lock Word指向LockRecord、将LockRecord的owner指向MarkWord，如果成功则将对象锁状态更新为轻量级锁，否则表示当前轻量级锁已经被获取了，将进入自旋，达到一定次数后膨胀为重量级锁（将MarkWord指向**互斥量Mutex**）。在释放锁时如果CAS将当前线程的LockRecord替换为MarkWord成功，则释放锁成功，进入无锁状态，否则说明MarkWord已经指向互斥量，锁为重量级锁，需要通知被阻塞的线程\n4. 重量级锁：当线程想要获取锁发现是重量级锁时，将被阻塞，等待锁释放时被唤醒。这样的操作需要操作系统来执行，从**用户态转换为内核态**，开销大，耗时。\n\n#### 什么是锁消除、锁粗化？\n\n- 锁消除：JVM判断不存在竞争，则不进行加锁，节省无意义的加解锁。\n\n- 锁粗化：一般来讲，我们尽量的让同步代码块的范围更小，这样影响的范围会更小，**并发程度高**，即使存在竞争也不需要等待太长时间，但是如果有一连续的加锁解锁，那么反而会造成性能降低 因此锁粗化就是在这种情况下，一连续的加锁解锁**合并**成一次加锁解锁，扩展锁的范围\n\n### 什么是CAS？它会有什么问题？\n\nCAS是指Compare And Swap，比较并交换，有3个操作数，分别是内存位置V、旧的预期值A和准备设置的新值B。CAS指令执行时，当且仅当V的值为A时，处理器才会用B更新V的值。其处理过程是原子操作，不会被其他线程打断。\n\n从语义上来说，如果V初次读取时A，并且在准备更新时仍为A，这并不能说明它没有被修改过，因为它可能已经**先变为C再被改回A**，但是CAS是察觉不到的，这个问题称为**ABA问题**。可以通过引入版本号、时间戳来解决这一问题。\n\n### 了解ReentrantLock吗？和synchronized有什么区别\n\nReentrantLock是JUC Lock接口的实现，synchronized是由JVM实现的，很多优化并不直接暴露给我们，ReentrantLock是API层面实现的，比synchronized拥有更细粒度的控制和更高级的功能，可实现中断响应、限时等待、等待通知、公平锁等。在性能上，JDK6之后做了许多优化，二者性能基本持平\n\n1. 中断响应：通过lockInterrupt获取锁，能在获取过程中响应中断，如果中断则不再等待获取锁直接返回。而不响应中断的获取锁则是等待到获取锁成功再将线程置于中断状态\n2. 等待通知：通过Condition的await将当前线程放入等待队列，直到获得信号唤醒线程，可以通过多个Condition实现**选择性唤醒**\n3. 公平锁：按照先来先服务的原则，等待时间长的先获得锁，代码上通过`!hasQueuedPredecessors`来判断是否有之前已经在等待的线程，再CAS获取锁\n4. 可重入锁：已获取锁的线程可以**重复获取**锁\n\n### 你提到了JUC，还了解JUC包的其他东西吗？\n\nJUC的核心是AQS队列同步器，内部维护一个双向等待队列，内部类Node作为结点包含前置后置指针以及线程标识，它使用一个 volatile int state 变量作为共享资源，当state为1则为**独占式**，一次只能有一个线程获取锁，否则为**共享式**；如果线程获取资源失败，则通过addWaiter进入同步队列等待；如果获取成功就执行临界区代码，释放资源时会通知同步队列中的等待线程。通过getState/setState/compareAndSetState来进行状态变更。采用**模板方法**设计模式，提供了tryAcquire、tryRelease等方法由子类实现。\n\n1. CountDownLatch：用于阻塞线程，等待所有线程（子任务）完成才继续执行，初始化传入子任务数量，通过countDown方法递减，当任务数量为0时await方法返回，继续执行当前线程；可以限制超时时间\n\n2. Semaphore：信号量，控制并发线程数，初始化传入并发数，每次通过acquire获取一个/多个资源，执行结束后通过release释放，tryAcquire尝试获取，也可以设置超时\n\n3. CyclicBarrier：多个线程同步等待，await方法会在准备好的线程达到要求的数量返回，继续执行，在count为0时会将count重置为原先输入的数量开启新一轮等待\n\n4. FutureTask：可以获取线程执行的返回值，可以取消，可以等待\n\n5. fork/join：切分子任务并行执行，把子任务放在不同的队列，从队列头部取出任务，执行完自己的任务后去其他子线程的任务队列尾部窃取一个任务。\n\n6. BlockingQueue：阻塞队列，当队列为空时消费者等待新的可消费对象，当队列满时生产者等待被消费再把可消费对象放入队列，有以下几个分类：\n\n   {% note info %}\n\n   ① ArrayBlockingQueue：先进先出，有界\n\n   ② DelayQueue：延迟队列，按执行时间排序\n\n   ③ LinkedBlockQueue：无界队列，可不指定大小\n\n   ④ PriorityBlockQueue：优先级，可插入null对象\n\n   ⑤ SynchronizedQueue：同步队列，不存储元素，只有元素被消耗才能再次插入\n\n   {% endnote %}\n\n### 创建线程有哪些方式？分别有什么优缺点\n\n1. 使用new Thread创建线程，可以使用实现了Runable和Callable接口的类，后者可以通过FutureTask获取返回值；继承Thread类，重写run方法。使用这种方式性能差，缺乏统一管理，占用过多资源容易导致oom，并且功能单一\n2. 使用线程池ThreadPoolExecutor：可重用存在的线程减小对象创建消亡的开销，可以控制最大并发线程数避免阻塞，可以定期执行定时执行单线程并发数控制等\n\n### 线程有哪些方法？\n\n1. sleep方法会让当前线程进入休眠状态，与wait不同的是该方法不会释放锁资源，进入的是TIME_WAITING状态\n2. yield方法会让出CPU时间片，回到RUNNABLE状态，与其他线程一起竞争时间片\n3. join方法用于等待其他线程运行终止，如果当前线程调用了其他线程的join方法，则当前线程进入BLOCKED状态，当另一个线程结束时，当前线程转为RUNNABLE，等待CPU时间片，底层使用的是wait，会释放锁\n\n### 线程有哪些状态？\n\n1. NEW：新建状态，尚未调用start启动\n2. RUNNABLE：Java将操作系统中的就绪和运行两种状态统称为RUNNABLE，此时线程可能在等待时间片或者正在执行\n3. BLOCKED：阻塞状态，可能由于锁被其他线程占用、调用了`sleep`/`join`方法\n4. WAITING：等待状态，不会被分配时间片，需要其他线程通知或终端，可能由于调用了无参的`wait`和`join`方法\n5. TIME_WAITING：限期等待状态，可以在指定时间内自行返回，可能由于调用了带参的`wait`和`join`方法\n6. TERMINATED：终止状态，表示当前线程已执行完毕或异常退出\n\n### 线程通信的方式有哪些？\n\n> 命令式编程中线程通信的方式有共享内存和消息传递两种，在共享内存的并发模型中线程间共享内存的公开状态，通过读-写内存中的公共状态进行隐式通信，在消息传递的并发模型中线程间没有公告状态，必须通过发送消息来显式通信。Java并发采用共享内存模型，线程间的通信隐式进行，对程序员完全透明。\n\n[volatie](#对volatile有什么理解？)：读取变量需要从主存中获取，写必须同步刷新回主存，保证所有线程对变量访问的可见性\n\n[synchronized](#谈一谈synchronized)：确保多个线程在同一时刻只能有一个处于方法/同步块中，保证线程对变量访问的原子性、可见性\n\nwait/notify：等待通知机制，线程A调用了对象的wait方法进入等待状态，线程B调用了对象的notify方法，线程A收到通知后结束组测并执行后续操作\n\n管道I/O流：用于线程间数据传输，媒介为内存，生产者消费者模式\n\n[ThreadLocal](#谈一谈ThreadLocal)：线程共享变量，可以为每个线程创建单独的副本，副本值时线程私有的，互相之间互不影响\n\n### 创建线程池有哪些参数，线程池有哪些分类？\n\n#### 参数：\n\n1. corePoolSize：核心线程数\n2. maximumPoolSize：最大线程数\n3. keepAliveTime：线程没有任务执行时最大存活时间\n4. unit：时间单位\n5. threadFactory：线程工厂，用来创建线程\n6. rejectHandler：拒绝策略，默认抛异常，可设为丢弃任务，丢弃最老任务，让当前线程转为执行该任务\n\n{% note warning %}\n\n小于核心线程数量：直接创建新线程处理任务。\n\n{% endnote %}\n\n{% note info %}\n\n在核心和最大之间：只有当workingQueue满才创建新线程。\n\n{% endnote %}\n\n{% note success %}\n\n当线程数到达max时，如果阻塞队列未满则放入阻塞队列等待空闲线程处理，否则，根据线程池设置的拒绝策略处理(抛异常等)\n\n{% endnote %}\n\n#### 分类：\n\n1. newFixThreadPool：核心线程和最大线程相同，指定核心线程和最大线程数，采用无界队列，当无空闲线程将任务放到无界队列等待被处理（可能造成**oom**）。适用于**CPU密集型**，确保CPU在长期被工作线程占用时，尽可能减少分配线程，适用执行**长期任务**\n2. newCachedThreadPool：核心线程为0，最大线程为整型最大值，使用同步队列，因为没有核心线程所以任务直接放在队列中，如果有空闲线程则取出任务执行，否则创建新线程执行任务。keepAliveTime为60s。适用于**并发执行量大短期的小任务**\n3. newSingleThreadPool：核心线程和最大线程都为1，使用无界队列，串行执行任务，keepAliveTime为0，通常是一个线程不停的串行执行所有任务\n4. newScheduleThreadPool：核心可选，最大线程数是整型最大值，keepAliveTime为0，使用延迟队列，线程从延迟队列中取出执行时间大于等于当前时间的任务执行完成后修改该任务的时间为当前时间并放回队列。适用于**周期/定期执行的任务**。\n\n### 线程池有哪些状态？\n\n1. running：可以接受新任务，处理队列中的任务。通过`shutdown `进入shutdown状态，`shutdownNow`进入stop状态\n\n2. shutdown：不再接受新任务，可以处理队列中的任务。等待队列中无任务，正在处理的任务也结束进入tidying状态\n\n3. stop：不再接受新任务，停止处理正在处理的任务/队列中的任务。进入tidying状态\n\n4. tidying：线程池的任务数为0。terminate执行完成进入terminated状态。\n\n5. terminated：彻底终止。\n\n### 谈一谈ThreadLocal\n\nThreadLocal是线程共享变量，主要用于一个线程内跨类、方法传递数据，ThreadLocal有一个静态内部类ThreadLocalMap，其key是ThreadLocal对象，值是Entry对象，Entry内只有一个Object的value，ThreadLocal是线程共享的，但ThreadLocalMap是线程私有的，ThreadLocal主要有get、set、remove三个方法\n\n- set：首先获取当前线程，然后再获取当前线程对应的ThreadLocalMap类型的对象map，如果map存在就设置key，key是当前的ThreadLocal对象，value是传入的参数；否则通过createMap方法创建一个ThreadLocalMap，再设置值\n- get：首先获取当前线程，然后再获取当前线程对应的ThreadLocalMap类型的对象map，如果map存在就以当前ThreadLocal对象作为key获取Entry类型的对象e，如果e存在就返回它的value；如果map或者e不存在，就调用setInitialValue方法先为当前线程创建一个ThreadLocalMap对象然后返回默认的初始值null\n- remove：获取ThreadLocalMap类型的对象map，如果map不为空，则解除ThreadLocal这个key及其value的联系\n\n#### 存在的问题\n\n1. 脏数据：线程池会复用Thread，因此ThreadLocal也会被复用，而如果没有通过remove方法清理与线程相关的ThreadLocal数据，则下一个线程可能会get到之前的数据\n2. 内存泄漏：由于ThreadLocal是弱引用，但Entry的value是强引用，因此当ThreadLocal被回收后，value没有被释放，造成内存泄漏，因此需要及时调用remove清理\n\n## I/O流问题\n\n### 同步、异步、阻塞、非阻塞都是什么概念？\n\n{% note info %}\n\n同步和异步是通信机制，阻塞和非阻塞是调用状态。\n\n{% endnote %}\n\n同步IO是用户线程发现IO请求后需要等待或轮询内核IO操作完成后才能继续执行；异步IO是用户线程发起IO请求后可以继续执行，当内核IO操作完成后会通知用户线程，或调用用户线程注册的回调函数。\n\n阻塞IO是IO操作需要彻底完成后才能返回用户空间；非阻塞IO是IO操作调用后立即返回一个状态值，无需等IO操作彻底完成。\n\n### Java中有哪些IO模型，简单介绍下\n\n1. BIO：**同步阻塞式**IO，JDK1.4之前的IO模型，服务器实现模式为一个连接请求对应一个线程，也就是一个客户端请求需要创建一个线程，适用于**连接数目少**且服务器资源多的情景。\n2. NIO：**同步非阻塞**IO，JDK1.4引入，服务器实现模式为多个连接请求对应一个线程，客户端连接请求会注册到一个多路复用器Selector，Selector轮询到连接有IO请求时才启动以恶搞线程处理，适用于连接**数目多**且连接**时间短**的场景。\n3. AIO：**异步非阻塞**IO，JDK7引入，服务器实现模式为一个有效请求对应一个线程，客户端的IO请求都是由操作系统先完成IO操作再通知服务器应用来直接使用准备好的数据，适用于连接**数目多**且连接**时间长**的场景。\n\n#### 详细介绍下NIO\n\n不同于传统的IO，NIO以块的方式传输数据，一次处理一个数据块，可以控制读取某个位置的数据，速度更快。它有几个重要的组件：\n\n1. Buffer：缓冲区，本质是一块可读写的内存，用来简化数据读写，不再以字节来处理数据，并提供flip、clear、compact来切换读写状态，通过读写位置position和极限位置limit来实现\n2. Channel：通道是对IO中流的模拟，通过Channel读写数据，将数据读取到Buffer/通过Buffer将数据写出，一个Buffer可以切换读写，被不同的Channel使用，这让NIO成为了非阻塞的IO，通过Channel的返回就可以知道缓冲区是否有数据，而不是和IO流一样需要阻塞等待数据。\n3. Selector：多路复用器，轮询检查多个Channel的状态，判断注册事件是否发生，即判断Channel是否处于可读/可写状态\n\n其工作流程是通过Selector的静态方法open实例化一个选择器，通过Channel的register方法将通道的某个事件和Selector绑定起来，事件有CONNECT、ACCEPT、READ、WRITE。Selector的select方法返回目前就绪的通道数，通过selectKeys得到对应的集合，处理其中的事件\n\n### IO包下有哪些流？\n\n主要分为字符流和字节流，字符流一般用于处理文本文件，其他类型用字节流处理\n\n- 字节流：使用了**装饰器模式**，InputStream和OutputStream是抽象组件，FileInputStream、ByteArrayInputStream是基础实现类，FilterInputStream是抽象装饰器，其实现类BufferInputStream、PushBackInputStream等为基础实现类提供了额外的功能，使用BufferInputStream装饰FileInputStream（在FileInputStream外套上BufferInputStream）可以实现具有缓存的输入流；使用PushBackInputStream装饰ByteArrayInputStream可以实现具有回退读取unread的功能的输入流；**DataInputStream**提供了读取Java基本数据类型的方法，实现上并未改变基本的读写方法，只是动态的处理成需要的类型。\n- 字符流：在程序中一般操作的是字符形式的数据，Java提供了基本的InputStreamReader和OutputStreamWriter完成了字节流和字符流之间的编解码转换，家族结构和Stream类似也采用了**装饰器模式**。\n\n### 序列化和反序列化是什么？\n\nJava对象在JVM退出时会全部销毁，如果需要将对象及状态持久化，就要通过**序列化**实现，将内存中的对象保存在二进制流中，需要时再将二进制流**反序列化**为对象。对象序列化保存的是对象的状态，因此类的**静态变量**不会被序列化。常见的序列化方式有以下几种：\n\n1. Java原生：实现Serializable接口，Java 序列化保留了对象类的元数据（如类、成员变量、继承类信息）以及对象数据，兼容性最好，但不支持跨语言，性能一般。序列化和反序列化必须保证序列化ID一致，如果没有序列化ID，则会抛异常。具体的序列化过程：判断对象类型，写入**对象类型标记**；写入**对象类信息**，包括类名、序列化ID、字段数、字段名等；写入**实例数据**，基本类型直接写入，引用类型**递归**调用**writeObject**写入\n2. Hessian：支持跨语言、动态类型，用一个字节表示常用基础类型，极大缩短二进制流，更加高效\n3. JSON：转化为JSON字符串，不记录类型信息，因此反序列化需要提供类型信息才能正确进行；可读性高\n\n## JVM相关\n\n### 介绍一下Java虚拟机的整体结构？各个模块的作用\n\n在Java程序的执行过程中，JVM把它管理的内存划分为不同的数据区，其中线程私有的有程序计数器、虚拟机栈、本地方法栈，线程共享的有堆、方法区，虚拟机的类加载器负责将类信息加载到内存中，执行引擎负责执行字节码，采用即时编译技术。\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722004726.png)\n\n1. 程序计数器：每个线程有自己的计数器，指示当前线程所执行字节码的行号，改变计数器的值选取下一条指令。对于Java方法记录了字节码的指令地址；对于本地方法，值为undefined\n2. 虚拟机栈：每个栈帧中有局部变量表存储方法内使用的变量、操作数栈、动态链接、返回地址，每新调用一个方法就创建一个栈帧，因此递归过深超过虚拟机允许的深度会报StackOverflowError\n3. 本地方法栈：native方法的栈，调用本地方法时虚拟机栈不变，动态链接并直接调用指定本地方法，同样会报StackOverflowError\n4. 方法区：存储类信息、常量、静态变量、即时编译的代码缓存等。JDK8之前使用永久代实现方法区，容易内存溢出，JDK7中把放在永久代的字符串常量池、静态变量等移出，JDK8废弃永久代，采用本地内存实现的元空间代替\n\n### 运行时常量池、字符串常量池、Class常量池\n\n- Class常量池：class文件中包含了类的版本、字段、方法、接口等信息，还有常量池（Constant Pool Table），存放编译器生成的字面量和符号引用\n- 运行时常量池：类会经过加载、验证、准备、解析、初始化加载到内存，JVM会将class常量池中的内容存放到运行时常量池，class常量池存放的并不是对象实例，因此在解析阶段将会查找字符串常量池，将符号引用转换为直接引用\n- 字符串常量池：在经过验证、准备阶段后，在堆中生成字符串实例，将其引用值存放到字符串常量池中，被所有类共享\n\n### Java程序是怎样运行的？\n\n首先通过javac将.java编译为JVM可加载的.class字节码文件，之后通过即时编译器JIT把字节码文件翻译为本地机器码，之后执行引擎将执行指令代码\n\n### 有哪些类加载器？类加载的过程是怎样的？\n\n启动类加载器**BootstrapClassLoader**负责加载/lib/rt/下的核心类库java.* ；由C++编写，平台/扩展类加载器**ExtClassLoader**加载/lib/ext下的扩展类库javax.* ；应用类加载器**AppClassLoader**加载用户写的类，位置在classpath下；另外，还可以通过继承ClassLoader实现自定义的类加载器，通过findClass方法将字节数组传入由defineClass方法负责加载到JVM中。\n\n类加载采用双亲委派机制：一个类加载器接收到类加载请求会将请求**委派给父加载器**，只有当父加载器没法完成时，才会由子加载器尝试加载。可以确保类在每个类加载器环境都是同一个，避免重复加载。\n\n类加载过程分为**加载**、**链接**、**初始化**三个阶段，加载阶段将class字节码加载到JVM，生成class对象，链接阶段先通过**验证**检查class的安全性和正确性，之后为类变量分配空间并设置初始值，称为**准备**，在**解析**时将常量池内的符号引用转换为直接引用，最后的初始化阶段执行类变量赋值和静态代码块。\n\n### 创建对象new的时候发生了什么？\n\n1. 当JVM遇到字节码new指令时，首先检查该指令的参数能否在常量池定位到一个类的符号引用，并检查引用代表的类是否已被加载、解析、初始化，如果没有则执行类加载\n2. 类加载检查通过后，虚拟机将为新生对象分配内存\n3. 内存分配完成后虚拟机将成员变量设为初始值，保证对象的实例字段可以不赋初值就使用\n4. 设置对象头，包括hashCode、GC信息、锁信息、类类型等\n5. 执行init方法，初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋给引用变量\n\n### 如何判断对象是否为需要被回收？\n\n- 引用计数：在对象中添加一个引用计数器，如果被引用计数器加 1，引用失效时计数器减 1，如果计数器为 0 则被标记为垃圾。原理简单，效率高，但是存在对象间循环引用的问题，导致计数器无法清零。\n- 可达性分析：判断对象的引用链是否可达。将所有对象组成图，从一系列GC Root对象开始向下搜索其他对象，路径称为引用链，如果所有的GC Root都无法到达的对象则判定为垃圾。可以作为GC Root对象的有虚拟机栈和本地方法栈中引用的对象、类静态属性引用的对象、常量引用的对象。\n\n### Java中有哪些引用类型？\n\n1. 强引用：最常见的引用，只要对象有强引用且GC Root可达，在垃圾回收时即使内存耗尽也不会被回收\n2. 软引用：在内存即将耗尽时，会把软引用关联的对象加入回收范围\n3. 弱引用：只能生存到下次年轻代GC前\n4. 虚引用：定义完成后无法通过引用来获取该对象，只是为了在对象被回收时收到一个系统通知\n\n### 有哪些GC算法？\n\n- 复制算法：对内存分为对象面和空闲面，将存货的对象复制到空闲面，然后将对象面所有对象从内存清除。减少碎片，适合对象存活率低的场景，复制越少越快。但是意味着要有一块空闲空间不能使用\n- 标记-清除算法：使用可达性算法标记垃圾，之后将垃圾清除。会产生碎片\n- 标记-整理算法：使用可达性算法标记，移动存货的对象，将对象顺序排列，之后清除最后一个对象的地址之后的内存空间。减少碎片，也不需要设置两块内存，适用于存活率高的场景\n\n### 常见的垃圾收集器有哪些？\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722004738.png)\n\n1. Serial：单线程收集，采用复制算法，会STW，Client模式年轻代默认收集器\n2. ParNew：多线程收集，其他于Serial相同，追求低停顿\n3. ParallelScavenge：多线程收集，采用复制算法，更关注系统吞吐量，Server模式年轻代默认收集器\n4. Serial Old：单线程收集，采用标记-整理算法，Client模式老年代默认收集器\n5. Parallel Old：多线程收集，采用标记-整理算法，追求吞吐量\n6. CMS：追求最短停顿时间，采用标记-清除算法，过程较复杂\n7. G1：不再区分以老年代/年轻代简单区分内存，以Region内存布局面向局部收集，实现了可预测的停顿\n\n#### CMS回收过程\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722004753.png)\n\n**初始标记**阶段进入STW，使用单线程标记GC Root直接关联的对象；**并发标记**阶段从初始标记的对象开始遍历，耗时较长但是不需要停顿；**重新标记**阶段修正在并发标记期间因用户程序运作而导致标记产生变动的部分记录，需要STW；**并发清除**清理垃圾，不需要移动对象，可以并发执行\n\n#### G1回收过程\n\n**初始标记**阶段进入STW，标记GC Root直接关联的对象，让下一阶段用户线程并发运行时能正确地在可用的Region中分配新对象；**并发标记**阶段从初始标记的对象开始遍历，查找整个堆，扫描完成后要重新处理此过程中变化的部分；**最终标记**进入短暂的STW，处理并发阶段结束后仍遗留的少量SATB记录；**筛选回收**对各Region的回收价值排序，根据用户期望停顿事件制定回收计划，需要暂停用户线程，多线程并发完成\n\n### 你知道哪些内存分配和回收策略？\n\n1. 对象优先在Eden区分配：大多数情况下对象在新生代Eden区分配，当Eden不足时会触发Minor GC\n2. 大对象直接进入老年代：通过指定-XX:PretenureSizeThreshold参数，大于该值的直接在老年代分配\n3. 长期存活对象进入老年代：通过指定-XX:MaxTenuringThreshold参数，对象年龄大于该值的进入老年代，没经过一次Minor GC，年龄+1\n4. 动态对象年龄判定：当Survivor中相同年龄所有对象大小的总和大于Survivor的一半，则将年龄不小于该年龄的对象放入老年代\n5. 空间分配担保：Minor GC前虚拟机必须检查老年代最大连续可用空间是否大于新生代对象总空间，满足则说明Minor GC安全；如果不满足，虚拟机会查看-XX:HandlePromotionFailure是否允许担保失败，允许则检查老年代最大连续可用空间是否大于历次晋升老年代对象的平均大小，如果满足则冒险尝试Minor GC，否则进行Full GC\n\n### 了解哪些JVM调优工具？\n\n1. JVisualVM：自带，不需要配置，可以看到内存信息、线程信息、dump和CPU分析\n2. JPS：查看指定host的JVM进程、PID、启动路径和参数等等\n3. JConsole：监控某个JAVA应用程序，在overview中查看内存、线程、类及CPU使用情况\n\n## 常见的设计模式\n\n### 设计模式要遵循哪些原则？\n\n1. 开闭原则：面向对象的基本原则，指一个实体应该对扩展开放，对修改关闭，提高代码的可复用性和可维护性\n2. 单一职责原则：一个类、接口或方法只负责一个职责，降低代码复杂度以及变更引起的风险\n3. 依赖倒置原则：程序应该依赖于抽象类/接口，而不是具体的实现类\n4. 接口隔离原则：将不同功能定义在不同接口中实现接口隔离，避免类依赖了它不需要的接口，减少接口之间依赖的冗余和复杂性\n5. 里氏替换原则：开闭原则的补充，规定了任何父类可以出现的地方子类都可以出现，可以约束继承泛滥，加强程序健壮性\n6. 迪米特原则：也叫最少知道原则，每个模块对其他模块都要尽可能少地了解和依赖，降低代码耦合度\n7. 合成/聚合原则：尽量使用组合（has-a）、聚合（contains-a）而不是继承（is-a）达到软件复用的目的\n\n### 你了解哪些设计模式？\n\n> 设计模式分为创建型、结构型和行为型。创建型在创建对象时**隐藏创建逻辑**，不适用new直接实例化对象；结构型通过类和接口间的**继承和引用**实现创建复杂结构的对象；行为型通过类之间**不同通信方式**实现不同的行为\n\n{% note info %}\n\n创建型：单例模式、工厂模式、建造者模式、原型模式\n\n{% endnote %}\n\n{% note success %}\n\n结构型：适配器模式、桥接模式、装饰器模式、代理模式、组合模式\n\n{% endnote %}\n\n{% note warning %}\n\n行为型：模板方法模式、策略模式、责任链模式、观察者模式、命令模式\n\n{% endnote %}\n\n#### 讲讲单例模式？\n\n单例模式属于创建型模式，一个单例类在任何情况下只存在一个实例，私有化构造方法，提供一个静态方法向外提供静态实例变量。数据库连接池、ServletContext、Spring的单例Bean等都是单例模式的应用\n\n- 饿汉式：线程安全，在加载时完成实例的创建，提供静态方法获取实例变量\n\n  ```java\n  public class HungrySingleton{\n      private HungrySingleton(){\n          \n      }\n      private static HungrySingleton instance = new HungrySingleton();\n      \n      public static HungrySingleton getInstance(){\n          return instance;\n      }\n  }\n  ```\n\n  \n\n- 懒汉式：在外部调用时才会创建实例，通过双重检测锁、静态内部类、枚举等方法来保证线程安全\n\n  双重检测锁：synchronized加锁，volatile禁止指令重排序\n\n  静态内部类：线程安全、延迟加载\n\n  枚举：简洁、序列化和反序列化无法破解。反射的newInstance方法会判断是否类被枚举修饰，是则抛出异常。序列化时枚举的每个变量都是静态的所以在jvm中只有一份。\n\n  {% fold 展开代码 %}\n\n  ```java\n  /*\n   * 线程不安全\n   */\n  public class LazySingleton{\n      private LazySingleton(){\n          \n      }\n      private static LazySingleton instance = null;\n      \n      public static LazySingleton getInstance(){\n          if(instance == null){\n              instance = new LazySingleton();\n          }\n          return instance;\n      }\n  }\n  /*\n   * 双重检测锁机制\n   */\n  public class LazySingleton{\n      private LazySingleton(){}\n      \n      private volatile static LazySingleton instance; //禁止内存重排序\n      \n      public static LazySingleton getInstance() {\n          if(instance == null) {\n              synchronized (LazySingleton.class) {\n                  if (instance == null) {\n                      instance = new LazySingleton();\n                  }\n              }\n          }\n          return instance;\n      }\n  }\n  /*\n   * 静态内部类\n   */\n  public class LazySingleton {\n      private LazySingleton(){}\n      \n      public static LazySingleton getInstance() {\n          return SingletonHolder.instance;\n      }\n      \n      private static class SingletonHolder {\n          private static final LazySingleton instance = new LazySingleton();\n      }\n  }\n  /*\n   * 枚举实现\n   */\n  public enum LazySingleton{\n      INSTANCE;\n  }\n  ```\n\n  {% endfold %}\n\n#### 讲讲工厂模式\n\n工厂模式属于创建型模式，有**简单工厂**模式、**工厂方法**模式、**抽象工厂**模式三种\n\n1. 简单工厂模式：由工厂对象来创建实例，客户端只需要传入参数即可，由工厂对象进行判断和创建具体类型的实例。适用于创建对象类型较少的场景，如果要增加新类型，需要修改工厂对象的判断逻辑，违背了**开闭原则**。Calendar抽象类的getInstance方法调用了createCalendar根据不同的地区参数创建不同的日历对象，Spring的BeanFactory通过Bean唯一标识来获取Bean\n2. 工厂方法模式：定义一个创建对象的接口，让接口的实现类决定创建哪种对象，让类的实例化推迟到子类中进行，解决了简单工厂中产品扩展的问题。Collection接口中定义了一个iterator工厂方法，返回了一个Iterator类的抽象产品，该方法由ArrayList、HashMap等具体工厂实现；Spring的FactoryBean接口的getObject方法也是工厂方阿飞\n3. 抽象工厂模式：提供一个创建一系列相关或相互依赖对象的接口，无需指定它们的具体类，主要用于系统的产品有多于一个的产品族，而系统只消费其中某一个产品族产品的情况。Connection接口应用了抽象工厂，其中包括Statement、Blob、Savepoint等抽象产品\n\n#### 建造者模式了解吗？\n\n建造者模式属于创建型模式，一个类由多个部件构成，一个不见可以有多种实现，通过组合可以创建出不同的实例，在创建该类时，使用者通过一个指挥者实例，实例中有一个抽象建造者，抽象建造者定义了待实现的建造方法(针对不同部件)，抽象建造者的实现类则做出了具体实现。指挥者通过建造者就可以完成对产品的建造，最后将结果返回给使用者。\n\n#### 讲一讲代理模式\n\n代理模式属于结构型模式，为其他对象提供一种代理以控制对被代理对象的访问，可以增强目标对象的功能，降低代码耦合度，扩展性好。分为静态代理和动态代理两种方式，静态代理在运行前就已经确定了代理类和被代理类的关系，动态代理具有更强的适用性\n\nJDK动态代理和CGLib动态代理详细介绍参见 [JDK和CGLib](http://realmicah.xyz/posts/caab1d3c.html#JDK动态代理).\n\n#### 讲一讲装饰器模式？\n\n装饰器模式属于结构型模式，不改变类原有的属性，动态的增加其他属性，装饰器是一个抽象制定了待实现的装饰方法，可以有不同的实现，将已有的类传入装饰器后对其进行装饰。[Java IO流家族](#IO包下有哪些流？)应用了这种模式\n\n#### 装饰器和代理有什么区别？\n\n装饰器模式的关注点在于给对象动态**添加方法**，而动态代理更注重对象的**访问控制**。动态代理通常会在代理类中**创建被代理对象的实例**，而装饰器模式会将被装饰者作为构造方法的**参数**。\n\n#### 适配器模式了解吗？有什么应用？\n\n适配器模式属于结构型模式，将一个类的接口转换为使用者接受的另一种接口，解决由于**不兼容**而不能一起工作的问题。适配器Adapter继承/实现期待的类/接口，在实现期待的接口时，使用用于适配的不兼容者来实现。这样在外部看来就是期待的状态但我们内部通过适配器将原本不兼容的转换为可接受的状态。Java的字符流操作应用了适配器模式，SpringMVC的HandlerAdapter通过适配规则调用不同的处理请求handle方法，Arrays.asList将数组转换为对应的集合\n\n#### 模板方法模式有了解吗？\n\n模板方法模式属于行为型模式，使子类可以在不改变算法结构的情况下重新定义算法的某些步骤，适用于抽取子类重复代码到公共父类，[JUC的AQS](#你提到了JUC，还了解JUC包的其他东西吗？)应用了模板方法模式，HttpServlet定义了一套处理HTTP请求的模板，service为模板方法定义了基本处理流程，doGet/doPost为基本方法，子类可重写这些方法\n\n#### 讲讲责任链模式\n\n责任链模式属于行为型模式，责任链是指由多个继承了抽象处理类的子类组成的处理链条，通过next连接，将对于某个请求的处理交给一条处理链，子类会不断地转发给下一个子类一直向下处理。Spring的拦截器中HandlerExecutionChain将拦截器放在一个list中，前置处理做正向循环直到被拦截就停下，后置处理从这个位置开始逆向循环做后置处理\n\n#### 对观察者模式有什么了解？\n\n观察者模式属于行为型模式，也叫发布订阅模式，定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都能得到通知并被自动更新。ServletContextLister能够监听ServletContext对象的生命周期，当启动时调用contextInitialized方法，终止时调用contextDestroyed方法\n\n如何实现：一个包含了观察者集合和对观察者集合进行操作以及通知观察者的方法的抽象类。一个包含了更新自己的抽象方法，在收到被观察者状态改变通知时被调用。被观察者实现类实现具体的通知方法，当实现类状态改变时通过通知方法调用观察者更新自己的方法。\n\n## 海量数据处理面试问题\n\n1. 海量日志数据，提取出某日访问百度次数最多的IP\n\n   每个IP为32位，最多2^32个，可以通过Hash取模将整个大文件映射为n个小文件，再找出每个小文件中出现次数最多的IP（可以使用HashMap统计次数），再从这个1000个中找到最多的那个\n\n2. 搜索引擎会通过日志记录用户检索的检索串，每个检索串长度为1-255字节，假设有一千万个记录，去重后不超过三百万个，统计最热门的10个检索串\n\n   首先可以通过Hash取模的方法将其分为n个小文件，再利用HashMap完成排序；借助堆结构，维护一个K大小的小根堆，遍历三百万个数据，放入小根堆。\n\n3. 有一个1G大小的文件，每一行是一个词，词的大小不超过16字节，内存限制是1M，返回出现次数最多的100个词\n\n   通过Hash取模将文件分成n个小文件中，保证一个文件大小小于1M，对每个小文件通过HashMap统计出其频率，取出频率最高的100个词，写入新的文件，这样有得到了n个小文件，然后再对这n个小文件执行归并排序\n\n4. 有10个文件，每个文件1G，每行存放用户的query，每个文件的query都可能重复，按query的频次排序\n\n   \n\n5. \n\n","slug":"Java基础面试总结","published":1,"date":"2020-05-11T14:19:39.797Z","updated":"2020-08-06T01:16:56.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2b002rz4ej8hnzfepx","content":"<p/>\n\n<a id=\"more\"></a>\n\n<div class=\"note info\"><p>长文预警  🤣 谨慎食用 💡 善用搜索和目录</p></div>\n\n<h2 id=\"语言特性\"><a href=\"#语言特性\" class=\"headerlink\" title=\"语言特性\"></a>语言特性</h2><h3 id=\"说说Java语言的特点？\"><a href=\"#说说Java语言的特点？\" class=\"headerlink\" title=\"说说Java语言的特点？\"></a>说说Java语言的特点？</h3><ol>\n<li>平台无关性：实现一次编译，到处运行</li>\n<li>相对安全的内存管理和访问机制，避免大部分内存泄露和指针越界</li>\n<li>热点代码检测和运行时编译及优化，使程序随运行时间增长获得更高性能</li>\n</ol>\n<h3 id=\"Java如何实现平台无关？\"><a href=\"#Java如何实现平台无关？\" class=\"headerlink\" title=\"Java如何实现平台无关？\"></a>Java如何实现平台无关？</h3><p>Java的源代码经过编译后生成的字节码是和计算机体系结构无关的指令，可以在任何机器上解释执行，动态地转换成本地机器代码，而这个过程是由JVM完成的，不同平台使用不同的JVM，屏蔽了不同操作系统的差异。</p>\n<h3 id=\"Java是值传递还是引用传递？\"><a href=\"#Java是值传递还是引用传递？\" class=\"headerlink\" title=\"Java是值传递还是引用传递？\"></a>Java是值传递还是引用传递？</h3><blockquote>\n<p>值传递是指方法接收调用者提供的值，引用传递是指方法接收调用者提供的变量地址</p>\n</blockquote>\n<p>Java是值传递，方法接受的是参数的副本，对于基本数据类型，改变入参不会影响实参；对于对象，接受的是对象的引用，改变其属性值会影响实参，但是改变这个引用并不会让实参引用新的对象</p>\n<h3 id=\"谈谈深拷贝和浅拷贝？\"><a href=\"#谈谈深拷贝和浅拷贝？\" class=\"headerlink\" title=\"谈谈深拷贝和浅拷贝？\"></a>谈谈深拷贝和浅拷贝？</h3><p>深拷贝完全拷贝基本数据类型和引用数据类型，浅拷贝值复制基本引用类型和引用变量，没有复制引用变量指向的实际对象。修改克隆对象可能影响原对象，不安全。</p>\n<h3 id=\"什么是反射？\"><a href=\"#什么是反射？\" class=\"headerlink\" title=\"什么是反射？\"></a>什么是反射？</h3><p>反射是指在运行状态中，可以获得任意一个类的属性和方法，可以调用任意一个对象的方法和属性。反射破坏了<strong>封装性</strong>和<strong>泛型约束</strong>。</p>\n<h3 id=\"Class类的作用？\"><a href=\"#Class类的作用？\" class=\"headerlink\" title=\"Class类的作用？\"></a>Class类的作用？</h3><p>在程序运行期间，Java运行时系统为所有对象维护一个运行时类型标识，这个信息会跟踪每个对象所属的类，虚拟机利用运行时类型信息选择要执行的正确方法，保存这些信息的类就是Class，可以通过<code>类名.class</code>、<code>对象.getClass()</code>、<code>Class.forName(类的全限定名)</code>来获取Class对象</p>\n<h3 id=\"什么是注解、元注解？\"><a href=\"#什么是注解、元注解？\" class=\"headerlink\" title=\"什么是注解、元注解？\"></a>什么是注解、元注解？</h3><p>注解是一种标记，使类/接口/方法/属性附加额外信息，完成特定功能。</p>\n<p>元注解是注解的注解，用于标识注解的相关信息。</p>\n<ol>\n<li>@Target({参数列表})：注解作用域，可填参数为：CONSTRUCTOR-构造方法、FIELD-属性、METHOD-方法、PACKAGE-包、LOCAL_VARIABLE-局部变量、TYPE-类/接口</li>\n<li>@Retention(参数)：生命周期，可填参数为：RUNTIME-运行时注解，可以通过<strong>反射</strong>获取、SOURCE-源代码注解、CLASS-编译时注解，运行时注解</li>\n<li>@Inherited：可继承到子类，但不能继承到子类的方法</li>\n<li>@Document：生成java-doc会包含注解信息</li>\n</ol>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">如何获取注解</div></div><div class=\"fold\">\n<p>通过反射获取运行时的注解信息，getAnnotations方法</p>\n\n</div></div>\n\n<h3 id=\"什么是泛型？\"><a href=\"#什么是泛型？\" class=\"headerlink\" title=\"什么是泛型？\"></a>什么是泛型？</h3><p>泛型可以看作一种数据类型，用来接收未知的数据类型，解决不确定对象具体类型时可能发生强制转换异常等问题，Java中的泛型时防止有效输入的，在编译器有效。通过反编译可以看到如果泛型T没有被指定，则会转换为多态，即类型声明为Object；在使用对应数据时将在返回之前加一条checkcast来做类型转换。</p>\n<h3 id=\"异常体系\"><a href=\"#异常体系\" class=\"headerlink\" title=\"异常体系\"></a>异常体系</h3><p>Throwable下有Error和Exception，Error用来标识JVM无法处理的错误，Exception分为受检异常和不受检异常，也叫编译期异常和运行时异常，编译期异常如果不处理会编译失败，运行时异常可以通过编译，RuntimeException及其所有子类都是运行时异常，除此之外都是编译期异常。其体系结构图如下：</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004710.png\" alt=\"图片\"></p>\n<p>处理过程参见<a href=\"/posts/f885a170.html\" title=\"Java异常体系\">Java异常体系</a></p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><ol>\n<li>byte：1字节</li>\n<li>char：2字节</li>\n<li>int：4字节</li>\n<li>short：2字节</li>\n<li>long：8字节</li>\n<li>float：4字节</li>\n<li>double：8字节</li>\n<li>boolean：JVM编译时会转为int类型存储，true-&gt;1,false-&gt;0</li>\n</ol>\n<h3 id=\"包装类型自动装箱-拆箱是什么？\"><a href=\"#包装类型自动装箱-拆箱是什么？\" class=\"headerlink\" title=\"包装类型自动装箱/拆箱是什么？\"></a>包装类型自动装箱/拆箱是什么？</h3><div class=\"note info\"><p>每个基本数据类型都有自己的包装类型，之间的自动转化称为拆箱和装箱。封装成包装类型主要是面向对象的设计，可以提供更方便的操作某种数据类型的方法，例如<code>parseInt()</code>。</p>\n<p>包装类型设有缓存池，在使用<code>valueOf()</code>的方法时先查看是否在缓存池中，没有再通过 <code>new Integer()</code>在堆中创建一个新对象。</p></div>\n\n<h3 id=\"String为什么是不可变对象？但是又可以修改它的值？\"><a href=\"#String为什么是不可变对象？但是又可以修改它的值？\" class=\"headerlink\" title=\"String为什么是不可变对象？但是又可以修改它的值？\"></a>String为什么是不可变对象？但是又可以修改它的值？</h3><p>在Java中String被<strong>final</strong>关键字修饰，因此是不可被继承的。存储字符串内容的char数组也通过<strong>final</strong>修饰，并且不提供修改数组的方法，因此String是不可变的。Java9中改用byte数组存放，并用coder指定编码类型（0-单字节Latin-1，1-双字节UTF-16）。主要是为了节省空间。</p>\n<p>对一个String对象的修改实际上都是创建了一个新String对象，再引用该对象。</p>\n<h3 id=\"String和StringBuidler和StringBuffer的区别\"><a href=\"#String和StringBuidler和StringBuffer的区别\" class=\"headerlink\" title=\"String和StringBuidler和StringBuffer的区别\"></a>String和StringBuidler和StringBuffer的区别</h3><p>String字符串相加时底层通过StringBuilder实现，但每次都会新生成一个StringBuidler对象且最终通过toString方法返回拼接后的字符串。StringBuilder可解决在字符串相加时创建多个字符串占用空间多效率低下的问题，底层是未被final修饰的初始容量为16的byte数组，可自动扩容。StringBuffer使用synchronized修饰，线程安全。</p>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><h3 id=\"谈谈你对面向对象的理解？\"><a href=\"#谈谈你对面向对象的理解？\" class=\"headerlink\" title=\"谈谈你对面向对象的理解？\"></a>谈谈你对面向对象的理解？</h3><p>面向过程让计算机有步骤地顺序做一件事，是过程化思维，使用面向过程语言开发大型项目，模块之间耦合严重，面向对象区别与面向过程，强调高内聚低耦合，对现实事物进行抽象并映射成对象，定义共性行为，再解决实际问题。</p>\n<h3 id=\"面向对象的三个特性？\"><a href=\"#面向对象的三个特性？\" class=\"headerlink\" title=\"面向对象的三个特性？\"></a>面向对象的三个特性？</h3><ol>\n<li>封装：是对象功能内聚的表现形式，对属性、数据、敏感行为实现隐藏，对属性的访问和修改必须通过公共接口实现。封装使对象关系变得简单。</li>\n<li>继承：用来扩展一个类，子类继承父类的部分属性和行为使模块具有复用性，继承是“is a”的关系。</li>\n<li>多态：以封装和继承为基础，根据运行时对象实际类型使同一行为具有不同表现形式。因为在编译时无法确定最终调用的方法体，在运行时由JVM动态绑定，调用合适的重写方法。</li>\n</ol>\n<h3 id=\"重载和重写的区别？\"><a href=\"#重载和重写的区别？\" class=\"headerlink\" title=\"重载和重写的区别？\"></a>重载和重写的区别？</h3><ol>\n<li>重载：在同一个类中，对同名函数的不同实现，其参数类型/顺序/个数不同。但不能以返回值来作为标准，因为我们在调用方法时有时并不关注返回值。对于编译器来说，方法名称和参数列表构成了一个唯一的方法签名，重载在编译时就知道该调用哪个方法，因此属于静态绑定，并不属于<strong>多态</strong>。</li>\n<li>重写：在子类中，重写父类方法，要求返回相同类型或子类型，且访问权限不能变小，抛出的异常类型不能变大。</li>\n</ol>\n<h3 id=\"对象的通用方法？\"><a href=\"#对象的通用方法？\" class=\"headerlink\" title=\"对象的通用方法？\"></a>对象的通用方法？</h3><ol>\n<li>equals：判断对象是否相等，默认使用==，可重写equals方法实现自定义比较逻辑。对于基本数据类型，判断值是否相等，对于引用类型，判断是否引用自同一对象</li>\n<li>hashCode：对象的散列值，等价的对象散列值一定相等，反之不然。在重写equals方法时应同时重写hashCode，保证等价的对象散列值相等</li>\n<li>toString：默认返回类名+@+数值，数值为散列值的无符号十六进制表示</li>\n<li>clone：克隆，默认用protected修饰，如果没有显式重写clone方法编译器报错时protected的访问错误了；如果重写了clone但没有让类实现Cloneable接口，将会抛出CloneNotSupported异常。默认实现的是浅拷贝，可以通过重写实现深拷贝</li>\n<li>getClass：获取对象的类类型</li>\n<li>finalize：在对象被回收时可能被调用。在finalize中重新与引用链上的对象建立关联就可以被移出回收集合不被回收</li>\n<li>作为锁的几个方法：wait、notify、notifyAll</li>\n</ol>\n<h3 id=\"内部类的作用是什么，有哪些分类？\"><a href=\"#内部类的作用是什么，有哪些分类？\" class=\"headerlink\" title=\"内部类的作用是什么，有哪些分类？\"></a>内部类的作用是什么，有哪些分类？</h3><p>内部类方法可以访问定义这个内部类的作用域中的数据，包括private。编译器会将内部类转换为常规的类文件，以$分隔外部类和内部类名。</p>\n<ol>\n<li>静态内部类：只加载一次，可通过外部类名.内部类名直接访问，可以访问外部类的所有静态属性和方法。HashMap的Node节点、ReentrantLock中的Sync都是静态内部类</li>\n<li>成员内部类：外部类的每个对象都会加载一次，不可以定义静态成员和方法，可访问外部类的所有内容</li>\n<li>局部内部类：定义在方法内，不能声明访问修饰符，只能定义实例成员变量和实例方法</li>\n<li>匿名内部类：只用一次的没名字的类，字节码文件以数字编号命名</li>\n</ol>\n<h3 id=\"接口和抽象类的异同？\"><a href=\"#接口和抽象类的异同？\" class=\"headerlink\" title=\"接口和抽象类的异同？\"></a>接口和抽象类的异同？</h3><blockquote>\n<p>接口和抽象类对实体类进行更高层次的抽象，仅定义公共行为和特征。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">维度</th>\n<th align=\"center\">接口</th>\n<th align=\"center\">抽象类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">成员变量</td>\n<td align=\"center\">无要求</td>\n<td align=\"center\">默认public static final常量</td>\n</tr>\n<tr>\n<td align=\"center\">构造方法</td>\n<td align=\"center\">有构造方法，不能实例化</td>\n<td align=\"center\">没有构造方法，不能实例化</td>\n</tr>\n<tr>\n<td align=\"center\">方法</td>\n<td align=\"center\">抽象类可以没有抽象方法，但有抽象方法一定是抽象类</td>\n<td align=\"center\">默认public abstract，JKD8支持默认/静态方法，JDK9支持私有方法</td>\n</tr>\n<tr>\n<td align=\"center\">继承</td>\n<td align=\"center\">单继承</td>\n<td align=\"center\">多继承</td>\n</tr>\n</tbody></table>\n<p>抽象类体现is-a关系，接口体现like-a关系。抽象类是对同类事物相对具体的抽象，接口是对行为的定义。</p>\n<h3 id=\"子类初始化顺序？\"><a href=\"#子类初始化顺序？\" class=\"headerlink\" title=\"子类初始化顺序？\"></a>子类初始化顺序？</h3><p>父类静态代码块和静态变量-&gt;子类静态代码块和静态变量-&gt;父类普通代码块和普通变量-&gt;父类构造方法-&gt;子类普通代码块和普通变量-&gt;子类构造方法</p>\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><h3 id=\"说一说ArrayList\"><a href=\"#说一说ArrayList\" class=\"headerlink\" title=\"说一说ArrayList\"></a>说一说ArrayList</h3><p>ArrayList是容量可变的非线程安全列表，使用数组实现，因此支持对元素的快速随机访问，但是插入和删除速度慢，扩容时会创建更大的数组，把原有数组复制到新数组。</p>\n<ol>\n<li>elementData是ArrayList的数据域，被transient修饰，序列化时会调用writeObject写入流，反序列化时调用readObject重新赋值到新对象的elementData</li>\n<li>size是当前实际大小，即为elementData大小</li>\n<li>modCount记录了ArrayList结构性变化的次数，继承自AbstractList，所有涉及结构变化的方法都会增加该值。通过比较expectModCount和modCount值是否相等，抛出ConcurrentModificationException，保证了在序列化和迭代过程中数组不会被修改，称为<strong>fail-fast</strong>机制</li>\n</ol>\n<h3 id=\"说一说LinkedList\"><a href=\"#说一说LinkedList\" class=\"headerlink\" title=\"说一说LinkedList\"></a>说一说LinkedList</h3><p>LinkedList本质是双向链表，在插入和删除上速度更快，但是随机访问元素慢，实现了Deque接口，具有队列和栈的性质。通过附加引用的方式将零散的内存单元关联起来，内存利用率高</p>\n<h3 id=\"Set有什么特点，有哪些实现？\"><a href=\"#Set有什么特点，有哪些实现？\" class=\"headerlink\" title=\"Set有什么特点，有哪些实现？\"></a>Set有什么特点，有哪些实现？</h3><p>Set不允许元素重复，常用实现有HashSet、LinkedHashSet、TreeSet</p>\n<ol>\n<li>HashSet：通过HashMap实现，map的key即set存储的元素，所有value都为Object类型常量，不保证有序，线程不安全。对于包装类型通过值判重，对于引用类型，通过hashCode和equals判重</li>\n<li>LinkedHashSet：继承自HashSet，通过LinkedHashMap实现，使用双向链表维护元素插入顺序</li>\n<li>TreeSet：通过TreeMap实现，添加元素到集合时按照比较规则将其插入到合适的位置，保证集合有序</li>\n</ol>\n<h3 id=\"TreeMap有什么特点？\"><a href=\"#TreeMap有什么特点？\" class=\"headerlink\" title=\"TreeMap有什么特点？\"></a>TreeMap有什么特点？</h3><p>TreeMap基于红黑树实现，增删改查的平均和最差时间复杂度均为O(logn)，最大特点是key有序，key必须实现Comparable接口或提供Comparator比较器，因此不能为null。</p>\n<p>在排序时，如果比较器不为空，则通过比较器的compare方法，否则使用key实现的Comparable接口的compareTo方法，如果都没有则抛出异常。</p>\n<p>关于红黑树的其他特性，参见<a href=\"/posts/75890e6e.html\" title=\"红黑树基础\">红黑树基础</a></p>\n<h3 id=\"HashMap相关问题\"><a href=\"#HashMap相关问题\" class=\"headerlink\" title=\"HashMap相关问题\"></a>HashMap相关问题</h3><h4 id=\"HashMap有什么特性？\"><a href=\"#HashMap有什么特性？\" class=\"headerlink\" title=\"HashMap有什么特性？\"></a>HashMap有什么特性？</h4><ol>\n<li>HashMap存储键值对实现快速存取，允许为null（因为对null做了特殊处理），key不可重复，重复则覆盖原值</li>\n<li>非同步，线程不安全</li>\n<li>无序</li>\n</ol>\n<h4 id=\"HashMap底层原理是什么？\"><a href=\"#HashMap底层原理是什么？\" class=\"headerlink\" title=\"HashMap底层原理是什么？\"></a>HashMap底层原理是什么？</h4><p>在JDK8之前底层实现是数组+链表，在JDK8改为数组+链表/红黑树，节点类型从Entry变为Node。成员变量包括存储数据的table数组、元素数量size、负载因子loadFactor。默认初始化容量是16，扩容容量必须是2的幂，默认负载因子为0.75</p>\n<h4 id=\"如何计算key在table数组中的位置？\"><a href=\"#如何计算key在table数组中的位置？\" class=\"headerlink\" title=\"如何计算key在table数组中的位置？\"></a>如何计算key在table数组中的位置？</h4><p>在JDK8之前：对于字符串类型，调用stringHash32计算；对于其他类型，使用一个不变的随机值hashSeed和key的hashCode异或之后，再通过移位和异或，最终和表的长度与运算获得最终的地址。这样既减少了哈希冲突又比取模效率更高</p>\n<p>在JDK8：当key为null时，返回0；否则通过key的hashCode与高16位做异或运算得到在数组中的位置，这种hash计算将高位的变化扩展到低位，避免因表范围的限制，高位不会在索引计算中使用，可以减少哈希冲突。</p>\n<h4 id=\"get函数的实现？\"><a href=\"#get函数的实现？\" class=\"headerlink\" title=\"get函数的实现？\"></a>get函数的实现？</h4><p>① JDK8之前：</p>\n<div class=\"note warning\"><p>key为null，调用getForNullKey方法，如果size为0表示链表为空，返回null；否则遍历table[0]链表，找到key为null的节点则返回其value，否则返回null。</p></div>\n\n<div class=\"note info\"><p>key不为null，调用getEntry方法，当size不为0，计算key的hash值，遍历对应位置的链表，如果key和hash都相等则返回该节点的value</p></div>\n\n<p>② JDK8：</p>\n<p>调用getNode函数，如果table数组不为空，则判断第一个节点和查找的key和hash相等则返回；否则判断其他节点，如果是TreeNode则以getTreeNode在树中查找，否则遍历链表查找，最终返回对应的节点的值或null。</p>\n<h4 id=\"put函数的实现？\"><a href=\"#put函数的实现？\" class=\"headerlink\" title=\"put函数的实现？\"></a>put函数的实现？</h4><p>① JDK8之前：</p>\n<div class=\"note warning\"><p>key为null，直接存入table[0]。</p></div>\n\n<div class=\"note info\"><p>key不为null，计算hash值，遍历对应位置的链表，如果key存在更新value，返回旧value；否则将modCount++，使用addEntry方法增加一个节点并返回null</p></div>\n\n<p>② JDK8：</p>\n<p>如果table为空/长度为0则进行扩容，否则计算key对应的位置，不存在则调用newNode创建一个节点。如果存在且是TreeNode，则调用putTreeVal增加一个树节点，并维持平衡；如果是链表，则遍历插入/更新。此时如果树的size超过阈值8则通过treeifyBin方法，当table的长度大于64时将其转为红黑树，没超过时进行扩容。</p>\n<h4 id=\"扩容为什么要2的幂，具体是怎么扩容的？\"><a href=\"#扩容为什么要2的幂，具体是怎么扩容的？\" class=\"headerlink\" title=\"扩容为什么要2的幂，具体是怎么扩容的？\"></a>扩容为什么要2的幂，具体是怎么扩容的？</h4><p>保证为2的幂首先是在进行hash计算的时候，可以用与来替代取模运算，提高效率，其次可以减少碰撞，均匀分布。</p>\n<p>① JDK8之前：</p>\n<p>如果当前容量达到了最大容量<code>MAXIMUM_CAPACITY</code>，将阈值设置为Integer最大值，停止扩容；否则计算新容量，将阈值设为<code>newCapacity * loadFactor</code>和<code>MAXIMUM_CAPACITY + 1</code>的较小值，创建新容量的Entry数组，通过transfer将数据转移。遍历链表，重新计算位置，使用头插法将元素转移。</p>\n<p>② JDK8：</p>\n<p>如果当前容量<code>oldCap</code>达到了最大容量，将阈值设置为Integer最大值，停止扩容；当<code>oldCap&lt;&lt;1</code>不超过最大容量则扩大为两倍；当当前扩容阈值<code>oldThr&gt;0</code>，则将其作为新容量；否则将新容量设为默认的16，阈值为12</p>\n<p>数据的转移：当节点为TreeNode，调用split方法对树进行修建，当树的结点数小于6则将其转为链表；当节点为链表，将其拆分为hash值超过旧容量的部分和未超出的部分，对于<code>hash &amp; oldCap = 0</code>的部分不需要处理，否则通过旧下表+旧容量计算出新下标并完成转移。</p>\n<h4 id=\"为什么负载因子是0-75？\"><a href=\"#为什么负载因子是0-75？\" class=\"headerlink\" title=\"为什么负载因子是0.75？\"></a>为什么负载因子是0.75？</h4><p>这是个折中的数字，0.5造成了一半空间的浪费，1则在扩容时无法处理其他put，0.75是空间和时间的均衡，避免了较多的hash冲突（实验获得）。</p>\n<h4 id=\"HashMap扩容容易死循环你了解吗？\"><a href=\"#HashMap扩容容易死循环你了解吗？\" class=\"headerlink\" title=\"HashMap扩容容易死循环你了解吗？\"></a>HashMap扩容容易死循环你了解吗？</h4><p>在JDK8之前，使用头插法迁移元素，链表节点之间存在指针引用关系，因此在并发修改时容易出现死循环。JDK8改用尾插法，并且没有指针引用关系，解决了死循环的问题。</p>\n<p>但是在并发下扩容时容易造成数据丢失：首先是当某个线程在transfer时，其他线程新增的元素可能在已遍历过的链表上，因此这部分数据就丢失了；在多个线程resize的过程中，新创建了多个newTable，这是线程内的局部变量，线程之间不可见，在<code>table=newTable</code>时会覆盖其他线程的操作。因此HashMap是<strong>线程不安全</strong>的。</p>\n<h3 id=\"有哪些线程安全的容器？\"><a href=\"#有哪些线程安全的容器？\" class=\"headerlink\" title=\"有哪些线程安全的容器？\"></a>有哪些线程安全的容器？</h3><ol>\n<li><p>使用synchronized修饰：Vector、HashTable、Collections.synchronizedXX</p>\n</li>\n<li><p>并发容器：</p>\n<div class=\"note info\"><p>CopyOnWriteArrayList：add中使用可重入锁，复制一份，读写分离，在写操作时操作副本，然后将原数组指向新数组，保证最终一致性</p></div>\n\n<div class=\"note success\"><p>ConcurrentHashMap：1.7使用分段锁不锁整张表仅锁住某一段seagment。1.8使用红黑树，通过CAS操作和synchronized保证线程安全同时提高效率。</p></div>\n\n</li>\n</ol>\n<h2 id=\"多线程高并发\"><a href=\"#多线程高并发\" class=\"headerlink\" title=\"多线程高并发\"></a>多线程高并发</h2><h3 id=\"JMM是什么？有什么作用？\"><a href=\"#JMM是什么？有什么作用？\" class=\"headerlink\" title=\"JMM是什么？有什么作用？\"></a>JMM是什么？有什么作用？</h3><blockquote>\n<p>JMM是Java内存模型，JMM主要是影响线程共享的内存可见性问题，Java线程之间的通信由JMM控制。</p>\n</blockquote>\n<p>所有变量存储于主内存，每个线程有自己的工作内存，保存被该线程使用的变量的主内存副本，线程对变量的操作必须在工作内存中进行，不能直接读写主内存数据。不同线程间无法直接访问对方工作内存的变量，线程通信必须经过主内存。关于工作内存和主内存的交互，JMM定义了8种原子操作：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作</th>\n<th align=\"center\">作用变量范围</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">lock</td>\n<td align=\"center\">主内存</td>\n<td align=\"center\">把变量标识为线程独占状态</td>\n</tr>\n<tr>\n<td align=\"center\">unlock</td>\n<td align=\"center\">主内存</td>\n<td align=\"center\">释放处于锁定状态的变量</td>\n</tr>\n<tr>\n<td align=\"center\">read</td>\n<td align=\"center\">主内存</td>\n<td align=\"center\">把变量从主内存传到工作内存</td>\n</tr>\n<tr>\n<td align=\"center\">load</td>\n<td align=\"center\">工作内存</td>\n<td align=\"center\">把read的值放入工作内存的变量副本</td>\n</tr>\n<tr>\n<td align=\"center\">use</td>\n<td align=\"center\">工作内存</td>\n<td align=\"center\">把工作内存的变量值传给执行引擎</td>\n</tr>\n<tr>\n<td align=\"center\">assign</td>\n<td align=\"center\">工作内存</td>\n<td align=\"center\">把从执行引擎接收的值赋给工作内存的变量</td>\n</tr>\n<tr>\n<td align=\"center\">store</td>\n<td align=\"center\">工作内存</td>\n<td align=\"center\">把工作内存的变量值传到主内存</td>\n</tr>\n<tr>\n<td align=\"center\">write</td>\n<td align=\"center\">主内存</td>\n<td align=\"center\">把store取到的变量值放入主内存变量</td>\n</tr>\n</tbody></table>\n<h3 id=\"什么是指令重排序？\"><a href=\"#什么是指令重排序？\" class=\"headerlink\" title=\"什么是指令重排序？\"></a>什么是指令重排序？</h3><p>为了提高性能，编译器和处理器通常会对指令进行重排序，重排序指从源代码到指令序列的重排序，分为以下三种：</p>\n<ol>\n<li>编译器优化的重排序：在不改变单线程程序语义的前提下重排语句的执行顺序</li>\n<li>指令级并行的重排序：如果不存在数据依赖，处理器可以改变语句对应机器指令的执行顺序</li>\n<li>内存系统的重排序</li>\n</ol>\n<h3 id=\"as-if-serial和happens-before了解吗？\"><a href=\"#as-if-serial和happens-before了解吗？\" class=\"headerlink\" title=\"as-if-serial和happens-before了解吗？\"></a>as-if-serial和happens-before了解吗？</h3><p>as-if-serial语义是指不论如何重排序，<strong>单线程</strong>程序的执行结果不能改变。因此，编译器和处理器不会对存在数据依赖关系的操作重排序</p>\n<p>happens-before是先行发生原则，对有顺序性保障的禁止重排序，保证了正确同步的<strong>多线程</strong>程序的执行结果不变</p>\n<p>两者都是为了不改变程序执行结果的前提下尽可能提高程序执行<strong>并行度</strong></p>\n<h3 id=\"什么是原子性、可见性、有序性？\"><a href=\"#什么是原子性、可见性、有序性？\" class=\"headerlink\" title=\"什么是原子性、可见性、有序性？\"></a>什么是原子性、可见性、有序性？</h3><ol>\n<li>原子性：基本数据类型的访问都具备原子性，但是64位长度的long和double需要被划分为两次32位操作，因此不具备原子性。更大范围的原子性，JMM提供了lock和unlock操作，对应到更高层次的字节码指令monitorenter和monitorexit，也就是Java代码中的synchronized</li>\n<li>可见性：指当一个线程修改了共享变量之后，其他线程能够立即得知修改。JMM通过在变量修改后将值同步会主内存，在变量读取前从主内存刷新的方式实现可见性。volatile通过这种方式保证可见性，synchronized则通过unlock前必须先执行sotre和write来保证</li>\n<li>有序性：在本线程内观察所有操作是有序的，在一个线程内观察另一个线程，所有操作都是无序的。前半句指as-if-serial语义，后半句指指令重排序和工作内存与主内存延迟现象。</li>\n</ol>\n<h3 id=\"对volatile有什么理解？\"><a href=\"#对volatile有什么理解？\" class=\"headerlink\" title=\"对volatile有什么理解？\"></a>对volatile有什么理解？</h3><p>volatile的内存语义是：在写一个volatile变量时，把该线程工作内存的值立即刷新到主内存中；在读一个volatile变量时，把该线程的工作内存值置为无效，从主内存中读取</p>\n<p>当变量被volatile修饰后，具备两种特性：</p>\n<ol>\n<li>保证变量对所有线程可见</li>\n<li>禁止指令重排序优化：在写操作之前，汇编指令有<strong>lock</strong>前缀，相当于一个内存屏障，后面的指令不能排在内存屏障之前，同时会先对缓存变量做一次<strong>store和write</strong>操作，写回主内存中</li>\n</ol>\n<h3 id=\"final可以保证可见性吗？\"><a href=\"#final可以保证可见性吗？\" class=\"headerlink\" title=\"final可以保证可见性吗？\"></a>final可以保证可见性吗？</h3><p>可以，被final修饰的字段在构造方法中一旦被初始化完成，并且构造方法没有把this引用传递出去（this引用逃逸），在其他线程中就能看见final字段值。</p>\n<p>JMM禁止把<strong>写final域</strong>重排序到构造方法之外，在写final之后，构造方法return之前，有一个<strong>Store屏障</strong>，确保在对象引用为其他线程课件只之前，对象的final域已初始化过。</p>\n<p>在初次<strong>读final域</strong>时，JMM要求必须先读这个final域所在的对象引用，通过一个<strong>Load屏障</strong>，确保初次读对象引用和初次读final域不会被重排序</p>\n<h3 id=\"谈一谈synchronized\"><a href=\"#谈一谈synchronized\" class=\"headerlink\" title=\"谈一谈synchronized\"></a>谈一谈synchronized</h3><p>synchronized关键字解决的是多个线程之间访问同一资源的同步问题，被synchronized修饰的同步代码块可以保证在任意时刻只能有一个线程执行。可以通过javap看到相关的字节码，在进入和退出同步块时有monitorenter和monitorexit指令，这里的monitor是存在Java对象头中的监视器，对象头中有两部分数据，一是classPointer指向对象的类，二是MarkWord，存储运行时对象的各种信息，包括hashCode、gc年龄、<strong>锁状态</strong>等。锁状态由锁标志位标识，标志位的指针指向monitor对象。</p>\n<h4 id=\"monitor对象\"><a href=\"#monitor对象\" class=\"headerlink\" title=\"monitor对象\"></a>monitor对象</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectMonitor() &#123;</span><br><span class=\"line\">    _header       = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    _count        = <span class=\"number\">0</span>; <span class=\"comment\">// 记录个数</span></span><br><span class=\"line\">    _waiters      = <span class=\"number\">0</span>,</span><br><span class=\"line\">    _recursions   = <span class=\"number\">0</span>;</span><br><span class=\"line\">    _object       = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    _owner        = <span class=\"literal\">NULL</span>; <span class=\"comment\">//指向拥有锁的线程</span></span><br><span class=\"line\">    _WaitSet      = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 处于wait状态的线程，会被加入到_WaitSet</span></span><br><span class=\"line\">    _WaitSetLock  = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    _Responsible  = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    _succ         = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    _cxq          = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    FreeNext      = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    _EntryList    = <span class=\"literal\">NULL</span> ; <span class=\"comment\">// 处于等待锁block状态的线程，会被加入到该列表</span></span><br><span class=\"line\">    _SpinFreq     = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    _SpinClock    = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    OwnerIsThread = <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多个线程进入同步代码块后，首先进入<strong>_EntryList</strong>，当线程获取对象的monitor之后，将 <strong>_owner</strong> 设置为当前线程，同时<strong>count</strong>++；当线程调用<strong>wait</strong>方法，将释放当前持有的monitor， <strong>_owner</strong>设置为null，<strong>count</strong>–，同时进入 <strong>_WaitSet</strong>等待被唤醒；当前线程执行完毕后，也将释放monitor，同时复位<strong>count</strong>，以便其他线程进入获取monitor</p>\n<h4 id=\"锁类型\"><a href=\"#锁类型\" class=\"headerlink\" title=\"锁类型\"></a>锁类型</h4><p>在早期版本中，synchronized属于重量级锁，基于操作系统底层的<strong>MutexLock互斥锁</strong>来实现，线程的挂起和切换需要从用户态到内核态的转换，时间成本高；JDK6对synchronized做了优化，引入了自旋锁、偏向锁、轻量级锁、锁粗化和锁消除等，提高锁的效率，因此锁一共有四个状态，分别是无锁（01-0）、偏向锁（01-1）、轻量级锁（00）、重量级锁（10）</p>\n<ol>\n<li>自旋锁：如果获取不到锁则会等待一段时间，不直接挂起线程，避免上下文切换的时间消耗。后来又引进了<strong>自适应自旋锁</strong>，其等待次数是自适应的，更加聪明</li>\n<li>偏向锁：认为每次获取当前锁的都是同一线程，对象头MarkWord中的偏向线程ID存储了这个线程，因此加锁时只需要检查MarkWord中的偏向线程iID是否是当前线程，如果是则直接获取锁，否则就要检测当前锁状态是否是偏向锁，如果是则将当前线程id设置到MarkWord中的偏向线程ID，否则通过CAS竞争锁。此时如果有第二个线程竞争锁，会发现偏向线程id已指向了线程1，则出现了锁竞争，会触发重新偏向或升级到轻量级锁，大部分情况下是升级</li>\n<li>轻量级锁：线程1获取锁，如果锁为无锁状态，将MarkWord拷贝到当前线程栈帧中的锁记录LockRecord，JVM将通过CAS尝试将MarkWord中的Lock Word指向LockRecord、将LockRecord的owner指向MarkWord，如果成功则将对象锁状态更新为轻量级锁，否则表示当前轻量级锁已经被获取了，将进入自旋，达到一定次数后膨胀为重量级锁（将MarkWord指向<strong>互斥量Mutex</strong>）。在释放锁时如果CAS将当前线程的LockRecord替换为MarkWord成功，则释放锁成功，进入无锁状态，否则说明MarkWord已经指向互斥量，锁为重量级锁，需要通知被阻塞的线程</li>\n<li>重量级锁：当线程想要获取锁发现是重量级锁时，将被阻塞，等待锁释放时被唤醒。这样的操作需要操作系统来执行，从<strong>用户态转换为内核态</strong>，开销大，耗时。</li>\n</ol>\n<h4 id=\"什么是锁消除、锁粗化？\"><a href=\"#什么是锁消除、锁粗化？\" class=\"headerlink\" title=\"什么是锁消除、锁粗化？\"></a>什么是锁消除、锁粗化？</h4><ul>\n<li><p>锁消除：JVM判断不存在竞争，则不进行加锁，节省无意义的加解锁。</p>\n</li>\n<li><p>锁粗化：一般来讲，我们尽量的让同步代码块的范围更小，这样影响的范围会更小，<strong>并发程度高</strong>，即使存在竞争也不需要等待太长时间，但是如果有一连续的加锁解锁，那么反而会造成性能降低 因此锁粗化就是在这种情况下，一连续的加锁解锁<strong>合并</strong>成一次加锁解锁，扩展锁的范围</p>\n</li>\n</ul>\n<h3 id=\"什么是CAS？它会有什么问题？\"><a href=\"#什么是CAS？它会有什么问题？\" class=\"headerlink\" title=\"什么是CAS？它会有什么问题？\"></a>什么是CAS？它会有什么问题？</h3><p>CAS是指Compare And Swap，比较并交换，有3个操作数，分别是内存位置V、旧的预期值A和准备设置的新值B。CAS指令执行时，当且仅当V的值为A时，处理器才会用B更新V的值。其处理过程是原子操作，不会被其他线程打断。</p>\n<p>从语义上来说，如果V初次读取时A，并且在准备更新时仍为A，这并不能说明它没有被修改过，因为它可能已经<strong>先变为C再被改回A</strong>，但是CAS是察觉不到的，这个问题称为<strong>ABA问题</strong>。可以通过引入版本号、时间戳来解决这一问题。</p>\n<h3 id=\"了解ReentrantLock吗？和synchronized有什么区别\"><a href=\"#了解ReentrantLock吗？和synchronized有什么区别\" class=\"headerlink\" title=\"了解ReentrantLock吗？和synchronized有什么区别\"></a>了解ReentrantLock吗？和synchronized有什么区别</h3><p>ReentrantLock是JUC Lock接口的实现，synchronized是由JVM实现的，很多优化并不直接暴露给我们，ReentrantLock是API层面实现的，比synchronized拥有更细粒度的控制和更高级的功能，可实现中断响应、限时等待、等待通知、公平锁等。在性能上，JDK6之后做了许多优化，二者性能基本持平</p>\n<ol>\n<li>中断响应：通过lockInterrupt获取锁，能在获取过程中响应中断，如果中断则不再等待获取锁直接返回。而不响应中断的获取锁则是等待到获取锁成功再将线程置于中断状态</li>\n<li>等待通知：通过Condition的await将当前线程放入等待队列，直到获得信号唤醒线程，可以通过多个Condition实现<strong>选择性唤醒</strong></li>\n<li>公平锁：按照先来先服务的原则，等待时间长的先获得锁，代码上通过<code>!hasQueuedPredecessors</code>来判断是否有之前已经在等待的线程，再CAS获取锁</li>\n<li>可重入锁：已获取锁的线程可以<strong>重复获取</strong>锁</li>\n</ol>\n<h3 id=\"你提到了JUC，还了解JUC包的其他东西吗？\"><a href=\"#你提到了JUC，还了解JUC包的其他东西吗？\" class=\"headerlink\" title=\"你提到了JUC，还了解JUC包的其他东西吗？\"></a>你提到了JUC，还了解JUC包的其他东西吗？</h3><p>JUC的核心是AQS队列同步器，内部维护一个双向等待队列，内部类Node作为结点包含前置后置指针以及线程标识，它使用一个 volatile int state 变量作为共享资源，当state为1则为<strong>独占式</strong>，一次只能有一个线程获取锁，否则为<strong>共享式</strong>；如果线程获取资源失败，则通过addWaiter进入同步队列等待；如果获取成功就执行临界区代码，释放资源时会通知同步队列中的等待线程。通过getState/setState/compareAndSetState来进行状态变更。采用<strong>模板方法</strong>设计模式，提供了tryAcquire、tryRelease等方法由子类实现。</p>\n<ol>\n<li><p>CountDownLatch：用于阻塞线程，等待所有线程（子任务）完成才继续执行，初始化传入子任务数量，通过countDown方法递减，当任务数量为0时await方法返回，继续执行当前线程；可以限制超时时间</p>\n</li>\n<li><p>Semaphore：信号量，控制并发线程数，初始化传入并发数，每次通过acquire获取一个/多个资源，执行结束后通过release释放，tryAcquire尝试获取，也可以设置超时</p>\n</li>\n<li><p>CyclicBarrier：多个线程同步等待，await方法会在准备好的线程达到要求的数量返回，继续执行，在count为0时会将count重置为原先输入的数量开启新一轮等待</p>\n</li>\n<li><p>FutureTask：可以获取线程执行的返回值，可以取消，可以等待</p>\n</li>\n<li><p>fork/join：切分子任务并行执行，把子任务放在不同的队列，从队列头部取出任务，执行完自己的任务后去其他子线程的任务队列尾部窃取一个任务。</p>\n</li>\n<li><p>BlockingQueue：阻塞队列，当队列为空时消费者等待新的可消费对象，当队列满时生产者等待被消费再把可消费对象放入队列，有以下几个分类：</p>\n<div class=\"note info\"><p>① ArrayBlockingQueue：先进先出，有界</p>\n<p>② DelayQueue：延迟队列，按执行时间排序</p>\n<p>③ LinkedBlockQueue：无界队列，可不指定大小</p>\n<p>④ PriorityBlockQueue：优先级，可插入null对象</p>\n<p>⑤ SynchronizedQueue：同步队列，不存储元素，只有元素被消耗才能再次插入</p></div>\n\n</li>\n</ol>\n<h3 id=\"创建线程有哪些方式？分别有什么优缺点\"><a href=\"#创建线程有哪些方式？分别有什么优缺点\" class=\"headerlink\" title=\"创建线程有哪些方式？分别有什么优缺点\"></a>创建线程有哪些方式？分别有什么优缺点</h3><ol>\n<li>使用new Thread创建线程，可以使用实现了Runable和Callable接口的类，后者可以通过FutureTask获取返回值；继承Thread类，重写run方法。使用这种方式性能差，缺乏统一管理，占用过多资源容易导致oom，并且功能单一</li>\n<li>使用线程池ThreadPoolExecutor：可重用存在的线程减小对象创建消亡的开销，可以控制最大并发线程数避免阻塞，可以定期执行定时执行单线程并发数控制等</li>\n</ol>\n<h3 id=\"线程有哪些方法？\"><a href=\"#线程有哪些方法？\" class=\"headerlink\" title=\"线程有哪些方法？\"></a>线程有哪些方法？</h3><ol>\n<li>sleep方法会让当前线程进入休眠状态，与wait不同的是该方法不会释放锁资源，进入的是TIME_WAITING状态</li>\n<li>yield方法会让出CPU时间片，回到RUNNABLE状态，与其他线程一起竞争时间片</li>\n<li>join方法用于等待其他线程运行终止，如果当前线程调用了其他线程的join方法，则当前线程进入BLOCKED状态，当另一个线程结束时，当前线程转为RUNNABLE，等待CPU时间片，底层使用的是wait，会释放锁</li>\n</ol>\n<h3 id=\"线程有哪些状态？\"><a href=\"#线程有哪些状态？\" class=\"headerlink\" title=\"线程有哪些状态？\"></a>线程有哪些状态？</h3><ol>\n<li>NEW：新建状态，尚未调用start启动</li>\n<li>RUNNABLE：Java将操作系统中的就绪和运行两种状态统称为RUNNABLE，此时线程可能在等待时间片或者正在执行</li>\n<li>BLOCKED：阻塞状态，可能由于锁被其他线程占用、调用了<code>sleep</code>/<code>join</code>方法</li>\n<li>WAITING：等待状态，不会被分配时间片，需要其他线程通知或终端，可能由于调用了无参的<code>wait</code>和<code>join</code>方法</li>\n<li>TIME_WAITING：限期等待状态，可以在指定时间内自行返回，可能由于调用了带参的<code>wait</code>和<code>join</code>方法</li>\n<li>TERMINATED：终止状态，表示当前线程已执行完毕或异常退出</li>\n</ol>\n<h3 id=\"线程通信的方式有哪些？\"><a href=\"#线程通信的方式有哪些？\" class=\"headerlink\" title=\"线程通信的方式有哪些？\"></a>线程通信的方式有哪些？</h3><blockquote>\n<p>命令式编程中线程通信的方式有共享内存和消息传递两种，在共享内存的并发模型中线程间共享内存的公开状态，通过读-写内存中的公共状态进行隐式通信，在消息传递的并发模型中线程间没有公告状态，必须通过发送消息来显式通信。Java并发采用共享内存模型，线程间的通信隐式进行，对程序员完全透明。</p>\n</blockquote>\n<p><a href=\"#对volatile有什么理解？\">volatie</a>：读取变量需要从主存中获取，写必须同步刷新回主存，保证所有线程对变量访问的可见性</p>\n<p><a href=\"#谈一谈synchronized\">synchronized</a>：确保多个线程在同一时刻只能有一个处于方法/同步块中，保证线程对变量访问的原子性、可见性</p>\n<p>wait/notify：等待通知机制，线程A调用了对象的wait方法进入等待状态，线程B调用了对象的notify方法，线程A收到通知后结束组测并执行后续操作</p>\n<p>管道I/O流：用于线程间数据传输，媒介为内存，生产者消费者模式</p>\n<p><a href=\"#谈一谈ThreadLocal\">ThreadLocal</a>：线程共享变量，可以为每个线程创建单独的副本，副本值时线程私有的，互相之间互不影响</p>\n<h3 id=\"创建线程池有哪些参数，线程池有哪些分类？\"><a href=\"#创建线程池有哪些参数，线程池有哪些分类？\" class=\"headerlink\" title=\"创建线程池有哪些参数，线程池有哪些分类？\"></a>创建线程池有哪些参数，线程池有哪些分类？</h3><h4 id=\"参数：\"><a href=\"#参数：\" class=\"headerlink\" title=\"参数：\"></a>参数：</h4><ol>\n<li>corePoolSize：核心线程数</li>\n<li>maximumPoolSize：最大线程数</li>\n<li>keepAliveTime：线程没有任务执行时最大存活时间</li>\n<li>unit：时间单位</li>\n<li>threadFactory：线程工厂，用来创建线程</li>\n<li>rejectHandler：拒绝策略，默认抛异常，可设为丢弃任务，丢弃最老任务，让当前线程转为执行该任务</li>\n</ol>\n<div class=\"note warning\"><p>小于核心线程数量：直接创建新线程处理任务。</p></div>\n\n<div class=\"note info\"><p>在核心和最大之间：只有当workingQueue满才创建新线程。</p></div>\n\n<div class=\"note success\"><p>当线程数到达max时，如果阻塞队列未满则放入阻塞队列等待空闲线程处理，否则，根据线程池设置的拒绝策略处理(抛异常等)</p></div>\n\n<h4 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h4><ol>\n<li>newFixThreadPool：核心线程和最大线程相同，指定核心线程和最大线程数，采用无界队列，当无空闲线程将任务放到无界队列等待被处理（可能造成<strong>oom</strong>）。适用于<strong>CPU密集型</strong>，确保CPU在长期被工作线程占用时，尽可能减少分配线程，适用执行<strong>长期任务</strong></li>\n<li>newCachedThreadPool：核心线程为0，最大线程为整型最大值，使用同步队列，因为没有核心线程所以任务直接放在队列中，如果有空闲线程则取出任务执行，否则创建新线程执行任务。keepAliveTime为60s。适用于<strong>并发执行量大短期的小任务</strong></li>\n<li>newSingleThreadPool：核心线程和最大线程都为1，使用无界队列，串行执行任务，keepAliveTime为0，通常是一个线程不停的串行执行所有任务</li>\n<li>newScheduleThreadPool：核心可选，最大线程数是整型最大值，keepAliveTime为0，使用延迟队列，线程从延迟队列中取出执行时间大于等于当前时间的任务执行完成后修改该任务的时间为当前时间并放回队列。适用于<strong>周期/定期执行的任务</strong>。</li>\n</ol>\n<h3 id=\"线程池有哪些状态？\"><a href=\"#线程池有哪些状态？\" class=\"headerlink\" title=\"线程池有哪些状态？\"></a>线程池有哪些状态？</h3><ol>\n<li><p>running：可以接受新任务，处理队列中的任务。通过<code>shutdown</code>进入shutdown状态，<code>shutdownNow</code>进入stop状态</p>\n</li>\n<li><p>shutdown：不再接受新任务，可以处理队列中的任务。等待队列中无任务，正在处理的任务也结束进入tidying状态</p>\n</li>\n<li><p>stop：不再接受新任务，停止处理正在处理的任务/队列中的任务。进入tidying状态</p>\n</li>\n<li><p>tidying：线程池的任务数为0。terminate执行完成进入terminated状态。</p>\n</li>\n<li><p>terminated：彻底终止。</p>\n</li>\n</ol>\n<h3 id=\"谈一谈ThreadLocal\"><a href=\"#谈一谈ThreadLocal\" class=\"headerlink\" title=\"谈一谈ThreadLocal\"></a>谈一谈ThreadLocal</h3><p>ThreadLocal是线程共享变量，主要用于一个线程内跨类、方法传递数据，ThreadLocal有一个静态内部类ThreadLocalMap，其key是ThreadLocal对象，值是Entry对象，Entry内只有一个Object的value，ThreadLocal是线程共享的，但ThreadLocalMap是线程私有的，ThreadLocal主要有get、set、remove三个方法</p>\n<ul>\n<li>set：首先获取当前线程，然后再获取当前线程对应的ThreadLocalMap类型的对象map，如果map存在就设置key，key是当前的ThreadLocal对象，value是传入的参数；否则通过createMap方法创建一个ThreadLocalMap，再设置值</li>\n<li>get：首先获取当前线程，然后再获取当前线程对应的ThreadLocalMap类型的对象map，如果map存在就以当前ThreadLocal对象作为key获取Entry类型的对象e，如果e存在就返回它的value；如果map或者e不存在，就调用setInitialValue方法先为当前线程创建一个ThreadLocalMap对象然后返回默认的初始值null</li>\n<li>remove：获取ThreadLocalMap类型的对象map，如果map不为空，则解除ThreadLocal这个key及其value的联系</li>\n</ul>\n<h4 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h4><ol>\n<li>脏数据：线程池会复用Thread，因此ThreadLocal也会被复用，而如果没有通过remove方法清理与线程相关的ThreadLocal数据，则下一个线程可能会get到之前的数据</li>\n<li>内存泄漏：由于ThreadLocal是弱引用，但Entry的value是强引用，因此当ThreadLocal被回收后，value没有被释放，造成内存泄漏，因此需要及时调用remove清理</li>\n</ol>\n<h2 id=\"I-O流问题\"><a href=\"#I-O流问题\" class=\"headerlink\" title=\"I/O流问题\"></a>I/O流问题</h2><h3 id=\"同步、异步、阻塞、非阻塞都是什么概念？\"><a href=\"#同步、异步、阻塞、非阻塞都是什么概念？\" class=\"headerlink\" title=\"同步、异步、阻塞、非阻塞都是什么概念？\"></a>同步、异步、阻塞、非阻塞都是什么概念？</h3><div class=\"note info\"><p>同步和异步是通信机制，阻塞和非阻塞是调用状态。</p></div>\n\n<p>同步IO是用户线程发现IO请求后需要等待或轮询内核IO操作完成后才能继续执行；异步IO是用户线程发起IO请求后可以继续执行，当内核IO操作完成后会通知用户线程，或调用用户线程注册的回调函数。</p>\n<p>阻塞IO是IO操作需要彻底完成后才能返回用户空间；非阻塞IO是IO操作调用后立即返回一个状态值，无需等IO操作彻底完成。</p>\n<h3 id=\"Java中有哪些IO模型，简单介绍下\"><a href=\"#Java中有哪些IO模型，简单介绍下\" class=\"headerlink\" title=\"Java中有哪些IO模型，简单介绍下\"></a>Java中有哪些IO模型，简单介绍下</h3><ol>\n<li>BIO：<strong>同步阻塞式</strong>IO，JDK1.4之前的IO模型，服务器实现模式为一个连接请求对应一个线程，也就是一个客户端请求需要创建一个线程，适用于<strong>连接数目少</strong>且服务器资源多的情景。</li>\n<li>NIO：<strong>同步非阻塞</strong>IO，JDK1.4引入，服务器实现模式为多个连接请求对应一个线程，客户端连接请求会注册到一个多路复用器Selector，Selector轮询到连接有IO请求时才启动以恶搞线程处理，适用于连接<strong>数目多</strong>且连接<strong>时间短</strong>的场景。</li>\n<li>AIO：<strong>异步非阻塞</strong>IO，JDK7引入，服务器实现模式为一个有效请求对应一个线程，客户端的IO请求都是由操作系统先完成IO操作再通知服务器应用来直接使用准备好的数据，适用于连接<strong>数目多</strong>且连接<strong>时间长</strong>的场景。</li>\n</ol>\n<h4 id=\"详细介绍下NIO\"><a href=\"#详细介绍下NIO\" class=\"headerlink\" title=\"详细介绍下NIO\"></a>详细介绍下NIO</h4><p>不同于传统的IO，NIO以块的方式传输数据，一次处理一个数据块，可以控制读取某个位置的数据，速度更快。它有几个重要的组件：</p>\n<ol>\n<li>Buffer：缓冲区，本质是一块可读写的内存，用来简化数据读写，不再以字节来处理数据，并提供flip、clear、compact来切换读写状态，通过读写位置position和极限位置limit来实现</li>\n<li>Channel：通道是对IO中流的模拟，通过Channel读写数据，将数据读取到Buffer/通过Buffer将数据写出，一个Buffer可以切换读写，被不同的Channel使用，这让NIO成为了非阻塞的IO，通过Channel的返回就可以知道缓冲区是否有数据，而不是和IO流一样需要阻塞等待数据。</li>\n<li>Selector：多路复用器，轮询检查多个Channel的状态，判断注册事件是否发生，即判断Channel是否处于可读/可写状态</li>\n</ol>\n<p>其工作流程是通过Selector的静态方法open实例化一个选择器，通过Channel的register方法将通道的某个事件和Selector绑定起来，事件有CONNECT、ACCEPT、READ、WRITE。Selector的select方法返回目前就绪的通道数，通过selectKeys得到对应的集合，处理其中的事件</p>\n<h3 id=\"IO包下有哪些流？\"><a href=\"#IO包下有哪些流？\" class=\"headerlink\" title=\"IO包下有哪些流？\"></a>IO包下有哪些流？</h3><p>主要分为字符流和字节流，字符流一般用于处理文本文件，其他类型用字节流处理</p>\n<ul>\n<li>字节流：使用了<strong>装饰器模式</strong>，InputStream和OutputStream是抽象组件，FileInputStream、ByteArrayInputStream是基础实现类，FilterInputStream是抽象装饰器，其实现类BufferInputStream、PushBackInputStream等为基础实现类提供了额外的功能，使用BufferInputStream装饰FileInputStream（在FileInputStream外套上BufferInputStream）可以实现具有缓存的输入流；使用PushBackInputStream装饰ByteArrayInputStream可以实现具有回退读取unread的功能的输入流；<strong>DataInputStream</strong>提供了读取Java基本数据类型的方法，实现上并未改变基本的读写方法，只是动态的处理成需要的类型。</li>\n<li>字符流：在程序中一般操作的是字符形式的数据，Java提供了基本的InputStreamReader和OutputStreamWriter完成了字节流和字符流之间的编解码转换，家族结构和Stream类似也采用了<strong>装饰器模式</strong>。</li>\n</ul>\n<h3 id=\"序列化和反序列化是什么？\"><a href=\"#序列化和反序列化是什么？\" class=\"headerlink\" title=\"序列化和反序列化是什么？\"></a>序列化和反序列化是什么？</h3><p>Java对象在JVM退出时会全部销毁，如果需要将对象及状态持久化，就要通过<strong>序列化</strong>实现，将内存中的对象保存在二进制流中，需要时再将二进制流<strong>反序列化</strong>为对象。对象序列化保存的是对象的状态，因此类的<strong>静态变量</strong>不会被序列化。常见的序列化方式有以下几种：</p>\n<ol>\n<li>Java原生：实现Serializable接口，Java 序列化保留了对象类的元数据（如类、成员变量、继承类信息）以及对象数据，兼容性最好，但不支持跨语言，性能一般。序列化和反序列化必须保证序列化ID一致，如果没有序列化ID，则会抛异常。具体的序列化过程：判断对象类型，写入<strong>对象类型标记</strong>；写入<strong>对象类信息</strong>，包括类名、序列化ID、字段数、字段名等；写入<strong>实例数据</strong>，基本类型直接写入，引用类型<strong>递归</strong>调用<strong>writeObject</strong>写入</li>\n<li>Hessian：支持跨语言、动态类型，用一个字节表示常用基础类型，极大缩短二进制流，更加高效</li>\n<li>JSON：转化为JSON字符串，不记录类型信息，因此反序列化需要提供类型信息才能正确进行；可读性高</li>\n</ol>\n<h2 id=\"JVM相关\"><a href=\"#JVM相关\" class=\"headerlink\" title=\"JVM相关\"></a>JVM相关</h2><h3 id=\"介绍一下Java虚拟机的整体结构？各个模块的作用\"><a href=\"#介绍一下Java虚拟机的整体结构？各个模块的作用\" class=\"headerlink\" title=\"介绍一下Java虚拟机的整体结构？各个模块的作用\"></a>介绍一下Java虚拟机的整体结构？各个模块的作用</h3><p>在Java程序的执行过程中，JVM把它管理的内存划分为不同的数据区，其中线程私有的有程序计数器、虚拟机栈、本地方法栈，线程共享的有堆、方法区，虚拟机的类加载器负责将类信息加载到内存中，执行引擎负责执行字节码，采用即时编译技术。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004726.png\" alt=\"图片\"></p>\n<ol>\n<li>程序计数器：每个线程有自己的计数器，指示当前线程所执行字节码的行号，改变计数器的值选取下一条指令。对于Java方法记录了字节码的指令地址；对于本地方法，值为undefined</li>\n<li>虚拟机栈：每个栈帧中有局部变量表存储方法内使用的变量、操作数栈、动态链接、返回地址，每新调用一个方法就创建一个栈帧，因此递归过深超过虚拟机允许的深度会报StackOverflowError</li>\n<li>本地方法栈：native方法的栈，调用本地方法时虚拟机栈不变，动态链接并直接调用指定本地方法，同样会报StackOverflowError</li>\n<li>方法区：存储类信息、常量、静态变量、即时编译的代码缓存等。JDK8之前使用永久代实现方法区，容易内存溢出，JDK7中把放在永久代的字符串常量池、静态变量等移出，JDK8废弃永久代，采用本地内存实现的元空间代替</li>\n</ol>\n<h3 id=\"运行时常量池、字符串常量池、Class常量池\"><a href=\"#运行时常量池、字符串常量池、Class常量池\" class=\"headerlink\" title=\"运行时常量池、字符串常量池、Class常量池\"></a>运行时常量池、字符串常量池、Class常量池</h3><ul>\n<li>Class常量池：class文件中包含了类的版本、字段、方法、接口等信息，还有常量池（Constant Pool Table），存放编译器生成的字面量和符号引用</li>\n<li>运行时常量池：类会经过加载、验证、准备、解析、初始化加载到内存，JVM会将class常量池中的内容存放到运行时常量池，class常量池存放的并不是对象实例，因此在解析阶段将会查找字符串常量池，将符号引用转换为直接引用</li>\n<li>字符串常量池：在经过验证、准备阶段后，在堆中生成字符串实例，将其引用值存放到字符串常量池中，被所有类共享</li>\n</ul>\n<h3 id=\"Java程序是怎样运行的？\"><a href=\"#Java程序是怎样运行的？\" class=\"headerlink\" title=\"Java程序是怎样运行的？\"></a>Java程序是怎样运行的？</h3><p>首先通过javac将.java编译为JVM可加载的.class字节码文件，之后通过即时编译器JIT把字节码文件翻译为本地机器码，之后执行引擎将执行指令代码</p>\n<h3 id=\"有哪些类加载器？类加载的过程是怎样的？\"><a href=\"#有哪些类加载器？类加载的过程是怎样的？\" class=\"headerlink\" title=\"有哪些类加载器？类加载的过程是怎样的？\"></a>有哪些类加载器？类加载的过程是怎样的？</h3><p>启动类加载器<strong>BootstrapClassLoader</strong>负责加载/lib/rt/下的核心类库java.* ；由C++编写，平台/扩展类加载器<strong>ExtClassLoader</strong>加载/lib/ext下的扩展类库javax.* ；应用类加载器<strong>AppClassLoader</strong>加载用户写的类，位置在classpath下；另外，还可以通过继承ClassLoader实现自定义的类加载器，通过findClass方法将字节数组传入由defineClass方法负责加载到JVM中。</p>\n<p>类加载采用双亲委派机制：一个类加载器接收到类加载请求会将请求<strong>委派给父加载器</strong>，只有当父加载器没法完成时，才会由子加载器尝试加载。可以确保类在每个类加载器环境都是同一个，避免重复加载。</p>\n<p>类加载过程分为<strong>加载</strong>、<strong>链接</strong>、<strong>初始化</strong>三个阶段，加载阶段将class字节码加载到JVM，生成class对象，链接阶段先通过<strong>验证</strong>检查class的安全性和正确性，之后为类变量分配空间并设置初始值，称为<strong>准备</strong>，在<strong>解析</strong>时将常量池内的符号引用转换为直接引用，最后的初始化阶段执行类变量赋值和静态代码块。</p>\n<h3 id=\"创建对象new的时候发生了什么？\"><a href=\"#创建对象new的时候发生了什么？\" class=\"headerlink\" title=\"创建对象new的时候发生了什么？\"></a>创建对象new的时候发生了什么？</h3><ol>\n<li>当JVM遇到字节码new指令时，首先检查该指令的参数能否在常量池定位到一个类的符号引用，并检查引用代表的类是否已被加载、解析、初始化，如果没有则执行类加载</li>\n<li>类加载检查通过后，虚拟机将为新生对象分配内存</li>\n<li>内存分配完成后虚拟机将成员变量设为初始值，保证对象的实例字段可以不赋初值就使用</li>\n<li>设置对象头，包括hashCode、GC信息、锁信息、类类型等</li>\n<li>执行init方法，初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋给引用变量</li>\n</ol>\n<h3 id=\"如何判断对象是否为需要被回收？\"><a href=\"#如何判断对象是否为需要被回收？\" class=\"headerlink\" title=\"如何判断对象是否为需要被回收？\"></a>如何判断对象是否为需要被回收？</h3><ul>\n<li>引用计数：在对象中添加一个引用计数器，如果被引用计数器加 1，引用失效时计数器减 1，如果计数器为 0 则被标记为垃圾。原理简单，效率高，但是存在对象间循环引用的问题，导致计数器无法清零。</li>\n<li>可达性分析：判断对象的引用链是否可达。将所有对象组成图，从一系列GC Root对象开始向下搜索其他对象，路径称为引用链，如果所有的GC Root都无法到达的对象则判定为垃圾。可以作为GC Root对象的有虚拟机栈和本地方法栈中引用的对象、类静态属性引用的对象、常量引用的对象。</li>\n</ul>\n<h3 id=\"Java中有哪些引用类型？\"><a href=\"#Java中有哪些引用类型？\" class=\"headerlink\" title=\"Java中有哪些引用类型？\"></a>Java中有哪些引用类型？</h3><ol>\n<li>强引用：最常见的引用，只要对象有强引用且GC Root可达，在垃圾回收时即使内存耗尽也不会被回收</li>\n<li>软引用：在内存即将耗尽时，会把软引用关联的对象加入回收范围</li>\n<li>弱引用：只能生存到下次年轻代GC前</li>\n<li>虚引用：定义完成后无法通过引用来获取该对象，只是为了在对象被回收时收到一个系统通知</li>\n</ol>\n<h3 id=\"有哪些GC算法？\"><a href=\"#有哪些GC算法？\" class=\"headerlink\" title=\"有哪些GC算法？\"></a>有哪些GC算法？</h3><ul>\n<li>复制算法：对内存分为对象面和空闲面，将存货的对象复制到空闲面，然后将对象面所有对象从内存清除。减少碎片，适合对象存活率低的场景，复制越少越快。但是意味着要有一块空闲空间不能使用</li>\n<li>标记-清除算法：使用可达性算法标记垃圾，之后将垃圾清除。会产生碎片</li>\n<li>标记-整理算法：使用可达性算法标记，移动存货的对象，将对象顺序排列，之后清除最后一个对象的地址之后的内存空间。减少碎片，也不需要设置两块内存，适用于存活率高的场景</li>\n</ul>\n<h3 id=\"常见的垃圾收集器有哪些？\"><a href=\"#常见的垃圾收集器有哪些？\" class=\"headerlink\" title=\"常见的垃圾收集器有哪些？\"></a>常见的垃圾收集器有哪些？</h3><p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004738.png\" alt=\"图片\"></p>\n<ol>\n<li>Serial：单线程收集，采用复制算法，会STW，Client模式年轻代默认收集器</li>\n<li>ParNew：多线程收集，其他于Serial相同，追求低停顿</li>\n<li>ParallelScavenge：多线程收集，采用复制算法，更关注系统吞吐量，Server模式年轻代默认收集器</li>\n<li>Serial Old：单线程收集，采用标记-整理算法，Client模式老年代默认收集器</li>\n<li>Parallel Old：多线程收集，采用标记-整理算法，追求吞吐量</li>\n<li>CMS：追求最短停顿时间，采用标记-清除算法，过程较复杂</li>\n<li>G1：不再区分以老年代/年轻代简单区分内存，以Region内存布局面向局部收集，实现了可预测的停顿</li>\n</ol>\n<h4 id=\"CMS回收过程\"><a href=\"#CMS回收过程\" class=\"headerlink\" title=\"CMS回收过程\"></a>CMS回收过程</h4><p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004753.png\" alt=\"图片\"></p>\n<p><strong>初始标记</strong>阶段进入STW，使用单线程标记GC Root直接关联的对象；<strong>并发标记</strong>阶段从初始标记的对象开始遍历，耗时较长但是不需要停顿；<strong>重新标记</strong>阶段修正在并发标记期间因用户程序运作而导致标记产生变动的部分记录，需要STW；<strong>并发清除</strong>清理垃圾，不需要移动对象，可以并发执行</p>\n<h4 id=\"G1回收过程\"><a href=\"#G1回收过程\" class=\"headerlink\" title=\"G1回收过程\"></a>G1回收过程</h4><p><strong>初始标记</strong>阶段进入STW，标记GC Root直接关联的对象，让下一阶段用户线程并发运行时能正确地在可用的Region中分配新对象；<strong>并发标记</strong>阶段从初始标记的对象开始遍历，查找整个堆，扫描完成后要重新处理此过程中变化的部分；<strong>最终标记</strong>进入短暂的STW，处理并发阶段结束后仍遗留的少量SATB记录；<strong>筛选回收</strong>对各Region的回收价值排序，根据用户期望停顿事件制定回收计划，需要暂停用户线程，多线程并发完成</p>\n<h3 id=\"你知道哪些内存分配和回收策略？\"><a href=\"#你知道哪些内存分配和回收策略？\" class=\"headerlink\" title=\"你知道哪些内存分配和回收策略？\"></a>你知道哪些内存分配和回收策略？</h3><ol>\n<li>对象优先在Eden区分配：大多数情况下对象在新生代Eden区分配，当Eden不足时会触发Minor GC</li>\n<li>大对象直接进入老年代：通过指定-XX:PretenureSizeThreshold参数，大于该值的直接在老年代分配</li>\n<li>长期存活对象进入老年代：通过指定-XX:MaxTenuringThreshold参数，对象年龄大于该值的进入老年代，没经过一次Minor GC，年龄+1</li>\n<li>动态对象年龄判定：当Survivor中相同年龄所有对象大小的总和大于Survivor的一半，则将年龄不小于该年龄的对象放入老年代</li>\n<li>空间分配担保：Minor GC前虚拟机必须检查老年代最大连续可用空间是否大于新生代对象总空间，满足则说明Minor GC安全；如果不满足，虚拟机会查看-XX:HandlePromotionFailure是否允许担保失败，允许则检查老年代最大连续可用空间是否大于历次晋升老年代对象的平均大小，如果满足则冒险尝试Minor GC，否则进行Full GC</li>\n</ol>\n<h3 id=\"了解哪些JVM调优工具？\"><a href=\"#了解哪些JVM调优工具？\" class=\"headerlink\" title=\"了解哪些JVM调优工具？\"></a>了解哪些JVM调优工具？</h3><ol>\n<li>JVisualVM：自带，不需要配置，可以看到内存信息、线程信息、dump和CPU分析</li>\n<li>JPS：查看指定host的JVM进程、PID、启动路径和参数等等</li>\n<li>JConsole：监控某个JAVA应用程序，在overview中查看内存、线程、类及CPU使用情况</li>\n</ol>\n<h2 id=\"常见的设计模式\"><a href=\"#常见的设计模式\" class=\"headerlink\" title=\"常见的设计模式\"></a>常见的设计模式</h2><h3 id=\"设计模式要遵循哪些原则？\"><a href=\"#设计模式要遵循哪些原则？\" class=\"headerlink\" title=\"设计模式要遵循哪些原则？\"></a>设计模式要遵循哪些原则？</h3><ol>\n<li>开闭原则：面向对象的基本原则，指一个实体应该对扩展开放，对修改关闭，提高代码的可复用性和可维护性</li>\n<li>单一职责原则：一个类、接口或方法只负责一个职责，降低代码复杂度以及变更引起的风险</li>\n<li>依赖倒置原则：程序应该依赖于抽象类/接口，而不是具体的实现类</li>\n<li>接口隔离原则：将不同功能定义在不同接口中实现接口隔离，避免类依赖了它不需要的接口，减少接口之间依赖的冗余和复杂性</li>\n<li>里氏替换原则：开闭原则的补充，规定了任何父类可以出现的地方子类都可以出现，可以约束继承泛滥，加强程序健壮性</li>\n<li>迪米特原则：也叫最少知道原则，每个模块对其他模块都要尽可能少地了解和依赖，降低代码耦合度</li>\n<li>合成/聚合原则：尽量使用组合（has-a）、聚合（contains-a）而不是继承（is-a）达到软件复用的目的</li>\n</ol>\n<h3 id=\"你了解哪些设计模式？\"><a href=\"#你了解哪些设计模式？\" class=\"headerlink\" title=\"你了解哪些设计模式？\"></a>你了解哪些设计模式？</h3><blockquote>\n<p>设计模式分为创建型、结构型和行为型。创建型在创建对象时<strong>隐藏创建逻辑</strong>，不适用new直接实例化对象；结构型通过类和接口间的<strong>继承和引用</strong>实现创建复杂结构的对象；行为型通过类之间<strong>不同通信方式</strong>实现不同的行为</p>\n</blockquote>\n<div class=\"note info\"><p>创建型：单例模式、工厂模式、建造者模式、原型模式</p></div>\n\n<div class=\"note success\"><p>结构型：适配器模式、桥接模式、装饰器模式、代理模式、组合模式</p></div>\n\n<div class=\"note warning\"><p>行为型：模板方法模式、策略模式、责任链模式、观察者模式、命令模式</p></div>\n\n<h4 id=\"讲讲单例模式？\"><a href=\"#讲讲单例模式？\" class=\"headerlink\" title=\"讲讲单例模式？\"></a>讲讲单例模式？</h4><p>单例模式属于创建型模式，一个单例类在任何情况下只存在一个实例，私有化构造方法，提供一个静态方法向外提供静态实例变量。数据库连接池、ServletContext、Spring的单例Bean等都是单例模式的应用</p>\n<ul>\n<li><p>饿汉式：线程安全，在加载时完成实例的创建，提供静态方法获取实例变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HungrySingleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">HungrySingleton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HungrySingleton instance = <span class=\"keyword\">new</span> HungrySingleton();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HungrySingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>懒汉式：在外部调用时才会创建实例，通过双重检测锁、静态内部类、枚举等方法来保证线程安全</p>\n<p>双重检测锁：synchronized加锁，volatile禁止指令重排序</p>\n<p>静态内部类：线程安全、延迟加载</p>\n<p>枚举：简洁、序列化和反序列化无法破解。反射的newInstance方法会判断是否类被枚举修饰，是则抛出异常。序列化时枚举的每个变量都是静态的所以在jvm中只有一份。</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开代码</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程不安全</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazySingleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazySingleton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LazySingleton instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazySingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> LazySingleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双重检测锁机制</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazySingleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazySingleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> LazySingleton instance; <span class=\"comment\">//禁止内存重排序</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazySingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (LazySingleton<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> LazySingleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态内部类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazySingleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazySingleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazySingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> LazySingleton instance = <span class=\"keyword\">new</span> LazySingleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 枚举实现</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> LazySingleton&#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n</li>\n</ul>\n<h4 id=\"讲讲工厂模式\"><a href=\"#讲讲工厂模式\" class=\"headerlink\" title=\"讲讲工厂模式\"></a>讲讲工厂模式</h4><p>工厂模式属于创建型模式，有<strong>简单工厂</strong>模式、<strong>工厂方法</strong>模式、<strong>抽象工厂</strong>模式三种</p>\n<ol>\n<li>简单工厂模式：由工厂对象来创建实例，客户端只需要传入参数即可，由工厂对象进行判断和创建具体类型的实例。适用于创建对象类型较少的场景，如果要增加新类型，需要修改工厂对象的判断逻辑，违背了<strong>开闭原则</strong>。Calendar抽象类的getInstance方法调用了createCalendar根据不同的地区参数创建不同的日历对象，Spring的BeanFactory通过Bean唯一标识来获取Bean</li>\n<li>工厂方法模式：定义一个创建对象的接口，让接口的实现类决定创建哪种对象，让类的实例化推迟到子类中进行，解决了简单工厂中产品扩展的问题。Collection接口中定义了一个iterator工厂方法，返回了一个Iterator类的抽象产品，该方法由ArrayList、HashMap等具体工厂实现；Spring的FactoryBean接口的getObject方法也是工厂方阿飞</li>\n<li>抽象工厂模式：提供一个创建一系列相关或相互依赖对象的接口，无需指定它们的具体类，主要用于系统的产品有多于一个的产品族，而系统只消费其中某一个产品族产品的情况。Connection接口应用了抽象工厂，其中包括Statement、Blob、Savepoint等抽象产品</li>\n</ol>\n<h4 id=\"建造者模式了解吗？\"><a href=\"#建造者模式了解吗？\" class=\"headerlink\" title=\"建造者模式了解吗？\"></a>建造者模式了解吗？</h4><p>建造者模式属于创建型模式，一个类由多个部件构成，一个不见可以有多种实现，通过组合可以创建出不同的实例，在创建该类时，使用者通过一个指挥者实例，实例中有一个抽象建造者，抽象建造者定义了待实现的建造方法(针对不同部件)，抽象建造者的实现类则做出了具体实现。指挥者通过建造者就可以完成对产品的建造，最后将结果返回给使用者。</p>\n<h4 id=\"讲一讲代理模式\"><a href=\"#讲一讲代理模式\" class=\"headerlink\" title=\"讲一讲代理模式\"></a>讲一讲代理模式</h4><p>代理模式属于结构型模式，为其他对象提供一种代理以控制对被代理对象的访问，可以增强目标对象的功能，降低代码耦合度，扩展性好。分为静态代理和动态代理两种方式，静态代理在运行前就已经确定了代理类和被代理类的关系，动态代理具有更强的适用性</p>\n<p>JDK动态代理和CGLib动态代理详细介绍参见 <a href=\"http://realmicah.xyz/posts/caab1d3c.html#JDK动态代理\" target=\"_blank\" rel=\"noopener\">JDK和CGLib</a>.</p>\n<h4 id=\"讲一讲装饰器模式？\"><a href=\"#讲一讲装饰器模式？\" class=\"headerlink\" title=\"讲一讲装饰器模式？\"></a>讲一讲装饰器模式？</h4><p>装饰器模式属于结构型模式，不改变类原有的属性，动态的增加其他属性，装饰器是一个抽象制定了待实现的装饰方法，可以有不同的实现，将已有的类传入装饰器后对其进行装饰。<a href=\"#IO包下有哪些流？\">Java IO流家族</a>应用了这种模式</p>\n<h4 id=\"装饰器和代理有什么区别？\"><a href=\"#装饰器和代理有什么区别？\" class=\"headerlink\" title=\"装饰器和代理有什么区别？\"></a>装饰器和代理有什么区别？</h4><p>装饰器模式的关注点在于给对象动态<strong>添加方法</strong>，而动态代理更注重对象的<strong>访问控制</strong>。动态代理通常会在代理类中<strong>创建被代理对象的实例</strong>，而装饰器模式会将被装饰者作为构造方法的<strong>参数</strong>。</p>\n<h4 id=\"适配器模式了解吗？有什么应用？\"><a href=\"#适配器模式了解吗？有什么应用？\" class=\"headerlink\" title=\"适配器模式了解吗？有什么应用？\"></a>适配器模式了解吗？有什么应用？</h4><p>适配器模式属于结构型模式，将一个类的接口转换为使用者接受的另一种接口，解决由于<strong>不兼容</strong>而不能一起工作的问题。适配器Adapter继承/实现期待的类/接口，在实现期待的接口时，使用用于适配的不兼容者来实现。这样在外部看来就是期待的状态但我们内部通过适配器将原本不兼容的转换为可接受的状态。Java的字符流操作应用了适配器模式，SpringMVC的HandlerAdapter通过适配规则调用不同的处理请求handle方法，Arrays.asList将数组转换为对应的集合</p>\n<h4 id=\"模板方法模式有了解吗？\"><a href=\"#模板方法模式有了解吗？\" class=\"headerlink\" title=\"模板方法模式有了解吗？\"></a>模板方法模式有了解吗？</h4><p>模板方法模式属于行为型模式，使子类可以在不改变算法结构的情况下重新定义算法的某些步骤，适用于抽取子类重复代码到公共父类，<a href=\"#你提到了JUC，还了解JUC包的其他东西吗？\">JUC的AQS</a>应用了模板方法模式，HttpServlet定义了一套处理HTTP请求的模板，service为模板方法定义了基本处理流程，doGet/doPost为基本方法，子类可重写这些方法</p>\n<h4 id=\"讲讲责任链模式\"><a href=\"#讲讲责任链模式\" class=\"headerlink\" title=\"讲讲责任链模式\"></a>讲讲责任链模式</h4><p>责任链模式属于行为型模式，责任链是指由多个继承了抽象处理类的子类组成的处理链条，通过next连接，将对于某个请求的处理交给一条处理链，子类会不断地转发给下一个子类一直向下处理。Spring的拦截器中HandlerExecutionChain将拦截器放在一个list中，前置处理做正向循环直到被拦截就停下，后置处理从这个位置开始逆向循环做后置处理</p>\n<h4 id=\"对观察者模式有什么了解？\"><a href=\"#对观察者模式有什么了解？\" class=\"headerlink\" title=\"对观察者模式有什么了解？\"></a>对观察者模式有什么了解？</h4><p>观察者模式属于行为型模式，也叫发布订阅模式，定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都能得到通知并被自动更新。ServletContextLister能够监听ServletContext对象的生命周期，当启动时调用contextInitialized方法，终止时调用contextDestroyed方法</p>\n<p>如何实现：一个包含了观察者集合和对观察者集合进行操作以及通知观察者的方法的抽象类。一个包含了更新自己的抽象方法，在收到被观察者状态改变通知时被调用。被观察者实现类实现具体的通知方法，当实现类状态改变时通过通知方法调用观察者更新自己的方法。</p>\n<h2 id=\"海量数据处理面试问题\"><a href=\"#海量数据处理面试问题\" class=\"headerlink\" title=\"海量数据处理面试问题\"></a>海量数据处理面试问题</h2><ol>\n<li><p>海量日志数据，提取出某日访问百度次数最多的IP</p>\n<p>每个IP为32位，最多2^32个，可以通过Hash取模将整个大文件映射为n个小文件，再找出每个小文件中出现次数最多的IP（可以使用HashMap统计次数），再从这个1000个中找到最多的那个</p>\n</li>\n<li><p>搜索引擎会通过日志记录用户检索的检索串，每个检索串长度为1-255字节，假设有一千万个记录，去重后不超过三百万个，统计最热门的10个检索串</p>\n<p>首先可以通过Hash取模的方法将其分为n个小文件，再利用HashMap完成排序；借助堆结构，维护一个K大小的小根堆，遍历三百万个数据，放入小根堆。</p>\n</li>\n<li><p>有一个1G大小的文件，每一行是一个词，词的大小不超过16字节，内存限制是1M，返回出现次数最多的100个词</p>\n<p>通过Hash取模将文件分成n个小文件中，保证一个文件大小小于1M，对每个小文件通过HashMap统计出其频率，取出频率最高的100个词，写入新的文件，这样有得到了n个小文件，然后再对这n个小文件执行归并排序</p>\n</li>\n<li><p>有10个文件，每个文件1G，每行存放用户的query，每个文件的query都可能重复，按query的频次排序</p>\n</li>\n</ol>\n<ol start=\"5\">\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p/>","more":"<div class=\"note info\"><p>长文预警  🤣 谨慎食用 💡 善用搜索和目录</p></div>\n\n<h2 id=\"语言特性\"><a href=\"#语言特性\" class=\"headerlink\" title=\"语言特性\"></a>语言特性</h2><h3 id=\"说说Java语言的特点？\"><a href=\"#说说Java语言的特点？\" class=\"headerlink\" title=\"说说Java语言的特点？\"></a>说说Java语言的特点？</h3><ol>\n<li>平台无关性：实现一次编译，到处运行</li>\n<li>相对安全的内存管理和访问机制，避免大部分内存泄露和指针越界</li>\n<li>热点代码检测和运行时编译及优化，使程序随运行时间增长获得更高性能</li>\n</ol>\n<h3 id=\"Java如何实现平台无关？\"><a href=\"#Java如何实现平台无关？\" class=\"headerlink\" title=\"Java如何实现平台无关？\"></a>Java如何实现平台无关？</h3><p>Java的源代码经过编译后生成的字节码是和计算机体系结构无关的指令，可以在任何机器上解释执行，动态地转换成本地机器代码，而这个过程是由JVM完成的，不同平台使用不同的JVM，屏蔽了不同操作系统的差异。</p>\n<h3 id=\"Java是值传递还是引用传递？\"><a href=\"#Java是值传递还是引用传递？\" class=\"headerlink\" title=\"Java是值传递还是引用传递？\"></a>Java是值传递还是引用传递？</h3><blockquote>\n<p>值传递是指方法接收调用者提供的值，引用传递是指方法接收调用者提供的变量地址</p>\n</blockquote>\n<p>Java是值传递，方法接受的是参数的副本，对于基本数据类型，改变入参不会影响实参；对于对象，接受的是对象的引用，改变其属性值会影响实参，但是改变这个引用并不会让实参引用新的对象</p>\n<h3 id=\"谈谈深拷贝和浅拷贝？\"><a href=\"#谈谈深拷贝和浅拷贝？\" class=\"headerlink\" title=\"谈谈深拷贝和浅拷贝？\"></a>谈谈深拷贝和浅拷贝？</h3><p>深拷贝完全拷贝基本数据类型和引用数据类型，浅拷贝值复制基本引用类型和引用变量，没有复制引用变量指向的实际对象。修改克隆对象可能影响原对象，不安全。</p>\n<h3 id=\"什么是反射？\"><a href=\"#什么是反射？\" class=\"headerlink\" title=\"什么是反射？\"></a>什么是反射？</h3><p>反射是指在运行状态中，可以获得任意一个类的属性和方法，可以调用任意一个对象的方法和属性。反射破坏了<strong>封装性</strong>和<strong>泛型约束</strong>。</p>\n<h3 id=\"Class类的作用？\"><a href=\"#Class类的作用？\" class=\"headerlink\" title=\"Class类的作用？\"></a>Class类的作用？</h3><p>在程序运行期间，Java运行时系统为所有对象维护一个运行时类型标识，这个信息会跟踪每个对象所属的类，虚拟机利用运行时类型信息选择要执行的正确方法，保存这些信息的类就是Class，可以通过<code>类名.class</code>、<code>对象.getClass()</code>、<code>Class.forName(类的全限定名)</code>来获取Class对象</p>\n<h3 id=\"什么是注解、元注解？\"><a href=\"#什么是注解、元注解？\" class=\"headerlink\" title=\"什么是注解、元注解？\"></a>什么是注解、元注解？</h3><p>注解是一种标记，使类/接口/方法/属性附加额外信息，完成特定功能。</p>\n<p>元注解是注解的注解，用于标识注解的相关信息。</p>\n<ol>\n<li>@Target({参数列表})：注解作用域，可填参数为：CONSTRUCTOR-构造方法、FIELD-属性、METHOD-方法、PACKAGE-包、LOCAL_VARIABLE-局部变量、TYPE-类/接口</li>\n<li>@Retention(参数)：生命周期，可填参数为：RUNTIME-运行时注解，可以通过<strong>反射</strong>获取、SOURCE-源代码注解、CLASS-编译时注解，运行时注解</li>\n<li>@Inherited：可继承到子类，但不能继承到子类的方法</li>\n<li>@Document：生成java-doc会包含注解信息</li>\n</ol>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">如何获取注解</div></div><div class=\"fold\">\n<p>通过反射获取运行时的注解信息，getAnnotations方法</p>\n\n</div></div>\n\n<h3 id=\"什么是泛型？\"><a href=\"#什么是泛型？\" class=\"headerlink\" title=\"什么是泛型？\"></a>什么是泛型？</h3><p>泛型可以看作一种数据类型，用来接收未知的数据类型，解决不确定对象具体类型时可能发生强制转换异常等问题，Java中的泛型时防止有效输入的，在编译器有效。通过反编译可以看到如果泛型T没有被指定，则会转换为多态，即类型声明为Object；在使用对应数据时将在返回之前加一条checkcast来做类型转换。</p>\n<h3 id=\"异常体系\"><a href=\"#异常体系\" class=\"headerlink\" title=\"异常体系\"></a>异常体系</h3><p>Throwable下有Error和Exception，Error用来标识JVM无法处理的错误，Exception分为受检异常和不受检异常，也叫编译期异常和运行时异常，编译期异常如果不处理会编译失败，运行时异常可以通过编译，RuntimeException及其所有子类都是运行时异常，除此之外都是编译期异常。其体系结构图如下：</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004710.png\" alt=\"图片\"></p>\n<p>处理过程参见<a href=\"/posts/f885a170.html\" title=\"Java异常体系\">Java异常体系</a></p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><ol>\n<li>byte：1字节</li>\n<li>char：2字节</li>\n<li>int：4字节</li>\n<li>short：2字节</li>\n<li>long：8字节</li>\n<li>float：4字节</li>\n<li>double：8字节</li>\n<li>boolean：JVM编译时会转为int类型存储，true-&gt;1,false-&gt;0</li>\n</ol>\n<h3 id=\"包装类型自动装箱-拆箱是什么？\"><a href=\"#包装类型自动装箱-拆箱是什么？\" class=\"headerlink\" title=\"包装类型自动装箱/拆箱是什么？\"></a>包装类型自动装箱/拆箱是什么？</h3><div class=\"note info\"><p>每个基本数据类型都有自己的包装类型，之间的自动转化称为拆箱和装箱。封装成包装类型主要是面向对象的设计，可以提供更方便的操作某种数据类型的方法，例如<code>parseInt()</code>。</p>\n<p>包装类型设有缓存池，在使用<code>valueOf()</code>的方法时先查看是否在缓存池中，没有再通过 <code>new Integer()</code>在堆中创建一个新对象。</p></div>\n\n<h3 id=\"String为什么是不可变对象？但是又可以修改它的值？\"><a href=\"#String为什么是不可变对象？但是又可以修改它的值？\" class=\"headerlink\" title=\"String为什么是不可变对象？但是又可以修改它的值？\"></a>String为什么是不可变对象？但是又可以修改它的值？</h3><p>在Java中String被<strong>final</strong>关键字修饰，因此是不可被继承的。存储字符串内容的char数组也通过<strong>final</strong>修饰，并且不提供修改数组的方法，因此String是不可变的。Java9中改用byte数组存放，并用coder指定编码类型（0-单字节Latin-1，1-双字节UTF-16）。主要是为了节省空间。</p>\n<p>对一个String对象的修改实际上都是创建了一个新String对象，再引用该对象。</p>\n<h3 id=\"String和StringBuidler和StringBuffer的区别\"><a href=\"#String和StringBuidler和StringBuffer的区别\" class=\"headerlink\" title=\"String和StringBuidler和StringBuffer的区别\"></a>String和StringBuidler和StringBuffer的区别</h3><p>String字符串相加时底层通过StringBuilder实现，但每次都会新生成一个StringBuidler对象且最终通过toString方法返回拼接后的字符串。StringBuilder可解决在字符串相加时创建多个字符串占用空间多效率低下的问题，底层是未被final修饰的初始容量为16的byte数组，可自动扩容。StringBuffer使用synchronized修饰，线程安全。</p>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><h3 id=\"谈谈你对面向对象的理解？\"><a href=\"#谈谈你对面向对象的理解？\" class=\"headerlink\" title=\"谈谈你对面向对象的理解？\"></a>谈谈你对面向对象的理解？</h3><p>面向过程让计算机有步骤地顺序做一件事，是过程化思维，使用面向过程语言开发大型项目，模块之间耦合严重，面向对象区别与面向过程，强调高内聚低耦合，对现实事物进行抽象并映射成对象，定义共性行为，再解决实际问题。</p>\n<h3 id=\"面向对象的三个特性？\"><a href=\"#面向对象的三个特性？\" class=\"headerlink\" title=\"面向对象的三个特性？\"></a>面向对象的三个特性？</h3><ol>\n<li>封装：是对象功能内聚的表现形式，对属性、数据、敏感行为实现隐藏，对属性的访问和修改必须通过公共接口实现。封装使对象关系变得简单。</li>\n<li>继承：用来扩展一个类，子类继承父类的部分属性和行为使模块具有复用性，继承是“is a”的关系。</li>\n<li>多态：以封装和继承为基础，根据运行时对象实际类型使同一行为具有不同表现形式。因为在编译时无法确定最终调用的方法体，在运行时由JVM动态绑定，调用合适的重写方法。</li>\n</ol>\n<h3 id=\"重载和重写的区别？\"><a href=\"#重载和重写的区别？\" class=\"headerlink\" title=\"重载和重写的区别？\"></a>重载和重写的区别？</h3><ol>\n<li>重载：在同一个类中，对同名函数的不同实现，其参数类型/顺序/个数不同。但不能以返回值来作为标准，因为我们在调用方法时有时并不关注返回值。对于编译器来说，方法名称和参数列表构成了一个唯一的方法签名，重载在编译时就知道该调用哪个方法，因此属于静态绑定，并不属于<strong>多态</strong>。</li>\n<li>重写：在子类中，重写父类方法，要求返回相同类型或子类型，且访问权限不能变小，抛出的异常类型不能变大。</li>\n</ol>\n<h3 id=\"对象的通用方法？\"><a href=\"#对象的通用方法？\" class=\"headerlink\" title=\"对象的通用方法？\"></a>对象的通用方法？</h3><ol>\n<li>equals：判断对象是否相等，默认使用==，可重写equals方法实现自定义比较逻辑。对于基本数据类型，判断值是否相等，对于引用类型，判断是否引用自同一对象</li>\n<li>hashCode：对象的散列值，等价的对象散列值一定相等，反之不然。在重写equals方法时应同时重写hashCode，保证等价的对象散列值相等</li>\n<li>toString：默认返回类名+@+数值，数值为散列值的无符号十六进制表示</li>\n<li>clone：克隆，默认用protected修饰，如果没有显式重写clone方法编译器报错时protected的访问错误了；如果重写了clone但没有让类实现Cloneable接口，将会抛出CloneNotSupported异常。默认实现的是浅拷贝，可以通过重写实现深拷贝</li>\n<li>getClass：获取对象的类类型</li>\n<li>finalize：在对象被回收时可能被调用。在finalize中重新与引用链上的对象建立关联就可以被移出回收集合不被回收</li>\n<li>作为锁的几个方法：wait、notify、notifyAll</li>\n</ol>\n<h3 id=\"内部类的作用是什么，有哪些分类？\"><a href=\"#内部类的作用是什么，有哪些分类？\" class=\"headerlink\" title=\"内部类的作用是什么，有哪些分类？\"></a>内部类的作用是什么，有哪些分类？</h3><p>内部类方法可以访问定义这个内部类的作用域中的数据，包括private。编译器会将内部类转换为常规的类文件，以$分隔外部类和内部类名。</p>\n<ol>\n<li>静态内部类：只加载一次，可通过外部类名.内部类名直接访问，可以访问外部类的所有静态属性和方法。HashMap的Node节点、ReentrantLock中的Sync都是静态内部类</li>\n<li>成员内部类：外部类的每个对象都会加载一次，不可以定义静态成员和方法，可访问外部类的所有内容</li>\n<li>局部内部类：定义在方法内，不能声明访问修饰符，只能定义实例成员变量和实例方法</li>\n<li>匿名内部类：只用一次的没名字的类，字节码文件以数字编号命名</li>\n</ol>\n<h3 id=\"接口和抽象类的异同？\"><a href=\"#接口和抽象类的异同？\" class=\"headerlink\" title=\"接口和抽象类的异同？\"></a>接口和抽象类的异同？</h3><blockquote>\n<p>接口和抽象类对实体类进行更高层次的抽象，仅定义公共行为和特征。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">维度</th>\n<th align=\"center\">接口</th>\n<th align=\"center\">抽象类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">成员变量</td>\n<td align=\"center\">无要求</td>\n<td align=\"center\">默认public static final常量</td>\n</tr>\n<tr>\n<td align=\"center\">构造方法</td>\n<td align=\"center\">有构造方法，不能实例化</td>\n<td align=\"center\">没有构造方法，不能实例化</td>\n</tr>\n<tr>\n<td align=\"center\">方法</td>\n<td align=\"center\">抽象类可以没有抽象方法，但有抽象方法一定是抽象类</td>\n<td align=\"center\">默认public abstract，JKD8支持默认/静态方法，JDK9支持私有方法</td>\n</tr>\n<tr>\n<td align=\"center\">继承</td>\n<td align=\"center\">单继承</td>\n<td align=\"center\">多继承</td>\n</tr>\n</tbody></table>\n<p>抽象类体现is-a关系，接口体现like-a关系。抽象类是对同类事物相对具体的抽象，接口是对行为的定义。</p>\n<h3 id=\"子类初始化顺序？\"><a href=\"#子类初始化顺序？\" class=\"headerlink\" title=\"子类初始化顺序？\"></a>子类初始化顺序？</h3><p>父类静态代码块和静态变量-&gt;子类静态代码块和静态变量-&gt;父类普通代码块和普通变量-&gt;父类构造方法-&gt;子类普通代码块和普通变量-&gt;子类构造方法</p>\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><h3 id=\"说一说ArrayList\"><a href=\"#说一说ArrayList\" class=\"headerlink\" title=\"说一说ArrayList\"></a>说一说ArrayList</h3><p>ArrayList是容量可变的非线程安全列表，使用数组实现，因此支持对元素的快速随机访问，但是插入和删除速度慢，扩容时会创建更大的数组，把原有数组复制到新数组。</p>\n<ol>\n<li>elementData是ArrayList的数据域，被transient修饰，序列化时会调用writeObject写入流，反序列化时调用readObject重新赋值到新对象的elementData</li>\n<li>size是当前实际大小，即为elementData大小</li>\n<li>modCount记录了ArrayList结构性变化的次数，继承自AbstractList，所有涉及结构变化的方法都会增加该值。通过比较expectModCount和modCount值是否相等，抛出ConcurrentModificationException，保证了在序列化和迭代过程中数组不会被修改，称为<strong>fail-fast</strong>机制</li>\n</ol>\n<h3 id=\"说一说LinkedList\"><a href=\"#说一说LinkedList\" class=\"headerlink\" title=\"说一说LinkedList\"></a>说一说LinkedList</h3><p>LinkedList本质是双向链表，在插入和删除上速度更快，但是随机访问元素慢，实现了Deque接口，具有队列和栈的性质。通过附加引用的方式将零散的内存单元关联起来，内存利用率高</p>\n<h3 id=\"Set有什么特点，有哪些实现？\"><a href=\"#Set有什么特点，有哪些实现？\" class=\"headerlink\" title=\"Set有什么特点，有哪些实现？\"></a>Set有什么特点，有哪些实现？</h3><p>Set不允许元素重复，常用实现有HashSet、LinkedHashSet、TreeSet</p>\n<ol>\n<li>HashSet：通过HashMap实现，map的key即set存储的元素，所有value都为Object类型常量，不保证有序，线程不安全。对于包装类型通过值判重，对于引用类型，通过hashCode和equals判重</li>\n<li>LinkedHashSet：继承自HashSet，通过LinkedHashMap实现，使用双向链表维护元素插入顺序</li>\n<li>TreeSet：通过TreeMap实现，添加元素到集合时按照比较规则将其插入到合适的位置，保证集合有序</li>\n</ol>\n<h3 id=\"TreeMap有什么特点？\"><a href=\"#TreeMap有什么特点？\" class=\"headerlink\" title=\"TreeMap有什么特点？\"></a>TreeMap有什么特点？</h3><p>TreeMap基于红黑树实现，增删改查的平均和最差时间复杂度均为O(logn)，最大特点是key有序，key必须实现Comparable接口或提供Comparator比较器，因此不能为null。</p>\n<p>在排序时，如果比较器不为空，则通过比较器的compare方法，否则使用key实现的Comparable接口的compareTo方法，如果都没有则抛出异常。</p>\n<p>关于红黑树的其他特性，参见<a href=\"/posts/75890e6e.html\" title=\"红黑树基础\">红黑树基础</a></p>\n<h3 id=\"HashMap相关问题\"><a href=\"#HashMap相关问题\" class=\"headerlink\" title=\"HashMap相关问题\"></a>HashMap相关问题</h3><h4 id=\"HashMap有什么特性？\"><a href=\"#HashMap有什么特性？\" class=\"headerlink\" title=\"HashMap有什么特性？\"></a>HashMap有什么特性？</h4><ol>\n<li>HashMap存储键值对实现快速存取，允许为null（因为对null做了特殊处理），key不可重复，重复则覆盖原值</li>\n<li>非同步，线程不安全</li>\n<li>无序</li>\n</ol>\n<h4 id=\"HashMap底层原理是什么？\"><a href=\"#HashMap底层原理是什么？\" class=\"headerlink\" title=\"HashMap底层原理是什么？\"></a>HashMap底层原理是什么？</h4><p>在JDK8之前底层实现是数组+链表，在JDK8改为数组+链表/红黑树，节点类型从Entry变为Node。成员变量包括存储数据的table数组、元素数量size、负载因子loadFactor。默认初始化容量是16，扩容容量必须是2的幂，默认负载因子为0.75</p>\n<h4 id=\"如何计算key在table数组中的位置？\"><a href=\"#如何计算key在table数组中的位置？\" class=\"headerlink\" title=\"如何计算key在table数组中的位置？\"></a>如何计算key在table数组中的位置？</h4><p>在JDK8之前：对于字符串类型，调用stringHash32计算；对于其他类型，使用一个不变的随机值hashSeed和key的hashCode异或之后，再通过移位和异或，最终和表的长度与运算获得最终的地址。这样既减少了哈希冲突又比取模效率更高</p>\n<p>在JDK8：当key为null时，返回0；否则通过key的hashCode与高16位做异或运算得到在数组中的位置，这种hash计算将高位的变化扩展到低位，避免因表范围的限制，高位不会在索引计算中使用，可以减少哈希冲突。</p>\n<h4 id=\"get函数的实现？\"><a href=\"#get函数的实现？\" class=\"headerlink\" title=\"get函数的实现？\"></a>get函数的实现？</h4><p>① JDK8之前：</p>\n<div class=\"note warning\"><p>key为null，调用getForNullKey方法，如果size为0表示链表为空，返回null；否则遍历table[0]链表，找到key为null的节点则返回其value，否则返回null。</p></div>\n\n<div class=\"note info\"><p>key不为null，调用getEntry方法，当size不为0，计算key的hash值，遍历对应位置的链表，如果key和hash都相等则返回该节点的value</p></div>\n\n<p>② JDK8：</p>\n<p>调用getNode函数，如果table数组不为空，则判断第一个节点和查找的key和hash相等则返回；否则判断其他节点，如果是TreeNode则以getTreeNode在树中查找，否则遍历链表查找，最终返回对应的节点的值或null。</p>\n<h4 id=\"put函数的实现？\"><a href=\"#put函数的实现？\" class=\"headerlink\" title=\"put函数的实现？\"></a>put函数的实现？</h4><p>① JDK8之前：</p>\n<div class=\"note warning\"><p>key为null，直接存入table[0]。</p></div>\n\n<div class=\"note info\"><p>key不为null，计算hash值，遍历对应位置的链表，如果key存在更新value，返回旧value；否则将modCount++，使用addEntry方法增加一个节点并返回null</p></div>\n\n<p>② JDK8：</p>\n<p>如果table为空/长度为0则进行扩容，否则计算key对应的位置，不存在则调用newNode创建一个节点。如果存在且是TreeNode，则调用putTreeVal增加一个树节点，并维持平衡；如果是链表，则遍历插入/更新。此时如果树的size超过阈值8则通过treeifyBin方法，当table的长度大于64时将其转为红黑树，没超过时进行扩容。</p>\n<h4 id=\"扩容为什么要2的幂，具体是怎么扩容的？\"><a href=\"#扩容为什么要2的幂，具体是怎么扩容的？\" class=\"headerlink\" title=\"扩容为什么要2的幂，具体是怎么扩容的？\"></a>扩容为什么要2的幂，具体是怎么扩容的？</h4><p>保证为2的幂首先是在进行hash计算的时候，可以用与来替代取模运算，提高效率，其次可以减少碰撞，均匀分布。</p>\n<p>① JDK8之前：</p>\n<p>如果当前容量达到了最大容量<code>MAXIMUM_CAPACITY</code>，将阈值设置为Integer最大值，停止扩容；否则计算新容量，将阈值设为<code>newCapacity * loadFactor</code>和<code>MAXIMUM_CAPACITY + 1</code>的较小值，创建新容量的Entry数组，通过transfer将数据转移。遍历链表，重新计算位置，使用头插法将元素转移。</p>\n<p>② JDK8：</p>\n<p>如果当前容量<code>oldCap</code>达到了最大容量，将阈值设置为Integer最大值，停止扩容；当<code>oldCap&lt;&lt;1</code>不超过最大容量则扩大为两倍；当当前扩容阈值<code>oldThr&gt;0</code>，则将其作为新容量；否则将新容量设为默认的16，阈值为12</p>\n<p>数据的转移：当节点为TreeNode，调用split方法对树进行修建，当树的结点数小于6则将其转为链表；当节点为链表，将其拆分为hash值超过旧容量的部分和未超出的部分，对于<code>hash &amp; oldCap = 0</code>的部分不需要处理，否则通过旧下表+旧容量计算出新下标并完成转移。</p>\n<h4 id=\"为什么负载因子是0-75？\"><a href=\"#为什么负载因子是0-75？\" class=\"headerlink\" title=\"为什么负载因子是0.75？\"></a>为什么负载因子是0.75？</h4><p>这是个折中的数字，0.5造成了一半空间的浪费，1则在扩容时无法处理其他put，0.75是空间和时间的均衡，避免了较多的hash冲突（实验获得）。</p>\n<h4 id=\"HashMap扩容容易死循环你了解吗？\"><a href=\"#HashMap扩容容易死循环你了解吗？\" class=\"headerlink\" title=\"HashMap扩容容易死循环你了解吗？\"></a>HashMap扩容容易死循环你了解吗？</h4><p>在JDK8之前，使用头插法迁移元素，链表节点之间存在指针引用关系，因此在并发修改时容易出现死循环。JDK8改用尾插法，并且没有指针引用关系，解决了死循环的问题。</p>\n<p>但是在并发下扩容时容易造成数据丢失：首先是当某个线程在transfer时，其他线程新增的元素可能在已遍历过的链表上，因此这部分数据就丢失了；在多个线程resize的过程中，新创建了多个newTable，这是线程内的局部变量，线程之间不可见，在<code>table=newTable</code>时会覆盖其他线程的操作。因此HashMap是<strong>线程不安全</strong>的。</p>\n<h3 id=\"有哪些线程安全的容器？\"><a href=\"#有哪些线程安全的容器？\" class=\"headerlink\" title=\"有哪些线程安全的容器？\"></a>有哪些线程安全的容器？</h3><ol>\n<li><p>使用synchronized修饰：Vector、HashTable、Collections.synchronizedXX</p>\n</li>\n<li><p>并发容器：</p>\n<div class=\"note info\"><p>CopyOnWriteArrayList：add中使用可重入锁，复制一份，读写分离，在写操作时操作副本，然后将原数组指向新数组，保证最终一致性</p></div>\n\n<div class=\"note success\"><p>ConcurrentHashMap：1.7使用分段锁不锁整张表仅锁住某一段seagment。1.8使用红黑树，通过CAS操作和synchronized保证线程安全同时提高效率。</p></div>\n\n</li>\n</ol>\n<h2 id=\"多线程高并发\"><a href=\"#多线程高并发\" class=\"headerlink\" title=\"多线程高并发\"></a>多线程高并发</h2><h3 id=\"JMM是什么？有什么作用？\"><a href=\"#JMM是什么？有什么作用？\" class=\"headerlink\" title=\"JMM是什么？有什么作用？\"></a>JMM是什么？有什么作用？</h3><blockquote>\n<p>JMM是Java内存模型，JMM主要是影响线程共享的内存可见性问题，Java线程之间的通信由JMM控制。</p>\n</blockquote>\n<p>所有变量存储于主内存，每个线程有自己的工作内存，保存被该线程使用的变量的主内存副本，线程对变量的操作必须在工作内存中进行，不能直接读写主内存数据。不同线程间无法直接访问对方工作内存的变量，线程通信必须经过主内存。关于工作内存和主内存的交互，JMM定义了8种原子操作：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">操作</th>\n<th align=\"center\">作用变量范围</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">lock</td>\n<td align=\"center\">主内存</td>\n<td align=\"center\">把变量标识为线程独占状态</td>\n</tr>\n<tr>\n<td align=\"center\">unlock</td>\n<td align=\"center\">主内存</td>\n<td align=\"center\">释放处于锁定状态的变量</td>\n</tr>\n<tr>\n<td align=\"center\">read</td>\n<td align=\"center\">主内存</td>\n<td align=\"center\">把变量从主内存传到工作内存</td>\n</tr>\n<tr>\n<td align=\"center\">load</td>\n<td align=\"center\">工作内存</td>\n<td align=\"center\">把read的值放入工作内存的变量副本</td>\n</tr>\n<tr>\n<td align=\"center\">use</td>\n<td align=\"center\">工作内存</td>\n<td align=\"center\">把工作内存的变量值传给执行引擎</td>\n</tr>\n<tr>\n<td align=\"center\">assign</td>\n<td align=\"center\">工作内存</td>\n<td align=\"center\">把从执行引擎接收的值赋给工作内存的变量</td>\n</tr>\n<tr>\n<td align=\"center\">store</td>\n<td align=\"center\">工作内存</td>\n<td align=\"center\">把工作内存的变量值传到主内存</td>\n</tr>\n<tr>\n<td align=\"center\">write</td>\n<td align=\"center\">主内存</td>\n<td align=\"center\">把store取到的变量值放入主内存变量</td>\n</tr>\n</tbody></table>\n<h3 id=\"什么是指令重排序？\"><a href=\"#什么是指令重排序？\" class=\"headerlink\" title=\"什么是指令重排序？\"></a>什么是指令重排序？</h3><p>为了提高性能，编译器和处理器通常会对指令进行重排序，重排序指从源代码到指令序列的重排序，分为以下三种：</p>\n<ol>\n<li>编译器优化的重排序：在不改变单线程程序语义的前提下重排语句的执行顺序</li>\n<li>指令级并行的重排序：如果不存在数据依赖，处理器可以改变语句对应机器指令的执行顺序</li>\n<li>内存系统的重排序</li>\n</ol>\n<h3 id=\"as-if-serial和happens-before了解吗？\"><a href=\"#as-if-serial和happens-before了解吗？\" class=\"headerlink\" title=\"as-if-serial和happens-before了解吗？\"></a>as-if-serial和happens-before了解吗？</h3><p>as-if-serial语义是指不论如何重排序，<strong>单线程</strong>程序的执行结果不能改变。因此，编译器和处理器不会对存在数据依赖关系的操作重排序</p>\n<p>happens-before是先行发生原则，对有顺序性保障的禁止重排序，保证了正确同步的<strong>多线程</strong>程序的执行结果不变</p>\n<p>两者都是为了不改变程序执行结果的前提下尽可能提高程序执行<strong>并行度</strong></p>\n<h3 id=\"什么是原子性、可见性、有序性？\"><a href=\"#什么是原子性、可见性、有序性？\" class=\"headerlink\" title=\"什么是原子性、可见性、有序性？\"></a>什么是原子性、可见性、有序性？</h3><ol>\n<li>原子性：基本数据类型的访问都具备原子性，但是64位长度的long和double需要被划分为两次32位操作，因此不具备原子性。更大范围的原子性，JMM提供了lock和unlock操作，对应到更高层次的字节码指令monitorenter和monitorexit，也就是Java代码中的synchronized</li>\n<li>可见性：指当一个线程修改了共享变量之后，其他线程能够立即得知修改。JMM通过在变量修改后将值同步会主内存，在变量读取前从主内存刷新的方式实现可见性。volatile通过这种方式保证可见性，synchronized则通过unlock前必须先执行sotre和write来保证</li>\n<li>有序性：在本线程内观察所有操作是有序的，在一个线程内观察另一个线程，所有操作都是无序的。前半句指as-if-serial语义，后半句指指令重排序和工作内存与主内存延迟现象。</li>\n</ol>\n<h3 id=\"对volatile有什么理解？\"><a href=\"#对volatile有什么理解？\" class=\"headerlink\" title=\"对volatile有什么理解？\"></a>对volatile有什么理解？</h3><p>volatile的内存语义是：在写一个volatile变量时，把该线程工作内存的值立即刷新到主内存中；在读一个volatile变量时，把该线程的工作内存值置为无效，从主内存中读取</p>\n<p>当变量被volatile修饰后，具备两种特性：</p>\n<ol>\n<li>保证变量对所有线程可见</li>\n<li>禁止指令重排序优化：在写操作之前，汇编指令有<strong>lock</strong>前缀，相当于一个内存屏障，后面的指令不能排在内存屏障之前，同时会先对缓存变量做一次<strong>store和write</strong>操作，写回主内存中</li>\n</ol>\n<h3 id=\"final可以保证可见性吗？\"><a href=\"#final可以保证可见性吗？\" class=\"headerlink\" title=\"final可以保证可见性吗？\"></a>final可以保证可见性吗？</h3><p>可以，被final修饰的字段在构造方法中一旦被初始化完成，并且构造方法没有把this引用传递出去（this引用逃逸），在其他线程中就能看见final字段值。</p>\n<p>JMM禁止把<strong>写final域</strong>重排序到构造方法之外，在写final之后，构造方法return之前，有一个<strong>Store屏障</strong>，确保在对象引用为其他线程课件只之前，对象的final域已初始化过。</p>\n<p>在初次<strong>读final域</strong>时，JMM要求必须先读这个final域所在的对象引用，通过一个<strong>Load屏障</strong>，确保初次读对象引用和初次读final域不会被重排序</p>\n<h3 id=\"谈一谈synchronized\"><a href=\"#谈一谈synchronized\" class=\"headerlink\" title=\"谈一谈synchronized\"></a>谈一谈synchronized</h3><p>synchronized关键字解决的是多个线程之间访问同一资源的同步问题，被synchronized修饰的同步代码块可以保证在任意时刻只能有一个线程执行。可以通过javap看到相关的字节码，在进入和退出同步块时有monitorenter和monitorexit指令，这里的monitor是存在Java对象头中的监视器，对象头中有两部分数据，一是classPointer指向对象的类，二是MarkWord，存储运行时对象的各种信息，包括hashCode、gc年龄、<strong>锁状态</strong>等。锁状态由锁标志位标识，标志位的指针指向monitor对象。</p>\n<h4 id=\"monitor对象\"><a href=\"#monitor对象\" class=\"headerlink\" title=\"monitor对象\"></a>monitor对象</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectMonitor() &#123;</span><br><span class=\"line\">    _header       = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    _count        = <span class=\"number\">0</span>; <span class=\"comment\">// 记录个数</span></span><br><span class=\"line\">    _waiters      = <span class=\"number\">0</span>,</span><br><span class=\"line\">    _recursions   = <span class=\"number\">0</span>;</span><br><span class=\"line\">    _object       = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    _owner        = <span class=\"literal\">NULL</span>; <span class=\"comment\">//指向拥有锁的线程</span></span><br><span class=\"line\">    _WaitSet      = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 处于wait状态的线程，会被加入到_WaitSet</span></span><br><span class=\"line\">    _WaitSetLock  = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    _Responsible  = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    _succ         = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    _cxq          = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    FreeNext      = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">    _EntryList    = <span class=\"literal\">NULL</span> ; <span class=\"comment\">// 处于等待锁block状态的线程，会被加入到该列表</span></span><br><span class=\"line\">    _SpinFreq     = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    _SpinClock    = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    OwnerIsThread = <span class=\"number\">0</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多个线程进入同步代码块后，首先进入<strong>_EntryList</strong>，当线程获取对象的monitor之后，将 <strong>_owner</strong> 设置为当前线程，同时<strong>count</strong>++；当线程调用<strong>wait</strong>方法，将释放当前持有的monitor， <strong>_owner</strong>设置为null，<strong>count</strong>–，同时进入 <strong>_WaitSet</strong>等待被唤醒；当前线程执行完毕后，也将释放monitor，同时复位<strong>count</strong>，以便其他线程进入获取monitor</p>\n<h4 id=\"锁类型\"><a href=\"#锁类型\" class=\"headerlink\" title=\"锁类型\"></a>锁类型</h4><p>在早期版本中，synchronized属于重量级锁，基于操作系统底层的<strong>MutexLock互斥锁</strong>来实现，线程的挂起和切换需要从用户态到内核态的转换，时间成本高；JDK6对synchronized做了优化，引入了自旋锁、偏向锁、轻量级锁、锁粗化和锁消除等，提高锁的效率，因此锁一共有四个状态，分别是无锁（01-0）、偏向锁（01-1）、轻量级锁（00）、重量级锁（10）</p>\n<ol>\n<li>自旋锁：如果获取不到锁则会等待一段时间，不直接挂起线程，避免上下文切换的时间消耗。后来又引进了<strong>自适应自旋锁</strong>，其等待次数是自适应的，更加聪明</li>\n<li>偏向锁：认为每次获取当前锁的都是同一线程，对象头MarkWord中的偏向线程ID存储了这个线程，因此加锁时只需要检查MarkWord中的偏向线程iID是否是当前线程，如果是则直接获取锁，否则就要检测当前锁状态是否是偏向锁，如果是则将当前线程id设置到MarkWord中的偏向线程ID，否则通过CAS竞争锁。此时如果有第二个线程竞争锁，会发现偏向线程id已指向了线程1，则出现了锁竞争，会触发重新偏向或升级到轻量级锁，大部分情况下是升级</li>\n<li>轻量级锁：线程1获取锁，如果锁为无锁状态，将MarkWord拷贝到当前线程栈帧中的锁记录LockRecord，JVM将通过CAS尝试将MarkWord中的Lock Word指向LockRecord、将LockRecord的owner指向MarkWord，如果成功则将对象锁状态更新为轻量级锁，否则表示当前轻量级锁已经被获取了，将进入自旋，达到一定次数后膨胀为重量级锁（将MarkWord指向<strong>互斥量Mutex</strong>）。在释放锁时如果CAS将当前线程的LockRecord替换为MarkWord成功，则释放锁成功，进入无锁状态，否则说明MarkWord已经指向互斥量，锁为重量级锁，需要通知被阻塞的线程</li>\n<li>重量级锁：当线程想要获取锁发现是重量级锁时，将被阻塞，等待锁释放时被唤醒。这样的操作需要操作系统来执行，从<strong>用户态转换为内核态</strong>，开销大，耗时。</li>\n</ol>\n<h4 id=\"什么是锁消除、锁粗化？\"><a href=\"#什么是锁消除、锁粗化？\" class=\"headerlink\" title=\"什么是锁消除、锁粗化？\"></a>什么是锁消除、锁粗化？</h4><ul>\n<li><p>锁消除：JVM判断不存在竞争，则不进行加锁，节省无意义的加解锁。</p>\n</li>\n<li><p>锁粗化：一般来讲，我们尽量的让同步代码块的范围更小，这样影响的范围会更小，<strong>并发程度高</strong>，即使存在竞争也不需要等待太长时间，但是如果有一连续的加锁解锁，那么反而会造成性能降低 因此锁粗化就是在这种情况下，一连续的加锁解锁<strong>合并</strong>成一次加锁解锁，扩展锁的范围</p>\n</li>\n</ul>\n<h3 id=\"什么是CAS？它会有什么问题？\"><a href=\"#什么是CAS？它会有什么问题？\" class=\"headerlink\" title=\"什么是CAS？它会有什么问题？\"></a>什么是CAS？它会有什么问题？</h3><p>CAS是指Compare And Swap，比较并交换，有3个操作数，分别是内存位置V、旧的预期值A和准备设置的新值B。CAS指令执行时，当且仅当V的值为A时，处理器才会用B更新V的值。其处理过程是原子操作，不会被其他线程打断。</p>\n<p>从语义上来说，如果V初次读取时A，并且在准备更新时仍为A，这并不能说明它没有被修改过，因为它可能已经<strong>先变为C再被改回A</strong>，但是CAS是察觉不到的，这个问题称为<strong>ABA问题</strong>。可以通过引入版本号、时间戳来解决这一问题。</p>\n<h3 id=\"了解ReentrantLock吗？和synchronized有什么区别\"><a href=\"#了解ReentrantLock吗？和synchronized有什么区别\" class=\"headerlink\" title=\"了解ReentrantLock吗？和synchronized有什么区别\"></a>了解ReentrantLock吗？和synchronized有什么区别</h3><p>ReentrantLock是JUC Lock接口的实现，synchronized是由JVM实现的，很多优化并不直接暴露给我们，ReentrantLock是API层面实现的，比synchronized拥有更细粒度的控制和更高级的功能，可实现中断响应、限时等待、等待通知、公平锁等。在性能上，JDK6之后做了许多优化，二者性能基本持平</p>\n<ol>\n<li>中断响应：通过lockInterrupt获取锁，能在获取过程中响应中断，如果中断则不再等待获取锁直接返回。而不响应中断的获取锁则是等待到获取锁成功再将线程置于中断状态</li>\n<li>等待通知：通过Condition的await将当前线程放入等待队列，直到获得信号唤醒线程，可以通过多个Condition实现<strong>选择性唤醒</strong></li>\n<li>公平锁：按照先来先服务的原则，等待时间长的先获得锁，代码上通过<code>!hasQueuedPredecessors</code>来判断是否有之前已经在等待的线程，再CAS获取锁</li>\n<li>可重入锁：已获取锁的线程可以<strong>重复获取</strong>锁</li>\n</ol>\n<h3 id=\"你提到了JUC，还了解JUC包的其他东西吗？\"><a href=\"#你提到了JUC，还了解JUC包的其他东西吗？\" class=\"headerlink\" title=\"你提到了JUC，还了解JUC包的其他东西吗？\"></a>你提到了JUC，还了解JUC包的其他东西吗？</h3><p>JUC的核心是AQS队列同步器，内部维护一个双向等待队列，内部类Node作为结点包含前置后置指针以及线程标识，它使用一个 volatile int state 变量作为共享资源，当state为1则为<strong>独占式</strong>，一次只能有一个线程获取锁，否则为<strong>共享式</strong>；如果线程获取资源失败，则通过addWaiter进入同步队列等待；如果获取成功就执行临界区代码，释放资源时会通知同步队列中的等待线程。通过getState/setState/compareAndSetState来进行状态变更。采用<strong>模板方法</strong>设计模式，提供了tryAcquire、tryRelease等方法由子类实现。</p>\n<ol>\n<li><p>CountDownLatch：用于阻塞线程，等待所有线程（子任务）完成才继续执行，初始化传入子任务数量，通过countDown方法递减，当任务数量为0时await方法返回，继续执行当前线程；可以限制超时时间</p>\n</li>\n<li><p>Semaphore：信号量，控制并发线程数，初始化传入并发数，每次通过acquire获取一个/多个资源，执行结束后通过release释放，tryAcquire尝试获取，也可以设置超时</p>\n</li>\n<li><p>CyclicBarrier：多个线程同步等待，await方法会在准备好的线程达到要求的数量返回，继续执行，在count为0时会将count重置为原先输入的数量开启新一轮等待</p>\n</li>\n<li><p>FutureTask：可以获取线程执行的返回值，可以取消，可以等待</p>\n</li>\n<li><p>fork/join：切分子任务并行执行，把子任务放在不同的队列，从队列头部取出任务，执行完自己的任务后去其他子线程的任务队列尾部窃取一个任务。</p>\n</li>\n<li><p>BlockingQueue：阻塞队列，当队列为空时消费者等待新的可消费对象，当队列满时生产者等待被消费再把可消费对象放入队列，有以下几个分类：</p>\n<div class=\"note info\"><p>① ArrayBlockingQueue：先进先出，有界</p>\n<p>② DelayQueue：延迟队列，按执行时间排序</p>\n<p>③ LinkedBlockQueue：无界队列，可不指定大小</p>\n<p>④ PriorityBlockQueue：优先级，可插入null对象</p>\n<p>⑤ SynchronizedQueue：同步队列，不存储元素，只有元素被消耗才能再次插入</p></div>\n\n</li>\n</ol>\n<h3 id=\"创建线程有哪些方式？分别有什么优缺点\"><a href=\"#创建线程有哪些方式？分别有什么优缺点\" class=\"headerlink\" title=\"创建线程有哪些方式？分别有什么优缺点\"></a>创建线程有哪些方式？分别有什么优缺点</h3><ol>\n<li>使用new Thread创建线程，可以使用实现了Runable和Callable接口的类，后者可以通过FutureTask获取返回值；继承Thread类，重写run方法。使用这种方式性能差，缺乏统一管理，占用过多资源容易导致oom，并且功能单一</li>\n<li>使用线程池ThreadPoolExecutor：可重用存在的线程减小对象创建消亡的开销，可以控制最大并发线程数避免阻塞，可以定期执行定时执行单线程并发数控制等</li>\n</ol>\n<h3 id=\"线程有哪些方法？\"><a href=\"#线程有哪些方法？\" class=\"headerlink\" title=\"线程有哪些方法？\"></a>线程有哪些方法？</h3><ol>\n<li>sleep方法会让当前线程进入休眠状态，与wait不同的是该方法不会释放锁资源，进入的是TIME_WAITING状态</li>\n<li>yield方法会让出CPU时间片，回到RUNNABLE状态，与其他线程一起竞争时间片</li>\n<li>join方法用于等待其他线程运行终止，如果当前线程调用了其他线程的join方法，则当前线程进入BLOCKED状态，当另一个线程结束时，当前线程转为RUNNABLE，等待CPU时间片，底层使用的是wait，会释放锁</li>\n</ol>\n<h3 id=\"线程有哪些状态？\"><a href=\"#线程有哪些状态？\" class=\"headerlink\" title=\"线程有哪些状态？\"></a>线程有哪些状态？</h3><ol>\n<li>NEW：新建状态，尚未调用start启动</li>\n<li>RUNNABLE：Java将操作系统中的就绪和运行两种状态统称为RUNNABLE，此时线程可能在等待时间片或者正在执行</li>\n<li>BLOCKED：阻塞状态，可能由于锁被其他线程占用、调用了<code>sleep</code>/<code>join</code>方法</li>\n<li>WAITING：等待状态，不会被分配时间片，需要其他线程通知或终端，可能由于调用了无参的<code>wait</code>和<code>join</code>方法</li>\n<li>TIME_WAITING：限期等待状态，可以在指定时间内自行返回，可能由于调用了带参的<code>wait</code>和<code>join</code>方法</li>\n<li>TERMINATED：终止状态，表示当前线程已执行完毕或异常退出</li>\n</ol>\n<h3 id=\"线程通信的方式有哪些？\"><a href=\"#线程通信的方式有哪些？\" class=\"headerlink\" title=\"线程通信的方式有哪些？\"></a>线程通信的方式有哪些？</h3><blockquote>\n<p>命令式编程中线程通信的方式有共享内存和消息传递两种，在共享内存的并发模型中线程间共享内存的公开状态，通过读-写内存中的公共状态进行隐式通信，在消息传递的并发模型中线程间没有公告状态，必须通过发送消息来显式通信。Java并发采用共享内存模型，线程间的通信隐式进行，对程序员完全透明。</p>\n</blockquote>\n<p><a href=\"#对volatile有什么理解？\">volatie</a>：读取变量需要从主存中获取，写必须同步刷新回主存，保证所有线程对变量访问的可见性</p>\n<p><a href=\"#谈一谈synchronized\">synchronized</a>：确保多个线程在同一时刻只能有一个处于方法/同步块中，保证线程对变量访问的原子性、可见性</p>\n<p>wait/notify：等待通知机制，线程A调用了对象的wait方法进入等待状态，线程B调用了对象的notify方法，线程A收到通知后结束组测并执行后续操作</p>\n<p>管道I/O流：用于线程间数据传输，媒介为内存，生产者消费者模式</p>\n<p><a href=\"#谈一谈ThreadLocal\">ThreadLocal</a>：线程共享变量，可以为每个线程创建单独的副本，副本值时线程私有的，互相之间互不影响</p>\n<h3 id=\"创建线程池有哪些参数，线程池有哪些分类？\"><a href=\"#创建线程池有哪些参数，线程池有哪些分类？\" class=\"headerlink\" title=\"创建线程池有哪些参数，线程池有哪些分类？\"></a>创建线程池有哪些参数，线程池有哪些分类？</h3><h4 id=\"参数：\"><a href=\"#参数：\" class=\"headerlink\" title=\"参数：\"></a>参数：</h4><ol>\n<li>corePoolSize：核心线程数</li>\n<li>maximumPoolSize：最大线程数</li>\n<li>keepAliveTime：线程没有任务执行时最大存活时间</li>\n<li>unit：时间单位</li>\n<li>threadFactory：线程工厂，用来创建线程</li>\n<li>rejectHandler：拒绝策略，默认抛异常，可设为丢弃任务，丢弃最老任务，让当前线程转为执行该任务</li>\n</ol>\n<div class=\"note warning\"><p>小于核心线程数量：直接创建新线程处理任务。</p></div>\n\n<div class=\"note info\"><p>在核心和最大之间：只有当workingQueue满才创建新线程。</p></div>\n\n<div class=\"note success\"><p>当线程数到达max时，如果阻塞队列未满则放入阻塞队列等待空闲线程处理，否则，根据线程池设置的拒绝策略处理(抛异常等)</p></div>\n\n<h4 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h4><ol>\n<li>newFixThreadPool：核心线程和最大线程相同，指定核心线程和最大线程数，采用无界队列，当无空闲线程将任务放到无界队列等待被处理（可能造成<strong>oom</strong>）。适用于<strong>CPU密集型</strong>，确保CPU在长期被工作线程占用时，尽可能减少分配线程，适用执行<strong>长期任务</strong></li>\n<li>newCachedThreadPool：核心线程为0，最大线程为整型最大值，使用同步队列，因为没有核心线程所以任务直接放在队列中，如果有空闲线程则取出任务执行，否则创建新线程执行任务。keepAliveTime为60s。适用于<strong>并发执行量大短期的小任务</strong></li>\n<li>newSingleThreadPool：核心线程和最大线程都为1，使用无界队列，串行执行任务，keepAliveTime为0，通常是一个线程不停的串行执行所有任务</li>\n<li>newScheduleThreadPool：核心可选，最大线程数是整型最大值，keepAliveTime为0，使用延迟队列，线程从延迟队列中取出执行时间大于等于当前时间的任务执行完成后修改该任务的时间为当前时间并放回队列。适用于<strong>周期/定期执行的任务</strong>。</li>\n</ol>\n<h3 id=\"线程池有哪些状态？\"><a href=\"#线程池有哪些状态？\" class=\"headerlink\" title=\"线程池有哪些状态？\"></a>线程池有哪些状态？</h3><ol>\n<li><p>running：可以接受新任务，处理队列中的任务。通过<code>shutdown</code>进入shutdown状态，<code>shutdownNow</code>进入stop状态</p>\n</li>\n<li><p>shutdown：不再接受新任务，可以处理队列中的任务。等待队列中无任务，正在处理的任务也结束进入tidying状态</p>\n</li>\n<li><p>stop：不再接受新任务，停止处理正在处理的任务/队列中的任务。进入tidying状态</p>\n</li>\n<li><p>tidying：线程池的任务数为0。terminate执行完成进入terminated状态。</p>\n</li>\n<li><p>terminated：彻底终止。</p>\n</li>\n</ol>\n<h3 id=\"谈一谈ThreadLocal\"><a href=\"#谈一谈ThreadLocal\" class=\"headerlink\" title=\"谈一谈ThreadLocal\"></a>谈一谈ThreadLocal</h3><p>ThreadLocal是线程共享变量，主要用于一个线程内跨类、方法传递数据，ThreadLocal有一个静态内部类ThreadLocalMap，其key是ThreadLocal对象，值是Entry对象，Entry内只有一个Object的value，ThreadLocal是线程共享的，但ThreadLocalMap是线程私有的，ThreadLocal主要有get、set、remove三个方法</p>\n<ul>\n<li>set：首先获取当前线程，然后再获取当前线程对应的ThreadLocalMap类型的对象map，如果map存在就设置key，key是当前的ThreadLocal对象，value是传入的参数；否则通过createMap方法创建一个ThreadLocalMap，再设置值</li>\n<li>get：首先获取当前线程，然后再获取当前线程对应的ThreadLocalMap类型的对象map，如果map存在就以当前ThreadLocal对象作为key获取Entry类型的对象e，如果e存在就返回它的value；如果map或者e不存在，就调用setInitialValue方法先为当前线程创建一个ThreadLocalMap对象然后返回默认的初始值null</li>\n<li>remove：获取ThreadLocalMap类型的对象map，如果map不为空，则解除ThreadLocal这个key及其value的联系</li>\n</ul>\n<h4 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h4><ol>\n<li>脏数据：线程池会复用Thread，因此ThreadLocal也会被复用，而如果没有通过remove方法清理与线程相关的ThreadLocal数据，则下一个线程可能会get到之前的数据</li>\n<li>内存泄漏：由于ThreadLocal是弱引用，但Entry的value是强引用，因此当ThreadLocal被回收后，value没有被释放，造成内存泄漏，因此需要及时调用remove清理</li>\n</ol>\n<h2 id=\"I-O流问题\"><a href=\"#I-O流问题\" class=\"headerlink\" title=\"I/O流问题\"></a>I/O流问题</h2><h3 id=\"同步、异步、阻塞、非阻塞都是什么概念？\"><a href=\"#同步、异步、阻塞、非阻塞都是什么概念？\" class=\"headerlink\" title=\"同步、异步、阻塞、非阻塞都是什么概念？\"></a>同步、异步、阻塞、非阻塞都是什么概念？</h3><div class=\"note info\"><p>同步和异步是通信机制，阻塞和非阻塞是调用状态。</p></div>\n\n<p>同步IO是用户线程发现IO请求后需要等待或轮询内核IO操作完成后才能继续执行；异步IO是用户线程发起IO请求后可以继续执行，当内核IO操作完成后会通知用户线程，或调用用户线程注册的回调函数。</p>\n<p>阻塞IO是IO操作需要彻底完成后才能返回用户空间；非阻塞IO是IO操作调用后立即返回一个状态值，无需等IO操作彻底完成。</p>\n<h3 id=\"Java中有哪些IO模型，简单介绍下\"><a href=\"#Java中有哪些IO模型，简单介绍下\" class=\"headerlink\" title=\"Java中有哪些IO模型，简单介绍下\"></a>Java中有哪些IO模型，简单介绍下</h3><ol>\n<li>BIO：<strong>同步阻塞式</strong>IO，JDK1.4之前的IO模型，服务器实现模式为一个连接请求对应一个线程，也就是一个客户端请求需要创建一个线程，适用于<strong>连接数目少</strong>且服务器资源多的情景。</li>\n<li>NIO：<strong>同步非阻塞</strong>IO，JDK1.4引入，服务器实现模式为多个连接请求对应一个线程，客户端连接请求会注册到一个多路复用器Selector，Selector轮询到连接有IO请求时才启动以恶搞线程处理，适用于连接<strong>数目多</strong>且连接<strong>时间短</strong>的场景。</li>\n<li>AIO：<strong>异步非阻塞</strong>IO，JDK7引入，服务器实现模式为一个有效请求对应一个线程，客户端的IO请求都是由操作系统先完成IO操作再通知服务器应用来直接使用准备好的数据，适用于连接<strong>数目多</strong>且连接<strong>时间长</strong>的场景。</li>\n</ol>\n<h4 id=\"详细介绍下NIO\"><a href=\"#详细介绍下NIO\" class=\"headerlink\" title=\"详细介绍下NIO\"></a>详细介绍下NIO</h4><p>不同于传统的IO，NIO以块的方式传输数据，一次处理一个数据块，可以控制读取某个位置的数据，速度更快。它有几个重要的组件：</p>\n<ol>\n<li>Buffer：缓冲区，本质是一块可读写的内存，用来简化数据读写，不再以字节来处理数据，并提供flip、clear、compact来切换读写状态，通过读写位置position和极限位置limit来实现</li>\n<li>Channel：通道是对IO中流的模拟，通过Channel读写数据，将数据读取到Buffer/通过Buffer将数据写出，一个Buffer可以切换读写，被不同的Channel使用，这让NIO成为了非阻塞的IO，通过Channel的返回就可以知道缓冲区是否有数据，而不是和IO流一样需要阻塞等待数据。</li>\n<li>Selector：多路复用器，轮询检查多个Channel的状态，判断注册事件是否发生，即判断Channel是否处于可读/可写状态</li>\n</ol>\n<p>其工作流程是通过Selector的静态方法open实例化一个选择器，通过Channel的register方法将通道的某个事件和Selector绑定起来，事件有CONNECT、ACCEPT、READ、WRITE。Selector的select方法返回目前就绪的通道数，通过selectKeys得到对应的集合，处理其中的事件</p>\n<h3 id=\"IO包下有哪些流？\"><a href=\"#IO包下有哪些流？\" class=\"headerlink\" title=\"IO包下有哪些流？\"></a>IO包下有哪些流？</h3><p>主要分为字符流和字节流，字符流一般用于处理文本文件，其他类型用字节流处理</p>\n<ul>\n<li>字节流：使用了<strong>装饰器模式</strong>，InputStream和OutputStream是抽象组件，FileInputStream、ByteArrayInputStream是基础实现类，FilterInputStream是抽象装饰器，其实现类BufferInputStream、PushBackInputStream等为基础实现类提供了额外的功能，使用BufferInputStream装饰FileInputStream（在FileInputStream外套上BufferInputStream）可以实现具有缓存的输入流；使用PushBackInputStream装饰ByteArrayInputStream可以实现具有回退读取unread的功能的输入流；<strong>DataInputStream</strong>提供了读取Java基本数据类型的方法，实现上并未改变基本的读写方法，只是动态的处理成需要的类型。</li>\n<li>字符流：在程序中一般操作的是字符形式的数据，Java提供了基本的InputStreamReader和OutputStreamWriter完成了字节流和字符流之间的编解码转换，家族结构和Stream类似也采用了<strong>装饰器模式</strong>。</li>\n</ul>\n<h3 id=\"序列化和反序列化是什么？\"><a href=\"#序列化和反序列化是什么？\" class=\"headerlink\" title=\"序列化和反序列化是什么？\"></a>序列化和反序列化是什么？</h3><p>Java对象在JVM退出时会全部销毁，如果需要将对象及状态持久化，就要通过<strong>序列化</strong>实现，将内存中的对象保存在二进制流中，需要时再将二进制流<strong>反序列化</strong>为对象。对象序列化保存的是对象的状态，因此类的<strong>静态变量</strong>不会被序列化。常见的序列化方式有以下几种：</p>\n<ol>\n<li>Java原生：实现Serializable接口，Java 序列化保留了对象类的元数据（如类、成员变量、继承类信息）以及对象数据，兼容性最好，但不支持跨语言，性能一般。序列化和反序列化必须保证序列化ID一致，如果没有序列化ID，则会抛异常。具体的序列化过程：判断对象类型，写入<strong>对象类型标记</strong>；写入<strong>对象类信息</strong>，包括类名、序列化ID、字段数、字段名等；写入<strong>实例数据</strong>，基本类型直接写入，引用类型<strong>递归</strong>调用<strong>writeObject</strong>写入</li>\n<li>Hessian：支持跨语言、动态类型，用一个字节表示常用基础类型，极大缩短二进制流，更加高效</li>\n<li>JSON：转化为JSON字符串，不记录类型信息，因此反序列化需要提供类型信息才能正确进行；可读性高</li>\n</ol>\n<h2 id=\"JVM相关\"><a href=\"#JVM相关\" class=\"headerlink\" title=\"JVM相关\"></a>JVM相关</h2><h3 id=\"介绍一下Java虚拟机的整体结构？各个模块的作用\"><a href=\"#介绍一下Java虚拟机的整体结构？各个模块的作用\" class=\"headerlink\" title=\"介绍一下Java虚拟机的整体结构？各个模块的作用\"></a>介绍一下Java虚拟机的整体结构？各个模块的作用</h3><p>在Java程序的执行过程中，JVM把它管理的内存划分为不同的数据区，其中线程私有的有程序计数器、虚拟机栈、本地方法栈，线程共享的有堆、方法区，虚拟机的类加载器负责将类信息加载到内存中，执行引擎负责执行字节码，采用即时编译技术。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004726.png\" alt=\"图片\"></p>\n<ol>\n<li>程序计数器：每个线程有自己的计数器，指示当前线程所执行字节码的行号，改变计数器的值选取下一条指令。对于Java方法记录了字节码的指令地址；对于本地方法，值为undefined</li>\n<li>虚拟机栈：每个栈帧中有局部变量表存储方法内使用的变量、操作数栈、动态链接、返回地址，每新调用一个方法就创建一个栈帧，因此递归过深超过虚拟机允许的深度会报StackOverflowError</li>\n<li>本地方法栈：native方法的栈，调用本地方法时虚拟机栈不变，动态链接并直接调用指定本地方法，同样会报StackOverflowError</li>\n<li>方法区：存储类信息、常量、静态变量、即时编译的代码缓存等。JDK8之前使用永久代实现方法区，容易内存溢出，JDK7中把放在永久代的字符串常量池、静态变量等移出，JDK8废弃永久代，采用本地内存实现的元空间代替</li>\n</ol>\n<h3 id=\"运行时常量池、字符串常量池、Class常量池\"><a href=\"#运行时常量池、字符串常量池、Class常量池\" class=\"headerlink\" title=\"运行时常量池、字符串常量池、Class常量池\"></a>运行时常量池、字符串常量池、Class常量池</h3><ul>\n<li>Class常量池：class文件中包含了类的版本、字段、方法、接口等信息，还有常量池（Constant Pool Table），存放编译器生成的字面量和符号引用</li>\n<li>运行时常量池：类会经过加载、验证、准备、解析、初始化加载到内存，JVM会将class常量池中的内容存放到运行时常量池，class常量池存放的并不是对象实例，因此在解析阶段将会查找字符串常量池，将符号引用转换为直接引用</li>\n<li>字符串常量池：在经过验证、准备阶段后，在堆中生成字符串实例，将其引用值存放到字符串常量池中，被所有类共享</li>\n</ul>\n<h3 id=\"Java程序是怎样运行的？\"><a href=\"#Java程序是怎样运行的？\" class=\"headerlink\" title=\"Java程序是怎样运行的？\"></a>Java程序是怎样运行的？</h3><p>首先通过javac将.java编译为JVM可加载的.class字节码文件，之后通过即时编译器JIT把字节码文件翻译为本地机器码，之后执行引擎将执行指令代码</p>\n<h3 id=\"有哪些类加载器？类加载的过程是怎样的？\"><a href=\"#有哪些类加载器？类加载的过程是怎样的？\" class=\"headerlink\" title=\"有哪些类加载器？类加载的过程是怎样的？\"></a>有哪些类加载器？类加载的过程是怎样的？</h3><p>启动类加载器<strong>BootstrapClassLoader</strong>负责加载/lib/rt/下的核心类库java.* ；由C++编写，平台/扩展类加载器<strong>ExtClassLoader</strong>加载/lib/ext下的扩展类库javax.* ；应用类加载器<strong>AppClassLoader</strong>加载用户写的类，位置在classpath下；另外，还可以通过继承ClassLoader实现自定义的类加载器，通过findClass方法将字节数组传入由defineClass方法负责加载到JVM中。</p>\n<p>类加载采用双亲委派机制：一个类加载器接收到类加载请求会将请求<strong>委派给父加载器</strong>，只有当父加载器没法完成时，才会由子加载器尝试加载。可以确保类在每个类加载器环境都是同一个，避免重复加载。</p>\n<p>类加载过程分为<strong>加载</strong>、<strong>链接</strong>、<strong>初始化</strong>三个阶段，加载阶段将class字节码加载到JVM，生成class对象，链接阶段先通过<strong>验证</strong>检查class的安全性和正确性，之后为类变量分配空间并设置初始值，称为<strong>准备</strong>，在<strong>解析</strong>时将常量池内的符号引用转换为直接引用，最后的初始化阶段执行类变量赋值和静态代码块。</p>\n<h3 id=\"创建对象new的时候发生了什么？\"><a href=\"#创建对象new的时候发生了什么？\" class=\"headerlink\" title=\"创建对象new的时候发生了什么？\"></a>创建对象new的时候发生了什么？</h3><ol>\n<li>当JVM遇到字节码new指令时，首先检查该指令的参数能否在常量池定位到一个类的符号引用，并检查引用代表的类是否已被加载、解析、初始化，如果没有则执行类加载</li>\n<li>类加载检查通过后，虚拟机将为新生对象分配内存</li>\n<li>内存分配完成后虚拟机将成员变量设为初始值，保证对象的实例字段可以不赋初值就使用</li>\n<li>设置对象头，包括hashCode、GC信息、锁信息、类类型等</li>\n<li>执行init方法，初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋给引用变量</li>\n</ol>\n<h3 id=\"如何判断对象是否为需要被回收？\"><a href=\"#如何判断对象是否为需要被回收？\" class=\"headerlink\" title=\"如何判断对象是否为需要被回收？\"></a>如何判断对象是否为需要被回收？</h3><ul>\n<li>引用计数：在对象中添加一个引用计数器，如果被引用计数器加 1，引用失效时计数器减 1，如果计数器为 0 则被标记为垃圾。原理简单，效率高，但是存在对象间循环引用的问题，导致计数器无法清零。</li>\n<li>可达性分析：判断对象的引用链是否可达。将所有对象组成图，从一系列GC Root对象开始向下搜索其他对象，路径称为引用链，如果所有的GC Root都无法到达的对象则判定为垃圾。可以作为GC Root对象的有虚拟机栈和本地方法栈中引用的对象、类静态属性引用的对象、常量引用的对象。</li>\n</ul>\n<h3 id=\"Java中有哪些引用类型？\"><a href=\"#Java中有哪些引用类型？\" class=\"headerlink\" title=\"Java中有哪些引用类型？\"></a>Java中有哪些引用类型？</h3><ol>\n<li>强引用：最常见的引用，只要对象有强引用且GC Root可达，在垃圾回收时即使内存耗尽也不会被回收</li>\n<li>软引用：在内存即将耗尽时，会把软引用关联的对象加入回收范围</li>\n<li>弱引用：只能生存到下次年轻代GC前</li>\n<li>虚引用：定义完成后无法通过引用来获取该对象，只是为了在对象被回收时收到一个系统通知</li>\n</ol>\n<h3 id=\"有哪些GC算法？\"><a href=\"#有哪些GC算法？\" class=\"headerlink\" title=\"有哪些GC算法？\"></a>有哪些GC算法？</h3><ul>\n<li>复制算法：对内存分为对象面和空闲面，将存货的对象复制到空闲面，然后将对象面所有对象从内存清除。减少碎片，适合对象存活率低的场景，复制越少越快。但是意味着要有一块空闲空间不能使用</li>\n<li>标记-清除算法：使用可达性算法标记垃圾，之后将垃圾清除。会产生碎片</li>\n<li>标记-整理算法：使用可达性算法标记，移动存货的对象，将对象顺序排列，之后清除最后一个对象的地址之后的内存空间。减少碎片，也不需要设置两块内存，适用于存活率高的场景</li>\n</ul>\n<h3 id=\"常见的垃圾收集器有哪些？\"><a href=\"#常见的垃圾收集器有哪些？\" class=\"headerlink\" title=\"常见的垃圾收集器有哪些？\"></a>常见的垃圾收集器有哪些？</h3><p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004738.png\" alt=\"图片\"></p>\n<ol>\n<li>Serial：单线程收集，采用复制算法，会STW，Client模式年轻代默认收集器</li>\n<li>ParNew：多线程收集，其他于Serial相同，追求低停顿</li>\n<li>ParallelScavenge：多线程收集，采用复制算法，更关注系统吞吐量，Server模式年轻代默认收集器</li>\n<li>Serial Old：单线程收集，采用标记-整理算法，Client模式老年代默认收集器</li>\n<li>Parallel Old：多线程收集，采用标记-整理算法，追求吞吐量</li>\n<li>CMS：追求最短停顿时间，采用标记-清除算法，过程较复杂</li>\n<li>G1：不再区分以老年代/年轻代简单区分内存，以Region内存布局面向局部收集，实现了可预测的停顿</li>\n</ol>\n<h4 id=\"CMS回收过程\"><a href=\"#CMS回收过程\" class=\"headerlink\" title=\"CMS回收过程\"></a>CMS回收过程</h4><p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004753.png\" alt=\"图片\"></p>\n<p><strong>初始标记</strong>阶段进入STW，使用单线程标记GC Root直接关联的对象；<strong>并发标记</strong>阶段从初始标记的对象开始遍历，耗时较长但是不需要停顿；<strong>重新标记</strong>阶段修正在并发标记期间因用户程序运作而导致标记产生变动的部分记录，需要STW；<strong>并发清除</strong>清理垃圾，不需要移动对象，可以并发执行</p>\n<h4 id=\"G1回收过程\"><a href=\"#G1回收过程\" class=\"headerlink\" title=\"G1回收过程\"></a>G1回收过程</h4><p><strong>初始标记</strong>阶段进入STW，标记GC Root直接关联的对象，让下一阶段用户线程并发运行时能正确地在可用的Region中分配新对象；<strong>并发标记</strong>阶段从初始标记的对象开始遍历，查找整个堆，扫描完成后要重新处理此过程中变化的部分；<strong>最终标记</strong>进入短暂的STW，处理并发阶段结束后仍遗留的少量SATB记录；<strong>筛选回收</strong>对各Region的回收价值排序，根据用户期望停顿事件制定回收计划，需要暂停用户线程，多线程并发完成</p>\n<h3 id=\"你知道哪些内存分配和回收策略？\"><a href=\"#你知道哪些内存分配和回收策略？\" class=\"headerlink\" title=\"你知道哪些内存分配和回收策略？\"></a>你知道哪些内存分配和回收策略？</h3><ol>\n<li>对象优先在Eden区分配：大多数情况下对象在新生代Eden区分配，当Eden不足时会触发Minor GC</li>\n<li>大对象直接进入老年代：通过指定-XX:PretenureSizeThreshold参数，大于该值的直接在老年代分配</li>\n<li>长期存活对象进入老年代：通过指定-XX:MaxTenuringThreshold参数，对象年龄大于该值的进入老年代，没经过一次Minor GC，年龄+1</li>\n<li>动态对象年龄判定：当Survivor中相同年龄所有对象大小的总和大于Survivor的一半，则将年龄不小于该年龄的对象放入老年代</li>\n<li>空间分配担保：Minor GC前虚拟机必须检查老年代最大连续可用空间是否大于新生代对象总空间，满足则说明Minor GC安全；如果不满足，虚拟机会查看-XX:HandlePromotionFailure是否允许担保失败，允许则检查老年代最大连续可用空间是否大于历次晋升老年代对象的平均大小，如果满足则冒险尝试Minor GC，否则进行Full GC</li>\n</ol>\n<h3 id=\"了解哪些JVM调优工具？\"><a href=\"#了解哪些JVM调优工具？\" class=\"headerlink\" title=\"了解哪些JVM调优工具？\"></a>了解哪些JVM调优工具？</h3><ol>\n<li>JVisualVM：自带，不需要配置，可以看到内存信息、线程信息、dump和CPU分析</li>\n<li>JPS：查看指定host的JVM进程、PID、启动路径和参数等等</li>\n<li>JConsole：监控某个JAVA应用程序，在overview中查看内存、线程、类及CPU使用情况</li>\n</ol>\n<h2 id=\"常见的设计模式\"><a href=\"#常见的设计模式\" class=\"headerlink\" title=\"常见的设计模式\"></a>常见的设计模式</h2><h3 id=\"设计模式要遵循哪些原则？\"><a href=\"#设计模式要遵循哪些原则？\" class=\"headerlink\" title=\"设计模式要遵循哪些原则？\"></a>设计模式要遵循哪些原则？</h3><ol>\n<li>开闭原则：面向对象的基本原则，指一个实体应该对扩展开放，对修改关闭，提高代码的可复用性和可维护性</li>\n<li>单一职责原则：一个类、接口或方法只负责一个职责，降低代码复杂度以及变更引起的风险</li>\n<li>依赖倒置原则：程序应该依赖于抽象类/接口，而不是具体的实现类</li>\n<li>接口隔离原则：将不同功能定义在不同接口中实现接口隔离，避免类依赖了它不需要的接口，减少接口之间依赖的冗余和复杂性</li>\n<li>里氏替换原则：开闭原则的补充，规定了任何父类可以出现的地方子类都可以出现，可以约束继承泛滥，加强程序健壮性</li>\n<li>迪米特原则：也叫最少知道原则，每个模块对其他模块都要尽可能少地了解和依赖，降低代码耦合度</li>\n<li>合成/聚合原则：尽量使用组合（has-a）、聚合（contains-a）而不是继承（is-a）达到软件复用的目的</li>\n</ol>\n<h3 id=\"你了解哪些设计模式？\"><a href=\"#你了解哪些设计模式？\" class=\"headerlink\" title=\"你了解哪些设计模式？\"></a>你了解哪些设计模式？</h3><blockquote>\n<p>设计模式分为创建型、结构型和行为型。创建型在创建对象时<strong>隐藏创建逻辑</strong>，不适用new直接实例化对象；结构型通过类和接口间的<strong>继承和引用</strong>实现创建复杂结构的对象；行为型通过类之间<strong>不同通信方式</strong>实现不同的行为</p>\n</blockquote>\n<div class=\"note info\"><p>创建型：单例模式、工厂模式、建造者模式、原型模式</p></div>\n\n<div class=\"note success\"><p>结构型：适配器模式、桥接模式、装饰器模式、代理模式、组合模式</p></div>\n\n<div class=\"note warning\"><p>行为型：模板方法模式、策略模式、责任链模式、观察者模式、命令模式</p></div>\n\n<h4 id=\"讲讲单例模式？\"><a href=\"#讲讲单例模式？\" class=\"headerlink\" title=\"讲讲单例模式？\"></a>讲讲单例模式？</h4><p>单例模式属于创建型模式，一个单例类在任何情况下只存在一个实例，私有化构造方法，提供一个静态方法向外提供静态实例变量。数据库连接池、ServletContext、Spring的单例Bean等都是单例模式的应用</p>\n<ul>\n<li><p>饿汉式：线程安全，在加载时完成实例的创建，提供静态方法获取实例变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HungrySingleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">HungrySingleton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HungrySingleton instance = <span class=\"keyword\">new</span> HungrySingleton();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HungrySingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>懒汉式：在外部调用时才会创建实例，通过双重检测锁、静态内部类、枚举等方法来保证线程安全</p>\n<p>双重检测锁：synchronized加锁，volatile禁止指令重排序</p>\n<p>静态内部类：线程安全、延迟加载</p>\n<p>枚举：简洁、序列化和反序列化无法破解。反射的newInstance方法会判断是否类被枚举修饰，是则抛出异常。序列化时枚举的每个变量都是静态的所以在jvm中只有一份。</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开代码</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程不安全</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazySingleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazySingleton</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LazySingleton instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazySingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> LazySingleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双重检测锁机制</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazySingleton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazySingleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> LazySingleton instance; <span class=\"comment\">//禁止内存重排序</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazySingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (LazySingleton<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> LazySingleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态内部类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazySingleton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LazySingleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazySingleton <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> LazySingleton instance = <span class=\"keyword\">new</span> LazySingleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 枚举实现</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> LazySingleton&#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n</li>\n</ul>\n<h4 id=\"讲讲工厂模式\"><a href=\"#讲讲工厂模式\" class=\"headerlink\" title=\"讲讲工厂模式\"></a>讲讲工厂模式</h4><p>工厂模式属于创建型模式，有<strong>简单工厂</strong>模式、<strong>工厂方法</strong>模式、<strong>抽象工厂</strong>模式三种</p>\n<ol>\n<li>简单工厂模式：由工厂对象来创建实例，客户端只需要传入参数即可，由工厂对象进行判断和创建具体类型的实例。适用于创建对象类型较少的场景，如果要增加新类型，需要修改工厂对象的判断逻辑，违背了<strong>开闭原则</strong>。Calendar抽象类的getInstance方法调用了createCalendar根据不同的地区参数创建不同的日历对象，Spring的BeanFactory通过Bean唯一标识来获取Bean</li>\n<li>工厂方法模式：定义一个创建对象的接口，让接口的实现类决定创建哪种对象，让类的实例化推迟到子类中进行，解决了简单工厂中产品扩展的问题。Collection接口中定义了一个iterator工厂方法，返回了一个Iterator类的抽象产品，该方法由ArrayList、HashMap等具体工厂实现；Spring的FactoryBean接口的getObject方法也是工厂方阿飞</li>\n<li>抽象工厂模式：提供一个创建一系列相关或相互依赖对象的接口，无需指定它们的具体类，主要用于系统的产品有多于一个的产品族，而系统只消费其中某一个产品族产品的情况。Connection接口应用了抽象工厂，其中包括Statement、Blob、Savepoint等抽象产品</li>\n</ol>\n<h4 id=\"建造者模式了解吗？\"><a href=\"#建造者模式了解吗？\" class=\"headerlink\" title=\"建造者模式了解吗？\"></a>建造者模式了解吗？</h4><p>建造者模式属于创建型模式，一个类由多个部件构成，一个不见可以有多种实现，通过组合可以创建出不同的实例，在创建该类时，使用者通过一个指挥者实例，实例中有一个抽象建造者，抽象建造者定义了待实现的建造方法(针对不同部件)，抽象建造者的实现类则做出了具体实现。指挥者通过建造者就可以完成对产品的建造，最后将结果返回给使用者。</p>\n<h4 id=\"讲一讲代理模式\"><a href=\"#讲一讲代理模式\" class=\"headerlink\" title=\"讲一讲代理模式\"></a>讲一讲代理模式</h4><p>代理模式属于结构型模式，为其他对象提供一种代理以控制对被代理对象的访问，可以增强目标对象的功能，降低代码耦合度，扩展性好。分为静态代理和动态代理两种方式，静态代理在运行前就已经确定了代理类和被代理类的关系，动态代理具有更强的适用性</p>\n<p>JDK动态代理和CGLib动态代理详细介绍参见 <a href=\"http://realmicah.xyz/posts/caab1d3c.html#JDK动态代理\" target=\"_blank\" rel=\"noopener\">JDK和CGLib</a>.</p>\n<h4 id=\"讲一讲装饰器模式？\"><a href=\"#讲一讲装饰器模式？\" class=\"headerlink\" title=\"讲一讲装饰器模式？\"></a>讲一讲装饰器模式？</h4><p>装饰器模式属于结构型模式，不改变类原有的属性，动态的增加其他属性，装饰器是一个抽象制定了待实现的装饰方法，可以有不同的实现，将已有的类传入装饰器后对其进行装饰。<a href=\"#IO包下有哪些流？\">Java IO流家族</a>应用了这种模式</p>\n<h4 id=\"装饰器和代理有什么区别？\"><a href=\"#装饰器和代理有什么区别？\" class=\"headerlink\" title=\"装饰器和代理有什么区别？\"></a>装饰器和代理有什么区别？</h4><p>装饰器模式的关注点在于给对象动态<strong>添加方法</strong>，而动态代理更注重对象的<strong>访问控制</strong>。动态代理通常会在代理类中<strong>创建被代理对象的实例</strong>，而装饰器模式会将被装饰者作为构造方法的<strong>参数</strong>。</p>\n<h4 id=\"适配器模式了解吗？有什么应用？\"><a href=\"#适配器模式了解吗？有什么应用？\" class=\"headerlink\" title=\"适配器模式了解吗？有什么应用？\"></a>适配器模式了解吗？有什么应用？</h4><p>适配器模式属于结构型模式，将一个类的接口转换为使用者接受的另一种接口，解决由于<strong>不兼容</strong>而不能一起工作的问题。适配器Adapter继承/实现期待的类/接口，在实现期待的接口时，使用用于适配的不兼容者来实现。这样在外部看来就是期待的状态但我们内部通过适配器将原本不兼容的转换为可接受的状态。Java的字符流操作应用了适配器模式，SpringMVC的HandlerAdapter通过适配规则调用不同的处理请求handle方法，Arrays.asList将数组转换为对应的集合</p>\n<h4 id=\"模板方法模式有了解吗？\"><a href=\"#模板方法模式有了解吗？\" class=\"headerlink\" title=\"模板方法模式有了解吗？\"></a>模板方法模式有了解吗？</h4><p>模板方法模式属于行为型模式，使子类可以在不改变算法结构的情况下重新定义算法的某些步骤，适用于抽取子类重复代码到公共父类，<a href=\"#你提到了JUC，还了解JUC包的其他东西吗？\">JUC的AQS</a>应用了模板方法模式，HttpServlet定义了一套处理HTTP请求的模板，service为模板方法定义了基本处理流程，doGet/doPost为基本方法，子类可重写这些方法</p>\n<h4 id=\"讲讲责任链模式\"><a href=\"#讲讲责任链模式\" class=\"headerlink\" title=\"讲讲责任链模式\"></a>讲讲责任链模式</h4><p>责任链模式属于行为型模式，责任链是指由多个继承了抽象处理类的子类组成的处理链条，通过next连接，将对于某个请求的处理交给一条处理链，子类会不断地转发给下一个子类一直向下处理。Spring的拦截器中HandlerExecutionChain将拦截器放在一个list中，前置处理做正向循环直到被拦截就停下，后置处理从这个位置开始逆向循环做后置处理</p>\n<h4 id=\"对观察者模式有什么了解？\"><a href=\"#对观察者模式有什么了解？\" class=\"headerlink\" title=\"对观察者模式有什么了解？\"></a>对观察者模式有什么了解？</h4><p>观察者模式属于行为型模式，也叫发布订阅模式，定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都能得到通知并被自动更新。ServletContextLister能够监听ServletContext对象的生命周期，当启动时调用contextInitialized方法，终止时调用contextDestroyed方法</p>\n<p>如何实现：一个包含了观察者集合和对观察者集合进行操作以及通知观察者的方法的抽象类。一个包含了更新自己的抽象方法，在收到被观察者状态改变通知时被调用。被观察者实现类实现具体的通知方法，当实现类状态改变时通过通知方法调用观察者更新自己的方法。</p>\n<h2 id=\"海量数据处理面试问题\"><a href=\"#海量数据处理面试问题\" class=\"headerlink\" title=\"海量数据处理面试问题\"></a>海量数据处理面试问题</h2><ol>\n<li><p>海量日志数据，提取出某日访问百度次数最多的IP</p>\n<p>每个IP为32位，最多2^32个，可以通过Hash取模将整个大文件映射为n个小文件，再找出每个小文件中出现次数最多的IP（可以使用HashMap统计次数），再从这个1000个中找到最多的那个</p>\n</li>\n<li><p>搜索引擎会通过日志记录用户检索的检索串，每个检索串长度为1-255字节，假设有一千万个记录，去重后不超过三百万个，统计最热门的10个检索串</p>\n<p>首先可以通过Hash取模的方法将其分为n个小文件，再利用HashMap完成排序；借助堆结构，维护一个K大小的小根堆，遍历三百万个数据，放入小根堆。</p>\n</li>\n<li><p>有一个1G大小的文件，每一行是一个词，词的大小不超过16字节，内存限制是1M，返回出现次数最多的100个词</p>\n<p>通过Hash取模将文件分成n个小文件中，保证一个文件大小小于1M，对每个小文件通过HashMap统计出其频率，取出频率最高的100个词，写入新的文件，这样有得到了n个小文件，然后再对这n个小文件执行归并排序</p>\n</li>\n<li><p>有10个文件，每个文件1G，每行存放用户的query，每个文件的query都可能重复，按query的频次排序</p>\n</li>\n</ol>\n<ol start=\"5\">\n<li></li>\n</ol>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722004710.png","popularPost_tmp_gaData":{"updated":"Thu Aug 06 2020 09:16:56 GMT+0800 (中国标准时间)","title":"Java基础问题总结","path":"posts/503970b4.html","eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722004710.png","excerpt":"<p/>","date":{"_isAMomentObject":true,"_i":"2020-05-11T14:19:39.797Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-11T14:19:39.797Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Java后端面试","tags":["Java"],"internalLinks":["posts/f885a170.html","posts/75890e6e.html"],"keywords":[],"keywordsLength":0},"length":24560},{"title":"Redis面试问题","date":"2020-04-28T13:56:00.000Z","image":"https://gitee.com/jingshanccc/image/raw/master/image/20200722004924.jpg","abbrlink":"e745ac01","_content":"\n<p>\n<!-- more -->\n\n## 为什么要使用缓存？\n\n1. 高性能\n\n   假设用户第一次访问数据库获取数据，这个过程是比较慢的，因为是从硬盘读取，同时如果需要获取的数据本身查询过程十分耗时，那么我们将第一次获取到的结果直接放在缓存中，下一次访问直接在缓存中获取即可，操作缓存就是操作内存，速度更块。\n\n2. 高并发\n\n   内存能够承受的请求是远远大于直接访问数据库的，所以我们将数据库的部分数据转移到缓存中，可以让部分请求直接访问内存而不经过数据库。\n\n<details>\n<summary>数据库有缓存吗？</summary>\n有，以mysql为例，它会将查询sql和结果以key-value的形式缓存起来，再遇到hash值相同的sql语句就不再经过编译解析优化和查询，直接返回结果。<br/>\n缺点：\n    通过hash，意味着语义相同的可能有不同的表达，这样也无法命中缓存。对于频繁更新的表，缓存总是难以命中，但还是需要耗费资源维护缓存。\n</details>\n\n## 选择Redis的原因？\n\n### 本地缓存和分布式缓存\n\n1. Java中使用map/guaua来做本地缓存，直接将数据存在jvm内存中，与jvm拥有相同的生命周期。其优点是轻量且快速。但在多实例的情况下，每个实例都需要保存自己的一份缓存，不具有一致性\n\n2. Redis和Memcache实现的是分布式缓存，在多实例下，共用一份缓存，具有一致性。因此需要保证服务的高可用，架构较复杂。\n\n### redis和memcache\n\n1. 持久化：memcache不支持持久化，缓存数据只存在在内存中，断电后数据就丢失了。redis提供了持久化机制，可以将数据保存到磁盘中，重启后通过日志文件可以恢复数据。\n2. 数据类型：memcache只支持简单的string类型，redis除了string之外，还支持列表，哈希，集合等多种数据结构。\n3. 分布式：memcache不支持分布式，只能通过多个客户端使用一致性哈希来向集群中存储数据，这种方式在查询和存储时都需要计算一次。redis原生支持集群模式。\n4. 线程模型：memcache是多线程的，redis默认是单线程的，减少了线程切换的消耗\n\n## 说说Redis的线程模型？\n\nredis内部采用文件事件处理器，它是单线程的，通过I/O多路复用机制，监听多个socket，根据socket上的事件选择对应的事件处理器来处理。\n文件事件处理器包括四个部分：socket、I/O多路复用程序、事件分派器、事件处理器（包括连接应答处理器，命令请求处理器，命令回复处理器）\n\nredis基于reactor模式开发出自己的I/O多路复用程序，多个socket同时产生的事件将被加入到队列中，事件分派器从队列中取出事件，根据事件类型分派给不同的事件处理器。\n\n<details><summary>事件的调度和执行</summary>\nredis服务器是一个事件驱动程序，有文件事件和时间事件。服务器需要一直监听socket以得到到达的文件事件，但是由于需要执行时间事件，不能一直监听，否则时间事件不能在预期时间内执行。因此，redis通过计算距离最近的时间事件，根据所剩的时间，监听文件事件，在剩余时间结束后，处理该时间段内的文件事件，同时处理该时间的时间事件。不断重复直到服务器关闭。\n</details>\n\n## 你了解Redis的数据类型吗？应用场景是什么？\n\n1. String字符串\n\n   存储：字符串，整型，浮点型\n\n   命令：set get incr decr\n\n   应用场景：key-value存储，计数器\n\n   底层实现：简单可变字符串，使用char数组保存数据，并有长度len，空闲长度free。记录len和free属性可以实现空间预分配和惰性释放。通过len减少连续增长字符串时所需的空间重分配的操作次数，因为每次增长字符串时将多分配len字节的未使用空间。通过free优化字符串的缩短操作，不需要在每次缩短时立即释放未使用的空间，通过free记录下来等待将来使用\n\n2. List列表\n\n   存储：列表\n\n   命令：lpop lpush rpop rpush lrange(实现分页查询)\n\n   应用场景：关注列表/粉丝列表/消息列表\n\n   底层实现：结构体包含链表头节点、尾节点、长度、释放/复制/比较节点函数。节点数据结构包含前置/后置指针、任意类型的值。\n\n3. Set集合\n\n   存储：集合，去重\n\n   命令：sadd spop smembers sunion\n\n   应用场景：由于有方便的求交集差集并集的操作，可以实现共同关注等\n\n   底层实现：使用整形集合或字典实现。\n\n   ​    **整型集合**：当集合只包含int类型时，使用intset存放，intset数据结构中包含编码格式、数组、长度。编码格式规定了能存储的数据范围，比如int_16t表示存储-32768-32767（1位符号位15位数值位），超出范围则会自动升级到32位。\n\n   ​    **字典**：Dict是最上层的结构体，包含两个distht哈希表（一个用于存放数据一个用于rehash）、rehashidx、类型特定函数（键值复制释放、哈希函数、键比较函数）。distht哈希表包含distEntry数组、表的大小、已用大小、计算索引的sizemark。distEntry结构体是数组中存放的数据类型，包含key、value、next指针。\n\n4. Hash映射表\n\n   存储：包含键值对的无序散列表\n\n   命令：hset hget hexists hlen\n\n   应用场景：存储结构化的对象 非常方便的修改某个属性\n\n   底层实现：使用字典或压缩列表实现。\n\n   ​    **字典**。\n\n   ​    **压缩列表**：结构体中包含所占字节数zlbytes、尾部到起点的字节数zltail、节点数zllen、列表末端zlend、节点数组entry。节点结构体包含的属性有前一个结点的长度previous_length、数据类型encoding、数据内容content。存放hash对象时，键一个entry值一个entry\n\n5. SortedSet有序集合\n\n   存储：跟set相比，增加了权重参数，根据参数来排序\n\n   命令：zadd zrange zrem zrank zcount\n\n   应用场景：由于是排序的，可以实现排行榜等\n\n   底层实现：使用跳跃表和字典来实现。**跳跃表**：基于链表+索引实现，解决了数组插入时的O(n),链表查询时的O(n)。由多层链表组成，每一层都是有序链表，上一层的链表是下一层链表的子集。每一个链表结点都有两个指针，一个指向同层的下一个结点，另一个指向下一层的同一个链表节点。最上层结构体是zskiplist，包含头节点和尾节点skiplistNode、节点数量length、最大层数level。\n\n## Redis中Key的过期时间是怎么实现的？\n\n通过set key的expiretime来设置key的存活时间，过期自动删除。redis中有两种key的过期机制。\n\n- 定期删除：默认每100ms**随机抽取**内存中的key判断是否过期决定是否删除。可以在配置文件中设置间隔时间。定期删除每次不会检查所有key，因为这样会十分耗时，因此采用随机选择部分key进行判断。\n- 惰性删除：因为定期删除可能遗漏了部分key，惰性删除则在key**再次被请求**时，判断是否过期决定是否删除。\n\n但是在这两种过期机制下，还是会存在key到期也没被删除，定期删除没有删掉，惰性删除因为没有再次请求也没有生效，此时可能内存占用会越来越高。redis通过设置**内存淘汰策略**解决这一问题。\n\n### 内存淘汰策略\n\n当内存超过了设置的最大内存限制，就会执行内存淘汰策略。\n\n1. allkeys-lru:从所有数据集中选择最近最久未使用的数据淘汰\n2. allkeys-lfu:从所有数据集中选择访问频率最低的数据淘汰\n3. allkeys-random:从所有数据集中随机选择数据淘汰\n4. no-eviction：不淘汰，新写入时报错\n5. volatile-lru:从已设置过期时间的数据集中选择最近最久未使用的数据淘汰\n6. volatile-lfu:从已设置过期时间的数据集中选择访问频率最低的数据淘汰\n7. volatile-ttl:从已设置过期时间的数据集中选择将要过期的数据淘汰\n8. volatile-random:从已设置过期时间的数据集中随机选择数据淘汰\n\nlru：redis中的lru不使用常规的维护队列的方式，通过全局的时钟和key中保存的时钟，选择最久未被使用的淘汰。一般场景下，缓存中存放热点数据，为了提高缓存命中率，使用lru策略\nlfu：将lru中的24位时钟分为两部分，前16位记录时钟，后8位记录访问频率。访问频率并不是简单的线性增长，而是设置参数lfu-log-factor和lfu-decay-time通过公式来计算实现。\n\n*当数据集中没有设置过期时间的key，前四种策略将由于不满足先决条件而和no-eviction相同*\n\n## redis断电之后数据如何恢复？\n\n通过redis的持久化机制，在重启之后可以恢复数据。redis提供了以下三种持久化机制。\n\n- RDB快照持久化：将某一时刻的数据保存到文件中，通过配置文件可以设置在n秒内如果数据发生m次变化则触发bgsave创建快照，备份当前数据。也可以手动调用bgsave来触发持久化。rdb持久化的优点是文件小，恢复快。缺点是实时性较差，最后一次快照之后的数据将丢失。\n- AOF持久化：开启了aof持久化后，redis将把每一条改变数据的操作追加到日志文件中。这样的缺点是aof文件会不断增大，可以通过日志重写来解决，日志重写的过程将当前数据直接生成新的命令写入到新的aof文件中，合并和简化命令。\n- 混合持久化：开启混合持久化后，aof重写时将当前数据以rdb格式写入到文件，在此过程中新的变化将以aof格式写入，恢复时先将重写rdb内容，再执行aof的内容。\n\n## 了解redis的事务吗？\n\nredis事务通过MULTI、EXEC、DISCARD、WATCH来实现。只有在将命令添加进队列时发现语法错误才会导致EXEC命令报错。语法正确的指令即使是执行时出错，redis也会执行其他命令。\n\n- MULTI:开启一个事务，之后可以一条条输入想要执行的命令添加到队列中\n- EXEC:执行在MULTI之后队列中添加的所有命令\n- DISCARD:回滚，取消执行MULTI开启的事务\n- WATCH:监控一个或多个key，当key发生变化时，事务将不会被执行。提供了CAS的功能，在MULTI开始之前，监控key，EXEC时判断key是否修改过。\n\n## 说说缓存穿透和缓存雪崩\n\n- 缓存穿透：用户请求的数据不在数据库中，自然也不在缓存中，此时每次请求该key，总是无法在缓存中找到，也无法在数据库中找到。因此每次都会访问数据库。这种现象称为缓存穿透。\n\n   **解决方法**：1. 为该key设置null值，但是设置较短的过期时间，避免当数据存在时却在缓存中获取到空值。2. 使用布隆过滤器，将所有可能存在的数据哈希到一个bitmap中，不存在的数据一定会被bitmap拦截。\n\n- 缓存雪崩：大量的key在同一时间失效，导致请求全部落在数据库。\n\n     **解决办法**：1. 预防：错开过期时间 2. 应对：限流以保证数据库不会挂掉\n\n{% fold 缓存击穿 %}\n\n一个热点数据在失效瞬间，仍然有大量请求来获取，此时缓存失效，请求都落在数据库上。\n\n**解决方法**：1. 热点数据永不过期 2. 使用互斥锁：在请求时先查缓存，有则返回，否则尝试获取锁，成功之后查询数据库并更新缓存然后释放锁，获取锁失败说明已经有线程在查数据库准备更新缓存，因此可以通过自旋之后重试查询缓存。\n\n{% endfold %}\n\n\n<details>\n<summary>布隆过滤器</summary>\n单个hash函数可能出现不同数据hash值相同的情况，因此通过采用k个相互独立的hash函数解决冲突，将所有可能存在的数据hash到一个bitmap中。\n</details>\n\n## 如何解决并发竞争key问题？\n\n多个客户端对同一个key做set操作。\n解决方案：\n\n1. 乐观锁：通过watch可以方便的实现乐观锁，watch监听的key在事务期间发生变化，事务将会回滚\n2. 时间戳：在set key时加入时间戳，通过比较key的时间戳来确定是否继续执行set操作\n3. 消息队列：将并发的操作加入到消息队列中，串行化执行\n4. 分布式锁：客户端在执行操作之前需要先获取分布式锁\n\n### 分布式锁的实现\n\n> 分布式锁是控制分布式系统之间同步访问共享资源的方式。在分布式系统中，多个系统共享一个资源，使用分布式锁来保证数据一致性\n\n#### 单实例\n\n{% note info %}\n\n使用set lock_key random_value nx px n完成加锁（一次原子性的setnx+expire），解锁时先get根据random_value判断是否是锁的拥有者，再进行del。为了保证原子性，使用lua脚本.\n\n{% endnote %}\n\n{% note info %}\n\n使用redisson实现，方法1的实现锁不具有可重入性。redisson加解锁过程如下：\n\n1. 加锁：通过tryAcquire来获取锁，如果返回的ttl为空表示加锁成功。加锁失败则会订阅该锁的channel，等待锁被释放的消息，再重新获取锁。tryAcquire中使用lua脚本来加锁，锁使用hash结构来实现。hexists判断锁是否存在，不存在则hset加锁成功，存在则判断是否是当前线程的锁，是则hincrby将count+1（可重入锁），否则返回锁的过期时间。\n2. 解锁：同样使用lua脚本。先判断锁是否存在，不存在则publish发布释放锁的消息，解锁成功。锁存在则判断是否是当前线程的锁，如果是通过hincrby将count-1，当count为0，将del锁并publish释放锁的消息，如果不是则抛出异常。\n\n{% endnote %}\n\n#### 多实例\n\n{% note info %}\n\nredlock算法：根据[redis官网](http://redis.cn/topics/distlock.html/)描述总结。假定有5个redis实例，且相互独立，没有主从关系（原因是防止master节点没来得及把新set的锁复制到slave上）。\n\n1. 尝试向五个实例获取锁\n2. 超过获取锁的限制时间则跳到下一个实例\n3. 超过半数（这里是3个）成功加锁并且消耗的总时间小于锁的过期时间则加锁成功\n4. 加锁失败/释放锁，将向**所有实例**发出解锁请求。因为可能存在某个节点set成功但是由于网络问题客户端没有接收到其响应，因此需要向所有节点发出解锁请求\n5. redlock采用**延时重启**来解决故障重启后带来的安全性问题：A B C三个节点，客户端1请求加锁在A B上获得成功，1获取锁。然后B宕机重启，由于持久化策略等问题，导致B上的锁没有被恢复，此时客户端2请求相同的锁，在BC上获取成功，这样客户端1和2就持有了相同的锁。\n\n{% endnote %}\n\n{% note info %}\n\nzookeeper：客户端每次请求一把锁，就在zookeeper对应节点目录下创建一个有序节点，只需要比较节点的顺序就可以判断是否成功获取锁。\n\n{% endnote %}\n\n## redis单点/单机会有什么问题/挂掉怎么办？\n\n为了避免redis单机挂掉的问题，我们可以搭建redis集群来保证redis服务的高可用。redis集群有以下三种模式：\n\n1. 主从模式：实现读写分离，主节点的数据通过全量/增量同步发送到从节点上\n\n2. 哨兵模式：主从模式升级版，哨兵监听主节点的状态，发现宕机后选出新的主节点\n\n3. 集群模式：一个redis cluster由多个redis节点组组成，每个节点组内由主从节点，负责数据的一个/多个分片-slot。\n\n{% note info %}\n\n**配置的一致性**：集群中的每个节点都保存了集群的配置信息，通过一个全局的版本号epoch来保证信息的一致。各节点之间通过频繁的ping/pong消息携带的gossip部分更新自己对集群的认识。当某个节点率先感知了集群的变化后，自增自身的epoch并将其通过ping/pong消息扩散出去，其他节点发现接收到的epoch＞自身于是更新自身关于集群的信息。\n\n**数据分片**：cluster中节点组之间负责的数据互相独立，客户端需要通过一致性哈希算法将key映射到0-16383个slot中的一个上，找到对应的redis节点。当请求的key不在节点上（发生了数据迁移），会返回moved/ask消息告知客户端.\n\n**Failover保证高可用**：故障发现、故障确认、主备切换机制\n\n1. 故障发现：各节点在进行ping/pong交换信息时，如果一个节点A的ping消息超时没有收到对端B的pong回复，则会在自身集群信息中将该节点状态设置为pfail，并通过和其他节点的ping/pong将此信息传递到整个集群。\n\n2. 故障确认：节点A在1之后，如果接收到其他节点的gossip消息中B也为pfail状态，则会将B的状态升级为fail，确认故障，然后发起slave选举流程。\n\n3. slave选举：A作为B的salve在确认B为故障节点后，发起竞选：将自己的epoch自增并发送FAILOVER_AUTH_REQUEST到其他的master节点，如果master未收到过FAILOVER_AUTH_REQUEST(收到时的自身epoch小于FAILOVER_AUTH_REQUEST中的epoch)，则回复同意，否则拒绝。当A收到超过半数的master同意之后，将替代B称为master节点，更新自己的epoch，通过配置一致性完成集群结构的更新。当B回复正常后，通过与其他节点的gossip消息可以得知新的master节点为A，自己将会成为A的slave节点。\n\n{% endnote %}\n\n<details><summary>数据迁移</summary>\n    当加入新的master节点/ 旧的节点组下线/负载不均衡需要调整时，会发生数据迁移，迁移过程：<br/>\n    1. 设置slot原所在节点A状态为migrating,slot新节点B状态为importing.<br/>\n    2. 针对A上的slot的所有key，分别发送migrate命令将数据迁移到B.<br/>\n    migrating的A：如果请求的key尚未迁出则正常提供服务；如果已经迁出则使用ask回复让客户端跳转到B.<br/>\n    importing的B：如果请求不是由ask跳转的则通过moved让客户端跳转到A上.<br/>\n    这样的跳转控制可以让同一个key操作迁移之前在原节点执行，迁移之后在新节点执行，避免冲突。迁移完成之后，通过配置的一致性让整个集群更新配置。\n</details>\n\n<details><summary>moved和ask</summary>moved会更新client的路由缓存，即moved之后对相同的key操作会直接到新节点上，ask操作只是单次的，之后相同的key还是回到原来的节点上</details>\n\n## 如何保证缓存和数据库的一致性？\n\n如果要求数据库和缓存的实时一致性，那么只能串行化地执行读写请求。一般来说允许缓存和数据库出现短暂的不一致。最经典的方式是先更新数据库，再删除缓存。读请求先查缓存，缓存没有则查询数据库，将查询结果放入缓存中，返回响应。更新时，先更新数据库，再删除缓存。\n\n### 为什么是删除缓存，而不是更新缓存？\n\n在复杂一点的缓存场景中，缓存中的数据并不是简单的从数据库中直接获取。存入缓存的数据可能需要进行多表查询并进行计算得到。所以更新缓存的成本是比较高的。除此之外，缓存的数据如果来自一张频繁更新的表，但是缓存却较少的被访问，也会造成资源的浪费。因此采用删除缓存，是一种懒加载的思想，等到需要的时候发现缓存中没有再查询数据库将结果放入缓存。\n\n### 先更新数据库再删除缓存就一定能保证一致性吗？\n\n不一定，在更新完数据库之后，如果删除缓存失败，此时缓存中是旧的数据，而数据库是新的数据，出现了不一致。解决方法是：先删除缓存，再更新数据库。如果更新数据库失败了，再次请求则会去读取旧的数据，不会产生数据不一致。\n\n### 这样就没问题了吗？\n\n如果在并发量较低的情况下，一般不会出现问题。但是当并发量较大，对一个数据并发读写就可能出现：如果在删除完缓存之后，尚未完成更新，此时另一个请求到来，发现没缓存，于是查数据库，存入缓存，并返回结果。之后数据库完成了更新，此时数据库和缓存再次出现不一致。**解决方案**：串行化。一个更新数据的操作，“删除缓存+更新数据库”，将其路由到一个jvm的队列中。读取数据的操作，如果发现缓存中没有数据，则将“读取数据+更新缓存”的操作也放入一个jvm的工作队列中。一个工作线程对应一个队列，线程从队列中获取操作并执行，这样，更新数据的操作将顺序执行删除缓存，然后更新数据库，在数据库未更新完成之前，如果有读取数据的请求，发现缓存中没有数据，将进入工作队列中，等待前一个更新操作完成之后，再执行“读取数据+更新缓存”的操作，保证了数据的一致性。","source":"_posts/Redis面试问题.md","raw":"---\ntitle: Redis面试问题\ntags:\n  - Java后端面试\n  - Redis\n  - 分布式锁\ncategories:\n  - Java后端面试\ndate: '2020-4-28 21:56'\nimage: 'https://gitee.com/jingshanccc/image/raw/master/image/20200722004924.jpg'\nabbrlink: e745ac01\n---\n\n<p>\n<!-- more -->\n\n## 为什么要使用缓存？\n\n1. 高性能\n\n   假设用户第一次访问数据库获取数据，这个过程是比较慢的，因为是从硬盘读取，同时如果需要获取的数据本身查询过程十分耗时，那么我们将第一次获取到的结果直接放在缓存中，下一次访问直接在缓存中获取即可，操作缓存就是操作内存，速度更块。\n\n2. 高并发\n\n   内存能够承受的请求是远远大于直接访问数据库的，所以我们将数据库的部分数据转移到缓存中，可以让部分请求直接访问内存而不经过数据库。\n\n<details>\n<summary>数据库有缓存吗？</summary>\n有，以mysql为例，它会将查询sql和结果以key-value的形式缓存起来，再遇到hash值相同的sql语句就不再经过编译解析优化和查询，直接返回结果。<br/>\n缺点：\n    通过hash，意味着语义相同的可能有不同的表达，这样也无法命中缓存。对于频繁更新的表，缓存总是难以命中，但还是需要耗费资源维护缓存。\n</details>\n\n## 选择Redis的原因？\n\n### 本地缓存和分布式缓存\n\n1. Java中使用map/guaua来做本地缓存，直接将数据存在jvm内存中，与jvm拥有相同的生命周期。其优点是轻量且快速。但在多实例的情况下，每个实例都需要保存自己的一份缓存，不具有一致性\n\n2. Redis和Memcache实现的是分布式缓存，在多实例下，共用一份缓存，具有一致性。因此需要保证服务的高可用，架构较复杂。\n\n### redis和memcache\n\n1. 持久化：memcache不支持持久化，缓存数据只存在在内存中，断电后数据就丢失了。redis提供了持久化机制，可以将数据保存到磁盘中，重启后通过日志文件可以恢复数据。\n2. 数据类型：memcache只支持简单的string类型，redis除了string之外，还支持列表，哈希，集合等多种数据结构。\n3. 分布式：memcache不支持分布式，只能通过多个客户端使用一致性哈希来向集群中存储数据，这种方式在查询和存储时都需要计算一次。redis原生支持集群模式。\n4. 线程模型：memcache是多线程的，redis默认是单线程的，减少了线程切换的消耗\n\n## 说说Redis的线程模型？\n\nredis内部采用文件事件处理器，它是单线程的，通过I/O多路复用机制，监听多个socket，根据socket上的事件选择对应的事件处理器来处理。\n文件事件处理器包括四个部分：socket、I/O多路复用程序、事件分派器、事件处理器（包括连接应答处理器，命令请求处理器，命令回复处理器）\n\nredis基于reactor模式开发出自己的I/O多路复用程序，多个socket同时产生的事件将被加入到队列中，事件分派器从队列中取出事件，根据事件类型分派给不同的事件处理器。\n\n<details><summary>事件的调度和执行</summary>\nredis服务器是一个事件驱动程序，有文件事件和时间事件。服务器需要一直监听socket以得到到达的文件事件，但是由于需要执行时间事件，不能一直监听，否则时间事件不能在预期时间内执行。因此，redis通过计算距离最近的时间事件，根据所剩的时间，监听文件事件，在剩余时间结束后，处理该时间段内的文件事件，同时处理该时间的时间事件。不断重复直到服务器关闭。\n</details>\n\n## 你了解Redis的数据类型吗？应用场景是什么？\n\n1. String字符串\n\n   存储：字符串，整型，浮点型\n\n   命令：set get incr decr\n\n   应用场景：key-value存储，计数器\n\n   底层实现：简单可变字符串，使用char数组保存数据，并有长度len，空闲长度free。记录len和free属性可以实现空间预分配和惰性释放。通过len减少连续增长字符串时所需的空间重分配的操作次数，因为每次增长字符串时将多分配len字节的未使用空间。通过free优化字符串的缩短操作，不需要在每次缩短时立即释放未使用的空间，通过free记录下来等待将来使用\n\n2. List列表\n\n   存储：列表\n\n   命令：lpop lpush rpop rpush lrange(实现分页查询)\n\n   应用场景：关注列表/粉丝列表/消息列表\n\n   底层实现：结构体包含链表头节点、尾节点、长度、释放/复制/比较节点函数。节点数据结构包含前置/后置指针、任意类型的值。\n\n3. Set集合\n\n   存储：集合，去重\n\n   命令：sadd spop smembers sunion\n\n   应用场景：由于有方便的求交集差集并集的操作，可以实现共同关注等\n\n   底层实现：使用整形集合或字典实现。\n\n   ​    **整型集合**：当集合只包含int类型时，使用intset存放，intset数据结构中包含编码格式、数组、长度。编码格式规定了能存储的数据范围，比如int_16t表示存储-32768-32767（1位符号位15位数值位），超出范围则会自动升级到32位。\n\n   ​    **字典**：Dict是最上层的结构体，包含两个distht哈希表（一个用于存放数据一个用于rehash）、rehashidx、类型特定函数（键值复制释放、哈希函数、键比较函数）。distht哈希表包含distEntry数组、表的大小、已用大小、计算索引的sizemark。distEntry结构体是数组中存放的数据类型，包含key、value、next指针。\n\n4. Hash映射表\n\n   存储：包含键值对的无序散列表\n\n   命令：hset hget hexists hlen\n\n   应用场景：存储结构化的对象 非常方便的修改某个属性\n\n   底层实现：使用字典或压缩列表实现。\n\n   ​    **字典**。\n\n   ​    **压缩列表**：结构体中包含所占字节数zlbytes、尾部到起点的字节数zltail、节点数zllen、列表末端zlend、节点数组entry。节点结构体包含的属性有前一个结点的长度previous_length、数据类型encoding、数据内容content。存放hash对象时，键一个entry值一个entry\n\n5. SortedSet有序集合\n\n   存储：跟set相比，增加了权重参数，根据参数来排序\n\n   命令：zadd zrange zrem zrank zcount\n\n   应用场景：由于是排序的，可以实现排行榜等\n\n   底层实现：使用跳跃表和字典来实现。**跳跃表**：基于链表+索引实现，解决了数组插入时的O(n),链表查询时的O(n)。由多层链表组成，每一层都是有序链表，上一层的链表是下一层链表的子集。每一个链表结点都有两个指针，一个指向同层的下一个结点，另一个指向下一层的同一个链表节点。最上层结构体是zskiplist，包含头节点和尾节点skiplistNode、节点数量length、最大层数level。\n\n## Redis中Key的过期时间是怎么实现的？\n\n通过set key的expiretime来设置key的存活时间，过期自动删除。redis中有两种key的过期机制。\n\n- 定期删除：默认每100ms**随机抽取**内存中的key判断是否过期决定是否删除。可以在配置文件中设置间隔时间。定期删除每次不会检查所有key，因为这样会十分耗时，因此采用随机选择部分key进行判断。\n- 惰性删除：因为定期删除可能遗漏了部分key，惰性删除则在key**再次被请求**时，判断是否过期决定是否删除。\n\n但是在这两种过期机制下，还是会存在key到期也没被删除，定期删除没有删掉，惰性删除因为没有再次请求也没有生效，此时可能内存占用会越来越高。redis通过设置**内存淘汰策略**解决这一问题。\n\n### 内存淘汰策略\n\n当内存超过了设置的最大内存限制，就会执行内存淘汰策略。\n\n1. allkeys-lru:从所有数据集中选择最近最久未使用的数据淘汰\n2. allkeys-lfu:从所有数据集中选择访问频率最低的数据淘汰\n3. allkeys-random:从所有数据集中随机选择数据淘汰\n4. no-eviction：不淘汰，新写入时报错\n5. volatile-lru:从已设置过期时间的数据集中选择最近最久未使用的数据淘汰\n6. volatile-lfu:从已设置过期时间的数据集中选择访问频率最低的数据淘汰\n7. volatile-ttl:从已设置过期时间的数据集中选择将要过期的数据淘汰\n8. volatile-random:从已设置过期时间的数据集中随机选择数据淘汰\n\nlru：redis中的lru不使用常规的维护队列的方式，通过全局的时钟和key中保存的时钟，选择最久未被使用的淘汰。一般场景下，缓存中存放热点数据，为了提高缓存命中率，使用lru策略\nlfu：将lru中的24位时钟分为两部分，前16位记录时钟，后8位记录访问频率。访问频率并不是简单的线性增长，而是设置参数lfu-log-factor和lfu-decay-time通过公式来计算实现。\n\n*当数据集中没有设置过期时间的key，前四种策略将由于不满足先决条件而和no-eviction相同*\n\n## redis断电之后数据如何恢复？\n\n通过redis的持久化机制，在重启之后可以恢复数据。redis提供了以下三种持久化机制。\n\n- RDB快照持久化：将某一时刻的数据保存到文件中，通过配置文件可以设置在n秒内如果数据发生m次变化则触发bgsave创建快照，备份当前数据。也可以手动调用bgsave来触发持久化。rdb持久化的优点是文件小，恢复快。缺点是实时性较差，最后一次快照之后的数据将丢失。\n- AOF持久化：开启了aof持久化后，redis将把每一条改变数据的操作追加到日志文件中。这样的缺点是aof文件会不断增大，可以通过日志重写来解决，日志重写的过程将当前数据直接生成新的命令写入到新的aof文件中，合并和简化命令。\n- 混合持久化：开启混合持久化后，aof重写时将当前数据以rdb格式写入到文件，在此过程中新的变化将以aof格式写入，恢复时先将重写rdb内容，再执行aof的内容。\n\n## 了解redis的事务吗？\n\nredis事务通过MULTI、EXEC、DISCARD、WATCH来实现。只有在将命令添加进队列时发现语法错误才会导致EXEC命令报错。语法正确的指令即使是执行时出错，redis也会执行其他命令。\n\n- MULTI:开启一个事务，之后可以一条条输入想要执行的命令添加到队列中\n- EXEC:执行在MULTI之后队列中添加的所有命令\n- DISCARD:回滚，取消执行MULTI开启的事务\n- WATCH:监控一个或多个key，当key发生变化时，事务将不会被执行。提供了CAS的功能，在MULTI开始之前，监控key，EXEC时判断key是否修改过。\n\n## 说说缓存穿透和缓存雪崩\n\n- 缓存穿透：用户请求的数据不在数据库中，自然也不在缓存中，此时每次请求该key，总是无法在缓存中找到，也无法在数据库中找到。因此每次都会访问数据库。这种现象称为缓存穿透。\n\n   **解决方法**：1. 为该key设置null值，但是设置较短的过期时间，避免当数据存在时却在缓存中获取到空值。2. 使用布隆过滤器，将所有可能存在的数据哈希到一个bitmap中，不存在的数据一定会被bitmap拦截。\n\n- 缓存雪崩：大量的key在同一时间失效，导致请求全部落在数据库。\n\n     **解决办法**：1. 预防：错开过期时间 2. 应对：限流以保证数据库不会挂掉\n\n{% fold 缓存击穿 %}\n\n一个热点数据在失效瞬间，仍然有大量请求来获取，此时缓存失效，请求都落在数据库上。\n\n**解决方法**：1. 热点数据永不过期 2. 使用互斥锁：在请求时先查缓存，有则返回，否则尝试获取锁，成功之后查询数据库并更新缓存然后释放锁，获取锁失败说明已经有线程在查数据库准备更新缓存，因此可以通过自旋之后重试查询缓存。\n\n{% endfold %}\n\n\n<details>\n<summary>布隆过滤器</summary>\n单个hash函数可能出现不同数据hash值相同的情况，因此通过采用k个相互独立的hash函数解决冲突，将所有可能存在的数据hash到一个bitmap中。\n</details>\n\n## 如何解决并发竞争key问题？\n\n多个客户端对同一个key做set操作。\n解决方案：\n\n1. 乐观锁：通过watch可以方便的实现乐观锁，watch监听的key在事务期间发生变化，事务将会回滚\n2. 时间戳：在set key时加入时间戳，通过比较key的时间戳来确定是否继续执行set操作\n3. 消息队列：将并发的操作加入到消息队列中，串行化执行\n4. 分布式锁：客户端在执行操作之前需要先获取分布式锁\n\n### 分布式锁的实现\n\n> 分布式锁是控制分布式系统之间同步访问共享资源的方式。在分布式系统中，多个系统共享一个资源，使用分布式锁来保证数据一致性\n\n#### 单实例\n\n{% note info %}\n\n使用set lock_key random_value nx px n完成加锁（一次原子性的setnx+expire），解锁时先get根据random_value判断是否是锁的拥有者，再进行del。为了保证原子性，使用lua脚本.\n\n{% endnote %}\n\n{% note info %}\n\n使用redisson实现，方法1的实现锁不具有可重入性。redisson加解锁过程如下：\n\n1. 加锁：通过tryAcquire来获取锁，如果返回的ttl为空表示加锁成功。加锁失败则会订阅该锁的channel，等待锁被释放的消息，再重新获取锁。tryAcquire中使用lua脚本来加锁，锁使用hash结构来实现。hexists判断锁是否存在，不存在则hset加锁成功，存在则判断是否是当前线程的锁，是则hincrby将count+1（可重入锁），否则返回锁的过期时间。\n2. 解锁：同样使用lua脚本。先判断锁是否存在，不存在则publish发布释放锁的消息，解锁成功。锁存在则判断是否是当前线程的锁，如果是通过hincrby将count-1，当count为0，将del锁并publish释放锁的消息，如果不是则抛出异常。\n\n{% endnote %}\n\n#### 多实例\n\n{% note info %}\n\nredlock算法：根据[redis官网](http://redis.cn/topics/distlock.html/)描述总结。假定有5个redis实例，且相互独立，没有主从关系（原因是防止master节点没来得及把新set的锁复制到slave上）。\n\n1. 尝试向五个实例获取锁\n2. 超过获取锁的限制时间则跳到下一个实例\n3. 超过半数（这里是3个）成功加锁并且消耗的总时间小于锁的过期时间则加锁成功\n4. 加锁失败/释放锁，将向**所有实例**发出解锁请求。因为可能存在某个节点set成功但是由于网络问题客户端没有接收到其响应，因此需要向所有节点发出解锁请求\n5. redlock采用**延时重启**来解决故障重启后带来的安全性问题：A B C三个节点，客户端1请求加锁在A B上获得成功，1获取锁。然后B宕机重启，由于持久化策略等问题，导致B上的锁没有被恢复，此时客户端2请求相同的锁，在BC上获取成功，这样客户端1和2就持有了相同的锁。\n\n{% endnote %}\n\n{% note info %}\n\nzookeeper：客户端每次请求一把锁，就在zookeeper对应节点目录下创建一个有序节点，只需要比较节点的顺序就可以判断是否成功获取锁。\n\n{% endnote %}\n\n## redis单点/单机会有什么问题/挂掉怎么办？\n\n为了避免redis单机挂掉的问题，我们可以搭建redis集群来保证redis服务的高可用。redis集群有以下三种模式：\n\n1. 主从模式：实现读写分离，主节点的数据通过全量/增量同步发送到从节点上\n\n2. 哨兵模式：主从模式升级版，哨兵监听主节点的状态，发现宕机后选出新的主节点\n\n3. 集群模式：一个redis cluster由多个redis节点组组成，每个节点组内由主从节点，负责数据的一个/多个分片-slot。\n\n{% note info %}\n\n**配置的一致性**：集群中的每个节点都保存了集群的配置信息，通过一个全局的版本号epoch来保证信息的一致。各节点之间通过频繁的ping/pong消息携带的gossip部分更新自己对集群的认识。当某个节点率先感知了集群的变化后，自增自身的epoch并将其通过ping/pong消息扩散出去，其他节点发现接收到的epoch＞自身于是更新自身关于集群的信息。\n\n**数据分片**：cluster中节点组之间负责的数据互相独立，客户端需要通过一致性哈希算法将key映射到0-16383个slot中的一个上，找到对应的redis节点。当请求的key不在节点上（发生了数据迁移），会返回moved/ask消息告知客户端.\n\n**Failover保证高可用**：故障发现、故障确认、主备切换机制\n\n1. 故障发现：各节点在进行ping/pong交换信息时，如果一个节点A的ping消息超时没有收到对端B的pong回复，则会在自身集群信息中将该节点状态设置为pfail，并通过和其他节点的ping/pong将此信息传递到整个集群。\n\n2. 故障确认：节点A在1之后，如果接收到其他节点的gossip消息中B也为pfail状态，则会将B的状态升级为fail，确认故障，然后发起slave选举流程。\n\n3. slave选举：A作为B的salve在确认B为故障节点后，发起竞选：将自己的epoch自增并发送FAILOVER_AUTH_REQUEST到其他的master节点，如果master未收到过FAILOVER_AUTH_REQUEST(收到时的自身epoch小于FAILOVER_AUTH_REQUEST中的epoch)，则回复同意，否则拒绝。当A收到超过半数的master同意之后，将替代B称为master节点，更新自己的epoch，通过配置一致性完成集群结构的更新。当B回复正常后，通过与其他节点的gossip消息可以得知新的master节点为A，自己将会成为A的slave节点。\n\n{% endnote %}\n\n<details><summary>数据迁移</summary>\n    当加入新的master节点/ 旧的节点组下线/负载不均衡需要调整时，会发生数据迁移，迁移过程：<br/>\n    1. 设置slot原所在节点A状态为migrating,slot新节点B状态为importing.<br/>\n    2. 针对A上的slot的所有key，分别发送migrate命令将数据迁移到B.<br/>\n    migrating的A：如果请求的key尚未迁出则正常提供服务；如果已经迁出则使用ask回复让客户端跳转到B.<br/>\n    importing的B：如果请求不是由ask跳转的则通过moved让客户端跳转到A上.<br/>\n    这样的跳转控制可以让同一个key操作迁移之前在原节点执行，迁移之后在新节点执行，避免冲突。迁移完成之后，通过配置的一致性让整个集群更新配置。\n</details>\n\n<details><summary>moved和ask</summary>moved会更新client的路由缓存，即moved之后对相同的key操作会直接到新节点上，ask操作只是单次的，之后相同的key还是回到原来的节点上</details>\n\n## 如何保证缓存和数据库的一致性？\n\n如果要求数据库和缓存的实时一致性，那么只能串行化地执行读写请求。一般来说允许缓存和数据库出现短暂的不一致。最经典的方式是先更新数据库，再删除缓存。读请求先查缓存，缓存没有则查询数据库，将查询结果放入缓存中，返回响应。更新时，先更新数据库，再删除缓存。\n\n### 为什么是删除缓存，而不是更新缓存？\n\n在复杂一点的缓存场景中，缓存中的数据并不是简单的从数据库中直接获取。存入缓存的数据可能需要进行多表查询并进行计算得到。所以更新缓存的成本是比较高的。除此之外，缓存的数据如果来自一张频繁更新的表，但是缓存却较少的被访问，也会造成资源的浪费。因此采用删除缓存，是一种懒加载的思想，等到需要的时候发现缓存中没有再查询数据库将结果放入缓存。\n\n### 先更新数据库再删除缓存就一定能保证一致性吗？\n\n不一定，在更新完数据库之后，如果删除缓存失败，此时缓存中是旧的数据，而数据库是新的数据，出现了不一致。解决方法是：先删除缓存，再更新数据库。如果更新数据库失败了，再次请求则会去读取旧的数据，不会产生数据不一致。\n\n### 这样就没问题了吗？\n\n如果在并发量较低的情况下，一般不会出现问题。但是当并发量较大，对一个数据并发读写就可能出现：如果在删除完缓存之后，尚未完成更新，此时另一个请求到来，发现没缓存，于是查数据库，存入缓存，并返回结果。之后数据库完成了更新，此时数据库和缓存再次出现不一致。**解决方案**：串行化。一个更新数据的操作，“删除缓存+更新数据库”，将其路由到一个jvm的队列中。读取数据的操作，如果发现缓存中没有数据，则将“读取数据+更新缓存”的操作也放入一个jvm的工作队列中。一个工作线程对应一个队列，线程从队列中获取操作并执行，这样，更新数据的操作将顺序执行删除缓存，然后更新数据库，在数据库未更新完成之前，如果有读取数据的请求，发现缓存中没有数据，将进入工作队列中，等待前一个更新操作完成之后，再执行“读取数据+更新缓存”的操作，保证了数据的一致性。","slug":"Redis面试问题","published":1,"updated":"2020-08-06T01:17:12.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2b002uz4ej869u676q","content":"<p>\n<a id=\"more\"></a>\n\n<h2 id=\"为什么要使用缓存？\"><a href=\"#为什么要使用缓存？\" class=\"headerlink\" title=\"为什么要使用缓存？\"></a>为什么要使用缓存？</h2><ol>\n<li><p>高性能</p>\n<p>假设用户第一次访问数据库获取数据，这个过程是比较慢的，因为是从硬盘读取，同时如果需要获取的数据本身查询过程十分耗时，那么我们将第一次获取到的结果直接放在缓存中，下一次访问直接在缓存中获取即可，操作缓存就是操作内存，速度更块。</p>\n</li>\n<li><p>高并发</p>\n<p>内存能够承受的请求是远远大于直接访问数据库的，所以我们将数据库的部分数据转移到缓存中，可以让部分请求直接访问内存而不经过数据库。</p>\n</li>\n</ol>\n<details>\n<summary>数据库有缓存吗？</summary>\n有，以mysql为例，它会将查询sql和结果以key-value的形式缓存起来，再遇到hash值相同的sql语句就不再经过编译解析优化和查询，直接返回结果。<br/>\n缺点：\n    通过hash，意味着语义相同的可能有不同的表达，这样也无法命中缓存。对于频繁更新的表，缓存总是难以命中，但还是需要耗费资源维护缓存。\n</details>\n\n<h2 id=\"选择Redis的原因？\"><a href=\"#选择Redis的原因？\" class=\"headerlink\" title=\"选择Redis的原因？\"></a>选择Redis的原因？</h2><h3 id=\"本地缓存和分布式缓存\"><a href=\"#本地缓存和分布式缓存\" class=\"headerlink\" title=\"本地缓存和分布式缓存\"></a>本地缓存和分布式缓存</h3><ol>\n<li><p>Java中使用map/guaua来做本地缓存，直接将数据存在jvm内存中，与jvm拥有相同的生命周期。其优点是轻量且快速。但在多实例的情况下，每个实例都需要保存自己的一份缓存，不具有一致性</p>\n</li>\n<li><p>Redis和Memcache实现的是分布式缓存，在多实例下，共用一份缓存，具有一致性。因此需要保证服务的高可用，架构较复杂。</p>\n</li>\n</ol>\n<h3 id=\"redis和memcache\"><a href=\"#redis和memcache\" class=\"headerlink\" title=\"redis和memcache\"></a>redis和memcache</h3><ol>\n<li>持久化：memcache不支持持久化，缓存数据只存在在内存中，断电后数据就丢失了。redis提供了持久化机制，可以将数据保存到磁盘中，重启后通过日志文件可以恢复数据。</li>\n<li>数据类型：memcache只支持简单的string类型，redis除了string之外，还支持列表，哈希，集合等多种数据结构。</li>\n<li>分布式：memcache不支持分布式，只能通过多个客户端使用一致性哈希来向集群中存储数据，这种方式在查询和存储时都需要计算一次。redis原生支持集群模式。</li>\n<li>线程模型：memcache是多线程的，redis默认是单线程的，减少了线程切换的消耗</li>\n</ol>\n<h2 id=\"说说Redis的线程模型？\"><a href=\"#说说Redis的线程模型？\" class=\"headerlink\" title=\"说说Redis的线程模型？\"></a>说说Redis的线程模型？</h2><p>redis内部采用文件事件处理器，它是单线程的，通过I/O多路复用机制，监听多个socket，根据socket上的事件选择对应的事件处理器来处理。<br>文件事件处理器包括四个部分：socket、I/O多路复用程序、事件分派器、事件处理器（包括连接应答处理器，命令请求处理器，命令回复处理器）</p>\n<p>redis基于reactor模式开发出自己的I/O多路复用程序，多个socket同时产生的事件将被加入到队列中，事件分派器从队列中取出事件，根据事件类型分派给不同的事件处理器。</p>\n<details><summary>事件的调度和执行</summary>\nredis服务器是一个事件驱动程序，有文件事件和时间事件。服务器需要一直监听socket以得到到达的文件事件，但是由于需要执行时间事件，不能一直监听，否则时间事件不能在预期时间内执行。因此，redis通过计算距离最近的时间事件，根据所剩的时间，监听文件事件，在剩余时间结束后，处理该时间段内的文件事件，同时处理该时间的时间事件。不断重复直到服务器关闭。\n</details>\n\n<h2 id=\"你了解Redis的数据类型吗？应用场景是什么？\"><a href=\"#你了解Redis的数据类型吗？应用场景是什么？\" class=\"headerlink\" title=\"你了解Redis的数据类型吗？应用场景是什么？\"></a>你了解Redis的数据类型吗？应用场景是什么？</h2><ol>\n<li><p>String字符串</p>\n<p>存储：字符串，整型，浮点型</p>\n<p>命令：set get incr decr</p>\n<p>应用场景：key-value存储，计数器</p>\n<p>底层实现：简单可变字符串，使用char数组保存数据，并有长度len，空闲长度free。记录len和free属性可以实现空间预分配和惰性释放。通过len减少连续增长字符串时所需的空间重分配的操作次数，因为每次增长字符串时将多分配len字节的未使用空间。通过free优化字符串的缩短操作，不需要在每次缩短时立即释放未使用的空间，通过free记录下来等待将来使用</p>\n</li>\n<li><p>List列表</p>\n<p>存储：列表</p>\n<p>命令：lpop lpush rpop rpush lrange(实现分页查询)</p>\n<p>应用场景：关注列表/粉丝列表/消息列表</p>\n<p>底层实现：结构体包含链表头节点、尾节点、长度、释放/复制/比较节点函数。节点数据结构包含前置/后置指针、任意类型的值。</p>\n</li>\n<li><p>Set集合</p>\n<p>存储：集合，去重</p>\n<p>命令：sadd spop smembers sunion</p>\n<p>应用场景：由于有方便的求交集差集并集的操作，可以实现共同关注等</p>\n<p>底层实现：使用整形集合或字典实现。</p>\n<p>​    <strong>整型集合</strong>：当集合只包含int类型时，使用intset存放，intset数据结构中包含编码格式、数组、长度。编码格式规定了能存储的数据范围，比如int_16t表示存储-32768-32767（1位符号位15位数值位），超出范围则会自动升级到32位。</p>\n<p>​    <strong>字典</strong>：Dict是最上层的结构体，包含两个distht哈希表（一个用于存放数据一个用于rehash）、rehashidx、类型特定函数（键值复制释放、哈希函数、键比较函数）。distht哈希表包含distEntry数组、表的大小、已用大小、计算索引的sizemark。distEntry结构体是数组中存放的数据类型，包含key、value、next指针。</p>\n</li>\n<li><p>Hash映射表</p>\n<p>存储：包含键值对的无序散列表</p>\n<p>命令：hset hget hexists hlen</p>\n<p>应用场景：存储结构化的对象 非常方便的修改某个属性</p>\n<p>底层实现：使用字典或压缩列表实现。</p>\n<p>​    <strong>字典</strong>。</p>\n<p>​    <strong>压缩列表</strong>：结构体中包含所占字节数zlbytes、尾部到起点的字节数zltail、节点数zllen、列表末端zlend、节点数组entry。节点结构体包含的属性有前一个结点的长度previous_length、数据类型encoding、数据内容content。存放hash对象时，键一个entry值一个entry</p>\n</li>\n<li><p>SortedSet有序集合</p>\n<p>存储：跟set相比，增加了权重参数，根据参数来排序</p>\n<p>命令：zadd zrange zrem zrank zcount</p>\n<p>应用场景：由于是排序的，可以实现排行榜等</p>\n<p>底层实现：使用跳跃表和字典来实现。<strong>跳跃表</strong>：基于链表+索引实现，解决了数组插入时的O(n),链表查询时的O(n)。由多层链表组成，每一层都是有序链表，上一层的链表是下一层链表的子集。每一个链表结点都有两个指针，一个指向同层的下一个结点，另一个指向下一层的同一个链表节点。最上层结构体是zskiplist，包含头节点和尾节点skiplistNode、节点数量length、最大层数level。</p>\n</li>\n</ol>\n<h2 id=\"Redis中Key的过期时间是怎么实现的？\"><a href=\"#Redis中Key的过期时间是怎么实现的？\" class=\"headerlink\" title=\"Redis中Key的过期时间是怎么实现的？\"></a>Redis中Key的过期时间是怎么实现的？</h2><p>通过set key的expiretime来设置key的存活时间，过期自动删除。redis中有两种key的过期机制。</p>\n<ul>\n<li>定期删除：默认每100ms<strong>随机抽取</strong>内存中的key判断是否过期决定是否删除。可以在配置文件中设置间隔时间。定期删除每次不会检查所有key，因为这样会十分耗时，因此采用随机选择部分key进行判断。</li>\n<li>惰性删除：因为定期删除可能遗漏了部分key，惰性删除则在key<strong>再次被请求</strong>时，判断是否过期决定是否删除。</li>\n</ul>\n<p>但是在这两种过期机制下，还是会存在key到期也没被删除，定期删除没有删掉，惰性删除因为没有再次请求也没有生效，此时可能内存占用会越来越高。redis通过设置<strong>内存淘汰策略</strong>解决这一问题。</p>\n<h3 id=\"内存淘汰策略\"><a href=\"#内存淘汰策略\" class=\"headerlink\" title=\"内存淘汰策略\"></a>内存淘汰策略</h3><p>当内存超过了设置的最大内存限制，就会执行内存淘汰策略。</p>\n<ol>\n<li>allkeys-lru:从所有数据集中选择最近最久未使用的数据淘汰</li>\n<li>allkeys-lfu:从所有数据集中选择访问频率最低的数据淘汰</li>\n<li>allkeys-random:从所有数据集中随机选择数据淘汰</li>\n<li>no-eviction：不淘汰，新写入时报错</li>\n<li>volatile-lru:从已设置过期时间的数据集中选择最近最久未使用的数据淘汰</li>\n<li>volatile-lfu:从已设置过期时间的数据集中选择访问频率最低的数据淘汰</li>\n<li>volatile-ttl:从已设置过期时间的数据集中选择将要过期的数据淘汰</li>\n<li>volatile-random:从已设置过期时间的数据集中随机选择数据淘汰</li>\n</ol>\n<p>lru：redis中的lru不使用常规的维护队列的方式，通过全局的时钟和key中保存的时钟，选择最久未被使用的淘汰。一般场景下，缓存中存放热点数据，为了提高缓存命中率，使用lru策略<br>lfu：将lru中的24位时钟分为两部分，前16位记录时钟，后8位记录访问频率。访问频率并不是简单的线性增长，而是设置参数lfu-log-factor和lfu-decay-time通过公式来计算实现。</p>\n<p><em>当数据集中没有设置过期时间的key，前四种策略将由于不满足先决条件而和no-eviction相同</em></p>\n<h2 id=\"redis断电之后数据如何恢复？\"><a href=\"#redis断电之后数据如何恢复？\" class=\"headerlink\" title=\"redis断电之后数据如何恢复？\"></a>redis断电之后数据如何恢复？</h2><p>通过redis的持久化机制，在重启之后可以恢复数据。redis提供了以下三种持久化机制。</p>\n<ul>\n<li>RDB快照持久化：将某一时刻的数据保存到文件中，通过配置文件可以设置在n秒内如果数据发生m次变化则触发bgsave创建快照，备份当前数据。也可以手动调用bgsave来触发持久化。rdb持久化的优点是文件小，恢复快。缺点是实时性较差，最后一次快照之后的数据将丢失。</li>\n<li>AOF持久化：开启了aof持久化后，redis将把每一条改变数据的操作追加到日志文件中。这样的缺点是aof文件会不断增大，可以通过日志重写来解决，日志重写的过程将当前数据直接生成新的命令写入到新的aof文件中，合并和简化命令。</li>\n<li>混合持久化：开启混合持久化后，aof重写时将当前数据以rdb格式写入到文件，在此过程中新的变化将以aof格式写入，恢复时先将重写rdb内容，再执行aof的内容。</li>\n</ul>\n<h2 id=\"了解redis的事务吗？\"><a href=\"#了解redis的事务吗？\" class=\"headerlink\" title=\"了解redis的事务吗？\"></a>了解redis的事务吗？</h2><p>redis事务通过MULTI、EXEC、DISCARD、WATCH来实现。只有在将命令添加进队列时发现语法错误才会导致EXEC命令报错。语法正确的指令即使是执行时出错，redis也会执行其他命令。</p>\n<ul>\n<li>MULTI:开启一个事务，之后可以一条条输入想要执行的命令添加到队列中</li>\n<li>EXEC:执行在MULTI之后队列中添加的所有命令</li>\n<li>DISCARD:回滚，取消执行MULTI开启的事务</li>\n<li>WATCH:监控一个或多个key，当key发生变化时，事务将不会被执行。提供了CAS的功能，在MULTI开始之前，监控key，EXEC时判断key是否修改过。</li>\n</ul>\n<h2 id=\"说说缓存穿透和缓存雪崩\"><a href=\"#说说缓存穿透和缓存雪崩\" class=\"headerlink\" title=\"说说缓存穿透和缓存雪崩\"></a>说说缓存穿透和缓存雪崩</h2><ul>\n<li><p>缓存穿透：用户请求的数据不在数据库中，自然也不在缓存中，此时每次请求该key，总是无法在缓存中找到，也无法在数据库中找到。因此每次都会访问数据库。这种现象称为缓存穿透。</p>\n<p> <strong>解决方法</strong>：1. 为该key设置null值，但是设置较短的过期时间，避免当数据存在时却在缓存中获取到空值。2. 使用布隆过滤器，将所有可能存在的数据哈希到一个bitmap中，不存在的数据一定会被bitmap拦截。</p>\n</li>\n<li><p>缓存雪崩：大量的key在同一时间失效，导致请求全部落在数据库。</p>\n<p>   <strong>解决办法</strong>：1. 预防：错开过期时间 2. 应对：限流以保证数据库不会挂掉</p>\n</li>\n</ul>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">缓存击穿</div></div><div class=\"fold\">\n<p>一个热点数据在失效瞬间，仍然有大量请求来获取，此时缓存失效，请求都落在数据库上。</p>\n<p><strong>解决方法</strong>：1. 热点数据永不过期 2. 使用互斥锁：在请求时先查缓存，有则返回，否则尝试获取锁，成功之后查询数据库并更新缓存然后释放锁，获取锁失败说明已经有线程在查数据库准备更新缓存，因此可以通过自旋之后重试查询缓存。</p>\n\n</div></div>\n\n\n<details>\n<summary>布隆过滤器</summary>\n单个hash函数可能出现不同数据hash值相同的情况，因此通过采用k个相互独立的hash函数解决冲突，将所有可能存在的数据hash到一个bitmap中。\n</details>\n\n<h2 id=\"如何解决并发竞争key问题？\"><a href=\"#如何解决并发竞争key问题？\" class=\"headerlink\" title=\"如何解决并发竞争key问题？\"></a>如何解决并发竞争key问题？</h2><p>多个客户端对同一个key做set操作。<br>解决方案：</p>\n<ol>\n<li>乐观锁：通过watch可以方便的实现乐观锁，watch监听的key在事务期间发生变化，事务将会回滚</li>\n<li>时间戳：在set key时加入时间戳，通过比较key的时间戳来确定是否继续执行set操作</li>\n<li>消息队列：将并发的操作加入到消息队列中，串行化执行</li>\n<li>分布式锁：客户端在执行操作之前需要先获取分布式锁</li>\n</ol>\n<h3 id=\"分布式锁的实现\"><a href=\"#分布式锁的实现\" class=\"headerlink\" title=\"分布式锁的实现\"></a>分布式锁的实现</h3><blockquote>\n<p>分布式锁是控制分布式系统之间同步访问共享资源的方式。在分布式系统中，多个系统共享一个资源，使用分布式锁来保证数据一致性</p>\n</blockquote>\n<h4 id=\"单实例\"><a href=\"#单实例\" class=\"headerlink\" title=\"单实例\"></a>单实例</h4><div class=\"note info\"><p>使用set lock_key random_value nx px n完成加锁（一次原子性的setnx+expire），解锁时先get根据random_value判断是否是锁的拥有者，再进行del。为了保证原子性，使用lua脚本.</p></div>\n\n<div class=\"note info\"><p>使用redisson实现，方法1的实现锁不具有可重入性。redisson加解锁过程如下：</p>\n<ol>\n<li>加锁：通过tryAcquire来获取锁，如果返回的ttl为空表示加锁成功。加锁失败则会订阅该锁的channel，等待锁被释放的消息，再重新获取锁。tryAcquire中使用lua脚本来加锁，锁使用hash结构来实现。hexists判断锁是否存在，不存在则hset加锁成功，存在则判断是否是当前线程的锁，是则hincrby将count+1（可重入锁），否则返回锁的过期时间。</li>\n<li>解锁：同样使用lua脚本。先判断锁是否存在，不存在则publish发布释放锁的消息，解锁成功。锁存在则判断是否是当前线程的锁，如果是通过hincrby将count-1，当count为0，将del锁并publish释放锁的消息，如果不是则抛出异常。</li>\n</ol></div>\n\n<h4 id=\"多实例\"><a href=\"#多实例\" class=\"headerlink\" title=\"多实例\"></a>多实例</h4><div class=\"note info\"><p>redlock算法：根据<a href=\"http://redis.cn/topics/distlock.html/\" target=\"_blank\" rel=\"noopener\">redis官网</a>描述总结。假定有5个redis实例，且相互独立，没有主从关系（原因是防止master节点没来得及把新set的锁复制到slave上）。</p>\n<ol>\n<li>尝试向五个实例获取锁</li>\n<li>超过获取锁的限制时间则跳到下一个实例</li>\n<li>超过半数（这里是3个）成功加锁并且消耗的总时间小于锁的过期时间则加锁成功</li>\n<li>加锁失败/释放锁，将向<strong>所有实例</strong>发出解锁请求。因为可能存在某个节点set成功但是由于网络问题客户端没有接收到其响应，因此需要向所有节点发出解锁请求</li>\n<li>redlock采用<strong>延时重启</strong>来解决故障重启后带来的安全性问题：A B C三个节点，客户端1请求加锁在A B上获得成功，1获取锁。然后B宕机重启，由于持久化策略等问题，导致B上的锁没有被恢复，此时客户端2请求相同的锁，在BC上获取成功，这样客户端1和2就持有了相同的锁。</li>\n</ol></div>\n\n<div class=\"note info\"><p>zookeeper：客户端每次请求一把锁，就在zookeeper对应节点目录下创建一个有序节点，只需要比较节点的顺序就可以判断是否成功获取锁。</p></div>\n\n<h2 id=\"redis单点-单机会有什么问题-挂掉怎么办？\"><a href=\"#redis单点-单机会有什么问题-挂掉怎么办？\" class=\"headerlink\" title=\"redis单点/单机会有什么问题/挂掉怎么办？\"></a>redis单点/单机会有什么问题/挂掉怎么办？</h2><p>为了避免redis单机挂掉的问题，我们可以搭建redis集群来保证redis服务的高可用。redis集群有以下三种模式：</p>\n<ol>\n<li><p>主从模式：实现读写分离，主节点的数据通过全量/增量同步发送到从节点上</p>\n</li>\n<li><p>哨兵模式：主从模式升级版，哨兵监听主节点的状态，发现宕机后选出新的主节点</p>\n</li>\n<li><p>集群模式：一个redis cluster由多个redis节点组组成，每个节点组内由主从节点，负责数据的一个/多个分片-slot。</p>\n</li>\n</ol>\n<div class=\"note info\"><p><strong>配置的一致性</strong>：集群中的每个节点都保存了集群的配置信息，通过一个全局的版本号epoch来保证信息的一致。各节点之间通过频繁的ping/pong消息携带的gossip部分更新自己对集群的认识。当某个节点率先感知了集群的变化后，自增自身的epoch并将其通过ping/pong消息扩散出去，其他节点发现接收到的epoch＞自身于是更新自身关于集群的信息。</p>\n<p><strong>数据分片</strong>：cluster中节点组之间负责的数据互相独立，客户端需要通过一致性哈希算法将key映射到0-16383个slot中的一个上，找到对应的redis节点。当请求的key不在节点上（发生了数据迁移），会返回moved/ask消息告知客户端.</p>\n<p><strong>Failover保证高可用</strong>：故障发现、故障确认、主备切换机制</p>\n<ol>\n<li><p>故障发现：各节点在进行ping/pong交换信息时，如果一个节点A的ping消息超时没有收到对端B的pong回复，则会在自身集群信息中将该节点状态设置为pfail，并通过和其他节点的ping/pong将此信息传递到整个集群。</p>\n</li>\n<li><p>故障确认：节点A在1之后，如果接收到其他节点的gossip消息中B也为pfail状态，则会将B的状态升级为fail，确认故障，然后发起slave选举流程。</p>\n</li>\n<li><p>slave选举：A作为B的salve在确认B为故障节点后，发起竞选：将自己的epoch自增并发送FAILOVER_AUTH_REQUEST到其他的master节点，如果master未收到过FAILOVER_AUTH_REQUEST(收到时的自身epoch小于FAILOVER_AUTH_REQUEST中的epoch)，则回复同意，否则拒绝。当A收到超过半数的master同意之后，将替代B称为master节点，更新自己的epoch，通过配置一致性完成集群结构的更新。当B回复正常后，通过与其他节点的gossip消息可以得知新的master节点为A，自己将会成为A的slave节点。</p>\n</li>\n</ol></div>\n\n<details><summary>数据迁移</summary>\n    当加入新的master节点/ 旧的节点组下线/负载不均衡需要调整时，会发生数据迁移，迁移过程：<br/>\n    1. 设置slot原所在节点A状态为migrating,slot新节点B状态为importing.<br/>\n    2. 针对A上的slot的所有key，分别发送migrate命令将数据迁移到B.<br/>\n    migrating的A：如果请求的key尚未迁出则正常提供服务；如果已经迁出则使用ask回复让客户端跳转到B.<br/>\n    importing的B：如果请求不是由ask跳转的则通过moved让客户端跳转到A上.<br/>\n    这样的跳转控制可以让同一个key操作迁移之前在原节点执行，迁移之后在新节点执行，避免冲突。迁移完成之后，通过配置的一致性让整个集群更新配置。\n</details>\n\n<details><summary>moved和ask</summary>moved会更新client的路由缓存，即moved之后对相同的key操作会直接到新节点上，ask操作只是单次的，之后相同的key还是回到原来的节点上</details>\n\n<h2 id=\"如何保证缓存和数据库的一致性？\"><a href=\"#如何保证缓存和数据库的一致性？\" class=\"headerlink\" title=\"如何保证缓存和数据库的一致性？\"></a>如何保证缓存和数据库的一致性？</h2><p>如果要求数据库和缓存的实时一致性，那么只能串行化地执行读写请求。一般来说允许缓存和数据库出现短暂的不一致。最经典的方式是先更新数据库，再删除缓存。读请求先查缓存，缓存没有则查询数据库，将查询结果放入缓存中，返回响应。更新时，先更新数据库，再删除缓存。</p>\n<h3 id=\"为什么是删除缓存，而不是更新缓存？\"><a href=\"#为什么是删除缓存，而不是更新缓存？\" class=\"headerlink\" title=\"为什么是删除缓存，而不是更新缓存？\"></a>为什么是删除缓存，而不是更新缓存？</h3><p>在复杂一点的缓存场景中，缓存中的数据并不是简单的从数据库中直接获取。存入缓存的数据可能需要进行多表查询并进行计算得到。所以更新缓存的成本是比较高的。除此之外，缓存的数据如果来自一张频繁更新的表，但是缓存却较少的被访问，也会造成资源的浪费。因此采用删除缓存，是一种懒加载的思想，等到需要的时候发现缓存中没有再查询数据库将结果放入缓存。</p>\n<h3 id=\"先更新数据库再删除缓存就一定能保证一致性吗？\"><a href=\"#先更新数据库再删除缓存就一定能保证一致性吗？\" class=\"headerlink\" title=\"先更新数据库再删除缓存就一定能保证一致性吗？\"></a>先更新数据库再删除缓存就一定能保证一致性吗？</h3><p>不一定，在更新完数据库之后，如果删除缓存失败，此时缓存中是旧的数据，而数据库是新的数据，出现了不一致。解决方法是：先删除缓存，再更新数据库。如果更新数据库失败了，再次请求则会去读取旧的数据，不会产生数据不一致。</p>\n<h3 id=\"这样就没问题了吗？\"><a href=\"#这样就没问题了吗？\" class=\"headerlink\" title=\"这样就没问题了吗？\"></a>这样就没问题了吗？</h3><p>如果在并发量较低的情况下，一般不会出现问题。但是当并发量较大，对一个数据并发读写就可能出现：如果在删除完缓存之后，尚未完成更新，此时另一个请求到来，发现没缓存，于是查数据库，存入缓存，并返回结果。之后数据库完成了更新，此时数据库和缓存再次出现不一致。<strong>解决方案</strong>：串行化。一个更新数据的操作，“删除缓存+更新数据库”，将其路由到一个jvm的队列中。读取数据的操作，如果发现缓存中没有数据，则将“读取数据+更新缓存”的操作也放入一个jvm的工作队列中。一个工作线程对应一个队列，线程从队列中获取操作并执行，这样，更新数据的操作将顺序执行删除缓存，然后更新数据库，在数据库未更新完成之前，如果有读取数据的请求，发现缓存中没有数据，将进入工作队列中，等待前一个更新操作完成之后，再执行“读取数据+更新缓存”的操作，保证了数据的一致性。</p>\n","site":{"data":{}},"excerpt":"<p>","more":"<h2 id=\"为什么要使用缓存？\"><a href=\"#为什么要使用缓存？\" class=\"headerlink\" title=\"为什么要使用缓存？\"></a>为什么要使用缓存？</h2><ol>\n<li><p>高性能</p>\n<p>假设用户第一次访问数据库获取数据，这个过程是比较慢的，因为是从硬盘读取，同时如果需要获取的数据本身查询过程十分耗时，那么我们将第一次获取到的结果直接放在缓存中，下一次访问直接在缓存中获取即可，操作缓存就是操作内存，速度更块。</p>\n</li>\n<li><p>高并发</p>\n<p>内存能够承受的请求是远远大于直接访问数据库的，所以我们将数据库的部分数据转移到缓存中，可以让部分请求直接访问内存而不经过数据库。</p>\n</li>\n</ol>\n<details>\n<summary>数据库有缓存吗？</summary>\n有，以mysql为例，它会将查询sql和结果以key-value的形式缓存起来，再遇到hash值相同的sql语句就不再经过编译解析优化和查询，直接返回结果。<br/>\n缺点：\n    通过hash，意味着语义相同的可能有不同的表达，这样也无法命中缓存。对于频繁更新的表，缓存总是难以命中，但还是需要耗费资源维护缓存。\n</details>\n\n<h2 id=\"选择Redis的原因？\"><a href=\"#选择Redis的原因？\" class=\"headerlink\" title=\"选择Redis的原因？\"></a>选择Redis的原因？</h2><h3 id=\"本地缓存和分布式缓存\"><a href=\"#本地缓存和分布式缓存\" class=\"headerlink\" title=\"本地缓存和分布式缓存\"></a>本地缓存和分布式缓存</h3><ol>\n<li><p>Java中使用map/guaua来做本地缓存，直接将数据存在jvm内存中，与jvm拥有相同的生命周期。其优点是轻量且快速。但在多实例的情况下，每个实例都需要保存自己的一份缓存，不具有一致性</p>\n</li>\n<li><p>Redis和Memcache实现的是分布式缓存，在多实例下，共用一份缓存，具有一致性。因此需要保证服务的高可用，架构较复杂。</p>\n</li>\n</ol>\n<h3 id=\"redis和memcache\"><a href=\"#redis和memcache\" class=\"headerlink\" title=\"redis和memcache\"></a>redis和memcache</h3><ol>\n<li>持久化：memcache不支持持久化，缓存数据只存在在内存中，断电后数据就丢失了。redis提供了持久化机制，可以将数据保存到磁盘中，重启后通过日志文件可以恢复数据。</li>\n<li>数据类型：memcache只支持简单的string类型，redis除了string之外，还支持列表，哈希，集合等多种数据结构。</li>\n<li>分布式：memcache不支持分布式，只能通过多个客户端使用一致性哈希来向集群中存储数据，这种方式在查询和存储时都需要计算一次。redis原生支持集群模式。</li>\n<li>线程模型：memcache是多线程的，redis默认是单线程的，减少了线程切换的消耗</li>\n</ol>\n<h2 id=\"说说Redis的线程模型？\"><a href=\"#说说Redis的线程模型？\" class=\"headerlink\" title=\"说说Redis的线程模型？\"></a>说说Redis的线程模型？</h2><p>redis内部采用文件事件处理器，它是单线程的，通过I/O多路复用机制，监听多个socket，根据socket上的事件选择对应的事件处理器来处理。<br>文件事件处理器包括四个部分：socket、I/O多路复用程序、事件分派器、事件处理器（包括连接应答处理器，命令请求处理器，命令回复处理器）</p>\n<p>redis基于reactor模式开发出自己的I/O多路复用程序，多个socket同时产生的事件将被加入到队列中，事件分派器从队列中取出事件，根据事件类型分派给不同的事件处理器。</p>\n<details><summary>事件的调度和执行</summary>\nredis服务器是一个事件驱动程序，有文件事件和时间事件。服务器需要一直监听socket以得到到达的文件事件，但是由于需要执行时间事件，不能一直监听，否则时间事件不能在预期时间内执行。因此，redis通过计算距离最近的时间事件，根据所剩的时间，监听文件事件，在剩余时间结束后，处理该时间段内的文件事件，同时处理该时间的时间事件。不断重复直到服务器关闭。\n</details>\n\n<h2 id=\"你了解Redis的数据类型吗？应用场景是什么？\"><a href=\"#你了解Redis的数据类型吗？应用场景是什么？\" class=\"headerlink\" title=\"你了解Redis的数据类型吗？应用场景是什么？\"></a>你了解Redis的数据类型吗？应用场景是什么？</h2><ol>\n<li><p>String字符串</p>\n<p>存储：字符串，整型，浮点型</p>\n<p>命令：set get incr decr</p>\n<p>应用场景：key-value存储，计数器</p>\n<p>底层实现：简单可变字符串，使用char数组保存数据，并有长度len，空闲长度free。记录len和free属性可以实现空间预分配和惰性释放。通过len减少连续增长字符串时所需的空间重分配的操作次数，因为每次增长字符串时将多分配len字节的未使用空间。通过free优化字符串的缩短操作，不需要在每次缩短时立即释放未使用的空间，通过free记录下来等待将来使用</p>\n</li>\n<li><p>List列表</p>\n<p>存储：列表</p>\n<p>命令：lpop lpush rpop rpush lrange(实现分页查询)</p>\n<p>应用场景：关注列表/粉丝列表/消息列表</p>\n<p>底层实现：结构体包含链表头节点、尾节点、长度、释放/复制/比较节点函数。节点数据结构包含前置/后置指针、任意类型的值。</p>\n</li>\n<li><p>Set集合</p>\n<p>存储：集合，去重</p>\n<p>命令：sadd spop smembers sunion</p>\n<p>应用场景：由于有方便的求交集差集并集的操作，可以实现共同关注等</p>\n<p>底层实现：使用整形集合或字典实现。</p>\n<p>​    <strong>整型集合</strong>：当集合只包含int类型时，使用intset存放，intset数据结构中包含编码格式、数组、长度。编码格式规定了能存储的数据范围，比如int_16t表示存储-32768-32767（1位符号位15位数值位），超出范围则会自动升级到32位。</p>\n<p>​    <strong>字典</strong>：Dict是最上层的结构体，包含两个distht哈希表（一个用于存放数据一个用于rehash）、rehashidx、类型特定函数（键值复制释放、哈希函数、键比较函数）。distht哈希表包含distEntry数组、表的大小、已用大小、计算索引的sizemark。distEntry结构体是数组中存放的数据类型，包含key、value、next指针。</p>\n</li>\n<li><p>Hash映射表</p>\n<p>存储：包含键值对的无序散列表</p>\n<p>命令：hset hget hexists hlen</p>\n<p>应用场景：存储结构化的对象 非常方便的修改某个属性</p>\n<p>底层实现：使用字典或压缩列表实现。</p>\n<p>​    <strong>字典</strong>。</p>\n<p>​    <strong>压缩列表</strong>：结构体中包含所占字节数zlbytes、尾部到起点的字节数zltail、节点数zllen、列表末端zlend、节点数组entry。节点结构体包含的属性有前一个结点的长度previous_length、数据类型encoding、数据内容content。存放hash对象时，键一个entry值一个entry</p>\n</li>\n<li><p>SortedSet有序集合</p>\n<p>存储：跟set相比，增加了权重参数，根据参数来排序</p>\n<p>命令：zadd zrange zrem zrank zcount</p>\n<p>应用场景：由于是排序的，可以实现排行榜等</p>\n<p>底层实现：使用跳跃表和字典来实现。<strong>跳跃表</strong>：基于链表+索引实现，解决了数组插入时的O(n),链表查询时的O(n)。由多层链表组成，每一层都是有序链表，上一层的链表是下一层链表的子集。每一个链表结点都有两个指针，一个指向同层的下一个结点，另一个指向下一层的同一个链表节点。最上层结构体是zskiplist，包含头节点和尾节点skiplistNode、节点数量length、最大层数level。</p>\n</li>\n</ol>\n<h2 id=\"Redis中Key的过期时间是怎么实现的？\"><a href=\"#Redis中Key的过期时间是怎么实现的？\" class=\"headerlink\" title=\"Redis中Key的过期时间是怎么实现的？\"></a>Redis中Key的过期时间是怎么实现的？</h2><p>通过set key的expiretime来设置key的存活时间，过期自动删除。redis中有两种key的过期机制。</p>\n<ul>\n<li>定期删除：默认每100ms<strong>随机抽取</strong>内存中的key判断是否过期决定是否删除。可以在配置文件中设置间隔时间。定期删除每次不会检查所有key，因为这样会十分耗时，因此采用随机选择部分key进行判断。</li>\n<li>惰性删除：因为定期删除可能遗漏了部分key，惰性删除则在key<strong>再次被请求</strong>时，判断是否过期决定是否删除。</li>\n</ul>\n<p>但是在这两种过期机制下，还是会存在key到期也没被删除，定期删除没有删掉，惰性删除因为没有再次请求也没有生效，此时可能内存占用会越来越高。redis通过设置<strong>内存淘汰策略</strong>解决这一问题。</p>\n<h3 id=\"内存淘汰策略\"><a href=\"#内存淘汰策略\" class=\"headerlink\" title=\"内存淘汰策略\"></a>内存淘汰策略</h3><p>当内存超过了设置的最大内存限制，就会执行内存淘汰策略。</p>\n<ol>\n<li>allkeys-lru:从所有数据集中选择最近最久未使用的数据淘汰</li>\n<li>allkeys-lfu:从所有数据集中选择访问频率最低的数据淘汰</li>\n<li>allkeys-random:从所有数据集中随机选择数据淘汰</li>\n<li>no-eviction：不淘汰，新写入时报错</li>\n<li>volatile-lru:从已设置过期时间的数据集中选择最近最久未使用的数据淘汰</li>\n<li>volatile-lfu:从已设置过期时间的数据集中选择访问频率最低的数据淘汰</li>\n<li>volatile-ttl:从已设置过期时间的数据集中选择将要过期的数据淘汰</li>\n<li>volatile-random:从已设置过期时间的数据集中随机选择数据淘汰</li>\n</ol>\n<p>lru：redis中的lru不使用常规的维护队列的方式，通过全局的时钟和key中保存的时钟，选择最久未被使用的淘汰。一般场景下，缓存中存放热点数据，为了提高缓存命中率，使用lru策略<br>lfu：将lru中的24位时钟分为两部分，前16位记录时钟，后8位记录访问频率。访问频率并不是简单的线性增长，而是设置参数lfu-log-factor和lfu-decay-time通过公式来计算实现。</p>\n<p><em>当数据集中没有设置过期时间的key，前四种策略将由于不满足先决条件而和no-eviction相同</em></p>\n<h2 id=\"redis断电之后数据如何恢复？\"><a href=\"#redis断电之后数据如何恢复？\" class=\"headerlink\" title=\"redis断电之后数据如何恢复？\"></a>redis断电之后数据如何恢复？</h2><p>通过redis的持久化机制，在重启之后可以恢复数据。redis提供了以下三种持久化机制。</p>\n<ul>\n<li>RDB快照持久化：将某一时刻的数据保存到文件中，通过配置文件可以设置在n秒内如果数据发生m次变化则触发bgsave创建快照，备份当前数据。也可以手动调用bgsave来触发持久化。rdb持久化的优点是文件小，恢复快。缺点是实时性较差，最后一次快照之后的数据将丢失。</li>\n<li>AOF持久化：开启了aof持久化后，redis将把每一条改变数据的操作追加到日志文件中。这样的缺点是aof文件会不断增大，可以通过日志重写来解决，日志重写的过程将当前数据直接生成新的命令写入到新的aof文件中，合并和简化命令。</li>\n<li>混合持久化：开启混合持久化后，aof重写时将当前数据以rdb格式写入到文件，在此过程中新的变化将以aof格式写入，恢复时先将重写rdb内容，再执行aof的内容。</li>\n</ul>\n<h2 id=\"了解redis的事务吗？\"><a href=\"#了解redis的事务吗？\" class=\"headerlink\" title=\"了解redis的事务吗？\"></a>了解redis的事务吗？</h2><p>redis事务通过MULTI、EXEC、DISCARD、WATCH来实现。只有在将命令添加进队列时发现语法错误才会导致EXEC命令报错。语法正确的指令即使是执行时出错，redis也会执行其他命令。</p>\n<ul>\n<li>MULTI:开启一个事务，之后可以一条条输入想要执行的命令添加到队列中</li>\n<li>EXEC:执行在MULTI之后队列中添加的所有命令</li>\n<li>DISCARD:回滚，取消执行MULTI开启的事务</li>\n<li>WATCH:监控一个或多个key，当key发生变化时，事务将不会被执行。提供了CAS的功能，在MULTI开始之前，监控key，EXEC时判断key是否修改过。</li>\n</ul>\n<h2 id=\"说说缓存穿透和缓存雪崩\"><a href=\"#说说缓存穿透和缓存雪崩\" class=\"headerlink\" title=\"说说缓存穿透和缓存雪崩\"></a>说说缓存穿透和缓存雪崩</h2><ul>\n<li><p>缓存穿透：用户请求的数据不在数据库中，自然也不在缓存中，此时每次请求该key，总是无法在缓存中找到，也无法在数据库中找到。因此每次都会访问数据库。这种现象称为缓存穿透。</p>\n<p> <strong>解决方法</strong>：1. 为该key设置null值，但是设置较短的过期时间，避免当数据存在时却在缓存中获取到空值。2. 使用布隆过滤器，将所有可能存在的数据哈希到一个bitmap中，不存在的数据一定会被bitmap拦截。</p>\n</li>\n<li><p>缓存雪崩：大量的key在同一时间失效，导致请求全部落在数据库。</p>\n<p>   <strong>解决办法</strong>：1. 预防：错开过期时间 2. 应对：限流以保证数据库不会挂掉</p>\n</li>\n</ul>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">缓存击穿</div></div><div class=\"fold\">\n<p>一个热点数据在失效瞬间，仍然有大量请求来获取，此时缓存失效，请求都落在数据库上。</p>\n<p><strong>解决方法</strong>：1. 热点数据永不过期 2. 使用互斥锁：在请求时先查缓存，有则返回，否则尝试获取锁，成功之后查询数据库并更新缓存然后释放锁，获取锁失败说明已经有线程在查数据库准备更新缓存，因此可以通过自旋之后重试查询缓存。</p>\n\n</div></div>\n\n\n<details>\n<summary>布隆过滤器</summary>\n单个hash函数可能出现不同数据hash值相同的情况，因此通过采用k个相互独立的hash函数解决冲突，将所有可能存在的数据hash到一个bitmap中。\n</details>\n\n<h2 id=\"如何解决并发竞争key问题？\"><a href=\"#如何解决并发竞争key问题？\" class=\"headerlink\" title=\"如何解决并发竞争key问题？\"></a>如何解决并发竞争key问题？</h2><p>多个客户端对同一个key做set操作。<br>解决方案：</p>\n<ol>\n<li>乐观锁：通过watch可以方便的实现乐观锁，watch监听的key在事务期间发生变化，事务将会回滚</li>\n<li>时间戳：在set key时加入时间戳，通过比较key的时间戳来确定是否继续执行set操作</li>\n<li>消息队列：将并发的操作加入到消息队列中，串行化执行</li>\n<li>分布式锁：客户端在执行操作之前需要先获取分布式锁</li>\n</ol>\n<h3 id=\"分布式锁的实现\"><a href=\"#分布式锁的实现\" class=\"headerlink\" title=\"分布式锁的实现\"></a>分布式锁的实现</h3><blockquote>\n<p>分布式锁是控制分布式系统之间同步访问共享资源的方式。在分布式系统中，多个系统共享一个资源，使用分布式锁来保证数据一致性</p>\n</blockquote>\n<h4 id=\"单实例\"><a href=\"#单实例\" class=\"headerlink\" title=\"单实例\"></a>单实例</h4><div class=\"note info\"><p>使用set lock_key random_value nx px n完成加锁（一次原子性的setnx+expire），解锁时先get根据random_value判断是否是锁的拥有者，再进行del。为了保证原子性，使用lua脚本.</p></div>\n\n<div class=\"note info\"><p>使用redisson实现，方法1的实现锁不具有可重入性。redisson加解锁过程如下：</p>\n<ol>\n<li>加锁：通过tryAcquire来获取锁，如果返回的ttl为空表示加锁成功。加锁失败则会订阅该锁的channel，等待锁被释放的消息，再重新获取锁。tryAcquire中使用lua脚本来加锁，锁使用hash结构来实现。hexists判断锁是否存在，不存在则hset加锁成功，存在则判断是否是当前线程的锁，是则hincrby将count+1（可重入锁），否则返回锁的过期时间。</li>\n<li>解锁：同样使用lua脚本。先判断锁是否存在，不存在则publish发布释放锁的消息，解锁成功。锁存在则判断是否是当前线程的锁，如果是通过hincrby将count-1，当count为0，将del锁并publish释放锁的消息，如果不是则抛出异常。</li>\n</ol></div>\n\n<h4 id=\"多实例\"><a href=\"#多实例\" class=\"headerlink\" title=\"多实例\"></a>多实例</h4><div class=\"note info\"><p>redlock算法：根据<a href=\"http://redis.cn/topics/distlock.html/\" target=\"_blank\" rel=\"noopener\">redis官网</a>描述总结。假定有5个redis实例，且相互独立，没有主从关系（原因是防止master节点没来得及把新set的锁复制到slave上）。</p>\n<ol>\n<li>尝试向五个实例获取锁</li>\n<li>超过获取锁的限制时间则跳到下一个实例</li>\n<li>超过半数（这里是3个）成功加锁并且消耗的总时间小于锁的过期时间则加锁成功</li>\n<li>加锁失败/释放锁，将向<strong>所有实例</strong>发出解锁请求。因为可能存在某个节点set成功但是由于网络问题客户端没有接收到其响应，因此需要向所有节点发出解锁请求</li>\n<li>redlock采用<strong>延时重启</strong>来解决故障重启后带来的安全性问题：A B C三个节点，客户端1请求加锁在A B上获得成功，1获取锁。然后B宕机重启，由于持久化策略等问题，导致B上的锁没有被恢复，此时客户端2请求相同的锁，在BC上获取成功，这样客户端1和2就持有了相同的锁。</li>\n</ol></div>\n\n<div class=\"note info\"><p>zookeeper：客户端每次请求一把锁，就在zookeeper对应节点目录下创建一个有序节点，只需要比较节点的顺序就可以判断是否成功获取锁。</p></div>\n\n<h2 id=\"redis单点-单机会有什么问题-挂掉怎么办？\"><a href=\"#redis单点-单机会有什么问题-挂掉怎么办？\" class=\"headerlink\" title=\"redis单点/单机会有什么问题/挂掉怎么办？\"></a>redis单点/单机会有什么问题/挂掉怎么办？</h2><p>为了避免redis单机挂掉的问题，我们可以搭建redis集群来保证redis服务的高可用。redis集群有以下三种模式：</p>\n<ol>\n<li><p>主从模式：实现读写分离，主节点的数据通过全量/增量同步发送到从节点上</p>\n</li>\n<li><p>哨兵模式：主从模式升级版，哨兵监听主节点的状态，发现宕机后选出新的主节点</p>\n</li>\n<li><p>集群模式：一个redis cluster由多个redis节点组组成，每个节点组内由主从节点，负责数据的一个/多个分片-slot。</p>\n</li>\n</ol>\n<div class=\"note info\"><p><strong>配置的一致性</strong>：集群中的每个节点都保存了集群的配置信息，通过一个全局的版本号epoch来保证信息的一致。各节点之间通过频繁的ping/pong消息携带的gossip部分更新自己对集群的认识。当某个节点率先感知了集群的变化后，自增自身的epoch并将其通过ping/pong消息扩散出去，其他节点发现接收到的epoch＞自身于是更新自身关于集群的信息。</p>\n<p><strong>数据分片</strong>：cluster中节点组之间负责的数据互相独立，客户端需要通过一致性哈希算法将key映射到0-16383个slot中的一个上，找到对应的redis节点。当请求的key不在节点上（发生了数据迁移），会返回moved/ask消息告知客户端.</p>\n<p><strong>Failover保证高可用</strong>：故障发现、故障确认、主备切换机制</p>\n<ol>\n<li><p>故障发现：各节点在进行ping/pong交换信息时，如果一个节点A的ping消息超时没有收到对端B的pong回复，则会在自身集群信息中将该节点状态设置为pfail，并通过和其他节点的ping/pong将此信息传递到整个集群。</p>\n</li>\n<li><p>故障确认：节点A在1之后，如果接收到其他节点的gossip消息中B也为pfail状态，则会将B的状态升级为fail，确认故障，然后发起slave选举流程。</p>\n</li>\n<li><p>slave选举：A作为B的salve在确认B为故障节点后，发起竞选：将自己的epoch自增并发送FAILOVER_AUTH_REQUEST到其他的master节点，如果master未收到过FAILOVER_AUTH_REQUEST(收到时的自身epoch小于FAILOVER_AUTH_REQUEST中的epoch)，则回复同意，否则拒绝。当A收到超过半数的master同意之后，将替代B称为master节点，更新自己的epoch，通过配置一致性完成集群结构的更新。当B回复正常后，通过与其他节点的gossip消息可以得知新的master节点为A，自己将会成为A的slave节点。</p>\n</li>\n</ol></div>\n\n<details><summary>数据迁移</summary>\n    当加入新的master节点/ 旧的节点组下线/负载不均衡需要调整时，会发生数据迁移，迁移过程：<br/>\n    1. 设置slot原所在节点A状态为migrating,slot新节点B状态为importing.<br/>\n    2. 针对A上的slot的所有key，分别发送migrate命令将数据迁移到B.<br/>\n    migrating的A：如果请求的key尚未迁出则正常提供服务；如果已经迁出则使用ask回复让客户端跳转到B.<br/>\n    importing的B：如果请求不是由ask跳转的则通过moved让客户端跳转到A上.<br/>\n    这样的跳转控制可以让同一个key操作迁移之前在原节点执行，迁移之后在新节点执行，避免冲突。迁移完成之后，通过配置的一致性让整个集群更新配置。\n</details>\n\n<details><summary>moved和ask</summary>moved会更新client的路由缓存，即moved之后对相同的key操作会直接到新节点上，ask操作只是单次的，之后相同的key还是回到原来的节点上</details>\n\n<h2 id=\"如何保证缓存和数据库的一致性？\"><a href=\"#如何保证缓存和数据库的一致性？\" class=\"headerlink\" title=\"如何保证缓存和数据库的一致性？\"></a>如何保证缓存和数据库的一致性？</h2><p>如果要求数据库和缓存的实时一致性，那么只能串行化地执行读写请求。一般来说允许缓存和数据库出现短暂的不一致。最经典的方式是先更新数据库，再删除缓存。读请求先查缓存，缓存没有则查询数据库，将查询结果放入缓存中，返回响应。更新时，先更新数据库，再删除缓存。</p>\n<h3 id=\"为什么是删除缓存，而不是更新缓存？\"><a href=\"#为什么是删除缓存，而不是更新缓存？\" class=\"headerlink\" title=\"为什么是删除缓存，而不是更新缓存？\"></a>为什么是删除缓存，而不是更新缓存？</h3><p>在复杂一点的缓存场景中，缓存中的数据并不是简单的从数据库中直接获取。存入缓存的数据可能需要进行多表查询并进行计算得到。所以更新缓存的成本是比较高的。除此之外，缓存的数据如果来自一张频繁更新的表，但是缓存却较少的被访问，也会造成资源的浪费。因此采用删除缓存，是一种懒加载的思想，等到需要的时候发现缓存中没有再查询数据库将结果放入缓存。</p>\n<h3 id=\"先更新数据库再删除缓存就一定能保证一致性吗？\"><a href=\"#先更新数据库再删除缓存就一定能保证一致性吗？\" class=\"headerlink\" title=\"先更新数据库再删除缓存就一定能保证一致性吗？\"></a>先更新数据库再删除缓存就一定能保证一致性吗？</h3><p>不一定，在更新完数据库之后，如果删除缓存失败，此时缓存中是旧的数据，而数据库是新的数据，出现了不一致。解决方法是：先删除缓存，再更新数据库。如果更新数据库失败了，再次请求则会去读取旧的数据，不会产生数据不一致。</p>\n<h3 id=\"这样就没问题了吗？\"><a href=\"#这样就没问题了吗？\" class=\"headerlink\" title=\"这样就没问题了吗？\"></a>这样就没问题了吗？</h3><p>如果在并发量较低的情况下，一般不会出现问题。但是当并发量较大，对一个数据并发读写就可能出现：如果在删除完缓存之后，尚未完成更新，此时另一个请求到来，发现没缓存，于是查数据库，存入缓存，并返回结果。之后数据库完成了更新，此时数据库和缓存再次出现不一致。<strong>解决方案</strong>：串行化。一个更新数据的操作，“删除缓存+更新数据库”，将其路由到一个jvm的队列中。读取数据的操作，如果发现缓存中没有数据，则将“读取数据+更新缓存”的操作也放入一个jvm的工作队列中。一个工作线程对应一个队列，线程从队列中获取操作并执行，这样，更新数据的操作将顺序执行删除缓存，然后更新数据库，在数据库未更新完成之前，如果有读取数据的请求，发现缓存中没有数据，将进入工作队列中，等待前一个更新操作完成之后，再执行“读取数据+更新缓存”的操作，保证了数据的一致性。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Aug 06 2020 09:17:12 GMT+0800 (中国标准时间)","title":"Redis面试问题","path":"posts/e745ac01.html","eyeCatchImage":null,"excerpt":"<p>","date":{"_isAMomentObject":true,"_i":"2020-04-28T13:56:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-04-28T13:56:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Java后端面试","tags":["Java后端面试","Redis","分布式锁"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":7900},{"title":"Spring家族面试问题","image":"https://gitee.com/jingshanccc/image/raw/master/image/20200722151317.png","abbrlink":"caab1d3c","date":"2020-07-16T14:14:00.000Z","_content":"\n<p></p>\n\n<!-- more -->\n\n## Spring IOC\n\n### IOC是什么？\n\nIOC即控制反转，将对象的创建工作交给容器来实现，所以需要创建一个容器并且它需要知道创建对象间的关系，在Spring中管理对象及其依赖关系就是通过IOC容器实现的。IOC的实现方式有**依赖注入**和**依赖查找**，依赖查找通过容器和API来主动查找，例如`applicationContext.getBean(\"name\");`，依赖注入是对象被动地接受依赖类，在容器实例化时将依赖注入给对象，Spring中除了初始化的Bean查找，组件及其依赖项都是用注入方式。\n\n### IOC容器的初始化过程是怎么样的\n\nSpring在启动时，其refresh方法完成了对容器的初始化以及Bean的创建\n\n1. prepareRefresh完成了设置上下文状态和时间，以及属性的验证\n2. obtainFreshBeanFactory初始化Bean工厂，销毁存在的并重新创建\n3. loadBeanDefinitions加载Bean定义，通过读取配置文件CONFIG_LOCATION_PARAM，解析xml文件，通过beanDefinitionRegistry将BeanDefinition存放到HashMap中\n4. prepareBeanFactory中为BeanFactory添加类加载器、表达式解析器、自动装配等配置\n5. postProcessBeanFactory中将BeanFactory的后置处理器注册到BeanFacotry上，之后在invokeBranFactoryPostProcessor中按优先级调用所有后置处理方法\n6. registerBeanPostProcessor注册Bean的后置处理器\n7. initMessageSource和initApplicationEventMulticaster负责初始化国际化组件和事件多播器\n8. onRefresh是为子类提供的由子类实现的逻辑，在这里调用\n9. registerListeners方法查找所有的监听器并注册到7中的广播器\n10. finishBeanFactoryInitialization初始化剩余的其他单例bean：先调用applyBeanPostProcessorsBeforeInitialization方法，执行每个BeanPostProcessor的postProcessBeforeInitialization，然后调用invokeInitMethods方法，执行bean的初始化方法，使用set设置属性，最后调用applyBeanPostProcessorsAfterInitialization方法，执行每个BeanPostProcessor的postProcessAfterInitialization方法。\n11. finishRefresh完成其他工作如清除缓存、发布事件等，IOC容器初始化结束\n\n![img](https://gitee.com/jingshanccc/image/raw/master/image/20200722143755.png)\n\n\n\n### 简述Bean的生命周期和作用范围\n\n首先是Spring对Bean进行实例化，将值和Bean的引用注入到其对应的属性中，如果实现了BeanNameAware接口，调用setBeanName方法，让Bean可以获取自己的ID/name，如果实现了BeanFactoryAware接口，调用setBeanFactory，让Bean可以获取配置自己的BeanFactory，拥有Spring容器的功能；将Bean实例传递给Bean的前置处理器的postProcessBeforeInitialization，调用Bean的初始化方法，如果是InitializingBean则先调用afterPropertiesSet方法（可以做一些属性验证和设置），再调用设置的init-method，然后调用后置处理器的postProcessAfterInitialization，之后在工程中使用Bean，在容器关闭之前，调用DisposableBean的destroy方法，如果Bean有自定义销毁方法也会被调用\n\n#### 什么是InitializingBean？\n\nSpring提供了两种初始化Bean的方法，一是实现InitializingBean接口，实现afterPropertiesSet方法；二是在配置文件中指定init-method；两种方法可以同时使用。\n\n{% fold 两种有什么区别？ %}\n\n实现InitializingBean接口是直接调用afterPropertiesSet方法，比通过反射调用init-method方法效率更高，但后者消除了对spring的依赖\n\n{% endfold %}\n\n可以通过scope指定Bean的作用范围，有以下5种类型：\n\n1. Singleton：单例的，每次容器返回的对象是同一个，在初始化IOC容器时完成创建\n2. Prototype：多例的，每次返回的是新创建的实例\n3. Request：仅作用于HttpRequest，每次Http请求创建一个实例\n4. Session：仅作用于HttpSession，不同的session使用不同的实例\n5. Global Session：所有的HttpSession使用同一个实例，仅用于Protlet容器\n\n### BeanFactory和FactoryBean、ApplicationContext的区别\n\nBeanFactory是一个Factory接口，用来管理Bean的IOC容器，对象工厂，BeanFactory 实例化后并不会自动实例化 Bean，只有当 Bean 被使用时才实例化与装配依赖关系，使用了**延迟加载**，适合多例模式；FactoryBean是一个通过写代码的方式用来自定义实例化bean的接口，传统方式xml/property注解方式可能需要大量的配置 通过实现FactoryBean来简化这个操作，在getObject方法中实现自定义的实例化逻辑；ApplicationContext是BeanFactory的子接口，做了扩展，使用**立即加载**，适合单例模式\n\n### 依赖注入的实现方式有哪些？在Spring中有哪些相关的注解？\n\n有构造方法注入、Setter注入、接口注入三种方式，由于构造方法无法被继承，因此Setter方法注入会更灵活一些，但是无法在对象构造完成后马上进入就绪状态。接口方式通过接口提供方法来注入依赖对象，要求实现接口，侵入性强。\n\n在Spring中，通过getBean方法获取Bean实例，该方法会调用doGetBean从IOC容器中获取Bean，在创建Bean的过程中会完成依赖注入，在populateBean方法中，注入过程通过setPropertyValues实现，将Bean对象实例设置到它所依赖的Bean对象属性上，BeanWrapperImpl以**JDK反射形式**，通过属性的**setter方法**为属性设置注入后的值。\n\n1. @Autowired：自动按类型注入，如果有多个匹配则按照指定Bean的id查找；可与@Qualifier匹配上下文的Bean\n2. @Resource：直接按照Bean的id注入，只能注入Bean类型\n3. @Value：用于注入基本数据类型和String类型\n\n\n\n## AOP是什么？\n\nAOP即面向切面编程，某个业务与具体对象无关，是一种通用的功能代码，在具体的时间点(Pointcut)需要被执行，业务功能代码和切面代码分开，合并成完整的业务(称为织入Weave)。常用场景包括权限认证、自动缓存、错误处理、日志、调试和事务等。\n\n有三种织入方式：\n\n1. 编译时织入：需要特殊的Java编译器，如AspectJ\n2. 类加载时织入：需要特殊的编译器，如AspectJ和AspectWerkz\n3. 运行时织入：通过动态代理的方式\n\n在Spring中使用AOP：导入依赖，创建切面`@Aspect`，定义切入点`@PointCut(execution(xxx))`方法，定义时机Advice`@Before,AfterReturning/Throwing等`，在方法内实现需要的逻辑。\n\nSpringAOP通过Bean的后置处理器将Bean包装成Proxy，调用时通过Proxy来调用，有两种实现方式，如果类实现了接口，则使用JDK动态代理，否则使用CGLib动态代理。\n\n### JDK动态代理\n\n被代理类需要实现含有业务方法的接口，代理类需要实现InvocationHandler invoke方法来调用具体的业务方法，最终通过Proxy.newInstance生成代理类，会调用ProxyGenerator的generate方法生成字节码，再用类加载器来装载生成的代理类。\n\n在Spring AOP中，生成的Proxy类拥有真实类实现的接口的所有方法，其实就是通过**实现相同的接口**，然后在对应的方法周围加入切面逻辑。从Proxy的字节码可以看到，声明了私有静态成员变量Method 01234...通过静态代码块**利用反射**来初始化各个方法。通过Proxy类的成员变量invocationHandler的invoke方法调用具体方法。invoke中在调用具体方法前后会有**切入**的逻辑。\n\n{% fold 展开代码 %}\n\n```java\n//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by Fernflower decompiler)\n//\n \nimport aop.UserService;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.UndeclaredThrowableException;\n \npublic final class $Proxy11 extends Proxy implements UserService {\n    private static Method m1;\n    private static Method m4;\n    private static Method m3;\n    private static Method m2;\n    private static Method m0;\n \n    public $Proxy11(InvocationHandler var1) throws  {\n        super(var1);\n    }\n \n    public final boolean equals(Object var1) throws  {\n        try {\n            return (Boolean)super.h.invoke(this, m1, new Object[]{var1});\n        } catch (RuntimeException | Error var3) {\n            throw var3;\n        } catch (Throwable var4) {\n            throw new UndeclaredThrowableException(var4);\n        }\n    }\n \n    public final void A() throws  {\n        try {\n            super.h.invoke(this, m4, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n \n    public final void B() throws  {\n        try {\n            super.h.invoke(this, m3, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n \n    public final String toString() throws  {\n        try {\n            return (String)super.h.invoke(this, m2, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n \n    public final int hashCode() throws  {\n        try {\n            return (Integer)super.h.invoke(this, m0, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n \n    static {\n        try {\n            m1 = Class.forName(\"java.lang.Object\").getMethod(\"equals\", Class.forName(\"java.lang.Object\"));\n            m4 = Class.forName(\"aop.UserService\").getMethod(\"A\");\n            m3 = Class.forName(\"aop.UserService\").getMethod(\"B\");\n            m2 = Class.forName(\"java.lang.Object\").getMethod(\"toString\");\n            m0 = Class.forName(\"java.lang.Object\").getMethod(\"hashCode\");\n        } catch (NoSuchMethodException var2) {\n            throw new NoSuchMethodError(var2.getMessage());\n        } catch (ClassNotFoundException var3) {\n            throw new NoClassDefFoundError(var3.getMessage());\n        }\n    }\n}\n```\n\n{% endfold %}\n\n### CGLIB动态代理\n\n以继承的方式动态生成目标类的代理，通过修改字节码(asm框架)的方式织入，**不需要接口**，因为cglib是利用**继承真实类通过super来调用真实类方法**，并加入新逻辑的方式来实现的。\n\n\n\n## Spring MVC有哪些核心组件？\n\nSpringMVC是一个基于MVC设计模型的请求驱动的轻量级WEB框架，将WEB应用架构划分为视图层View、处理器层Controller、持久层Model。\n\n1. DispatcherServlet：前端控制器，负责接受请求并转发到对应的处理组件\n2. Handler：处理器，完成具体业务逻辑，类似Servlet或Action\n3. HandlerInterceptor：拦截器，通过实现这个接口完成拦截处理\n4. HandlerExecutionChain：处理链，包含Handler和HandlerInterceptor。应用了[责任链模式](https://realmicah.xyz/posts/503970b4.html#讲讲责任链模式)\n5. HandlerAdapter：适配器，Handler执行处理业务方法之前，需要完成表单数据验证、数据类型转换、封装到JavaBean等操作，由Adapter完成，通过Adapter执行不同的Handler。应用了[适配器模式](https://realmicah.xyz/posts/503970b4.html#适配器模式了解吗？有什么应用？)\n6. ModelAndView：装在模型数据和视图信息，作为Handler处理结果返回给DispatcherServlet\n7. ViewResolver：视图解析器，DispatcherServlet通过解析器将逻辑视图转换为物理视图，最终将渲染的结果返回给客户端\n\n\n\n## Spring Data JPA和My Batis的区别？\n\n两者都是ORM对象关系映射框架，将JavaBean对象映射到关系型数据库，通过操作实体类来操作数据库表。Spring Data JPA在运行时通过JDK动态代理创建了Proxy对象SimpleJpaRepository，通过hibernate完成数据库操作。My Batis是一种半自动的ORM框架，使用时通过XML与JavaBean对象产生映射关系连接起来，同时需要书写sql语句，查询的结果通过ResultMap映射到Java对象。从表关联上看，My Batis更加灵活，JPA并不提供多表关联查询\n\n\n\n## SpringBoot\n\n### 什么是SpringBoot？有什么优点？\n\nSpringBoot是Spring组件一站式解决方案，主要是简化了使用Spring的难度，基于约定大于配置原则，通过AutoConfigure自动配置，当有特殊需求时才需要自行配置，提供了各种starter更加方便地将其他框架集成到项目中。\n\n1. 容易上手，开发效率更高，远离繁琐的配置\n2. 提供了一系列大型项目通用的非业务性功能，如内嵌服务器、安全管理、运行数据监控、运行状况检查、外部化配置等\n3. 避免了大量的Maven导入和各种版本冲突\n\n### SpringBoot的核心注解？\n\n@SpringBootApplication：包含了@Configuration实现配置文件功能、@EnableAutoConfiguration打开自动配置功能，如关闭某个自动配置选项、@ComponentScan实现组件扫描\n\n### SpringBoot的starter了解吗？\n\nstarter是在我们的项目需要集成其他组件框架时一种快速集成的方式，starter为我们省去了麻烦的配置信息。在没有starter/SpringBoot之前，每一个项目在需要集成其他的框架像redis等之前都需要手动的配置许多信息，SpringBoot推崇约定大于配置，starter里将组件的配置封装在properities中，并通过AutoConfiguration来装配默认配置。SpringBoot启动时将扫描所有AutoConfiguration类，完成自动配置。\n\n### SpringBoot如何进行自动配置？\n\n通过@EnableAutoConfiguration开启自动配置，这个注解引入了AutoConfigurationImportSelector，它的selectImports方法从META-INF/spring.factories文件中读取了自动配置类路径，将自动配置类加入到容器中，自动配置类中通过@EnableConfigurationPeoperties引入了对应的配置类xxxProperties.class，类中的属性可以通过yml文件自定义配置，否则使用默认配置，从而实现了自动配置功能。\n\n\n\n## SpringCloud\n\n### 什么是服务治理？\n\n微服务的服务注册发现、监控、下线、续期等自动化的管理，\n\n### 讲一讲注册中心原理？\n\neureka主要通过定时任务和rest调用来实现服务注册和发现，服务实例会把自己的信息发送到注册中心，之后注册中心通过定时任务（心跳）来检查服务状态和进行信息更新。\n\n### 注册中心存放了什么内容？用什么数据结构？\n\n存放了服务实例的信息，如名称、实例id、ip等，使用了Map来存储，第一层Map，key是服务名，值是所有实例，第二层key是实例id，值是实例的信息。\n\n\n\n### 什么是客户端负载均衡？和服务端负载均衡的区别？\n\n我们在使用spring-cloud分布式框架时，同一个服务会有多个实例，当一个请求传递过来时，对于这多个实例，Ribbon通过策略决定本次请求使用哪个实例的方式就是客户端负载均衡。在spring-cloud分布式框架中客户端负载均衡对开发者是透明的，添加@LoadBalanced注解就可以了。服务端负载均衡则是在服务器上游做分发，如常见的nginx和lvs，分别是七层和四层的负载均衡，可以通过url、ip、端口来做负载均衡策略的选择。客户端负载均衡和服务器负载均衡的核心差异在**服务列表**本身，客户端负载均衡服务列表通过客户端维护，服务器负载均衡服务列表由中间服务单独维护。\n\n#### 为什么Ribbon要使用客户端负载均衡？\n\n客户端负载均衡的服务列表由客户端维护，因此可以直接在自身内存中获取可用的服务实例，效率更高，不需要每个请求都从注册中心获取可用的服务实例，也可以减轻注册中心的压力\n\n### 负载均衡策略\n\n1. 随机选择RandomRule：通过`ThreadLocalRandom.current().nextInt(serverCount)`获取随机索引，在`upServerList`中获取\n2. 轮询RoundRibbonRule：通过递增实现轮询，默认最多选择十次\n3. 重试RetryRule：基于轮询策略，反复重试直到获取到实例\n4. 响应时间加权WeightedResponseTimeRule：先遍历所有服务 得到平均响应时间总和 然后用这个总和减去服务的平均响应时间，作为权重\n\n### 服务熔断有什么用？\n\n熔断机制是应对雪崩效应的一种微服务链路保护机制。当某个微服务不可用或者响应时间太长时，会进行服务降级，进而熔断该节点微服务的调用，快速返回“错误”的响应信息。当检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现，Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内调用20次，如果失败，就会启动熔断机制。\n\n服务降级，一般是从整体负荷考虑。就是当某个服务熔断之后，服务器将不再被调用，此时客户端可以自己准备一个本地的fallback回调，返回一个缺省值。这样做，虽然水平下降，但好歹可用，比直接挂掉强。\n\n### 如何理解分布式框架/分布式服务？\n\n分布式服务即是将传统的单体应用，从业务角度或其他角度切分为多个应用，独立运行，对外提供服务。部署在不同的服务器节点，称为分布式服务。框架用来具体实施时告诉你如何搭建出一套分布式系统。分布式框架中，最重要的两个组件就是注册中心和RPC框架，注册中心负责维护服务状态，RPC实现服务间的通信。\n\n","source":"_posts/Spring家族面试问题.md","raw":"---\ntitle: Spring家族面试问题\ntags:\n  - Java后端面试\n  - Spring Cloud\ncategories:\n  - Java后端面试\nimage: 'https://gitee.com/jingshanccc/image/raw/master/image/20200722151317.png'\nabbrlink: caab1d3c\ndate: '2020-07-16 22:14'\n---\n\n<p></p>\n\n<!-- more -->\n\n## Spring IOC\n\n### IOC是什么？\n\nIOC即控制反转，将对象的创建工作交给容器来实现，所以需要创建一个容器并且它需要知道创建对象间的关系，在Spring中管理对象及其依赖关系就是通过IOC容器实现的。IOC的实现方式有**依赖注入**和**依赖查找**，依赖查找通过容器和API来主动查找，例如`applicationContext.getBean(\"name\");`，依赖注入是对象被动地接受依赖类，在容器实例化时将依赖注入给对象，Spring中除了初始化的Bean查找，组件及其依赖项都是用注入方式。\n\n### IOC容器的初始化过程是怎么样的\n\nSpring在启动时，其refresh方法完成了对容器的初始化以及Bean的创建\n\n1. prepareRefresh完成了设置上下文状态和时间，以及属性的验证\n2. obtainFreshBeanFactory初始化Bean工厂，销毁存在的并重新创建\n3. loadBeanDefinitions加载Bean定义，通过读取配置文件CONFIG_LOCATION_PARAM，解析xml文件，通过beanDefinitionRegistry将BeanDefinition存放到HashMap中\n4. prepareBeanFactory中为BeanFactory添加类加载器、表达式解析器、自动装配等配置\n5. postProcessBeanFactory中将BeanFactory的后置处理器注册到BeanFacotry上，之后在invokeBranFactoryPostProcessor中按优先级调用所有后置处理方法\n6. registerBeanPostProcessor注册Bean的后置处理器\n7. initMessageSource和initApplicationEventMulticaster负责初始化国际化组件和事件多播器\n8. onRefresh是为子类提供的由子类实现的逻辑，在这里调用\n9. registerListeners方法查找所有的监听器并注册到7中的广播器\n10. finishBeanFactoryInitialization初始化剩余的其他单例bean：先调用applyBeanPostProcessorsBeforeInitialization方法，执行每个BeanPostProcessor的postProcessBeforeInitialization，然后调用invokeInitMethods方法，执行bean的初始化方法，使用set设置属性，最后调用applyBeanPostProcessorsAfterInitialization方法，执行每个BeanPostProcessor的postProcessAfterInitialization方法。\n11. finishRefresh完成其他工作如清除缓存、发布事件等，IOC容器初始化结束\n\n![img](https://gitee.com/jingshanccc/image/raw/master/image/20200722143755.png)\n\n\n\n### 简述Bean的生命周期和作用范围\n\n首先是Spring对Bean进行实例化，将值和Bean的引用注入到其对应的属性中，如果实现了BeanNameAware接口，调用setBeanName方法，让Bean可以获取自己的ID/name，如果实现了BeanFactoryAware接口，调用setBeanFactory，让Bean可以获取配置自己的BeanFactory，拥有Spring容器的功能；将Bean实例传递给Bean的前置处理器的postProcessBeforeInitialization，调用Bean的初始化方法，如果是InitializingBean则先调用afterPropertiesSet方法（可以做一些属性验证和设置），再调用设置的init-method，然后调用后置处理器的postProcessAfterInitialization，之后在工程中使用Bean，在容器关闭之前，调用DisposableBean的destroy方法，如果Bean有自定义销毁方法也会被调用\n\n#### 什么是InitializingBean？\n\nSpring提供了两种初始化Bean的方法，一是实现InitializingBean接口，实现afterPropertiesSet方法；二是在配置文件中指定init-method；两种方法可以同时使用。\n\n{% fold 两种有什么区别？ %}\n\n实现InitializingBean接口是直接调用afterPropertiesSet方法，比通过反射调用init-method方法效率更高，但后者消除了对spring的依赖\n\n{% endfold %}\n\n可以通过scope指定Bean的作用范围，有以下5种类型：\n\n1. Singleton：单例的，每次容器返回的对象是同一个，在初始化IOC容器时完成创建\n2. Prototype：多例的，每次返回的是新创建的实例\n3. Request：仅作用于HttpRequest，每次Http请求创建一个实例\n4. Session：仅作用于HttpSession，不同的session使用不同的实例\n5. Global Session：所有的HttpSession使用同一个实例，仅用于Protlet容器\n\n### BeanFactory和FactoryBean、ApplicationContext的区别\n\nBeanFactory是一个Factory接口，用来管理Bean的IOC容器，对象工厂，BeanFactory 实例化后并不会自动实例化 Bean，只有当 Bean 被使用时才实例化与装配依赖关系，使用了**延迟加载**，适合多例模式；FactoryBean是一个通过写代码的方式用来自定义实例化bean的接口，传统方式xml/property注解方式可能需要大量的配置 通过实现FactoryBean来简化这个操作，在getObject方法中实现自定义的实例化逻辑；ApplicationContext是BeanFactory的子接口，做了扩展，使用**立即加载**，适合单例模式\n\n### 依赖注入的实现方式有哪些？在Spring中有哪些相关的注解？\n\n有构造方法注入、Setter注入、接口注入三种方式，由于构造方法无法被继承，因此Setter方法注入会更灵活一些，但是无法在对象构造完成后马上进入就绪状态。接口方式通过接口提供方法来注入依赖对象，要求实现接口，侵入性强。\n\n在Spring中，通过getBean方法获取Bean实例，该方法会调用doGetBean从IOC容器中获取Bean，在创建Bean的过程中会完成依赖注入，在populateBean方法中，注入过程通过setPropertyValues实现，将Bean对象实例设置到它所依赖的Bean对象属性上，BeanWrapperImpl以**JDK反射形式**，通过属性的**setter方法**为属性设置注入后的值。\n\n1. @Autowired：自动按类型注入，如果有多个匹配则按照指定Bean的id查找；可与@Qualifier匹配上下文的Bean\n2. @Resource：直接按照Bean的id注入，只能注入Bean类型\n3. @Value：用于注入基本数据类型和String类型\n\n\n\n## AOP是什么？\n\nAOP即面向切面编程，某个业务与具体对象无关，是一种通用的功能代码，在具体的时间点(Pointcut)需要被执行，业务功能代码和切面代码分开，合并成完整的业务(称为织入Weave)。常用场景包括权限认证、自动缓存、错误处理、日志、调试和事务等。\n\n有三种织入方式：\n\n1. 编译时织入：需要特殊的Java编译器，如AspectJ\n2. 类加载时织入：需要特殊的编译器，如AspectJ和AspectWerkz\n3. 运行时织入：通过动态代理的方式\n\n在Spring中使用AOP：导入依赖，创建切面`@Aspect`，定义切入点`@PointCut(execution(xxx))`方法，定义时机Advice`@Before,AfterReturning/Throwing等`，在方法内实现需要的逻辑。\n\nSpringAOP通过Bean的后置处理器将Bean包装成Proxy，调用时通过Proxy来调用，有两种实现方式，如果类实现了接口，则使用JDK动态代理，否则使用CGLib动态代理。\n\n### JDK动态代理\n\n被代理类需要实现含有业务方法的接口，代理类需要实现InvocationHandler invoke方法来调用具体的业务方法，最终通过Proxy.newInstance生成代理类，会调用ProxyGenerator的generate方法生成字节码，再用类加载器来装载生成的代理类。\n\n在Spring AOP中，生成的Proxy类拥有真实类实现的接口的所有方法，其实就是通过**实现相同的接口**，然后在对应的方法周围加入切面逻辑。从Proxy的字节码可以看到，声明了私有静态成员变量Method 01234...通过静态代码块**利用反射**来初始化各个方法。通过Proxy类的成员变量invocationHandler的invoke方法调用具体方法。invoke中在调用具体方法前后会有**切入**的逻辑。\n\n{% fold 展开代码 %}\n\n```java\n//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by Fernflower decompiler)\n//\n \nimport aop.UserService;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.UndeclaredThrowableException;\n \npublic final class $Proxy11 extends Proxy implements UserService {\n    private static Method m1;\n    private static Method m4;\n    private static Method m3;\n    private static Method m2;\n    private static Method m0;\n \n    public $Proxy11(InvocationHandler var1) throws  {\n        super(var1);\n    }\n \n    public final boolean equals(Object var1) throws  {\n        try {\n            return (Boolean)super.h.invoke(this, m1, new Object[]{var1});\n        } catch (RuntimeException | Error var3) {\n            throw var3;\n        } catch (Throwable var4) {\n            throw new UndeclaredThrowableException(var4);\n        }\n    }\n \n    public final void A() throws  {\n        try {\n            super.h.invoke(this, m4, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n \n    public final void B() throws  {\n        try {\n            super.h.invoke(this, m3, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n \n    public final String toString() throws  {\n        try {\n            return (String)super.h.invoke(this, m2, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n \n    public final int hashCode() throws  {\n        try {\n            return (Integer)super.h.invoke(this, m0, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n \n    static {\n        try {\n            m1 = Class.forName(\"java.lang.Object\").getMethod(\"equals\", Class.forName(\"java.lang.Object\"));\n            m4 = Class.forName(\"aop.UserService\").getMethod(\"A\");\n            m3 = Class.forName(\"aop.UserService\").getMethod(\"B\");\n            m2 = Class.forName(\"java.lang.Object\").getMethod(\"toString\");\n            m0 = Class.forName(\"java.lang.Object\").getMethod(\"hashCode\");\n        } catch (NoSuchMethodException var2) {\n            throw new NoSuchMethodError(var2.getMessage());\n        } catch (ClassNotFoundException var3) {\n            throw new NoClassDefFoundError(var3.getMessage());\n        }\n    }\n}\n```\n\n{% endfold %}\n\n### CGLIB动态代理\n\n以继承的方式动态生成目标类的代理，通过修改字节码(asm框架)的方式织入，**不需要接口**，因为cglib是利用**继承真实类通过super来调用真实类方法**，并加入新逻辑的方式来实现的。\n\n\n\n## Spring MVC有哪些核心组件？\n\nSpringMVC是一个基于MVC设计模型的请求驱动的轻量级WEB框架，将WEB应用架构划分为视图层View、处理器层Controller、持久层Model。\n\n1. DispatcherServlet：前端控制器，负责接受请求并转发到对应的处理组件\n2. Handler：处理器，完成具体业务逻辑，类似Servlet或Action\n3. HandlerInterceptor：拦截器，通过实现这个接口完成拦截处理\n4. HandlerExecutionChain：处理链，包含Handler和HandlerInterceptor。应用了[责任链模式](https://realmicah.xyz/posts/503970b4.html#讲讲责任链模式)\n5. HandlerAdapter：适配器，Handler执行处理业务方法之前，需要完成表单数据验证、数据类型转换、封装到JavaBean等操作，由Adapter完成，通过Adapter执行不同的Handler。应用了[适配器模式](https://realmicah.xyz/posts/503970b4.html#适配器模式了解吗？有什么应用？)\n6. ModelAndView：装在模型数据和视图信息，作为Handler处理结果返回给DispatcherServlet\n7. ViewResolver：视图解析器，DispatcherServlet通过解析器将逻辑视图转换为物理视图，最终将渲染的结果返回给客户端\n\n\n\n## Spring Data JPA和My Batis的区别？\n\n两者都是ORM对象关系映射框架，将JavaBean对象映射到关系型数据库，通过操作实体类来操作数据库表。Spring Data JPA在运行时通过JDK动态代理创建了Proxy对象SimpleJpaRepository，通过hibernate完成数据库操作。My Batis是一种半自动的ORM框架，使用时通过XML与JavaBean对象产生映射关系连接起来，同时需要书写sql语句，查询的结果通过ResultMap映射到Java对象。从表关联上看，My Batis更加灵活，JPA并不提供多表关联查询\n\n\n\n## SpringBoot\n\n### 什么是SpringBoot？有什么优点？\n\nSpringBoot是Spring组件一站式解决方案，主要是简化了使用Spring的难度，基于约定大于配置原则，通过AutoConfigure自动配置，当有特殊需求时才需要自行配置，提供了各种starter更加方便地将其他框架集成到项目中。\n\n1. 容易上手，开发效率更高，远离繁琐的配置\n2. 提供了一系列大型项目通用的非业务性功能，如内嵌服务器、安全管理、运行数据监控、运行状况检查、外部化配置等\n3. 避免了大量的Maven导入和各种版本冲突\n\n### SpringBoot的核心注解？\n\n@SpringBootApplication：包含了@Configuration实现配置文件功能、@EnableAutoConfiguration打开自动配置功能，如关闭某个自动配置选项、@ComponentScan实现组件扫描\n\n### SpringBoot的starter了解吗？\n\nstarter是在我们的项目需要集成其他组件框架时一种快速集成的方式，starter为我们省去了麻烦的配置信息。在没有starter/SpringBoot之前，每一个项目在需要集成其他的框架像redis等之前都需要手动的配置许多信息，SpringBoot推崇约定大于配置，starter里将组件的配置封装在properities中，并通过AutoConfiguration来装配默认配置。SpringBoot启动时将扫描所有AutoConfiguration类，完成自动配置。\n\n### SpringBoot如何进行自动配置？\n\n通过@EnableAutoConfiguration开启自动配置，这个注解引入了AutoConfigurationImportSelector，它的selectImports方法从META-INF/spring.factories文件中读取了自动配置类路径，将自动配置类加入到容器中，自动配置类中通过@EnableConfigurationPeoperties引入了对应的配置类xxxProperties.class，类中的属性可以通过yml文件自定义配置，否则使用默认配置，从而实现了自动配置功能。\n\n\n\n## SpringCloud\n\n### 什么是服务治理？\n\n微服务的服务注册发现、监控、下线、续期等自动化的管理，\n\n### 讲一讲注册中心原理？\n\neureka主要通过定时任务和rest调用来实现服务注册和发现，服务实例会把自己的信息发送到注册中心，之后注册中心通过定时任务（心跳）来检查服务状态和进行信息更新。\n\n### 注册中心存放了什么内容？用什么数据结构？\n\n存放了服务实例的信息，如名称、实例id、ip等，使用了Map来存储，第一层Map，key是服务名，值是所有实例，第二层key是实例id，值是实例的信息。\n\n\n\n### 什么是客户端负载均衡？和服务端负载均衡的区别？\n\n我们在使用spring-cloud分布式框架时，同一个服务会有多个实例，当一个请求传递过来时，对于这多个实例，Ribbon通过策略决定本次请求使用哪个实例的方式就是客户端负载均衡。在spring-cloud分布式框架中客户端负载均衡对开发者是透明的，添加@LoadBalanced注解就可以了。服务端负载均衡则是在服务器上游做分发，如常见的nginx和lvs，分别是七层和四层的负载均衡，可以通过url、ip、端口来做负载均衡策略的选择。客户端负载均衡和服务器负载均衡的核心差异在**服务列表**本身，客户端负载均衡服务列表通过客户端维护，服务器负载均衡服务列表由中间服务单独维护。\n\n#### 为什么Ribbon要使用客户端负载均衡？\n\n客户端负载均衡的服务列表由客户端维护，因此可以直接在自身内存中获取可用的服务实例，效率更高，不需要每个请求都从注册中心获取可用的服务实例，也可以减轻注册中心的压力\n\n### 负载均衡策略\n\n1. 随机选择RandomRule：通过`ThreadLocalRandom.current().nextInt(serverCount)`获取随机索引，在`upServerList`中获取\n2. 轮询RoundRibbonRule：通过递增实现轮询，默认最多选择十次\n3. 重试RetryRule：基于轮询策略，反复重试直到获取到实例\n4. 响应时间加权WeightedResponseTimeRule：先遍历所有服务 得到平均响应时间总和 然后用这个总和减去服务的平均响应时间，作为权重\n\n### 服务熔断有什么用？\n\n熔断机制是应对雪崩效应的一种微服务链路保护机制。当某个微服务不可用或者响应时间太长时，会进行服务降级，进而熔断该节点微服务的调用，快速返回“错误”的响应信息。当检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现，Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内调用20次，如果失败，就会启动熔断机制。\n\n服务降级，一般是从整体负荷考虑。就是当某个服务熔断之后，服务器将不再被调用，此时客户端可以自己准备一个本地的fallback回调，返回一个缺省值。这样做，虽然水平下降，但好歹可用，比直接挂掉强。\n\n### 如何理解分布式框架/分布式服务？\n\n分布式服务即是将传统的单体应用，从业务角度或其他角度切分为多个应用，独立运行，对外提供服务。部署在不同的服务器节点，称为分布式服务。框架用来具体实施时告诉你如何搭建出一套分布式系统。分布式框架中，最重要的两个组件就是注册中心和RPC框架，注册中心负责维护服务状态，RPC实现服务间的通信。\n\n","slug":"Spring家族面试问题","published":1,"updated":"2020-08-06T01:24:37.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2d002zz4ejahf92kcz","content":"<p></p>\n\n<a id=\"more\"></a>\n\n<h2 id=\"Spring-IOC\"><a href=\"#Spring-IOC\" class=\"headerlink\" title=\"Spring IOC\"></a>Spring IOC</h2><h3 id=\"IOC是什么？\"><a href=\"#IOC是什么？\" class=\"headerlink\" title=\"IOC是什么？\"></a>IOC是什么？</h3><p>IOC即控制反转，将对象的创建工作交给容器来实现，所以需要创建一个容器并且它需要知道创建对象间的关系，在Spring中管理对象及其依赖关系就是通过IOC容器实现的。IOC的实现方式有<strong>依赖注入</strong>和<strong>依赖查找</strong>，依赖查找通过容器和API来主动查找，例如<code>applicationContext.getBean(&quot;name&quot;);</code>，依赖注入是对象被动地接受依赖类，在容器实例化时将依赖注入给对象，Spring中除了初始化的Bean查找，组件及其依赖项都是用注入方式。</p>\n<h3 id=\"IOC容器的初始化过程是怎么样的\"><a href=\"#IOC容器的初始化过程是怎么样的\" class=\"headerlink\" title=\"IOC容器的初始化过程是怎么样的\"></a>IOC容器的初始化过程是怎么样的</h3><p>Spring在启动时，其refresh方法完成了对容器的初始化以及Bean的创建</p>\n<ol>\n<li>prepareRefresh完成了设置上下文状态和时间，以及属性的验证</li>\n<li>obtainFreshBeanFactory初始化Bean工厂，销毁存在的并重新创建</li>\n<li>loadBeanDefinitions加载Bean定义，通过读取配置文件CONFIG_LOCATION_PARAM，解析xml文件，通过beanDefinitionRegistry将BeanDefinition存放到HashMap中</li>\n<li>prepareBeanFactory中为BeanFactory添加类加载器、表达式解析器、自动装配等配置</li>\n<li>postProcessBeanFactory中将BeanFactory的后置处理器注册到BeanFacotry上，之后在invokeBranFactoryPostProcessor中按优先级调用所有后置处理方法</li>\n<li>registerBeanPostProcessor注册Bean的后置处理器</li>\n<li>initMessageSource和initApplicationEventMulticaster负责初始化国际化组件和事件多播器</li>\n<li>onRefresh是为子类提供的由子类实现的逻辑，在这里调用</li>\n<li>registerListeners方法查找所有的监听器并注册到7中的广播器</li>\n<li>finishBeanFactoryInitialization初始化剩余的其他单例bean：先调用applyBeanPostProcessorsBeforeInitialization方法，执行每个BeanPostProcessor的postProcessBeforeInitialization，然后调用invokeInitMethods方法，执行bean的初始化方法，使用set设置属性，最后调用applyBeanPostProcessorsAfterInitialization方法，执行每个BeanPostProcessor的postProcessAfterInitialization方法。</li>\n<li>finishRefresh完成其他工作如清除缓存、发布事件等，IOC容器初始化结束</li>\n</ol>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722143755.png\" alt=\"img\"></p>\n<h3 id=\"简述Bean的生命周期和作用范围\"><a href=\"#简述Bean的生命周期和作用范围\" class=\"headerlink\" title=\"简述Bean的生命周期和作用范围\"></a>简述Bean的生命周期和作用范围</h3><p>首先是Spring对Bean进行实例化，将值和Bean的引用注入到其对应的属性中，如果实现了BeanNameAware接口，调用setBeanName方法，让Bean可以获取自己的ID/name，如果实现了BeanFactoryAware接口，调用setBeanFactory，让Bean可以获取配置自己的BeanFactory，拥有Spring容器的功能；将Bean实例传递给Bean的前置处理器的postProcessBeforeInitialization，调用Bean的初始化方法，如果是InitializingBean则先调用afterPropertiesSet方法（可以做一些属性验证和设置），再调用设置的init-method，然后调用后置处理器的postProcessAfterInitialization，之后在工程中使用Bean，在容器关闭之前，调用DisposableBean的destroy方法，如果Bean有自定义销毁方法也会被调用</p>\n<h4 id=\"什么是InitializingBean？\"><a href=\"#什么是InitializingBean？\" class=\"headerlink\" title=\"什么是InitializingBean？\"></a>什么是InitializingBean？</h4><p>Spring提供了两种初始化Bean的方法，一是实现InitializingBean接口，实现afterPropertiesSet方法；二是在配置文件中指定init-method；两种方法可以同时使用。</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">两种有什么区别？</div></div><div class=\"fold\">\n<p>实现InitializingBean接口是直接调用afterPropertiesSet方法，比通过反射调用init-method方法效率更高，但后者消除了对spring的依赖</p>\n\n</div></div>\n\n<p>可以通过scope指定Bean的作用范围，有以下5种类型：</p>\n<ol>\n<li>Singleton：单例的，每次容器返回的对象是同一个，在初始化IOC容器时完成创建</li>\n<li>Prototype：多例的，每次返回的是新创建的实例</li>\n<li>Request：仅作用于HttpRequest，每次Http请求创建一个实例</li>\n<li>Session：仅作用于HttpSession，不同的session使用不同的实例</li>\n<li>Global Session：所有的HttpSession使用同一个实例，仅用于Protlet容器</li>\n</ol>\n<h3 id=\"BeanFactory和FactoryBean、ApplicationContext的区别\"><a href=\"#BeanFactory和FactoryBean、ApplicationContext的区别\" class=\"headerlink\" title=\"BeanFactory和FactoryBean、ApplicationContext的区别\"></a>BeanFactory和FactoryBean、ApplicationContext的区别</h3><p>BeanFactory是一个Factory接口，用来管理Bean的IOC容器，对象工厂，BeanFactory 实例化后并不会自动实例化 Bean，只有当 Bean 被使用时才实例化与装配依赖关系，使用了<strong>延迟加载</strong>，适合多例模式；FactoryBean是一个通过写代码的方式用来自定义实例化bean的接口，传统方式xml/property注解方式可能需要大量的配置 通过实现FactoryBean来简化这个操作，在getObject方法中实现自定义的实例化逻辑；ApplicationContext是BeanFactory的子接口，做了扩展，使用<strong>立即加载</strong>，适合单例模式</p>\n<h3 id=\"依赖注入的实现方式有哪些？在Spring中有哪些相关的注解？\"><a href=\"#依赖注入的实现方式有哪些？在Spring中有哪些相关的注解？\" class=\"headerlink\" title=\"依赖注入的实现方式有哪些？在Spring中有哪些相关的注解？\"></a>依赖注入的实现方式有哪些？在Spring中有哪些相关的注解？</h3><p>有构造方法注入、Setter注入、接口注入三种方式，由于构造方法无法被继承，因此Setter方法注入会更灵活一些，但是无法在对象构造完成后马上进入就绪状态。接口方式通过接口提供方法来注入依赖对象，要求实现接口，侵入性强。</p>\n<p>在Spring中，通过getBean方法获取Bean实例，该方法会调用doGetBean从IOC容器中获取Bean，在创建Bean的过程中会完成依赖注入，在populateBean方法中，注入过程通过setPropertyValues实现，将Bean对象实例设置到它所依赖的Bean对象属性上，BeanWrapperImpl以<strong>JDK反射形式</strong>，通过属性的<strong>setter方法</strong>为属性设置注入后的值。</p>\n<ol>\n<li>@Autowired：自动按类型注入，如果有多个匹配则按照指定Bean的id查找；可与@Qualifier匹配上下文的Bean</li>\n<li>@Resource：直接按照Bean的id注入，只能注入Bean类型</li>\n<li>@Value：用于注入基本数据类型和String类型</li>\n</ol>\n<h2 id=\"AOP是什么？\"><a href=\"#AOP是什么？\" class=\"headerlink\" title=\"AOP是什么？\"></a>AOP是什么？</h2><p>AOP即面向切面编程，某个业务与具体对象无关，是一种通用的功能代码，在具体的时间点(Pointcut)需要被执行，业务功能代码和切面代码分开，合并成完整的业务(称为织入Weave)。常用场景包括权限认证、自动缓存、错误处理、日志、调试和事务等。</p>\n<p>有三种织入方式：</p>\n<ol>\n<li>编译时织入：需要特殊的Java编译器，如AspectJ</li>\n<li>类加载时织入：需要特殊的编译器，如AspectJ和AspectWerkz</li>\n<li>运行时织入：通过动态代理的方式</li>\n</ol>\n<p>在Spring中使用AOP：导入依赖，创建切面<code>@Aspect</code>，定义切入点<code>@PointCut(execution(xxx))</code>方法，定义时机Advice<code>@Before,AfterReturning/Throwing等</code>，在方法内实现需要的逻辑。</p>\n<p>SpringAOP通过Bean的后置处理器将Bean包装成Proxy，调用时通过Proxy来调用，有两种实现方式，如果类实现了接口，则使用JDK动态代理，否则使用CGLib动态代理。</p>\n<h3 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h3><p>被代理类需要实现含有业务方法的接口，代理类需要实现InvocationHandler invoke方法来调用具体的业务方法，最终通过Proxy.newInstance生成代理类，会调用ProxyGenerator的generate方法生成字节码，再用类加载器来装载生成的代理类。</p>\n<p>在Spring AOP中，生成的Proxy类拥有真实类实现的接口的所有方法，其实就是通过<strong>实现相同的接口</strong>，然后在对应的方法周围加入切面逻辑。从Proxy的字节码可以看到，声明了私有静态成员变量Method 01234…通过静态代码块<strong>利用反射</strong>来初始化各个方法。通过Proxy类的成员变量invocationHandler的invoke方法调用具体方法。invoke中在调用具体方法前后会有<strong>切入</strong>的逻辑。</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开代码</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class=\"line\"><span class=\"comment\">// (powered by Fernflower decompiler)</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> aop.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> $<span class=\"title\">Proxy11</span> <span class=\"keyword\">extends</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m4;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m3;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m2;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m0;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> $Proxy11(InvocationHandler var1) <span class=\"keyword\">throws</span>  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object var1)</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Boolean)<span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m1, <span class=\"keyword\">new</span> Object[]&#123;var1&#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var3;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var4) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var4);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">A</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m4, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">B</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m3, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (String)<span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m2, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Integer)<span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m0, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            m1 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"equals\"</span>, Class.forName(<span class=\"string\">\"java.lang.Object\"</span>));</span><br><span class=\"line\">            m4 = Class.forName(<span class=\"string\">\"aop.UserService\"</span>).getMethod(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">            m3 = Class.forName(<span class=\"string\">\"aop.UserService\"</span>).getMethod(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">            m2 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"toString\"</span>);</span><br><span class=\"line\">            m0 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"hashCode\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n<h3 id=\"CGLIB动态代理\"><a href=\"#CGLIB动态代理\" class=\"headerlink\" title=\"CGLIB动态代理\"></a>CGLIB动态代理</h3><p>以继承的方式动态生成目标类的代理，通过修改字节码(asm框架)的方式织入，<strong>不需要接口</strong>，因为cglib是利用<strong>继承真实类通过super来调用真实类方法</strong>，并加入新逻辑的方式来实现的。</p>\n<h2 id=\"Spring-MVC有哪些核心组件？\"><a href=\"#Spring-MVC有哪些核心组件？\" class=\"headerlink\" title=\"Spring MVC有哪些核心组件？\"></a>Spring MVC有哪些核心组件？</h2><p>SpringMVC是一个基于MVC设计模型的请求驱动的轻量级WEB框架，将WEB应用架构划分为视图层View、处理器层Controller、持久层Model。</p>\n<ol>\n<li>DispatcherServlet：前端控制器，负责接受请求并转发到对应的处理组件</li>\n<li>Handler：处理器，完成具体业务逻辑，类似Servlet或Action</li>\n<li>HandlerInterceptor：拦截器，通过实现这个接口完成拦截处理</li>\n<li>HandlerExecutionChain：处理链，包含Handler和HandlerInterceptor。应用了<a href=\"https://realmicah.xyz/posts/503970b4.html#讲讲责任链模式\" target=\"_blank\" rel=\"noopener\">责任链模式</a></li>\n<li>HandlerAdapter：适配器，Handler执行处理业务方法之前，需要完成表单数据验证、数据类型转换、封装到JavaBean等操作，由Adapter完成，通过Adapter执行不同的Handler。应用了<a href=\"https://realmicah.xyz/posts/503970b4.html#适配器模式了解吗？有什么应用？\" target=\"_blank\" rel=\"noopener\">适配器模式</a></li>\n<li>ModelAndView：装在模型数据和视图信息，作为Handler处理结果返回给DispatcherServlet</li>\n<li>ViewResolver：视图解析器，DispatcherServlet通过解析器将逻辑视图转换为物理视图，最终将渲染的结果返回给客户端</li>\n</ol>\n<h2 id=\"Spring-Data-JPA和My-Batis的区别？\"><a href=\"#Spring-Data-JPA和My-Batis的区别？\" class=\"headerlink\" title=\"Spring Data JPA和My Batis的区别？\"></a>Spring Data JPA和My Batis的区别？</h2><p>两者都是ORM对象关系映射框架，将JavaBean对象映射到关系型数据库，通过操作实体类来操作数据库表。Spring Data JPA在运行时通过JDK动态代理创建了Proxy对象SimpleJpaRepository，通过hibernate完成数据库操作。My Batis是一种半自动的ORM框架，使用时通过XML与JavaBean对象产生映射关系连接起来，同时需要书写sql语句，查询的结果通过ResultMap映射到Java对象。从表关联上看，My Batis更加灵活，JPA并不提供多表关联查询</p>\n<h2 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h2><h3 id=\"什么是SpringBoot？有什么优点？\"><a href=\"#什么是SpringBoot？有什么优点？\" class=\"headerlink\" title=\"什么是SpringBoot？有什么优点？\"></a>什么是SpringBoot？有什么优点？</h3><p>SpringBoot是Spring组件一站式解决方案，主要是简化了使用Spring的难度，基于约定大于配置原则，通过AutoConfigure自动配置，当有特殊需求时才需要自行配置，提供了各种starter更加方便地将其他框架集成到项目中。</p>\n<ol>\n<li>容易上手，开发效率更高，远离繁琐的配置</li>\n<li>提供了一系列大型项目通用的非业务性功能，如内嵌服务器、安全管理、运行数据监控、运行状况检查、外部化配置等</li>\n<li>避免了大量的Maven导入和各种版本冲突</li>\n</ol>\n<h3 id=\"SpringBoot的核心注解？\"><a href=\"#SpringBoot的核心注解？\" class=\"headerlink\" title=\"SpringBoot的核心注解？\"></a>SpringBoot的核心注解？</h3><p>@SpringBootApplication：包含了@Configuration实现配置文件功能、@EnableAutoConfiguration打开自动配置功能，如关闭某个自动配置选项、@ComponentScan实现组件扫描</p>\n<h3 id=\"SpringBoot的starter了解吗？\"><a href=\"#SpringBoot的starter了解吗？\" class=\"headerlink\" title=\"SpringBoot的starter了解吗？\"></a>SpringBoot的starter了解吗？</h3><p>starter是在我们的项目需要集成其他组件框架时一种快速集成的方式，starter为我们省去了麻烦的配置信息。在没有starter/SpringBoot之前，每一个项目在需要集成其他的框架像redis等之前都需要手动的配置许多信息，SpringBoot推崇约定大于配置，starter里将组件的配置封装在properities中，并通过AutoConfiguration来装配默认配置。SpringBoot启动时将扫描所有AutoConfiguration类，完成自动配置。</p>\n<h3 id=\"SpringBoot如何进行自动配置？\"><a href=\"#SpringBoot如何进行自动配置？\" class=\"headerlink\" title=\"SpringBoot如何进行自动配置？\"></a>SpringBoot如何进行自动配置？</h3><p>通过@EnableAutoConfiguration开启自动配置，这个注解引入了AutoConfigurationImportSelector，它的selectImports方法从META-INF/spring.factories文件中读取了自动配置类路径，将自动配置类加入到容器中，自动配置类中通过@EnableConfigurationPeoperties引入了对应的配置类xxxProperties.class，类中的属性可以通过yml文件自定义配置，否则使用默认配置，从而实现了自动配置功能。</p>\n<h2 id=\"SpringCloud\"><a href=\"#SpringCloud\" class=\"headerlink\" title=\"SpringCloud\"></a>SpringCloud</h2><h3 id=\"什么是服务治理？\"><a href=\"#什么是服务治理？\" class=\"headerlink\" title=\"什么是服务治理？\"></a>什么是服务治理？</h3><p>微服务的服务注册发现、监控、下线、续期等自动化的管理，</p>\n<h3 id=\"讲一讲注册中心原理？\"><a href=\"#讲一讲注册中心原理？\" class=\"headerlink\" title=\"讲一讲注册中心原理？\"></a>讲一讲注册中心原理？</h3><p>eureka主要通过定时任务和rest调用来实现服务注册和发现，服务实例会把自己的信息发送到注册中心，之后注册中心通过定时任务（心跳）来检查服务状态和进行信息更新。</p>\n<h3 id=\"注册中心存放了什么内容？用什么数据结构？\"><a href=\"#注册中心存放了什么内容？用什么数据结构？\" class=\"headerlink\" title=\"注册中心存放了什么内容？用什么数据结构？\"></a>注册中心存放了什么内容？用什么数据结构？</h3><p>存放了服务实例的信息，如名称、实例id、ip等，使用了Map来存储，第一层Map，key是服务名，值是所有实例，第二层key是实例id，值是实例的信息。</p>\n<h3 id=\"什么是客户端负载均衡？和服务端负载均衡的区别？\"><a href=\"#什么是客户端负载均衡？和服务端负载均衡的区别？\" class=\"headerlink\" title=\"什么是客户端负载均衡？和服务端负载均衡的区别？\"></a>什么是客户端负载均衡？和服务端负载均衡的区别？</h3><p>我们在使用spring-cloud分布式框架时，同一个服务会有多个实例，当一个请求传递过来时，对于这多个实例，Ribbon通过策略决定本次请求使用哪个实例的方式就是客户端负载均衡。在spring-cloud分布式框架中客户端负载均衡对开发者是透明的，添加@LoadBalanced注解就可以了。服务端负载均衡则是在服务器上游做分发，如常见的nginx和lvs，分别是七层和四层的负载均衡，可以通过url、ip、端口来做负载均衡策略的选择。客户端负载均衡和服务器负载均衡的核心差异在<strong>服务列表</strong>本身，客户端负载均衡服务列表通过客户端维护，服务器负载均衡服务列表由中间服务单独维护。</p>\n<h4 id=\"为什么Ribbon要使用客户端负载均衡？\"><a href=\"#为什么Ribbon要使用客户端负载均衡？\" class=\"headerlink\" title=\"为什么Ribbon要使用客户端负载均衡？\"></a>为什么Ribbon要使用客户端负载均衡？</h4><p>客户端负载均衡的服务列表由客户端维护，因此可以直接在自身内存中获取可用的服务实例，效率更高，不需要每个请求都从注册中心获取可用的服务实例，也可以减轻注册中心的压力</p>\n<h3 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h3><ol>\n<li>随机选择RandomRule：通过<code>ThreadLocalRandom.current().nextInt(serverCount)</code>获取随机索引，在<code>upServerList</code>中获取</li>\n<li>轮询RoundRibbonRule：通过递增实现轮询，默认最多选择十次</li>\n<li>重试RetryRule：基于轮询策略，反复重试直到获取到实例</li>\n<li>响应时间加权WeightedResponseTimeRule：先遍历所有服务 得到平均响应时间总和 然后用这个总和减去服务的平均响应时间，作为权重</li>\n</ol>\n<h3 id=\"服务熔断有什么用？\"><a href=\"#服务熔断有什么用？\" class=\"headerlink\" title=\"服务熔断有什么用？\"></a>服务熔断有什么用？</h3><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。当某个微服务不可用或者响应时间太长时，会进行服务降级，进而熔断该节点微服务的调用，快速返回“错误”的响应信息。当检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现，Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内调用20次，如果失败，就会启动熔断机制。</p>\n<p>服务降级，一般是从整体负荷考虑。就是当某个服务熔断之后，服务器将不再被调用，此时客户端可以自己准备一个本地的fallback回调，返回一个缺省值。这样做，虽然水平下降，但好歹可用，比直接挂掉强。</p>\n<h3 id=\"如何理解分布式框架-分布式服务？\"><a href=\"#如何理解分布式框架-分布式服务？\" class=\"headerlink\" title=\"如何理解分布式框架/分布式服务？\"></a>如何理解分布式框架/分布式服务？</h3><p>分布式服务即是将传统的单体应用，从业务角度或其他角度切分为多个应用，独立运行，对外提供服务。部署在不同的服务器节点，称为分布式服务。框架用来具体实施时告诉你如何搭建出一套分布式系统。分布式框架中，最重要的两个组件就是注册中心和RPC框架，注册中心负责维护服务状态，RPC实现服务间的通信。</p>\n","site":{"data":{}},"excerpt":"<p></p>","more":"<h2 id=\"Spring-IOC\"><a href=\"#Spring-IOC\" class=\"headerlink\" title=\"Spring IOC\"></a>Spring IOC</h2><h3 id=\"IOC是什么？\"><a href=\"#IOC是什么？\" class=\"headerlink\" title=\"IOC是什么？\"></a>IOC是什么？</h3><p>IOC即控制反转，将对象的创建工作交给容器来实现，所以需要创建一个容器并且它需要知道创建对象间的关系，在Spring中管理对象及其依赖关系就是通过IOC容器实现的。IOC的实现方式有<strong>依赖注入</strong>和<strong>依赖查找</strong>，依赖查找通过容器和API来主动查找，例如<code>applicationContext.getBean(&quot;name&quot;);</code>，依赖注入是对象被动地接受依赖类，在容器实例化时将依赖注入给对象，Spring中除了初始化的Bean查找，组件及其依赖项都是用注入方式。</p>\n<h3 id=\"IOC容器的初始化过程是怎么样的\"><a href=\"#IOC容器的初始化过程是怎么样的\" class=\"headerlink\" title=\"IOC容器的初始化过程是怎么样的\"></a>IOC容器的初始化过程是怎么样的</h3><p>Spring在启动时，其refresh方法完成了对容器的初始化以及Bean的创建</p>\n<ol>\n<li>prepareRefresh完成了设置上下文状态和时间，以及属性的验证</li>\n<li>obtainFreshBeanFactory初始化Bean工厂，销毁存在的并重新创建</li>\n<li>loadBeanDefinitions加载Bean定义，通过读取配置文件CONFIG_LOCATION_PARAM，解析xml文件，通过beanDefinitionRegistry将BeanDefinition存放到HashMap中</li>\n<li>prepareBeanFactory中为BeanFactory添加类加载器、表达式解析器、自动装配等配置</li>\n<li>postProcessBeanFactory中将BeanFactory的后置处理器注册到BeanFacotry上，之后在invokeBranFactoryPostProcessor中按优先级调用所有后置处理方法</li>\n<li>registerBeanPostProcessor注册Bean的后置处理器</li>\n<li>initMessageSource和initApplicationEventMulticaster负责初始化国际化组件和事件多播器</li>\n<li>onRefresh是为子类提供的由子类实现的逻辑，在这里调用</li>\n<li>registerListeners方法查找所有的监听器并注册到7中的广播器</li>\n<li>finishBeanFactoryInitialization初始化剩余的其他单例bean：先调用applyBeanPostProcessorsBeforeInitialization方法，执行每个BeanPostProcessor的postProcessBeforeInitialization，然后调用invokeInitMethods方法，执行bean的初始化方法，使用set设置属性，最后调用applyBeanPostProcessorsAfterInitialization方法，执行每个BeanPostProcessor的postProcessAfterInitialization方法。</li>\n<li>finishRefresh完成其他工作如清除缓存、发布事件等，IOC容器初始化结束</li>\n</ol>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722143755.png\" alt=\"img\"></p>\n<h3 id=\"简述Bean的生命周期和作用范围\"><a href=\"#简述Bean的生命周期和作用范围\" class=\"headerlink\" title=\"简述Bean的生命周期和作用范围\"></a>简述Bean的生命周期和作用范围</h3><p>首先是Spring对Bean进行实例化，将值和Bean的引用注入到其对应的属性中，如果实现了BeanNameAware接口，调用setBeanName方法，让Bean可以获取自己的ID/name，如果实现了BeanFactoryAware接口，调用setBeanFactory，让Bean可以获取配置自己的BeanFactory，拥有Spring容器的功能；将Bean实例传递给Bean的前置处理器的postProcessBeforeInitialization，调用Bean的初始化方法，如果是InitializingBean则先调用afterPropertiesSet方法（可以做一些属性验证和设置），再调用设置的init-method，然后调用后置处理器的postProcessAfterInitialization，之后在工程中使用Bean，在容器关闭之前，调用DisposableBean的destroy方法，如果Bean有自定义销毁方法也会被调用</p>\n<h4 id=\"什么是InitializingBean？\"><a href=\"#什么是InitializingBean？\" class=\"headerlink\" title=\"什么是InitializingBean？\"></a>什么是InitializingBean？</h4><p>Spring提供了两种初始化Bean的方法，一是实现InitializingBean接口，实现afterPropertiesSet方法；二是在配置文件中指定init-method；两种方法可以同时使用。</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">两种有什么区别？</div></div><div class=\"fold\">\n<p>实现InitializingBean接口是直接调用afterPropertiesSet方法，比通过反射调用init-method方法效率更高，但后者消除了对spring的依赖</p>\n\n</div></div>\n\n<p>可以通过scope指定Bean的作用范围，有以下5种类型：</p>\n<ol>\n<li>Singleton：单例的，每次容器返回的对象是同一个，在初始化IOC容器时完成创建</li>\n<li>Prototype：多例的，每次返回的是新创建的实例</li>\n<li>Request：仅作用于HttpRequest，每次Http请求创建一个实例</li>\n<li>Session：仅作用于HttpSession，不同的session使用不同的实例</li>\n<li>Global Session：所有的HttpSession使用同一个实例，仅用于Protlet容器</li>\n</ol>\n<h3 id=\"BeanFactory和FactoryBean、ApplicationContext的区别\"><a href=\"#BeanFactory和FactoryBean、ApplicationContext的区别\" class=\"headerlink\" title=\"BeanFactory和FactoryBean、ApplicationContext的区别\"></a>BeanFactory和FactoryBean、ApplicationContext的区别</h3><p>BeanFactory是一个Factory接口，用来管理Bean的IOC容器，对象工厂，BeanFactory 实例化后并不会自动实例化 Bean，只有当 Bean 被使用时才实例化与装配依赖关系，使用了<strong>延迟加载</strong>，适合多例模式；FactoryBean是一个通过写代码的方式用来自定义实例化bean的接口，传统方式xml/property注解方式可能需要大量的配置 通过实现FactoryBean来简化这个操作，在getObject方法中实现自定义的实例化逻辑；ApplicationContext是BeanFactory的子接口，做了扩展，使用<strong>立即加载</strong>，适合单例模式</p>\n<h3 id=\"依赖注入的实现方式有哪些？在Spring中有哪些相关的注解？\"><a href=\"#依赖注入的实现方式有哪些？在Spring中有哪些相关的注解？\" class=\"headerlink\" title=\"依赖注入的实现方式有哪些？在Spring中有哪些相关的注解？\"></a>依赖注入的实现方式有哪些？在Spring中有哪些相关的注解？</h3><p>有构造方法注入、Setter注入、接口注入三种方式，由于构造方法无法被继承，因此Setter方法注入会更灵活一些，但是无法在对象构造完成后马上进入就绪状态。接口方式通过接口提供方法来注入依赖对象，要求实现接口，侵入性强。</p>\n<p>在Spring中，通过getBean方法获取Bean实例，该方法会调用doGetBean从IOC容器中获取Bean，在创建Bean的过程中会完成依赖注入，在populateBean方法中，注入过程通过setPropertyValues实现，将Bean对象实例设置到它所依赖的Bean对象属性上，BeanWrapperImpl以<strong>JDK反射形式</strong>，通过属性的<strong>setter方法</strong>为属性设置注入后的值。</p>\n<ol>\n<li>@Autowired：自动按类型注入，如果有多个匹配则按照指定Bean的id查找；可与@Qualifier匹配上下文的Bean</li>\n<li>@Resource：直接按照Bean的id注入，只能注入Bean类型</li>\n<li>@Value：用于注入基本数据类型和String类型</li>\n</ol>\n<h2 id=\"AOP是什么？\"><a href=\"#AOP是什么？\" class=\"headerlink\" title=\"AOP是什么？\"></a>AOP是什么？</h2><p>AOP即面向切面编程，某个业务与具体对象无关，是一种通用的功能代码，在具体的时间点(Pointcut)需要被执行，业务功能代码和切面代码分开，合并成完整的业务(称为织入Weave)。常用场景包括权限认证、自动缓存、错误处理、日志、调试和事务等。</p>\n<p>有三种织入方式：</p>\n<ol>\n<li>编译时织入：需要特殊的Java编译器，如AspectJ</li>\n<li>类加载时织入：需要特殊的编译器，如AspectJ和AspectWerkz</li>\n<li>运行时织入：通过动态代理的方式</li>\n</ol>\n<p>在Spring中使用AOP：导入依赖，创建切面<code>@Aspect</code>，定义切入点<code>@PointCut(execution(xxx))</code>方法，定义时机Advice<code>@Before,AfterReturning/Throwing等</code>，在方法内实现需要的逻辑。</p>\n<p>SpringAOP通过Bean的后置处理器将Bean包装成Proxy，调用时通过Proxy来调用，有两种实现方式，如果类实现了接口，则使用JDK动态代理，否则使用CGLib动态代理。</p>\n<h3 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h3><p>被代理类需要实现含有业务方法的接口，代理类需要实现InvocationHandler invoke方法来调用具体的业务方法，最终通过Proxy.newInstance生成代理类，会调用ProxyGenerator的generate方法生成字节码，再用类加载器来装载生成的代理类。</p>\n<p>在Spring AOP中，生成的Proxy类拥有真实类实现的接口的所有方法，其实就是通过<strong>实现相同的接口</strong>，然后在对应的方法周围加入切面逻辑。从Proxy的字节码可以看到，声明了私有静态成员变量Method 01234…通过静态代码块<strong>利用反射</strong>来初始化各个方法。通过Proxy类的成员变量invocationHandler的invoke方法调用具体方法。invoke中在调用具体方法前后会有<strong>切入</strong>的逻辑。</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开代码</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class=\"line\"><span class=\"comment\">// (powered by Fernflower decompiler)</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> aop.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> $<span class=\"title\">Proxy11</span> <span class=\"keyword\">extends</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m4;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m3;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m2;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m0;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> $Proxy11(InvocationHandler var1) <span class=\"keyword\">throws</span>  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object var1)</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Boolean)<span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m1, <span class=\"keyword\">new</span> Object[]&#123;var1&#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var3;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var4) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var4);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">A</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m4, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">B</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m3, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (String)<span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m2, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Integer)<span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m0, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            m1 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"equals\"</span>, Class.forName(<span class=\"string\">\"java.lang.Object\"</span>));</span><br><span class=\"line\">            m4 = Class.forName(<span class=\"string\">\"aop.UserService\"</span>).getMethod(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">            m3 = Class.forName(<span class=\"string\">\"aop.UserService\"</span>).getMethod(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">            m2 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"toString\"</span>);</span><br><span class=\"line\">            m0 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"hashCode\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n<h3 id=\"CGLIB动态代理\"><a href=\"#CGLIB动态代理\" class=\"headerlink\" title=\"CGLIB动态代理\"></a>CGLIB动态代理</h3><p>以继承的方式动态生成目标类的代理，通过修改字节码(asm框架)的方式织入，<strong>不需要接口</strong>，因为cglib是利用<strong>继承真实类通过super来调用真实类方法</strong>，并加入新逻辑的方式来实现的。</p>\n<h2 id=\"Spring-MVC有哪些核心组件？\"><a href=\"#Spring-MVC有哪些核心组件？\" class=\"headerlink\" title=\"Spring MVC有哪些核心组件？\"></a>Spring MVC有哪些核心组件？</h2><p>SpringMVC是一个基于MVC设计模型的请求驱动的轻量级WEB框架，将WEB应用架构划分为视图层View、处理器层Controller、持久层Model。</p>\n<ol>\n<li>DispatcherServlet：前端控制器，负责接受请求并转发到对应的处理组件</li>\n<li>Handler：处理器，完成具体业务逻辑，类似Servlet或Action</li>\n<li>HandlerInterceptor：拦截器，通过实现这个接口完成拦截处理</li>\n<li>HandlerExecutionChain：处理链，包含Handler和HandlerInterceptor。应用了<a href=\"https://realmicah.xyz/posts/503970b4.html#讲讲责任链模式\" target=\"_blank\" rel=\"noopener\">责任链模式</a></li>\n<li>HandlerAdapter：适配器，Handler执行处理业务方法之前，需要完成表单数据验证、数据类型转换、封装到JavaBean等操作，由Adapter完成，通过Adapter执行不同的Handler。应用了<a href=\"https://realmicah.xyz/posts/503970b4.html#适配器模式了解吗？有什么应用？\" target=\"_blank\" rel=\"noopener\">适配器模式</a></li>\n<li>ModelAndView：装在模型数据和视图信息，作为Handler处理结果返回给DispatcherServlet</li>\n<li>ViewResolver：视图解析器，DispatcherServlet通过解析器将逻辑视图转换为物理视图，最终将渲染的结果返回给客户端</li>\n</ol>\n<h2 id=\"Spring-Data-JPA和My-Batis的区别？\"><a href=\"#Spring-Data-JPA和My-Batis的区别？\" class=\"headerlink\" title=\"Spring Data JPA和My Batis的区别？\"></a>Spring Data JPA和My Batis的区别？</h2><p>两者都是ORM对象关系映射框架，将JavaBean对象映射到关系型数据库，通过操作实体类来操作数据库表。Spring Data JPA在运行时通过JDK动态代理创建了Proxy对象SimpleJpaRepository，通过hibernate完成数据库操作。My Batis是一种半自动的ORM框架，使用时通过XML与JavaBean对象产生映射关系连接起来，同时需要书写sql语句，查询的结果通过ResultMap映射到Java对象。从表关联上看，My Batis更加灵活，JPA并不提供多表关联查询</p>\n<h2 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h2><h3 id=\"什么是SpringBoot？有什么优点？\"><a href=\"#什么是SpringBoot？有什么优点？\" class=\"headerlink\" title=\"什么是SpringBoot？有什么优点？\"></a>什么是SpringBoot？有什么优点？</h3><p>SpringBoot是Spring组件一站式解决方案，主要是简化了使用Spring的难度，基于约定大于配置原则，通过AutoConfigure自动配置，当有特殊需求时才需要自行配置，提供了各种starter更加方便地将其他框架集成到项目中。</p>\n<ol>\n<li>容易上手，开发效率更高，远离繁琐的配置</li>\n<li>提供了一系列大型项目通用的非业务性功能，如内嵌服务器、安全管理、运行数据监控、运行状况检查、外部化配置等</li>\n<li>避免了大量的Maven导入和各种版本冲突</li>\n</ol>\n<h3 id=\"SpringBoot的核心注解？\"><a href=\"#SpringBoot的核心注解？\" class=\"headerlink\" title=\"SpringBoot的核心注解？\"></a>SpringBoot的核心注解？</h3><p>@SpringBootApplication：包含了@Configuration实现配置文件功能、@EnableAutoConfiguration打开自动配置功能，如关闭某个自动配置选项、@ComponentScan实现组件扫描</p>\n<h3 id=\"SpringBoot的starter了解吗？\"><a href=\"#SpringBoot的starter了解吗？\" class=\"headerlink\" title=\"SpringBoot的starter了解吗？\"></a>SpringBoot的starter了解吗？</h3><p>starter是在我们的项目需要集成其他组件框架时一种快速集成的方式，starter为我们省去了麻烦的配置信息。在没有starter/SpringBoot之前，每一个项目在需要集成其他的框架像redis等之前都需要手动的配置许多信息，SpringBoot推崇约定大于配置，starter里将组件的配置封装在properities中，并通过AutoConfiguration来装配默认配置。SpringBoot启动时将扫描所有AutoConfiguration类，完成自动配置。</p>\n<h3 id=\"SpringBoot如何进行自动配置？\"><a href=\"#SpringBoot如何进行自动配置？\" class=\"headerlink\" title=\"SpringBoot如何进行自动配置？\"></a>SpringBoot如何进行自动配置？</h3><p>通过@EnableAutoConfiguration开启自动配置，这个注解引入了AutoConfigurationImportSelector，它的selectImports方法从META-INF/spring.factories文件中读取了自动配置类路径，将自动配置类加入到容器中，自动配置类中通过@EnableConfigurationPeoperties引入了对应的配置类xxxProperties.class，类中的属性可以通过yml文件自定义配置，否则使用默认配置，从而实现了自动配置功能。</p>\n<h2 id=\"SpringCloud\"><a href=\"#SpringCloud\" class=\"headerlink\" title=\"SpringCloud\"></a>SpringCloud</h2><h3 id=\"什么是服务治理？\"><a href=\"#什么是服务治理？\" class=\"headerlink\" title=\"什么是服务治理？\"></a>什么是服务治理？</h3><p>微服务的服务注册发现、监控、下线、续期等自动化的管理，</p>\n<h3 id=\"讲一讲注册中心原理？\"><a href=\"#讲一讲注册中心原理？\" class=\"headerlink\" title=\"讲一讲注册中心原理？\"></a>讲一讲注册中心原理？</h3><p>eureka主要通过定时任务和rest调用来实现服务注册和发现，服务实例会把自己的信息发送到注册中心，之后注册中心通过定时任务（心跳）来检查服务状态和进行信息更新。</p>\n<h3 id=\"注册中心存放了什么内容？用什么数据结构？\"><a href=\"#注册中心存放了什么内容？用什么数据结构？\" class=\"headerlink\" title=\"注册中心存放了什么内容？用什么数据结构？\"></a>注册中心存放了什么内容？用什么数据结构？</h3><p>存放了服务实例的信息，如名称、实例id、ip等，使用了Map来存储，第一层Map，key是服务名，值是所有实例，第二层key是实例id，值是实例的信息。</p>\n<h3 id=\"什么是客户端负载均衡？和服务端负载均衡的区别？\"><a href=\"#什么是客户端负载均衡？和服务端负载均衡的区别？\" class=\"headerlink\" title=\"什么是客户端负载均衡？和服务端负载均衡的区别？\"></a>什么是客户端负载均衡？和服务端负载均衡的区别？</h3><p>我们在使用spring-cloud分布式框架时，同一个服务会有多个实例，当一个请求传递过来时，对于这多个实例，Ribbon通过策略决定本次请求使用哪个实例的方式就是客户端负载均衡。在spring-cloud分布式框架中客户端负载均衡对开发者是透明的，添加@LoadBalanced注解就可以了。服务端负载均衡则是在服务器上游做分发，如常见的nginx和lvs，分别是七层和四层的负载均衡，可以通过url、ip、端口来做负载均衡策略的选择。客户端负载均衡和服务器负载均衡的核心差异在<strong>服务列表</strong>本身，客户端负载均衡服务列表通过客户端维护，服务器负载均衡服务列表由中间服务单独维护。</p>\n<h4 id=\"为什么Ribbon要使用客户端负载均衡？\"><a href=\"#为什么Ribbon要使用客户端负载均衡？\" class=\"headerlink\" title=\"为什么Ribbon要使用客户端负载均衡？\"></a>为什么Ribbon要使用客户端负载均衡？</h4><p>客户端负载均衡的服务列表由客户端维护，因此可以直接在自身内存中获取可用的服务实例，效率更高，不需要每个请求都从注册中心获取可用的服务实例，也可以减轻注册中心的压力</p>\n<h3 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h3><ol>\n<li>随机选择RandomRule：通过<code>ThreadLocalRandom.current().nextInt(serverCount)</code>获取随机索引，在<code>upServerList</code>中获取</li>\n<li>轮询RoundRibbonRule：通过递增实现轮询，默认最多选择十次</li>\n<li>重试RetryRule：基于轮询策略，反复重试直到获取到实例</li>\n<li>响应时间加权WeightedResponseTimeRule：先遍历所有服务 得到平均响应时间总和 然后用这个总和减去服务的平均响应时间，作为权重</li>\n</ol>\n<h3 id=\"服务熔断有什么用？\"><a href=\"#服务熔断有什么用？\" class=\"headerlink\" title=\"服务熔断有什么用？\"></a>服务熔断有什么用？</h3><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。当某个微服务不可用或者响应时间太长时，会进行服务降级，进而熔断该节点微服务的调用，快速返回“错误”的响应信息。当检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现，Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内调用20次，如果失败，就会启动熔断机制。</p>\n<p>服务降级，一般是从整体负荷考虑。就是当某个服务熔断之后，服务器将不再被调用，此时客户端可以自己准备一个本地的fallback回调，返回一个缺省值。这样做，虽然水平下降，但好歹可用，比直接挂掉强。</p>\n<h3 id=\"如何理解分布式框架-分布式服务？\"><a href=\"#如何理解分布式框架-分布式服务？\" class=\"headerlink\" title=\"如何理解分布式框架/分布式服务？\"></a>如何理解分布式框架/分布式服务？</h3><p>分布式服务即是将传统的单体应用，从业务角度或其他角度切分为多个应用，独立运行，对外提供服务。部署在不同的服务器节点，称为分布式服务。框架用来具体实施时告诉你如何搭建出一套分布式系统。分布式框架中，最重要的两个组件就是注册中心和RPC框架，注册中心负责维护服务状态，RPC实现服务间的通信。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722143755.png","popularPost_tmp_gaData":{"updated":"Thu Aug 06 2020 09:24:37 GMT+0800 (中国标准时间)","title":"Spring家族面试问题","path":"posts/caab1d3c.html","eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722143755.png","excerpt":"<p></p>","date":{"_isAMomentObject":true,"_i":"2020-07-16T14:14:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-07-16T14:14:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Java后端面试","tags":["Java后端面试","Spring Cloud"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":9105},{"title":"Spring Cloud入门","image":"https://gitee.com/jingshanccc/image/raw/master/image/20200726173938.png","abbrlink":"a49c4b2e","date":"2020-07-23T14:14:00.000Z","_content":"\n<p/>\n\n<!-- more -->\n\n## 前言\n\n在入门Spring Cloud框架时写了这篇文章，记录一下学习过程，也当是给和我一样的初学者的入门避坑。本文将通过学习相关的组件概念，并进行代码实战，从零开始搭建一个基础的Spring Cloud项目。\n\n### 环境\n\n1. IDEA 2020.1\n2. Maven 3.5.4\n3. Spring Cloud Hoxton.SR6\n4. Spring Boot 2.3.2\n5. [项目仓库地址](https://github.com/jingshanccc/spring-cloud)\n\n在IDEA中创建一个空的Maven项目，删除src目录，pom文件中修改打包方式为pom，表示项目为聚合/多模块项目。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.chan</groupId>\n    <artifactId>spring-cloud</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n\n</project>\n```\n\n\n\n### Spring Cloud版本号介绍\n\n![image-20200726131044766](https://gitee.com/jingshanccc/image/raw/master/image/20200726131044.png)\n\n可以看到Spring Cloud的版本号不是常规的1.0.1这样的数字形式，原因是Spring Cloud是由众多独立的子项目组成的，子项目有自己的开发节奏，版本发行时间，为了避免冲突，因此采用伦敦地铁站来命名，按字母顺序对应发行顺序，像最开始的Angel到上图中最新的Hoxton。后面的GA、SNAPSHOT、SR对应意义如下表：\n\n|       版本号        |    版本    | 用途                                                         |\n| :-----------------: | :--------: | :----------------------------------------------------------- |\n| SNAPSHOT(BUILD-XXX) |   开发版   | 一般是开发团队内部使用                                       |\n|         GA          |   稳定版   | 内部开发到一定阶段，没有大问题，但可能存在比较多的小bug，可以对外发布 |\n|     PRE(M1,M2)      |  里程碑版  | 相较于GA版，修复了大部分的bug，成为milestone版。一个GA后一般有多个里程碑版M1,M2等 |\n|         RC          | 候选发布版 | 在里程碑版之后，系统已经趋于稳定，进入等待发布阶段（Release Candidate），这个阶段主要修复新发现的等级较高的bug，发布RC1,RC2版 |\n|         SR          | 正式发布版 | 正式发布，后续会进行优化或修复bug，发布SR1,SR2版本           |\n\n上图中还出现了2020.0这样的版本号，这是在2020年新采用的命名方式，格式是` YYYY.MINOR.MICRO` ，其中`YYYY`是发行年份，`MINOR`是一年中的从零开始递增的数字，`MICOR`对应以前是用的后缀，.0通常表示RELEASE，例如.0-M2，0-RC2等。火车站将会作为代号，但不会再用于发布到Maven仓库的版本，2020的代号是IIford。\n\n### 分布式、集群、微服务\n\n1. 分布式：将一个系统的不同模块部署在不同的服务器上，提高并发能力。\n2. 集群：将一个模块部署到不同的服务器上，构成集群向外提供相同的服务，提高可用性。\n3. 微服务：将传统的系统按照功能或业务，拆分成相互独立的模块，每个模块对外提供自己的服务。\n\n## 服务治理\n\n### 简介\n\n在微服务架构下，各服务之间需要相互通信、感知服务状态、调用其他服务，这些就通过服务注册中心来完成。顾名思义，它提供了服务注册功能，系统中所有的服务都需要注册到注册中心，并通过注册中心，获得所有可用的服务，调用指定服务名的服务。服务治理体系中有三种核心角色：服务注册中心（Eureka-Server）、服务提供者（Eureka-Client）、服务消费者（Eureka-Client）\n\n### 搭建服务注册中心\n\n在之前创建的Maven项目中通过`new -> module `新建一个子模块，使用Spring Initializr创建一个Spring Boot项目，添加eureka-server依赖。\n\n![image-20200726125158684](https://gitee.com/jingshanccc/image/raw/master/image/20200726125205.png)\n\n等待maven依赖下载完成后，将eureka-server的部分依赖剪切到父项目的pom文件中，因为作为多模块项目，项目的依赖应当在父项目中统一管理。\n\n同时在父项目中添加modules节点，填入eureka-server模块，在eureka-server中添加parent节点，填入父项目信息。最终两个文件如下所示\n\n{% fold 父模块pom %}\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.3.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.chan</groupId>\n    <artifactId>spring-cloud</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring-cloud</name>\n    <description>Demo project for Spring Cloud</description>\n    <packaging>pom</packaging>\n\n    <modules>\n        <module>eureka-server</module>\n    </modules>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Hoxton.SR6</spring-cloud.version>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\n{% endfold %}\n\n{% fold 子模块pom %}\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <artifactId>spring-cloud</artifactId>\n        <groupId>com.chan</groupId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n    <artifactId>eureka-server</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>eureka-server</name>\n    <description>Spring Cloud Eureka-Server</description>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n        </dependency>\n    </dependencies>\n\n</project>\n\n```\n\n{% endfold %}\n\n### 注册中心配置\n\n如果想要看详细全面的配置介绍，可以看本文附录[注册中心配置项详解](#注册中心配置项详解)\n\n#### 单机\n\n```yaml\nserver:\n  port: 7001\neureka:\n  instance:\n    hostname: eureka7001.com\n  client:\n    fetch-registry: false #单节点不向自己注册\n    register-with-eureka: false\n    service-url:\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/ #单节点\n\n#此服务名称\nspring:\n  application:\n    name: eurka-server\n```\n\n#### 集群\n\n```yaml\nserver:\n  port: 7002\neureka:\n  instance:\n    hostname: eureka7002.com\n  client:\n    service-url:\n        defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7003.com:7003/eureka/\n\n#此服务名称\nspring:\n  application:\n    name: eurka-server\n```\n\n#### 启动类\n\n在启动类添加注解\n\n```java\npackage com.chan.springcloud;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\n\n@SpringBootApplication\n@EnableEurekaServer\npublic class EurekaServerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaServerApplication.class, args);\n    }\n\n}\n```\n\n经过上述的操作，就搭建起了spring-cloud的注册中心，可以启动应用，访问对应端口，即可看到此时的注册中心上的所有服务。\n\n![image-20200726132742403](https://gitee.com/jingshanccc/image/raw/master/image/20200726132742.png)\n\n### 服务提供者/消费者\n\n通过`new->module`创建新的子模块eureka-client，加入依赖\n\n![image-20200726134547466](https://gitee.com/jingshanccc/image/raw/master/image/20200726134547.png)\n\n之后修改pom文件并yml文件中添加配置，在启动类添加注解@EnableDiscoveryClient\n\n{% fold pom文件 %}\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <artifactId>spring-cloud</artifactId>\n        <groupId>com.chan</groupId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n    <artifactId>eureka-client</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>eureka-client</name>\n    <description>Spring Cloud Eureka Client</description>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n{% endfold %}\n\n{% fold yml文件 %}\n\n```yaml\nserver:\n  port: 9003\nspring:\n  application:\n    name: eureka-client\neureka:\n  client:\n    service-url:\n       defaultZone: http://eureka7001.com:7001/eureka/ #单节点\n#      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/\n  instance:\n    instance-id: eureka-client #服务名\n    prefer-ip-address: true #使用自己的ip地址注册而不是主机名\n```\n\n{% endfold %}\n\n{% fold 启动类 %}\n\n```java\npackage com.chan.springcloud;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class EurekaClientApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaClientApplication.class, args);\n    }\n\n}\n```\n\n{% endfold %}\n\n完成上述操作后，可在eureka-server的监控页面中看到eureka-client服务实例，可按照上述步骤，创建两个新的模块服务提供者service-provider、服务消费者service-consumer用于接下来的学习。\n\n## Ribbon客户端负载均衡\n\n### 简介\n\nRibbon是一套客户端负载均衡工具，提供客户端的负载均衡算法，在配置文件列出的同一服务的所有实例根据规则选择一个实例使用。\n\n### 核心组件\n\n1. 负载均衡策略IRule：可选的有随机选择RandomRule、轮询RoundRibbonRule、RetryRule，响应时间加权WeightedResponseTimeRule。也可以通过继承AbstractLoadBalancerRule实现自定义的负载均衡策略，将其配置到Ribbon中\n2. 负载均衡器ILoadBalancer：接口实现类维护了两个list，分别是`upServerList`、`allServerList`，提供了初始化添加服务、获取所有服务、可用服务维护这两个列表，通过IRule实现chooseServer方法根据负载均衡策略选择一个服务实例\n\n### 服务消费者整合Ribbon\n\n#### 引入依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>\n</dependency>\n```\n\n#### 引入RestTemplate\n\n```java\n@Bean\n@LoadBalanced\npublic RestTemplate restTemplate(){\n    return new RestTemplate();\n}\n```\n\n#### 使用RestTemplate调用服务\n\n```java\n@RestController\npublic class RibbonController {\n    private final static String PREFIX = \"http://provider/\"; //provider是服务名\n\n    @Autowired\n    private RestTemplate template;\n\n    @GetMapping(\"/hello\")\n    public String hello(){\n        return template.getForObject(PREFIX+\"hello\",String.class, (Object) null);\n    }\n}\n```\n\n{% note success %}\n\n未在博客出现的代码可到[项目仓库](https://github.com/jingshanccc/spring-cloud)获取\n\n{% endnote %}\n\n## Hystrix服务容错\n\n### 简介\n\nHystrix是一套服务容错机制，提供服务降级、服务熔断、服务限流、请求缓存/合并等功能，避免因为系统部分服务不可用导致整个系统宕机无法对外提供服务，同时提高性能。\n\n### 核心组件\n\n1. HystrixCommand/HystrixObservableCommand：配置fallback备用逻辑\n2. HystrixCricuitBreaker：提供了isOpen()判断断路器是否打开、allowRequest()判断每个Hystrix命令的请求是否允许被执行、markSuccess()用于关闭断路器\n\n### 服务消费者集成Hystrix\n\n#### 引入依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n</dependency>\n```\n\n#### 启动类添加@EnableCircuitBreaker注解开启断路器\n\n#### 调用服务时\n\n通过@HystrixCommand指定fallback逻辑，当服务超时、不可用时，将通过fallback方法返回响应。\n\n```java\n@RestController\npublic class RibbonController {\n    private final static String PREFIX = \"http://provider/\"; //服务名\n\n    @Autowired\n    private RestTemplate template;\n\n    @GetMapping(\"/hello\")\n    @HystrixCommand(fallbackMethod = \"hystrixFallback\")\n    public String hello(){\n        return template.getForObject(PREFIX+\"hello\",String.class,(Object)null);\n    }\n\n    public String hystrixFallback(){\n        return \"hystrix fallback hello\";\n    }\n\n}\n```\n\n{% note info %}\n\n关于Hystrix的配置和注解项，由于篇幅过长，可在本文附录查看[Hystrix注解和配置详解](#Hystrix注解和配置详解)\n\n{% endnote %}\n\n## Feign\n\n### 简介\n\n在微服务中，服务容错和负载均衡几乎是必备的功能，因此产生了Feign。Feign是一套整合了Hystrix和Ribbon，并通过声明式进行服务调用的组件。\n\n### 使用\n\n- 创建一个新的服务消费者，并引入Feign依赖\n\n  {% fold pom文件 %}\n\n  ```xml\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n      <modelVersion>4.0.0</modelVersion>\n      <parent>\n          <artifactId>spring-cloud</artifactId>\n          <groupId>com.chan</groupId>\n          <version>0.0.1-SNAPSHOT</version>\n      </parent>\n      <groupId>com.chan.springcloud</groupId>\n      <artifactId>consumer-feign</artifactId>\n      <version>0.0.1-SNAPSHOT</version>\n      <name>consumer-feign</name>\n      <description>Spring Cloud Consumer Feign</description>\n  \n      <dependencies>\n          <dependency>\n              <groupId>org.springframework.cloud</groupId>\n              <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n          </dependency>\n          <dependency>\n              <groupId>org.springframework.cloud</groupId>\n              <artifactId>spring-cloud-starter-openfeign</artifactId>\n          </dependency>\n  \n          <dependency>\n              <groupId>org.springframework.boot</groupId>\n              <artifactId>spring-boot-starter-web</artifactId>\n          </dependency>\n      </dependencies>\n  \n  \n  </project>\n  \n  ```\n\n  {% endfold %}\n\n- yml文件以及启动类：可配置hystrix熔断超时时间，在启动类添加@EnableFeignClients开启Feign\n\n- @FiegnClient：在服务调用接口service中，通过@FeignClient注解指定调用的服务以及失败回退策略\n\n  ```java\n  @FeignClient(value = \"provider\", fallbackFactory = ClientFallbackFactory.class)\n  public interface ClientService {\n  \n      @GetMapping(\"/hello\")\n      String hello();\n  \n  }\n  ```\n\n  \n\n- Controller调用服务：注入service，调用接口方法。\n\n### 配置详解\n\n#### 公用配置feign.httpclient\n\n| 配置项                   | 说明                           |\n| ------------------------ | ------------------------------ |\n| connection-timeout       | 连接超时时间，单位ms，默认2s   |\n| max-connections          | 最大连接数，默认200            |\n| max-connection-per-route | 每个路由最大连接数，默认50     |\n| disabled-ssl-validtion   | 是否关闭ssl连接验证，默认false |\n| follow-redirect          | 是否支持重定向，默认true       |\n| time-to-live             | 连接存活时间                   |\n\n#### 为某个服务接口定制配置\n\n通过feign.client.xxx：指定service名定制配置\n\n## 配置中心Config\n\n### 简介\n\n存放各服务配置文件的配置中心，方便服务配置的集中管理和动态刷新，并起到分环境、分配置、通过加解密增强安全性的作用。有配置中心config-server和配置使用者config-client两种角色\n\n在整合了配置中心后，应用在运行时会通过配置的远程配置中心地址和文件名，加载指定的配置。\n\n### 配置中心搭建\n\n- 新建一个项目，引入配置中心依赖，修改pom文件\n\n  ![image-20200726155947916](https://gitee.com/jingshanccc/image/raw/master/image/20200726155948.png)\n\n  {% fold 展开 %}\n\n  ```xml\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n      <modelVersion>4.0.0</modelVersion>\n      <parent>\n          <artifactId>spring-cloud</artifactId>\n          <groupId>com.chan</groupId>\n          <version>0.0.1-SNAPSHOT</version>\n      </parent>\n      <groupId>com.chan.springcloud</groupId>\n      <artifactId>config-server</artifactId>\n      <version>0.0.1-SNAPSHOT</version>\n      <name>config-server</name>\n      <description>Spring Cloud Config Server</description>\n  \n      <dependencies>\n          <dependency>\n              <groupId>org.springframework.cloud</groupId>\n              <artifactId>spring-cloud-config-server</artifactId>\n          </dependency>\n          <dependency>\n              <groupId>org.springframework.cloud</groupId>\n              <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n          </dependency>\n  \n      </dependencies>\n  </project>\n  \n  ```\n\n  \n\n  {% endfold %}\n\n- yml文件配置远程配置中心地址\n\n  {% fold 展开 %}\n\n  ```yaml\n  server:\n    port: 4001\n  spring:\n    application:\n      name: config-server\n    cloud:\n      config:\n        server:\n          git:\n            uri:\n            username:\n            password:\n            basedir: ./repo-config/ #缓存到本地的路径 执行的是new File(\"./repo-config/\")操作\n  eureka:\n    client:\n      service-url:\n         defaultZone: http://eureka7001.com:7001/eureka/ #单节点\n  #      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/\n    instance:\n      instance-id: config-server #服务名\n      prefer-ip-address: true #使用自己的ip地址注册而不是主机名\n  ```\n\n  \n\n  {% endfold %}\n\n- 启动类增加@Enable开启配置中心\n\n### 客户端整合配置中心\n\n在需要使用远程配置的客户端（消费者/提供者）整合配置中心。\n\n1. pom文件引入spring-cloud-starter-config依赖\n\n2. 将**application.yml**改为**bootstrap.yml**配置文件，在其中加入远程配置中心的相关配置\n\n   {% fold 展开 %}\n\n   ```yaml\n   spring:\n     cloud:\n       config:\n         name: provider\n         profile: dev\n         uri: http://localhost:4001\n         discovery:\n           enabled: true\n           service-id: config-server\n   \n   eureka:\n     client:\n       service-url:\n         defaultZone: http://eureka7001.com:7001/eureka/\n         instance:\n           instance-id: service-provider #服务名\n           prefer-ip-address: true #ip地址\n   ```\n\n   \n\n   {% endfold %}\n\n在服务启动后，可以在日志看到服务从远程配置中心获取指定的配置文件\n\n![image-20200726165017386](https://gitee.com/jingshanccc/image/raw/master/image/20200726165017.png)\n\n### 配置详解\n\n#### config-server配置\n\n前缀为spring.cloud.config.server\n\n|    配置项    |          说明          |\n| :----------: | :--------------------: |\n|     git      | 使用git仓库，默认方式  |\n|   git.uri    |        仓库地址        |\n| git.username |         用户名         |\n| git.password |          密码          |\n| git.basedir  | 下载到本地的缓存文件夹 |\n\n#### config-client配置\n\n前缀为spring.cloud.config\n\n|        配置项        |                        说明                         |\n| :------------------: | :-------------------------------------------------: |\n|  discovery.enabled   |          是否从配置中心获取配置，默认false          |\n| discovery.service-id |                   配置中心服务名                    |\n|         uri          |                config-server服务地址                |\n|         name         | 配置文件名，application-dev.yml则name为appplication |\n|       profile        |                         dev                         |\n\n## 消息总线Bus\n\n### 简介\n\n顾名思义，消息总线用来连接分布式节点，广播消息。Spring Cloud目前支持Kafka和RabbitMq两种消息队列中间件。\n\n接下来以分布式配置的动态刷新来在项目中使用消息中线Bus\n\n### 使用\n\n在config-server和config-client上搭建\n\n#### RabbitMq\n\n1. pom文件引入基于RabbitMq的bus依赖spring-cloud-starter-bus-amqp，同时需要spring-boot-starter-actuator依赖\n\n2. yml文件增加RabbitMq相关配置，并向外暴露/bus-refresh接口用于触发更新\n\n   {% fold 展开 %}\n\n   ```yaml\n   server:\n     port: 4001\n   spring:\n     application:\n       name: config-server\n     cloud:\n       config:\n         server:\n           git:\n             uri:\n             username:\n             password:\n             basedir: ./repo-config/ #缓存到本地的路径 执行的是new File(\"./repo-config/\")操作\n       bus:\n         trace:\n           enabled: true\n     rabbitmq:\n       addresses: 192.168.10.130:5672\n       username: guest\n       password: guest\n   eureka:\n     client:\n       service-url:\n          defaultZone: http://eureka7001.com:7001/eureka/ #单节点\n   #      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/\n     instance:\n       instance-id: config-server #服务名\n       prefer-ip-address: true #使用自己的ip地址注册而不是主机名\n   management:\n     endpoints:\n       web:\n         exposure:\n           include: bus-refresh\n   ```\n\n   \n\n   {% endfold %}\n\n#### Kafka\n\n1. pom文件引入基于Kafka的bus依赖spring-cloud-starter-bus-kafka，同时需要spring-boot-starter-actuator依赖\n\n2. yml文件增加Kafka相关配置，并向外暴露/bus-refresh接口用于触发更新\n\n   {% fold 展开 %}\n\n   ```yaml\n   server:\n     port: 4001\n   spring:\n     application:\n       name: config-server\n     cloud:\n       config:\n         server:\n           git:\n             uri:\n             username:\n             password:\n             basedir: ./repo-config/ #缓存到本地的路径 执行的是new File(\"./repo-config/\")操作\n       bus:\n         trace:\n           enabled: true\n       stream:\n         kafka:\n           binder:\n             brokers: 192.168.10.130:9092\n   eureka:\n     client:\n       service-url:\n          defaultZone: http://eureka7001.com:7001/eureka/ #单节点\n   #      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/\n     instance:\n       instance-id: config-server #服务名\n       prefer-ip-address: true #使用自己的ip地址注册而不是主机名\n   management:\n     endpoints:\n       web:\n         exposure:\n           include: bus-refresh\n   ```\n\n   \n\n   {% endfold %}\n\n配置完成后，通过访问config-server的/bus-refresh接口，触发服务的配置更新，可以在控制台查看对应的日志输出。也可以通过/bus/refresh?destination=xxx:port指定实例更新\n\n## Zuul网关\n\n### 简介\n\n对外暴露的API，面向用户，系统UI端所有请求都需要经过网关，因此，可在网关通过拦截过滤，实现认证鉴权、动态路由、负载均衡、静态资源统一处理等功能，从而减少代码冗余，提高系统性能\n\n### 使用\n\n- 创建一个新模块gateway，引入spring-cloud-starter-netflix-zuul依赖\n\n- yml文件中，通过zuul.routes配置代理的服务路径、公共前缀等\n\n  {% fold yml文件 %}\n\n  ```yaml\n  server:\n    port: 5001\n  spring:\n    application:\n      name: gateway\n  eureka:\n    client:\n      service-url:\n         defaultZone: http://eureka7001.com:7001/eureka/ #单节点\n  #      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/\n    instance:\n      instance-id: gateway-zuul #服务名\n      prefer-ip-address: true #使用自己的ip地址注册而不是主机名\n  zuul:\n    routes:\n      ribbon:\n        path: /api-ribbon/**  #代理名称\n        serviceId: service-consumer  #代理的服务\n      feign:\n        path: /api-feign/**\n        serviceId: consumer-feign\n  #      prefix: /api  #公共前缀\n  ```\n\n  \n\n  {% endfold %}\n\n- 启动类增加@EnableZuulProxy注解开启网关\n\n之后可以通过localhost:5001/api-ribbon/hello调用服务提供者provider的hello接口，且由于是通过ribbon调用，因此具有负载均衡功能。\n\n### 核心组件Filter\n\n通过继承ZuulFilter实现自定义的校验逻辑，实现认证鉴权、动态路由等功能。filter提供了4个方法\n\n1. filterType()：过滤时机，pre：路由之前、routing：路由时、error：发生错误、post：在routing和error之后\n2. filterOrder()：过滤器优先级\n3. shouldFilter()：是否开启\n4. run()：校验逻辑\n\n{% fold 查看实例代码 %}\n\n```java\n@Component\npublic class MyFilter extends ZuulFilter {\n    @Override\n    public String filterType() {\n        return \"pre\";\n    }\n\n    @Override\n    public int filterOrder() {\n        return 0;\n    }\n\n    @Override\n    public boolean shouldFilter() {\n        return true;\n    }\n\n    @Override\n    public Object run() throws ZuulException {\n        System.out.println(\"filtered by my filter\");\n        return null;\n    }\n}\n```\n\n{% endfold %}\n\n### 配置详解\n\n#### 代理服务配置zuul.routes\n\n|   配置项   |     说明      |\n| :--------: | :-----------: |\n| service-id |  代理服务名   |\n|    path    | 代理名称/路径 |\n\n#### 服务中配置\n\n|            配置项            |                             说明                             |\n| :--------------------------: | :----------------------------------------------------------: |\n|            prefix            |                       公共前缀，默认\"\"                       |\n|         strip-prefix         |                 路由时是否删除前缀，默认true                 |\n|          retryable           |                   是否支持重试，默认false                    |\n|       addProxyHeaders        |           是否添加'X-forwarded-*'请求头，默认true            |\n|        addHostHeader         |                  是否添加主机头，默认false                   |\n|       ignoredServices        |            不代理的服务，默认为空，即代理所有服务            |\n|        ignoredHeaders        |                  忽略的HTTP请求头，默认null                  |\n|       sensitiveHeaders       | 不传递给下游的敏感请求头信息，默认有\"cookie\",\"set-cookie\",\"authorization\" |\n| sslHostnameValidationEnabled |              是否验证ssl连接的主机名，默认true               |\n\n\n\n## 附录\n\n### 注册中心配置项详解\n\n#### eureka.client\n\n|                    配置项                     |                             说明                             |\n| :-------------------------------------------: | :----------------------------------------------------------: |\n|                    enabled                    |                客户端是否开启的标志，默认true                |\n|         registryFetchIntervalSeconds          |        从eureka-server获取服务清单的频率，默认30s/次         |\n|    instanceInfoReplicationIntervalSeconds     |              更新实例变化信息的频率，默认30s/次              |\n| initialInstanceInfoReplicationIntervalSeconds |         初始化实例信息到eureka-server的时间，默认40s         |\n|      eurekaServiceUrlPollIntervalSeconds      |           多久更新一次eureka-server信息，默认5分钟           |\n|                   proxyPort                   |                    eureka-server代理端口                     |\n|                   proxyHost                   |                    eureka-server代理主机                     |\n|                 proxyUserName                 |                   eureka-server代理用户名                    |\n|                 proxyPassword                 |                    eureka-server代理密码                     |\n|        eurekaServerReadTimeoutSeconds         |            读取eureka-server信息超时时间，默认8s             |\n|       eurekaServerConnectTimeoutSeconds       |              连接eureka-server超时时间，默认5s               |\n|         eurekaServerTotalConnections          |                      总连接数，默认200                       |\n|      eurekaServerTotalConnectionsPerHost      |                每个eureka-server实例连接总数                 |\n|      eurekaConnectionIdleTimeoutSeconds       |                HTTP连接keepalive时间，默认30s                |\n|        heartbeatExecutorThreadPoolSize        |                   心跳线程池线程数，默认2                    |\n|   heartbeatExecutorExponentialBackOffBound    | 心跳执行程序回退相关的属性，是重试延迟的最大倍数值，默认为10 |\n|      cacheRefreshExecutorThreadPoolSize       |                 缓存刷新线程池线程数，默认2                  |\n|  cacheRefreshExecutorExponentialBackOffBound  |             缓存刷新重试延迟的最大倍数值，默认10             |\n|                   serverUrl                   |             指定注册中心地址，集群以','为分隔符              |\n|                  gZipContent                  |                 是否压缩注册表内容，默认true                 |\n|         useDnsForFetchingServiceUrls          |           是否使用DNS来获取服务实例清单，默认false           |\n|              registerWithEureka               |              是否注册到eureka-server，默认true               |\n|             preferSameZoneEureka              |       优先选择同一个Zone空间的eureka-server，默认true        |\n|                 logDeltaDiff                  |     是否记录eureka-server和eureka-client在实例清单的差异     |\n|                 disableDelta                  |                      禁用记录的差异信息                      |\n|             filterOnlyUpInstances             |                只获取状态为UP的实例，默认true                |\n|                 fetchRegistry                 |        是否从eureka-server获取注册实例清单，默认true         |\n|               dollarReplacement               |     序列化/反序列化eureka-server信息时的$替换符，默认_-      |\n|             escapeCharReplacement             |     序列化/反序列化eureka-server信息时的-替换符，默认__      |\n|                allowRedirects                 | 是否允许eureka-server将eureka-client请求转发到其他eureka-server，默认true |\n|          onDemandUpdateStatusChange           |  本地状态更新将触发远程eureka-server注册信息更新，默认true   |\n|                  encoderName                  |                            编码器                            |\n|                  decoderName                  |                            解码器                            |\n|          shouldUnregisterOnShutdown           |     eureka-client关闭后是否自动从注册中心注销，默认true      |\n|        shouldEnforceRegistrationAtInit        |        eureka-client在初始化时是否必须注册，默认false        |\n|                     order                     |           用于 `CompositeDiscoveryClient` 发现排序           |\n\n#### eureka.instance服务实例\n\n|              配置项              |                             说明                             |\n| :------------------------------: | :----------------------------------------------------------: |\n|           instance-id            |                  同一服务不同实例的唯一标识                  |\n|             appname              | 服务名，默认UNKNOWN，如果有spring.application.name则使用该名字 |\n|             hostname             |               主机名，默认使用操作系统的主机名               |\n|          nonSecurePort           |                    非安全通信端口，默认80                    |\n|       nonSecurePortEnabled       |               是否开始非安全通信端口，默认true               |\n|            securePort            |                    安全通信端口，默认443                     |\n|        securePortEnabled         |               是否开启安全通信端口，默认false                |\n|  leaseRenewalIntervalInSeconds   |                  发送心跳信息间隔，默认30s                   |\n| leaseExpirationDurationInSeconds |                      过期时间，默认90s                       |\n|          statusPageUrl           |                状态信息Url绝对路径，默认null                 |\n|           homePageUrl            |                homePageUrl绝对路径，默认null                 |\n|          healthCheckUrl          |                健康检测Url绝对路径，默认null                 |\n|         preferIpAddress          |                优先使用IP地址注册，默认false                 |\n\n### Hystrix注解和配置详解\n\n更详细内容可查看[官方文档](https://github.com/Netflix/Hystrix/wiki/Configuration)\n\n#### @HystrixCommand\n\n|       可配置属性        |                             说明                             |\n| :---------------------: | :----------------------------------------------------------: |\n|     fallbackMethod      |                           回退方法                           |\n|       commandKey        |            Hystrix命令的键，默认是被注解的方法名             |\n|        groupKey         |                  一组命令的标识，默认是类名                  |\n|      threadPoolKey      |  线程池的标识，默认是groupKey，一个类的命令使用同一个线程池  |\n| observableExecutionMode |              异步执行的命令执行模式，EAGER/LAZY              |\n|    commandProperties    |            命令配置，可以以数组形式设置命令的属性            |\n|  threadPoolProperties   |           线程池配置，可以以数组形式设置线程池属性           |\n|    ignoreExceptions     | 忽视异常，如果执行过程出现未被忽视异常Hystrix会调用fallback。 |\n\n#### @FeignClient\n\nFeign使用Hystrix，可使用此注解\n\n|   可配置属性    |                             说明                             |\n| :-------------: | :----------------------------------------------------------: |\n|    fallback     |           回退策略，通过实现接口FeignClient的方式            |\n|      value      |                            服务名                            |\n| fallbackFactory | 回退策略，通过实现FallbackFactory<FeignClient>生成实例的方式 |\n\n#### HystrixCommandProperties\n\n##### 线程隔离execution.\n\n|                  配置项                   |                   说明                   |\n| :---------------------------------------: | :--------------------------------------: |\n|             isolation.stragy              |  隔离方式：线程池THREAD信号量SEMAPHORE   |\n|              timeout.enabled              |               开启超时熔断               |\n|  isolation.thread.timeoutInMilliseconds   |        超时时间，单位毫秒，默认1s        |\n|    isolation.thread.interruptOnTimeout    |       超时后是否中断方法，默认true       |\n| isolation.thread.interruptOnFutureCancel  |      取消后是否中断方法，默认false       |\n| isolation.semaphore.maxConcurrentRequests | 使用信号量隔离方式时最大并发数，默认是10 |\n\n\n\n##### 统计器metrics.\n\n|                配置项                 |                          说明                           |\n| :-----------------------------------: | :-----------------------------------------------------: |\n|    rollingStats.timeInmilliseconds    | Hystrix滑动窗口大小，单位ms，默认1s，即统计1s内请求总数 |\n| healthSnapshot.intervalInMilliseconds | Hystrix桶的大小，默认500ms，每经过500ms计算窗口的失败率 |\n|        rollingStats.numBuckets        |         可视化界面时一个窗口应该拆分成多少个桶          |\n|       rollingPercentile.enabled       |          是否统计方法响应时间百分比，默认true           |\n| rollingPercentile.timeInMilliseconds  |        统计响应时间百分比时窗口大小，默认一分钟         |\n|     rollingPercentile.numBuckets      |               一个窗口划分成几个桶，默认6               |\n|     rollingPercentile.bucketSize      |       每个桶保留的请求数，默认100，即最近的100条        |\n\n##### 熔断器circuitBreaker.\n\n|          配置项          |                        说明                         |\n| :----------------------: | :-------------------------------------------------: |\n|         enabled          |              是否开启熔断器，默认true               |\n|        forceOpen         |                      强制启用                       |\n|       forceClosed        |                      强制关闭                       |\n|  requestVolumeThreshold  | 窗口最小请求数，需要根据接口的qps来设置，避免误触发 |\n| errorThresholdPercentage |         失败率阈值，超过该百分比则触发熔断          |\n| sleepWindowMilliseconds  |          触发熔断后多久就放行请求，默认5s           |\n\n#### HystrixThreadPoolProperties\n\n|                配置项                 |                 说明                  |\n| :-----------------------------------: | :-----------------------------------: |\n|               coreSize                |          核心线程数，默认10           |\n| allowMaximunSizeToDivergeFromCoreSize | 允许扩展到线程池最大线程数，默认false |\n|              maxinumSize              |          最大线程数，默认10           |\n|             maxQueueSize              |         任务队列大小，默认-1          |\n|      queueSizeRejectionThreshold      |   任务队列到达此值就拒绝请求，默认5   |\n|         keepAliveTimeMinutes          |        空闲存活时间，默认2分钟        |\n\n","source":"_posts/SpringCloud入门.md","raw":"---\ntitle: Spring Cloud入门\ntags:\n  - Spring Cloud\ncategories:\n  - Spring Cloud\nimage: 'https://gitee.com/jingshanccc/image/raw/master/image/20200726173938.png'\nabbrlink: a49c4b2e\ndate: '2020-07-23 22:14'\n---\n\n<p/>\n\n<!-- more -->\n\n## 前言\n\n在入门Spring Cloud框架时写了这篇文章，记录一下学习过程，也当是给和我一样的初学者的入门避坑。本文将通过学习相关的组件概念，并进行代码实战，从零开始搭建一个基础的Spring Cloud项目。\n\n### 环境\n\n1. IDEA 2020.1\n2. Maven 3.5.4\n3. Spring Cloud Hoxton.SR6\n4. Spring Boot 2.3.2\n5. [项目仓库地址](https://github.com/jingshanccc/spring-cloud)\n\n在IDEA中创建一个空的Maven项目，删除src目录，pom文件中修改打包方式为pom，表示项目为聚合/多模块项目。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.chan</groupId>\n    <artifactId>spring-cloud</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n\n</project>\n```\n\n\n\n### Spring Cloud版本号介绍\n\n![image-20200726131044766](https://gitee.com/jingshanccc/image/raw/master/image/20200726131044.png)\n\n可以看到Spring Cloud的版本号不是常规的1.0.1这样的数字形式，原因是Spring Cloud是由众多独立的子项目组成的，子项目有自己的开发节奏，版本发行时间，为了避免冲突，因此采用伦敦地铁站来命名，按字母顺序对应发行顺序，像最开始的Angel到上图中最新的Hoxton。后面的GA、SNAPSHOT、SR对应意义如下表：\n\n|       版本号        |    版本    | 用途                                                         |\n| :-----------------: | :--------: | :----------------------------------------------------------- |\n| SNAPSHOT(BUILD-XXX) |   开发版   | 一般是开发团队内部使用                                       |\n|         GA          |   稳定版   | 内部开发到一定阶段，没有大问题，但可能存在比较多的小bug，可以对外发布 |\n|     PRE(M1,M2)      |  里程碑版  | 相较于GA版，修复了大部分的bug，成为milestone版。一个GA后一般有多个里程碑版M1,M2等 |\n|         RC          | 候选发布版 | 在里程碑版之后，系统已经趋于稳定，进入等待发布阶段（Release Candidate），这个阶段主要修复新发现的等级较高的bug，发布RC1,RC2版 |\n|         SR          | 正式发布版 | 正式发布，后续会进行优化或修复bug，发布SR1,SR2版本           |\n\n上图中还出现了2020.0这样的版本号，这是在2020年新采用的命名方式，格式是` YYYY.MINOR.MICRO` ，其中`YYYY`是发行年份，`MINOR`是一年中的从零开始递增的数字，`MICOR`对应以前是用的后缀，.0通常表示RELEASE，例如.0-M2，0-RC2等。火车站将会作为代号，但不会再用于发布到Maven仓库的版本，2020的代号是IIford。\n\n### 分布式、集群、微服务\n\n1. 分布式：将一个系统的不同模块部署在不同的服务器上，提高并发能力。\n2. 集群：将一个模块部署到不同的服务器上，构成集群向外提供相同的服务，提高可用性。\n3. 微服务：将传统的系统按照功能或业务，拆分成相互独立的模块，每个模块对外提供自己的服务。\n\n## 服务治理\n\n### 简介\n\n在微服务架构下，各服务之间需要相互通信、感知服务状态、调用其他服务，这些就通过服务注册中心来完成。顾名思义，它提供了服务注册功能，系统中所有的服务都需要注册到注册中心，并通过注册中心，获得所有可用的服务，调用指定服务名的服务。服务治理体系中有三种核心角色：服务注册中心（Eureka-Server）、服务提供者（Eureka-Client）、服务消费者（Eureka-Client）\n\n### 搭建服务注册中心\n\n在之前创建的Maven项目中通过`new -> module `新建一个子模块，使用Spring Initializr创建一个Spring Boot项目，添加eureka-server依赖。\n\n![image-20200726125158684](https://gitee.com/jingshanccc/image/raw/master/image/20200726125205.png)\n\n等待maven依赖下载完成后，将eureka-server的部分依赖剪切到父项目的pom文件中，因为作为多模块项目，项目的依赖应当在父项目中统一管理。\n\n同时在父项目中添加modules节点，填入eureka-server模块，在eureka-server中添加parent节点，填入父项目信息。最终两个文件如下所示\n\n{% fold 父模块pom %}\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.3.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.chan</groupId>\n    <artifactId>spring-cloud</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring-cloud</name>\n    <description>Demo project for Spring Cloud</description>\n    <packaging>pom</packaging>\n\n    <modules>\n        <module>eureka-server</module>\n    </modules>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <spring-cloud.version>Hoxton.SR6</spring-cloud.version>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\n{% endfold %}\n\n{% fold 子模块pom %}\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <artifactId>spring-cloud</artifactId>\n        <groupId>com.chan</groupId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n    <artifactId>eureka-server</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>eureka-server</name>\n    <description>Spring Cloud Eureka-Server</description>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n        </dependency>\n    </dependencies>\n\n</project>\n\n```\n\n{% endfold %}\n\n### 注册中心配置\n\n如果想要看详细全面的配置介绍，可以看本文附录[注册中心配置项详解](#注册中心配置项详解)\n\n#### 单机\n\n```yaml\nserver:\n  port: 7001\neureka:\n  instance:\n    hostname: eureka7001.com\n  client:\n    fetch-registry: false #单节点不向自己注册\n    register-with-eureka: false\n    service-url:\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/ #单节点\n\n#此服务名称\nspring:\n  application:\n    name: eurka-server\n```\n\n#### 集群\n\n```yaml\nserver:\n  port: 7002\neureka:\n  instance:\n    hostname: eureka7002.com\n  client:\n    service-url:\n        defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7003.com:7003/eureka/\n\n#此服务名称\nspring:\n  application:\n    name: eurka-server\n```\n\n#### 启动类\n\n在启动类添加注解\n\n```java\npackage com.chan.springcloud;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;\n\n@SpringBootApplication\n@EnableEurekaServer\npublic class EurekaServerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaServerApplication.class, args);\n    }\n\n}\n```\n\n经过上述的操作，就搭建起了spring-cloud的注册中心，可以启动应用，访问对应端口，即可看到此时的注册中心上的所有服务。\n\n![image-20200726132742403](https://gitee.com/jingshanccc/image/raw/master/image/20200726132742.png)\n\n### 服务提供者/消费者\n\n通过`new->module`创建新的子模块eureka-client，加入依赖\n\n![image-20200726134547466](https://gitee.com/jingshanccc/image/raw/master/image/20200726134547.png)\n\n之后修改pom文件并yml文件中添加配置，在启动类添加注解@EnableDiscoveryClient\n\n{% fold pom文件 %}\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <artifactId>spring-cloud</artifactId>\n        <groupId>com.chan</groupId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n    <artifactId>eureka-client</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>eureka-client</name>\n    <description>Spring Cloud Eureka Client</description>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n{% endfold %}\n\n{% fold yml文件 %}\n\n```yaml\nserver:\n  port: 9003\nspring:\n  application:\n    name: eureka-client\neureka:\n  client:\n    service-url:\n       defaultZone: http://eureka7001.com:7001/eureka/ #单节点\n#      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/\n  instance:\n    instance-id: eureka-client #服务名\n    prefer-ip-address: true #使用自己的ip地址注册而不是主机名\n```\n\n{% endfold %}\n\n{% fold 启动类 %}\n\n```java\npackage com.chan.springcloud;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class EurekaClientApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaClientApplication.class, args);\n    }\n\n}\n```\n\n{% endfold %}\n\n完成上述操作后，可在eureka-server的监控页面中看到eureka-client服务实例，可按照上述步骤，创建两个新的模块服务提供者service-provider、服务消费者service-consumer用于接下来的学习。\n\n## Ribbon客户端负载均衡\n\n### 简介\n\nRibbon是一套客户端负载均衡工具，提供客户端的负载均衡算法，在配置文件列出的同一服务的所有实例根据规则选择一个实例使用。\n\n### 核心组件\n\n1. 负载均衡策略IRule：可选的有随机选择RandomRule、轮询RoundRibbonRule、RetryRule，响应时间加权WeightedResponseTimeRule。也可以通过继承AbstractLoadBalancerRule实现自定义的负载均衡策略，将其配置到Ribbon中\n2. 负载均衡器ILoadBalancer：接口实现类维护了两个list，分别是`upServerList`、`allServerList`，提供了初始化添加服务、获取所有服务、可用服务维护这两个列表，通过IRule实现chooseServer方法根据负载均衡策略选择一个服务实例\n\n### 服务消费者整合Ribbon\n\n#### 引入依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>\n</dependency>\n```\n\n#### 引入RestTemplate\n\n```java\n@Bean\n@LoadBalanced\npublic RestTemplate restTemplate(){\n    return new RestTemplate();\n}\n```\n\n#### 使用RestTemplate调用服务\n\n```java\n@RestController\npublic class RibbonController {\n    private final static String PREFIX = \"http://provider/\"; //provider是服务名\n\n    @Autowired\n    private RestTemplate template;\n\n    @GetMapping(\"/hello\")\n    public String hello(){\n        return template.getForObject(PREFIX+\"hello\",String.class, (Object) null);\n    }\n}\n```\n\n{% note success %}\n\n未在博客出现的代码可到[项目仓库](https://github.com/jingshanccc/spring-cloud)获取\n\n{% endnote %}\n\n## Hystrix服务容错\n\n### 简介\n\nHystrix是一套服务容错机制，提供服务降级、服务熔断、服务限流、请求缓存/合并等功能，避免因为系统部分服务不可用导致整个系统宕机无法对外提供服务，同时提高性能。\n\n### 核心组件\n\n1. HystrixCommand/HystrixObservableCommand：配置fallback备用逻辑\n2. HystrixCricuitBreaker：提供了isOpen()判断断路器是否打开、allowRequest()判断每个Hystrix命令的请求是否允许被执行、markSuccess()用于关闭断路器\n\n### 服务消费者集成Hystrix\n\n#### 引入依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n</dependency>\n```\n\n#### 启动类添加@EnableCircuitBreaker注解开启断路器\n\n#### 调用服务时\n\n通过@HystrixCommand指定fallback逻辑，当服务超时、不可用时，将通过fallback方法返回响应。\n\n```java\n@RestController\npublic class RibbonController {\n    private final static String PREFIX = \"http://provider/\"; //服务名\n\n    @Autowired\n    private RestTemplate template;\n\n    @GetMapping(\"/hello\")\n    @HystrixCommand(fallbackMethod = \"hystrixFallback\")\n    public String hello(){\n        return template.getForObject(PREFIX+\"hello\",String.class,(Object)null);\n    }\n\n    public String hystrixFallback(){\n        return \"hystrix fallback hello\";\n    }\n\n}\n```\n\n{% note info %}\n\n关于Hystrix的配置和注解项，由于篇幅过长，可在本文附录查看[Hystrix注解和配置详解](#Hystrix注解和配置详解)\n\n{% endnote %}\n\n## Feign\n\n### 简介\n\n在微服务中，服务容错和负载均衡几乎是必备的功能，因此产生了Feign。Feign是一套整合了Hystrix和Ribbon，并通过声明式进行服务调用的组件。\n\n### 使用\n\n- 创建一个新的服务消费者，并引入Feign依赖\n\n  {% fold pom文件 %}\n\n  ```xml\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n      <modelVersion>4.0.0</modelVersion>\n      <parent>\n          <artifactId>spring-cloud</artifactId>\n          <groupId>com.chan</groupId>\n          <version>0.0.1-SNAPSHOT</version>\n      </parent>\n      <groupId>com.chan.springcloud</groupId>\n      <artifactId>consumer-feign</artifactId>\n      <version>0.0.1-SNAPSHOT</version>\n      <name>consumer-feign</name>\n      <description>Spring Cloud Consumer Feign</description>\n  \n      <dependencies>\n          <dependency>\n              <groupId>org.springframework.cloud</groupId>\n              <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n          </dependency>\n          <dependency>\n              <groupId>org.springframework.cloud</groupId>\n              <artifactId>spring-cloud-starter-openfeign</artifactId>\n          </dependency>\n  \n          <dependency>\n              <groupId>org.springframework.boot</groupId>\n              <artifactId>spring-boot-starter-web</artifactId>\n          </dependency>\n      </dependencies>\n  \n  \n  </project>\n  \n  ```\n\n  {% endfold %}\n\n- yml文件以及启动类：可配置hystrix熔断超时时间，在启动类添加@EnableFeignClients开启Feign\n\n- @FiegnClient：在服务调用接口service中，通过@FeignClient注解指定调用的服务以及失败回退策略\n\n  ```java\n  @FeignClient(value = \"provider\", fallbackFactory = ClientFallbackFactory.class)\n  public interface ClientService {\n  \n      @GetMapping(\"/hello\")\n      String hello();\n  \n  }\n  ```\n\n  \n\n- Controller调用服务：注入service，调用接口方法。\n\n### 配置详解\n\n#### 公用配置feign.httpclient\n\n| 配置项                   | 说明                           |\n| ------------------------ | ------------------------------ |\n| connection-timeout       | 连接超时时间，单位ms，默认2s   |\n| max-connections          | 最大连接数，默认200            |\n| max-connection-per-route | 每个路由最大连接数，默认50     |\n| disabled-ssl-validtion   | 是否关闭ssl连接验证，默认false |\n| follow-redirect          | 是否支持重定向，默认true       |\n| time-to-live             | 连接存活时间                   |\n\n#### 为某个服务接口定制配置\n\n通过feign.client.xxx：指定service名定制配置\n\n## 配置中心Config\n\n### 简介\n\n存放各服务配置文件的配置中心，方便服务配置的集中管理和动态刷新，并起到分环境、分配置、通过加解密增强安全性的作用。有配置中心config-server和配置使用者config-client两种角色\n\n在整合了配置中心后，应用在运行时会通过配置的远程配置中心地址和文件名，加载指定的配置。\n\n### 配置中心搭建\n\n- 新建一个项目，引入配置中心依赖，修改pom文件\n\n  ![image-20200726155947916](https://gitee.com/jingshanccc/image/raw/master/image/20200726155948.png)\n\n  {% fold 展开 %}\n\n  ```xml\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n      <modelVersion>4.0.0</modelVersion>\n      <parent>\n          <artifactId>spring-cloud</artifactId>\n          <groupId>com.chan</groupId>\n          <version>0.0.1-SNAPSHOT</version>\n      </parent>\n      <groupId>com.chan.springcloud</groupId>\n      <artifactId>config-server</artifactId>\n      <version>0.0.1-SNAPSHOT</version>\n      <name>config-server</name>\n      <description>Spring Cloud Config Server</description>\n  \n      <dependencies>\n          <dependency>\n              <groupId>org.springframework.cloud</groupId>\n              <artifactId>spring-cloud-config-server</artifactId>\n          </dependency>\n          <dependency>\n              <groupId>org.springframework.cloud</groupId>\n              <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n          </dependency>\n  \n      </dependencies>\n  </project>\n  \n  ```\n\n  \n\n  {% endfold %}\n\n- yml文件配置远程配置中心地址\n\n  {% fold 展开 %}\n\n  ```yaml\n  server:\n    port: 4001\n  spring:\n    application:\n      name: config-server\n    cloud:\n      config:\n        server:\n          git:\n            uri:\n            username:\n            password:\n            basedir: ./repo-config/ #缓存到本地的路径 执行的是new File(\"./repo-config/\")操作\n  eureka:\n    client:\n      service-url:\n         defaultZone: http://eureka7001.com:7001/eureka/ #单节点\n  #      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/\n    instance:\n      instance-id: config-server #服务名\n      prefer-ip-address: true #使用自己的ip地址注册而不是主机名\n  ```\n\n  \n\n  {% endfold %}\n\n- 启动类增加@Enable开启配置中心\n\n### 客户端整合配置中心\n\n在需要使用远程配置的客户端（消费者/提供者）整合配置中心。\n\n1. pom文件引入spring-cloud-starter-config依赖\n\n2. 将**application.yml**改为**bootstrap.yml**配置文件，在其中加入远程配置中心的相关配置\n\n   {% fold 展开 %}\n\n   ```yaml\n   spring:\n     cloud:\n       config:\n         name: provider\n         profile: dev\n         uri: http://localhost:4001\n         discovery:\n           enabled: true\n           service-id: config-server\n   \n   eureka:\n     client:\n       service-url:\n         defaultZone: http://eureka7001.com:7001/eureka/\n         instance:\n           instance-id: service-provider #服务名\n           prefer-ip-address: true #ip地址\n   ```\n\n   \n\n   {% endfold %}\n\n在服务启动后，可以在日志看到服务从远程配置中心获取指定的配置文件\n\n![image-20200726165017386](https://gitee.com/jingshanccc/image/raw/master/image/20200726165017.png)\n\n### 配置详解\n\n#### config-server配置\n\n前缀为spring.cloud.config.server\n\n|    配置项    |          说明          |\n| :----------: | :--------------------: |\n|     git      | 使用git仓库，默认方式  |\n|   git.uri    |        仓库地址        |\n| git.username |         用户名         |\n| git.password |          密码          |\n| git.basedir  | 下载到本地的缓存文件夹 |\n\n#### config-client配置\n\n前缀为spring.cloud.config\n\n|        配置项        |                        说明                         |\n| :------------------: | :-------------------------------------------------: |\n|  discovery.enabled   |          是否从配置中心获取配置，默认false          |\n| discovery.service-id |                   配置中心服务名                    |\n|         uri          |                config-server服务地址                |\n|         name         | 配置文件名，application-dev.yml则name为appplication |\n|       profile        |                         dev                         |\n\n## 消息总线Bus\n\n### 简介\n\n顾名思义，消息总线用来连接分布式节点，广播消息。Spring Cloud目前支持Kafka和RabbitMq两种消息队列中间件。\n\n接下来以分布式配置的动态刷新来在项目中使用消息中线Bus\n\n### 使用\n\n在config-server和config-client上搭建\n\n#### RabbitMq\n\n1. pom文件引入基于RabbitMq的bus依赖spring-cloud-starter-bus-amqp，同时需要spring-boot-starter-actuator依赖\n\n2. yml文件增加RabbitMq相关配置，并向外暴露/bus-refresh接口用于触发更新\n\n   {% fold 展开 %}\n\n   ```yaml\n   server:\n     port: 4001\n   spring:\n     application:\n       name: config-server\n     cloud:\n       config:\n         server:\n           git:\n             uri:\n             username:\n             password:\n             basedir: ./repo-config/ #缓存到本地的路径 执行的是new File(\"./repo-config/\")操作\n       bus:\n         trace:\n           enabled: true\n     rabbitmq:\n       addresses: 192.168.10.130:5672\n       username: guest\n       password: guest\n   eureka:\n     client:\n       service-url:\n          defaultZone: http://eureka7001.com:7001/eureka/ #单节点\n   #      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/\n     instance:\n       instance-id: config-server #服务名\n       prefer-ip-address: true #使用自己的ip地址注册而不是主机名\n   management:\n     endpoints:\n       web:\n         exposure:\n           include: bus-refresh\n   ```\n\n   \n\n   {% endfold %}\n\n#### Kafka\n\n1. pom文件引入基于Kafka的bus依赖spring-cloud-starter-bus-kafka，同时需要spring-boot-starter-actuator依赖\n\n2. yml文件增加Kafka相关配置，并向外暴露/bus-refresh接口用于触发更新\n\n   {% fold 展开 %}\n\n   ```yaml\n   server:\n     port: 4001\n   spring:\n     application:\n       name: config-server\n     cloud:\n       config:\n         server:\n           git:\n             uri:\n             username:\n             password:\n             basedir: ./repo-config/ #缓存到本地的路径 执行的是new File(\"./repo-config/\")操作\n       bus:\n         trace:\n           enabled: true\n       stream:\n         kafka:\n           binder:\n             brokers: 192.168.10.130:9092\n   eureka:\n     client:\n       service-url:\n          defaultZone: http://eureka7001.com:7001/eureka/ #单节点\n   #      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/\n     instance:\n       instance-id: config-server #服务名\n       prefer-ip-address: true #使用自己的ip地址注册而不是主机名\n   management:\n     endpoints:\n       web:\n         exposure:\n           include: bus-refresh\n   ```\n\n   \n\n   {% endfold %}\n\n配置完成后，通过访问config-server的/bus-refresh接口，触发服务的配置更新，可以在控制台查看对应的日志输出。也可以通过/bus/refresh?destination=xxx:port指定实例更新\n\n## Zuul网关\n\n### 简介\n\n对外暴露的API，面向用户，系统UI端所有请求都需要经过网关，因此，可在网关通过拦截过滤，实现认证鉴权、动态路由、负载均衡、静态资源统一处理等功能，从而减少代码冗余，提高系统性能\n\n### 使用\n\n- 创建一个新模块gateway，引入spring-cloud-starter-netflix-zuul依赖\n\n- yml文件中，通过zuul.routes配置代理的服务路径、公共前缀等\n\n  {% fold yml文件 %}\n\n  ```yaml\n  server:\n    port: 5001\n  spring:\n    application:\n      name: gateway\n  eureka:\n    client:\n      service-url:\n         defaultZone: http://eureka7001.com:7001/eureka/ #单节点\n  #      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/\n    instance:\n      instance-id: gateway-zuul #服务名\n      prefer-ip-address: true #使用自己的ip地址注册而不是主机名\n  zuul:\n    routes:\n      ribbon:\n        path: /api-ribbon/**  #代理名称\n        serviceId: service-consumer  #代理的服务\n      feign:\n        path: /api-feign/**\n        serviceId: consumer-feign\n  #      prefix: /api  #公共前缀\n  ```\n\n  \n\n  {% endfold %}\n\n- 启动类增加@EnableZuulProxy注解开启网关\n\n之后可以通过localhost:5001/api-ribbon/hello调用服务提供者provider的hello接口，且由于是通过ribbon调用，因此具有负载均衡功能。\n\n### 核心组件Filter\n\n通过继承ZuulFilter实现自定义的校验逻辑，实现认证鉴权、动态路由等功能。filter提供了4个方法\n\n1. filterType()：过滤时机，pre：路由之前、routing：路由时、error：发生错误、post：在routing和error之后\n2. filterOrder()：过滤器优先级\n3. shouldFilter()：是否开启\n4. run()：校验逻辑\n\n{% fold 查看实例代码 %}\n\n```java\n@Component\npublic class MyFilter extends ZuulFilter {\n    @Override\n    public String filterType() {\n        return \"pre\";\n    }\n\n    @Override\n    public int filterOrder() {\n        return 0;\n    }\n\n    @Override\n    public boolean shouldFilter() {\n        return true;\n    }\n\n    @Override\n    public Object run() throws ZuulException {\n        System.out.println(\"filtered by my filter\");\n        return null;\n    }\n}\n```\n\n{% endfold %}\n\n### 配置详解\n\n#### 代理服务配置zuul.routes\n\n|   配置项   |     说明      |\n| :--------: | :-----------: |\n| service-id |  代理服务名   |\n|    path    | 代理名称/路径 |\n\n#### 服务中配置\n\n|            配置项            |                             说明                             |\n| :--------------------------: | :----------------------------------------------------------: |\n|            prefix            |                       公共前缀，默认\"\"                       |\n|         strip-prefix         |                 路由时是否删除前缀，默认true                 |\n|          retryable           |                   是否支持重试，默认false                    |\n|       addProxyHeaders        |           是否添加'X-forwarded-*'请求头，默认true            |\n|        addHostHeader         |                  是否添加主机头，默认false                   |\n|       ignoredServices        |            不代理的服务，默认为空，即代理所有服务            |\n|        ignoredHeaders        |                  忽略的HTTP请求头，默认null                  |\n|       sensitiveHeaders       | 不传递给下游的敏感请求头信息，默认有\"cookie\",\"set-cookie\",\"authorization\" |\n| sslHostnameValidationEnabled |              是否验证ssl连接的主机名，默认true               |\n\n\n\n## 附录\n\n### 注册中心配置项详解\n\n#### eureka.client\n\n|                    配置项                     |                             说明                             |\n| :-------------------------------------------: | :----------------------------------------------------------: |\n|                    enabled                    |                客户端是否开启的标志，默认true                |\n|         registryFetchIntervalSeconds          |        从eureka-server获取服务清单的频率，默认30s/次         |\n|    instanceInfoReplicationIntervalSeconds     |              更新实例变化信息的频率，默认30s/次              |\n| initialInstanceInfoReplicationIntervalSeconds |         初始化实例信息到eureka-server的时间，默认40s         |\n|      eurekaServiceUrlPollIntervalSeconds      |           多久更新一次eureka-server信息，默认5分钟           |\n|                   proxyPort                   |                    eureka-server代理端口                     |\n|                   proxyHost                   |                    eureka-server代理主机                     |\n|                 proxyUserName                 |                   eureka-server代理用户名                    |\n|                 proxyPassword                 |                    eureka-server代理密码                     |\n|        eurekaServerReadTimeoutSeconds         |            读取eureka-server信息超时时间，默认8s             |\n|       eurekaServerConnectTimeoutSeconds       |              连接eureka-server超时时间，默认5s               |\n|         eurekaServerTotalConnections          |                      总连接数，默认200                       |\n|      eurekaServerTotalConnectionsPerHost      |                每个eureka-server实例连接总数                 |\n|      eurekaConnectionIdleTimeoutSeconds       |                HTTP连接keepalive时间，默认30s                |\n|        heartbeatExecutorThreadPoolSize        |                   心跳线程池线程数，默认2                    |\n|   heartbeatExecutorExponentialBackOffBound    | 心跳执行程序回退相关的属性，是重试延迟的最大倍数值，默认为10 |\n|      cacheRefreshExecutorThreadPoolSize       |                 缓存刷新线程池线程数，默认2                  |\n|  cacheRefreshExecutorExponentialBackOffBound  |             缓存刷新重试延迟的最大倍数值，默认10             |\n|                   serverUrl                   |             指定注册中心地址，集群以','为分隔符              |\n|                  gZipContent                  |                 是否压缩注册表内容，默认true                 |\n|         useDnsForFetchingServiceUrls          |           是否使用DNS来获取服务实例清单，默认false           |\n|              registerWithEureka               |              是否注册到eureka-server，默认true               |\n|             preferSameZoneEureka              |       优先选择同一个Zone空间的eureka-server，默认true        |\n|                 logDeltaDiff                  |     是否记录eureka-server和eureka-client在实例清单的差异     |\n|                 disableDelta                  |                      禁用记录的差异信息                      |\n|             filterOnlyUpInstances             |                只获取状态为UP的实例，默认true                |\n|                 fetchRegistry                 |        是否从eureka-server获取注册实例清单，默认true         |\n|               dollarReplacement               |     序列化/反序列化eureka-server信息时的$替换符，默认_-      |\n|             escapeCharReplacement             |     序列化/反序列化eureka-server信息时的-替换符，默认__      |\n|                allowRedirects                 | 是否允许eureka-server将eureka-client请求转发到其他eureka-server，默认true |\n|          onDemandUpdateStatusChange           |  本地状态更新将触发远程eureka-server注册信息更新，默认true   |\n|                  encoderName                  |                            编码器                            |\n|                  decoderName                  |                            解码器                            |\n|          shouldUnregisterOnShutdown           |     eureka-client关闭后是否自动从注册中心注销，默认true      |\n|        shouldEnforceRegistrationAtInit        |        eureka-client在初始化时是否必须注册，默认false        |\n|                     order                     |           用于 `CompositeDiscoveryClient` 发现排序           |\n\n#### eureka.instance服务实例\n\n|              配置项              |                             说明                             |\n| :------------------------------: | :----------------------------------------------------------: |\n|           instance-id            |                  同一服务不同实例的唯一标识                  |\n|             appname              | 服务名，默认UNKNOWN，如果有spring.application.name则使用该名字 |\n|             hostname             |               主机名，默认使用操作系统的主机名               |\n|          nonSecurePort           |                    非安全通信端口，默认80                    |\n|       nonSecurePortEnabled       |               是否开始非安全通信端口，默认true               |\n|            securePort            |                    安全通信端口，默认443                     |\n|        securePortEnabled         |               是否开启安全通信端口，默认false                |\n|  leaseRenewalIntervalInSeconds   |                  发送心跳信息间隔，默认30s                   |\n| leaseExpirationDurationInSeconds |                      过期时间，默认90s                       |\n|          statusPageUrl           |                状态信息Url绝对路径，默认null                 |\n|           homePageUrl            |                homePageUrl绝对路径，默认null                 |\n|          healthCheckUrl          |                健康检测Url绝对路径，默认null                 |\n|         preferIpAddress          |                优先使用IP地址注册，默认false                 |\n\n### Hystrix注解和配置详解\n\n更详细内容可查看[官方文档](https://github.com/Netflix/Hystrix/wiki/Configuration)\n\n#### @HystrixCommand\n\n|       可配置属性        |                             说明                             |\n| :---------------------: | :----------------------------------------------------------: |\n|     fallbackMethod      |                           回退方法                           |\n|       commandKey        |            Hystrix命令的键，默认是被注解的方法名             |\n|        groupKey         |                  一组命令的标识，默认是类名                  |\n|      threadPoolKey      |  线程池的标识，默认是groupKey，一个类的命令使用同一个线程池  |\n| observableExecutionMode |              异步执行的命令执行模式，EAGER/LAZY              |\n|    commandProperties    |            命令配置，可以以数组形式设置命令的属性            |\n|  threadPoolProperties   |           线程池配置，可以以数组形式设置线程池属性           |\n|    ignoreExceptions     | 忽视异常，如果执行过程出现未被忽视异常Hystrix会调用fallback。 |\n\n#### @FeignClient\n\nFeign使用Hystrix，可使用此注解\n\n|   可配置属性    |                             说明                             |\n| :-------------: | :----------------------------------------------------------: |\n|    fallback     |           回退策略，通过实现接口FeignClient的方式            |\n|      value      |                            服务名                            |\n| fallbackFactory | 回退策略，通过实现FallbackFactory<FeignClient>生成实例的方式 |\n\n#### HystrixCommandProperties\n\n##### 线程隔离execution.\n\n|                  配置项                   |                   说明                   |\n| :---------------------------------------: | :--------------------------------------: |\n|             isolation.stragy              |  隔离方式：线程池THREAD信号量SEMAPHORE   |\n|              timeout.enabled              |               开启超时熔断               |\n|  isolation.thread.timeoutInMilliseconds   |        超时时间，单位毫秒，默认1s        |\n|    isolation.thread.interruptOnTimeout    |       超时后是否中断方法，默认true       |\n| isolation.thread.interruptOnFutureCancel  |      取消后是否中断方法，默认false       |\n| isolation.semaphore.maxConcurrentRequests | 使用信号量隔离方式时最大并发数，默认是10 |\n\n\n\n##### 统计器metrics.\n\n|                配置项                 |                          说明                           |\n| :-----------------------------------: | :-----------------------------------------------------: |\n|    rollingStats.timeInmilliseconds    | Hystrix滑动窗口大小，单位ms，默认1s，即统计1s内请求总数 |\n| healthSnapshot.intervalInMilliseconds | Hystrix桶的大小，默认500ms，每经过500ms计算窗口的失败率 |\n|        rollingStats.numBuckets        |         可视化界面时一个窗口应该拆分成多少个桶          |\n|       rollingPercentile.enabled       |          是否统计方法响应时间百分比，默认true           |\n| rollingPercentile.timeInMilliseconds  |        统计响应时间百分比时窗口大小，默认一分钟         |\n|     rollingPercentile.numBuckets      |               一个窗口划分成几个桶，默认6               |\n|     rollingPercentile.bucketSize      |       每个桶保留的请求数，默认100，即最近的100条        |\n\n##### 熔断器circuitBreaker.\n\n|          配置项          |                        说明                         |\n| :----------------------: | :-------------------------------------------------: |\n|         enabled          |              是否开启熔断器，默认true               |\n|        forceOpen         |                      强制启用                       |\n|       forceClosed        |                      强制关闭                       |\n|  requestVolumeThreshold  | 窗口最小请求数，需要根据接口的qps来设置，避免误触发 |\n| errorThresholdPercentage |         失败率阈值，超过该百分比则触发熔断          |\n| sleepWindowMilliseconds  |          触发熔断后多久就放行请求，默认5s           |\n\n#### HystrixThreadPoolProperties\n\n|                配置项                 |                 说明                  |\n| :-----------------------------------: | :-----------------------------------: |\n|               coreSize                |          核心线程数，默认10           |\n| allowMaximunSizeToDivergeFromCoreSize | 允许扩展到线程池最大线程数，默认false |\n|              maxinumSize              |          最大线程数，默认10           |\n|             maxQueueSize              |         任务队列大小，默认-1          |\n|      queueSizeRejectionThreshold      |   任务队列到达此值就拒绝请求，默认5   |\n|         keepAliveTimeMinutes          |        空闲存活时间，默认2分钟        |\n\n","slug":"SpringCloud入门","published":1,"updated":"2020-07-26T10:43:58.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2d0032z4ejei3y6ssn","content":"<p/>\n\n<a id=\"more\"></a>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在入门Spring Cloud框架时写了这篇文章，记录一下学习过程，也当是给和我一样的初学者的入门避坑。本文将通过学习相关的组件概念，并进行代码实战，从零开始搭建一个基础的Spring Cloud项目。</p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ol>\n<li>IDEA 2020.1</li>\n<li>Maven 3.5.4</li>\n<li>Spring Cloud Hoxton.SR6</li>\n<li>Spring Boot 2.3.2</li>\n<li><a href=\"https://github.com/jingshanccc/spring-cloud\" target=\"_blank\" rel=\"noopener\">项目仓库地址</a></li>\n</ol>\n<p>在IDEA中创建一个空的Maven项目，删除src目录，pom文件中修改打包方式为pom，表示项目为聚合/多模块项目。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Spring-Cloud版本号介绍\"><a href=\"#Spring-Cloud版本号介绍\" class=\"headerlink\" title=\"Spring Cloud版本号介绍\"></a>Spring Cloud版本号介绍</h3><p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200726131044.png\" alt=\"image-20200726131044766\"></p>\n<p>可以看到Spring Cloud的版本号不是常规的1.0.1这样的数字形式，原因是Spring Cloud是由众多独立的子项目组成的，子项目有自己的开发节奏，版本发行时间，为了避免冲突，因此采用伦敦地铁站来命名，按字母顺序对应发行顺序，像最开始的Angel到上图中最新的Hoxton。后面的GA、SNAPSHOT、SR对应意义如下表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">版本号</th>\n<th align=\"center\">版本</th>\n<th align=\"left\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SNAPSHOT(BUILD-XXX)</td>\n<td align=\"center\">开发版</td>\n<td align=\"left\">一般是开发团队内部使用</td>\n</tr>\n<tr>\n<td align=\"center\">GA</td>\n<td align=\"center\">稳定版</td>\n<td align=\"left\">内部开发到一定阶段，没有大问题，但可能存在比较多的小bug，可以对外发布</td>\n</tr>\n<tr>\n<td align=\"center\">PRE(M1,M2)</td>\n<td align=\"center\">里程碑版</td>\n<td align=\"left\">相较于GA版，修复了大部分的bug，成为milestone版。一个GA后一般有多个里程碑版M1,M2等</td>\n</tr>\n<tr>\n<td align=\"center\">RC</td>\n<td align=\"center\">候选发布版</td>\n<td align=\"left\">在里程碑版之后，系统已经趋于稳定，进入等待发布阶段（Release Candidate），这个阶段主要修复新发现的等级较高的bug，发布RC1,RC2版</td>\n</tr>\n<tr>\n<td align=\"center\">SR</td>\n<td align=\"center\">正式发布版</td>\n<td align=\"left\">正式发布，后续会进行优化或修复bug，发布SR1,SR2版本</td>\n</tr>\n</tbody></table>\n<p>上图中还出现了2020.0这样的版本号，这是在2020年新采用的命名方式，格式是<code>YYYY.MINOR.MICRO</code> ，其中<code>YYYY</code>是发行年份，<code>MINOR</code>是一年中的从零开始递增的数字，<code>MICOR</code>对应以前是用的后缀，.0通常表示RELEASE，例如.0-M2，0-RC2等。火车站将会作为代号，但不会再用于发布到Maven仓库的版本，2020的代号是IIford。</p>\n<h3 id=\"分布式、集群、微服务\"><a href=\"#分布式、集群、微服务\" class=\"headerlink\" title=\"分布式、集群、微服务\"></a>分布式、集群、微服务</h3><ol>\n<li>分布式：将一个系统的不同模块部署在不同的服务器上，提高并发能力。</li>\n<li>集群：将一个模块部署到不同的服务器上，构成集群向外提供相同的服务，提高可用性。</li>\n<li>微服务：将传统的系统按照功能或业务，拆分成相互独立的模块，每个模块对外提供自己的服务。</li>\n</ol>\n<h2 id=\"服务治理\"><a href=\"#服务治理\" class=\"headerlink\" title=\"服务治理\"></a>服务治理</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>在微服务架构下，各服务之间需要相互通信、感知服务状态、调用其他服务，这些就通过服务注册中心来完成。顾名思义，它提供了服务注册功能，系统中所有的服务都需要注册到注册中心，并通过注册中心，获得所有可用的服务，调用指定服务名的服务。服务治理体系中有三种核心角色：服务注册中心（Eureka-Server）、服务提供者（Eureka-Client）、服务消费者（Eureka-Client）</p>\n<h3 id=\"搭建服务注册中心\"><a href=\"#搭建服务注册中心\" class=\"headerlink\" title=\"搭建服务注册中心\"></a>搭建服务注册中心</h3><p>在之前创建的Maven项目中通过<code>new -&gt; module</code>新建一个子模块，使用Spring Initializr创建一个Spring Boot项目，添加eureka-server依赖。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200726125205.png\" alt=\"image-20200726125158684\"></p>\n<p>等待maven依赖下载完成后，将eureka-server的部分依赖剪切到父项目的pom文件中，因为作为多模块项目，项目的依赖应当在父项目中统一管理。</p>\n<p>同时在父项目中添加modules节点，填入eureka-server模块，在eureka-server中添加parent节点，填入父项目信息。最终两个文件如下所示</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">父模块pom</div></div><div class=\"fold\">\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring-cloud<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Cloud<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>eureka-server<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Hoxton.SR6<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">子模块pom</div></div><div class=\"fold\">\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>eureka-server<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Spring Cloud Eureka-Server<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n<h3 id=\"注册中心配置\"><a href=\"#注册中心配置\" class=\"headerlink\" title=\"注册中心配置\"></a>注册中心配置</h3><p>如果想要看详细全面的配置介绍，可以看本文附录<a href=\"#注册中心配置项详解\">注册中心配置项详解</a></p>\n<h4 id=\"单机\"><a href=\"#单机\" class=\"headerlink\" title=\"单机\"></a>单机</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7001</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">eureka7001.com</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span> <span class=\"comment\">#单节点不向自己注册</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span> <span class=\"comment\">#单节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#此服务名称</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">eurka-server</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7002</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">eureka7002.com</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">        <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#此服务名称</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">eurka-server</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动类\"><a href=\"#启动类\" class=\"headerlink\" title=\"启动类\"></a>启动类</h4><p>在启动类添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chan.springcloud;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EurekaServerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaServerApplication<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过上述的操作，就搭建起了spring-cloud的注册中心，可以启动应用，访问对应端口，即可看到此时的注册中心上的所有服务。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200726132742.png\" alt=\"image-20200726132742403\"></p>\n<h3 id=\"服务提供者-消费者\"><a href=\"#服务提供者-消费者\" class=\"headerlink\" title=\"服务提供者/消费者\"></a>服务提供者/消费者</h3><p>通过<code>new-&gt;module</code>创建新的子模块eureka-client，加入依赖</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200726134547.png\" alt=\"image-20200726134547466\"></p>\n<p>之后修改pom文件并yml文件中添加配置，在启动类添加注解@EnableDiscoveryClient</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">pom文件</div></div><div class=\"fold\">\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>eureka-client<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Spring Cloud Eureka Client<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">yml文件</div></div><div class=\"fold\">\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9003</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">eureka-client</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">       <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/</span> <span class=\"comment\">#单节点</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">eureka-client</span> <span class=\"comment\">#服务名</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span> <span class=\"comment\">#使用自己的ip地址注册而不是主机名</span></span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">启动类</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chan.springcloud;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EurekaClientApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaClientApplication<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n<p>完成上述操作后，可在eureka-server的监控页面中看到eureka-client服务实例，可按照上述步骤，创建两个新的模块服务提供者service-provider、服务消费者service-consumer用于接下来的学习。</p>\n<h2 id=\"Ribbon客户端负载均衡\"><a href=\"#Ribbon客户端负载均衡\" class=\"headerlink\" title=\"Ribbon客户端负载均衡\"></a>Ribbon客户端负载均衡</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Ribbon是一套客户端负载均衡工具，提供客户端的负载均衡算法，在配置文件列出的同一服务的所有实例根据规则选择一个实例使用。</p>\n<h3 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h3><ol>\n<li>负载均衡策略IRule：可选的有随机选择RandomRule、轮询RoundRibbonRule、RetryRule，响应时间加权WeightedResponseTimeRule。也可以通过继承AbstractLoadBalancerRule实现自定义的负载均衡策略，将其配置到Ribbon中</li>\n<li>负载均衡器ILoadBalancer：接口实现类维护了两个list，分别是<code>upServerList</code>、<code>allServerList</code>，提供了初始化添加服务、获取所有服务、可用服务维护这两个列表，通过IRule实现chooseServer方法根据负载均衡策略选择一个服务实例</li>\n</ol>\n<h3 id=\"服务消费者整合Ribbon\"><a href=\"#服务消费者整合Ribbon\" class=\"headerlink\" title=\"服务消费者整合Ribbon\"></a>服务消费者整合Ribbon</h3><h4 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引入RestTemplate\"><a href=\"#引入RestTemplate\" class=\"headerlink\" title=\"引入RestTemplate\"></a>引入RestTemplate</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用RestTemplate调用服务\"><a href=\"#使用RestTemplate调用服务\" class=\"headerlink\" title=\"使用RestTemplate调用服务\"></a>使用RestTemplate调用服务</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RibbonController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String PREFIX = <span class=\"string\">\"http://provider/\"</span>; <span class=\"comment\">//provider是服务名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template.getForObject(PREFIX+<span class=\"string\">\"hello\"</span>,String<span class=\"class\">.<span class=\"keyword\">class</span>, (<span class=\"title\">Object</span>) <span class=\"title\">null</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note success\"><p>未在博客出现的代码可到<a href=\"https://github.com/jingshanccc/spring-cloud\" target=\"_blank\" rel=\"noopener\">项目仓库</a>获取</p></div>\n\n<h2 id=\"Hystrix服务容错\"><a href=\"#Hystrix服务容错\" class=\"headerlink\" title=\"Hystrix服务容错\"></a>Hystrix服务容错</h2><h3 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Hystrix是一套服务容错机制，提供服务降级、服务熔断、服务限流、请求缓存/合并等功能，避免因为系统部分服务不可用导致整个系统宕机无法对外提供服务，同时提高性能。</p>\n<h3 id=\"核心组件-1\"><a href=\"#核心组件-1\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h3><ol>\n<li>HystrixCommand/HystrixObservableCommand：配置fallback备用逻辑</li>\n<li>HystrixCricuitBreaker：提供了isOpen()判断断路器是否打开、allowRequest()判断每个Hystrix命令的请求是否允许被执行、markSuccess()用于关闭断路器</li>\n</ol>\n<h3 id=\"服务消费者集成Hystrix\"><a href=\"#服务消费者集成Hystrix\" class=\"headerlink\" title=\"服务消费者集成Hystrix\"></a>服务消费者集成Hystrix</h3><h4 id=\"引入依赖-1\"><a href=\"#引入依赖-1\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动类添加-EnableCircuitBreaker注解开启断路器\"><a href=\"#启动类添加-EnableCircuitBreaker注解开启断路器\" class=\"headerlink\" title=\"启动类添加@EnableCircuitBreaker注解开启断路器\"></a>启动类添加@EnableCircuitBreaker注解开启断路器</h4><h4 id=\"调用服务时\"><a href=\"#调用服务时\" class=\"headerlink\" title=\"调用服务时\"></a>调用服务时</h4><p>通过@HystrixCommand指定fallback逻辑，当服务超时、不可用时，将通过fallback方法返回响应。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RibbonController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String PREFIX = <span class=\"string\">\"http://provider/\"</span>; <span class=\"comment\">//服务名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand</span>(fallbackMethod = <span class=\"string\">\"hystrixFallback\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template.getForObject(PREFIX+<span class=\"string\">\"hello\"</span>,String<span class=\"class\">.<span class=\"keyword\">class</span>,(<span class=\"title\">Object</span>)<span class=\"title\">null</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hystrixFallback</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hystrix fallback hello\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><p>关于Hystrix的配置和注解项，由于篇幅过长，可在本文附录查看<a href=\"#Hystrix注解和配置详解\">Hystrix注解和配置详解</a></p></div>\n\n<h2 id=\"Feign\"><a href=\"#Feign\" class=\"headerlink\" title=\"Feign\"></a>Feign</h2><h3 id=\"简介-3\"><a href=\"#简介-3\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>在微服务中，服务容错和负载均衡几乎是必备的功能，因此产生了Feign。Feign是一套整合了Hystrix和Ribbon，并通过声明式进行服务调用的组件。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li><p>创建一个新的服务消费者，并引入Feign依赖</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">pom文件</div></div><div class=\"fold\">\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>consumer-feign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>consumer-feign<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Spring Cloud Consumer Feign<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</div></div>\n</li>\n<li><p>yml文件以及启动类：可配置hystrix熔断超时时间，在启动类添加@EnableFeignClients开启Feign</p>\n</li>\n<li><p>@FiegnClient：在服务调用接口service中，通过@FeignClient注解指定调用的服务以及失败回退策略</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(value = <span class=\"string\">\"provider\"</span>, fallbackFactory = ClientFallbackFactory<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">interface</span> <span class=\"title\">ClientService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">hello</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li>Controller调用服务：注入service，调用接口方法。</li>\n</ul>\n<h3 id=\"配置详解\"><a href=\"#配置详解\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h3><h4 id=\"公用配置feign-httpclient\"><a href=\"#公用配置feign-httpclient\" class=\"headerlink\" title=\"公用配置feign.httpclient\"></a>公用配置feign.httpclient</h4><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>connection-timeout</td>\n<td>连接超时时间，单位ms，默认2s</td>\n</tr>\n<tr>\n<td>max-connections</td>\n<td>最大连接数，默认200</td>\n</tr>\n<tr>\n<td>max-connection-per-route</td>\n<td>每个路由最大连接数，默认50</td>\n</tr>\n<tr>\n<td>disabled-ssl-validtion</td>\n<td>是否关闭ssl连接验证，默认false</td>\n</tr>\n<tr>\n<td>follow-redirect</td>\n<td>是否支持重定向，默认true</td>\n</tr>\n<tr>\n<td>time-to-live</td>\n<td>连接存活时间</td>\n</tr>\n</tbody></table>\n<h4 id=\"为某个服务接口定制配置\"><a href=\"#为某个服务接口定制配置\" class=\"headerlink\" title=\"为某个服务接口定制配置\"></a>为某个服务接口定制配置</h4><p>通过feign.client.xxx：指定service名定制配置</p>\n<h2 id=\"配置中心Config\"><a href=\"#配置中心Config\" class=\"headerlink\" title=\"配置中心Config\"></a>配置中心Config</h2><h3 id=\"简介-4\"><a href=\"#简介-4\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>存放各服务配置文件的配置中心，方便服务配置的集中管理和动态刷新，并起到分环境、分配置、通过加解密增强安全性的作用。有配置中心config-server和配置使用者config-client两种角色</p>\n<p>在整合了配置中心后，应用在运行时会通过配置的远程配置中心地址和文件名，加载指定的配置。</p>\n<h3 id=\"配置中心搭建\"><a href=\"#配置中心搭建\" class=\"headerlink\" title=\"配置中心搭建\"></a>配置中心搭建</h3><ul>\n<li><p>新建一个项目，引入配置中心依赖，修改pom文件</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200726155948.png\" alt=\"image-20200726155947916\"></p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开</div></div><div class=\"fold\">\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>config-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>config-server<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Spring Cloud Config Server<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-config-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n</div></div>\n</li>\n<li><p>yml文件配置远程配置中心地址</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开</div></div><div class=\"fold\">\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">4001</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">config-server</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">git:</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span></span><br><span class=\"line\">          <span class=\"attr\">basedir:</span> <span class=\"string\">./repo-config/</span> <span class=\"comment\">#缓存到本地的路径 执行的是new File(\"./repo-config/\")操作</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">       <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/</span> <span class=\"comment\">#单节点</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">config-server</span> <span class=\"comment\">#服务名</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span> <span class=\"comment\">#使用自己的ip地址注册而不是主机名</span></span><br></pre></td></tr></table></figure>\n\n\n\n</div></div>\n</li>\n<li><p>启动类增加@Enable开启配置中心</p>\n</li>\n</ul>\n<h3 id=\"客户端整合配置中心\"><a href=\"#客户端整合配置中心\" class=\"headerlink\" title=\"客户端整合配置中心\"></a>客户端整合配置中心</h3><p>在需要使用远程配置的客户端（消费者/提供者）整合配置中心。</p>\n<ol>\n<li><p>pom文件引入spring-cloud-starter-config依赖</p>\n</li>\n<li><p>将<strong>application.yml</strong>改为<strong>bootstrap.yml</strong>配置文件，在其中加入远程配置中心的相关配置</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开</div></div><div class=\"fold\">\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">provider</span></span><br><span class=\"line\">      <span class=\"attr\">profile:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">      <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:4001</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">service-id:</span> <span class=\"string\">config-server</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/</span></span><br><span class=\"line\">      <span class=\"attr\">instance:</span></span><br><span class=\"line\">        <span class=\"attr\">instance-id:</span> <span class=\"string\">service-provider</span> <span class=\"comment\">#服务名</span></span><br><span class=\"line\">        <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span> <span class=\"comment\">#ip地址</span></span><br></pre></td></tr></table></figure>\n\n\n\n</div></div>\n\n</li>\n</ol>\n<p>在服务启动后，可以在日志看到服务从远程配置中心获取指定的配置文件</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200726165017.png\" alt=\"image-20200726165017386\"></p>\n<h3 id=\"配置详解-1\"><a href=\"#配置详解-1\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h3><h4 id=\"config-server配置\"><a href=\"#config-server配置\" class=\"headerlink\" title=\"config-server配置\"></a>config-server配置</h4><p>前缀为spring.cloud.config.server</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">git</td>\n<td align=\"center\">使用git仓库，默认方式</td>\n</tr>\n<tr>\n<td align=\"center\">git.uri</td>\n<td align=\"center\">仓库地址</td>\n</tr>\n<tr>\n<td align=\"center\">git.username</td>\n<td align=\"center\">用户名</td>\n</tr>\n<tr>\n<td align=\"center\">git.password</td>\n<td align=\"center\">密码</td>\n</tr>\n<tr>\n<td align=\"center\">git.basedir</td>\n<td align=\"center\">下载到本地的缓存文件夹</td>\n</tr>\n</tbody></table>\n<h4 id=\"config-client配置\"><a href=\"#config-client配置\" class=\"headerlink\" title=\"config-client配置\"></a>config-client配置</h4><p>前缀为spring.cloud.config</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">discovery.enabled</td>\n<td align=\"center\">是否从配置中心获取配置，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">discovery.service-id</td>\n<td align=\"center\">配置中心服务名</td>\n</tr>\n<tr>\n<td align=\"center\">uri</td>\n<td align=\"center\">config-server服务地址</td>\n</tr>\n<tr>\n<td align=\"center\">name</td>\n<td align=\"center\">配置文件名，application-dev.yml则name为appplication</td>\n</tr>\n<tr>\n<td align=\"center\">profile</td>\n<td align=\"center\">dev</td>\n</tr>\n</tbody></table>\n<h2 id=\"消息总线Bus\"><a href=\"#消息总线Bus\" class=\"headerlink\" title=\"消息总线Bus\"></a>消息总线Bus</h2><h3 id=\"简介-5\"><a href=\"#简介-5\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>顾名思义，消息总线用来连接分布式节点，广播消息。Spring Cloud目前支持Kafka和RabbitMq两种消息队列中间件。</p>\n<p>接下来以分布式配置的动态刷新来在项目中使用消息中线Bus</p>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在config-server和config-client上搭建</p>\n<h4 id=\"RabbitMq\"><a href=\"#RabbitMq\" class=\"headerlink\" title=\"RabbitMq\"></a>RabbitMq</h4><ol>\n<li><p>pom文件引入基于RabbitMq的bus依赖spring-cloud-starter-bus-amqp，同时需要spring-boot-starter-actuator依赖</p>\n</li>\n<li><p>yml文件增加RabbitMq相关配置，并向外暴露/bus-refresh接口用于触发更新</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开</div></div><div class=\"fold\">\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">4001</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">config-server</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">git:</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span></span><br><span class=\"line\">          <span class=\"attr\">basedir:</span> <span class=\"string\">./repo-config/</span> <span class=\"comment\">#缓存到本地的路径 执行的是new File(\"./repo-config/\")操作</span></span><br><span class=\"line\">    <span class=\"attr\">bus:</span></span><br><span class=\"line\">      <span class=\"attr\">trace:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">addresses:</span> <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.130</span><span class=\"string\">:5672</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">       <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/</span> <span class=\"comment\">#单节点</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">config-server</span> <span class=\"comment\">#服务名</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span> <span class=\"comment\">#使用自己的ip地址注册而不是主机名</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">bus-refresh</span></span><br></pre></td></tr></table></figure>\n\n\n\n</div></div>\n\n</li>\n</ol>\n<h4 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><ol>\n<li><p>pom文件引入基于Kafka的bus依赖spring-cloud-starter-bus-kafka，同时需要spring-boot-starter-actuator依赖</p>\n</li>\n<li><p>yml文件增加Kafka相关配置，并向外暴露/bus-refresh接口用于触发更新</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开</div></div><div class=\"fold\">\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">4001</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">config-server</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">git:</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span></span><br><span class=\"line\">          <span class=\"attr\">basedir:</span> <span class=\"string\">./repo-config/</span> <span class=\"comment\">#缓存到本地的路径 执行的是new File(\"./repo-config/\")操作</span></span><br><span class=\"line\">    <span class=\"attr\">bus:</span></span><br><span class=\"line\">      <span class=\"attr\">trace:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">stream:</span></span><br><span class=\"line\">      <span class=\"attr\">kafka:</span></span><br><span class=\"line\">        <span class=\"attr\">binder:</span></span><br><span class=\"line\">          <span class=\"attr\">brokers:</span> <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.130</span><span class=\"string\">:9092</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">       <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/</span> <span class=\"comment\">#单节点</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">config-server</span> <span class=\"comment\">#服务名</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span> <span class=\"comment\">#使用自己的ip地址注册而不是主机名</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">bus-refresh</span></span><br></pre></td></tr></table></figure>\n\n\n\n</div></div>\n\n</li>\n</ol>\n<p>配置完成后，通过访问config-server的/bus-refresh接口，触发服务的配置更新，可以在控制台查看对应的日志输出。也可以通过/bus/refresh?destination=xxx:port指定实例更新</p>\n<h2 id=\"Zuul网关\"><a href=\"#Zuul网关\" class=\"headerlink\" title=\"Zuul网关\"></a>Zuul网关</h2><h3 id=\"简介-6\"><a href=\"#简介-6\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>对外暴露的API，面向用户，系统UI端所有请求都需要经过网关，因此，可在网关通过拦截过滤，实现认证鉴权、动态路由、负载均衡、静态资源统一处理等功能，从而减少代码冗余，提高系统性能</p>\n<h3 id=\"使用-2\"><a href=\"#使用-2\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li><p>创建一个新模块gateway，引入spring-cloud-starter-netflix-zuul依赖</p>\n</li>\n<li><p>yml文件中，通过zuul.routes配置代理的服务路径、公共前缀等</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">yml文件</div></div><div class=\"fold\">\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">5001</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">gateway</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">       <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/</span> <span class=\"comment\">#单节点</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">gateway-zuul</span> <span class=\"comment\">#服务名</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span> <span class=\"comment\">#使用自己的ip地址注册而不是主机名</span></span><br><span class=\"line\"><span class=\"attr\">zuul:</span></span><br><span class=\"line\">  <span class=\"attr\">routes:</span></span><br><span class=\"line\">    <span class=\"attr\">ribbon:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/api-ribbon/**</span>  <span class=\"comment\">#代理名称</span></span><br><span class=\"line\">      <span class=\"attr\">serviceId:</span> <span class=\"string\">service-consumer</span>  <span class=\"comment\">#代理的服务</span></span><br><span class=\"line\">    <span class=\"attr\">feign:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/api-feign/**</span></span><br><span class=\"line\">      <span class=\"attr\">serviceId:</span> <span class=\"string\">consumer-feign</span></span><br><span class=\"line\"><span class=\"comment\">#      prefix: /api  #公共前缀</span></span><br></pre></td></tr></table></figure>\n\n\n\n</div></div>\n</li>\n<li><p>启动类增加@EnableZuulProxy注解开启网关</p>\n</li>\n</ul>\n<p>之后可以通过localhost:5001/api-ribbon/hello调用服务提供者provider的hello接口，且由于是通过ribbon调用，因此具有负载均衡功能。</p>\n<h3 id=\"核心组件Filter\"><a href=\"#核心组件Filter\" class=\"headerlink\" title=\"核心组件Filter\"></a>核心组件Filter</h3><p>通过继承ZuulFilter实现自定义的校验逻辑，实现认证鉴权、动态路由等功能。filter提供了4个方法</p>\n<ol>\n<li>filterType()：过滤时机，pre：路由之前、routing：路由时、error：发生错误、post：在routing和error之后</li>\n<li>filterOrder()：过滤器优先级</li>\n<li>shouldFilter()：是否开启</li>\n<li>run()：校验逻辑</li>\n</ol>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">查看实例代码</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZuulFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">filterType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"pre\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">filterOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ZuulException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"filtered by my filter\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n<h3 id=\"配置详解-2\"><a href=\"#配置详解-2\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h3><h4 id=\"代理服务配置zuul-routes\"><a href=\"#代理服务配置zuul-routes\" class=\"headerlink\" title=\"代理服务配置zuul.routes\"></a>代理服务配置zuul.routes</h4><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">service-id</td>\n<td align=\"center\">代理服务名</td>\n</tr>\n<tr>\n<td align=\"center\">path</td>\n<td align=\"center\">代理名称/路径</td>\n</tr>\n</tbody></table>\n<h4 id=\"服务中配置\"><a href=\"#服务中配置\" class=\"headerlink\" title=\"服务中配置\"></a>服务中配置</h4><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">prefix</td>\n<td align=\"center\">公共前缀，默认””</td>\n</tr>\n<tr>\n<td align=\"center\">strip-prefix</td>\n<td align=\"center\">路由时是否删除前缀，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">retryable</td>\n<td align=\"center\">是否支持重试，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">addProxyHeaders</td>\n<td align=\"center\">是否添加’X-forwarded-*’请求头，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">addHostHeader</td>\n<td align=\"center\">是否添加主机头，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">ignoredServices</td>\n<td align=\"center\">不代理的服务，默认为空，即代理所有服务</td>\n</tr>\n<tr>\n<td align=\"center\">ignoredHeaders</td>\n<td align=\"center\">忽略的HTTP请求头，默认null</td>\n</tr>\n<tr>\n<td align=\"center\">sensitiveHeaders</td>\n<td align=\"center\">不传递给下游的敏感请求头信息，默认有”cookie”,”set-cookie”,”authorization”</td>\n</tr>\n<tr>\n<td align=\"center\">sslHostnameValidationEnabled</td>\n<td align=\"center\">是否验证ssl连接的主机名，默认true</td>\n</tr>\n</tbody></table>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"注册中心配置项详解\"><a href=\"#注册中心配置项详解\" class=\"headerlink\" title=\"注册中心配置项详解\"></a>注册中心配置项详解</h3><h4 id=\"eureka-client\"><a href=\"#eureka-client\" class=\"headerlink\" title=\"eureka.client\"></a>eureka.client</h4><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">enabled</td>\n<td align=\"center\">客户端是否开启的标志，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">registryFetchIntervalSeconds</td>\n<td align=\"center\">从eureka-server获取服务清单的频率，默认30s/次</td>\n</tr>\n<tr>\n<td align=\"center\">instanceInfoReplicationIntervalSeconds</td>\n<td align=\"center\">更新实例变化信息的频率，默认30s/次</td>\n</tr>\n<tr>\n<td align=\"center\">initialInstanceInfoReplicationIntervalSeconds</td>\n<td align=\"center\">初始化实例信息到eureka-server的时间，默认40s</td>\n</tr>\n<tr>\n<td align=\"center\">eurekaServiceUrlPollIntervalSeconds</td>\n<td align=\"center\">多久更新一次eureka-server信息，默认5分钟</td>\n</tr>\n<tr>\n<td align=\"center\">proxyPort</td>\n<td align=\"center\">eureka-server代理端口</td>\n</tr>\n<tr>\n<td align=\"center\">proxyHost</td>\n<td align=\"center\">eureka-server代理主机</td>\n</tr>\n<tr>\n<td align=\"center\">proxyUserName</td>\n<td align=\"center\">eureka-server代理用户名</td>\n</tr>\n<tr>\n<td align=\"center\">proxyPassword</td>\n<td align=\"center\">eureka-server代理密码</td>\n</tr>\n<tr>\n<td align=\"center\">eurekaServerReadTimeoutSeconds</td>\n<td align=\"center\">读取eureka-server信息超时时间，默认8s</td>\n</tr>\n<tr>\n<td align=\"center\">eurekaServerConnectTimeoutSeconds</td>\n<td align=\"center\">连接eureka-server超时时间，默认5s</td>\n</tr>\n<tr>\n<td align=\"center\">eurekaServerTotalConnections</td>\n<td align=\"center\">总连接数，默认200</td>\n</tr>\n<tr>\n<td align=\"center\">eurekaServerTotalConnectionsPerHost</td>\n<td align=\"center\">每个eureka-server实例连接总数</td>\n</tr>\n<tr>\n<td align=\"center\">eurekaConnectionIdleTimeoutSeconds</td>\n<td align=\"center\">HTTP连接keepalive时间，默认30s</td>\n</tr>\n<tr>\n<td align=\"center\">heartbeatExecutorThreadPoolSize</td>\n<td align=\"center\">心跳线程池线程数，默认2</td>\n</tr>\n<tr>\n<td align=\"center\">heartbeatExecutorExponentialBackOffBound</td>\n<td align=\"center\">心跳执行程序回退相关的属性，是重试延迟的最大倍数值，默认为10</td>\n</tr>\n<tr>\n<td align=\"center\">cacheRefreshExecutorThreadPoolSize</td>\n<td align=\"center\">缓存刷新线程池线程数，默认2</td>\n</tr>\n<tr>\n<td align=\"center\">cacheRefreshExecutorExponentialBackOffBound</td>\n<td align=\"center\">缓存刷新重试延迟的最大倍数值，默认10</td>\n</tr>\n<tr>\n<td align=\"center\">serverUrl</td>\n<td align=\"center\">指定注册中心地址，集群以’,’为分隔符</td>\n</tr>\n<tr>\n<td align=\"center\">gZipContent</td>\n<td align=\"center\">是否压缩注册表内容，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">useDnsForFetchingServiceUrls</td>\n<td align=\"center\">是否使用DNS来获取服务实例清单，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">registerWithEureka</td>\n<td align=\"center\">是否注册到eureka-server，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">preferSameZoneEureka</td>\n<td align=\"center\">优先选择同一个Zone空间的eureka-server，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">logDeltaDiff</td>\n<td align=\"center\">是否记录eureka-server和eureka-client在实例清单的差异</td>\n</tr>\n<tr>\n<td align=\"center\">disableDelta</td>\n<td align=\"center\">禁用记录的差异信息</td>\n</tr>\n<tr>\n<td align=\"center\">filterOnlyUpInstances</td>\n<td align=\"center\">只获取状态为UP的实例，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">fetchRegistry</td>\n<td align=\"center\">是否从eureka-server获取注册实例清单，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">dollarReplacement</td>\n<td align=\"center\">序列化/反序列化eureka-server信息时的$替换符，默认_-</td>\n</tr>\n<tr>\n<td align=\"center\">escapeCharReplacement</td>\n<td align=\"center\">序列化/反序列化eureka-server信息时的-替换符，默认__</td>\n</tr>\n<tr>\n<td align=\"center\">allowRedirects</td>\n<td align=\"center\">是否允许eureka-server将eureka-client请求转发到其他eureka-server，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">onDemandUpdateStatusChange</td>\n<td align=\"center\">本地状态更新将触发远程eureka-server注册信息更新，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">encoderName</td>\n<td align=\"center\">编码器</td>\n</tr>\n<tr>\n<td align=\"center\">decoderName</td>\n<td align=\"center\">解码器</td>\n</tr>\n<tr>\n<td align=\"center\">shouldUnregisterOnShutdown</td>\n<td align=\"center\">eureka-client关闭后是否自动从注册中心注销，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">shouldEnforceRegistrationAtInit</td>\n<td align=\"center\">eureka-client在初始化时是否必须注册，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">order</td>\n<td align=\"center\">用于 <code>CompositeDiscoveryClient</code> 发现排序</td>\n</tr>\n</tbody></table>\n<h4 id=\"eureka-instance服务实例\"><a href=\"#eureka-instance服务实例\" class=\"headerlink\" title=\"eureka.instance服务实例\"></a>eureka.instance服务实例</h4><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">instance-id</td>\n<td align=\"center\">同一服务不同实例的唯一标识</td>\n</tr>\n<tr>\n<td align=\"center\">appname</td>\n<td align=\"center\">服务名，默认UNKNOWN，如果有spring.application.name则使用该名字</td>\n</tr>\n<tr>\n<td align=\"center\">hostname</td>\n<td align=\"center\">主机名，默认使用操作系统的主机名</td>\n</tr>\n<tr>\n<td align=\"center\">nonSecurePort</td>\n<td align=\"center\">非安全通信端口，默认80</td>\n</tr>\n<tr>\n<td align=\"center\">nonSecurePortEnabled</td>\n<td align=\"center\">是否开始非安全通信端口，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">securePort</td>\n<td align=\"center\">安全通信端口，默认443</td>\n</tr>\n<tr>\n<td align=\"center\">securePortEnabled</td>\n<td align=\"center\">是否开启安全通信端口，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">leaseRenewalIntervalInSeconds</td>\n<td align=\"center\">发送心跳信息间隔，默认30s</td>\n</tr>\n<tr>\n<td align=\"center\">leaseExpirationDurationInSeconds</td>\n<td align=\"center\">过期时间，默认90s</td>\n</tr>\n<tr>\n<td align=\"center\">statusPageUrl</td>\n<td align=\"center\">状态信息Url绝对路径，默认null</td>\n</tr>\n<tr>\n<td align=\"center\">homePageUrl</td>\n<td align=\"center\">homePageUrl绝对路径，默认null</td>\n</tr>\n<tr>\n<td align=\"center\">healthCheckUrl</td>\n<td align=\"center\">健康检测Url绝对路径，默认null</td>\n</tr>\n<tr>\n<td align=\"center\">preferIpAddress</td>\n<td align=\"center\">优先使用IP地址注册，默认false</td>\n</tr>\n</tbody></table>\n<h3 id=\"Hystrix注解和配置详解\"><a href=\"#Hystrix注解和配置详解\" class=\"headerlink\" title=\"Hystrix注解和配置详解\"></a>Hystrix注解和配置详解</h3><p>更详细内容可查看<a href=\"https://github.com/Netflix/Hystrix/wiki/Configuration\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h4 id=\"HystrixCommand\"><a href=\"#HystrixCommand\" class=\"headerlink\" title=\"@HystrixCommand\"></a>@HystrixCommand</h4><table>\n<thead>\n<tr>\n<th align=\"center\">可配置属性</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">fallbackMethod</td>\n<td align=\"center\">回退方法</td>\n</tr>\n<tr>\n<td align=\"center\">commandKey</td>\n<td align=\"center\">Hystrix命令的键，默认是被注解的方法名</td>\n</tr>\n<tr>\n<td align=\"center\">groupKey</td>\n<td align=\"center\">一组命令的标识，默认是类名</td>\n</tr>\n<tr>\n<td align=\"center\">threadPoolKey</td>\n<td align=\"center\">线程池的标识，默认是groupKey，一个类的命令使用同一个线程池</td>\n</tr>\n<tr>\n<td align=\"center\">observableExecutionMode</td>\n<td align=\"center\">异步执行的命令执行模式，EAGER/LAZY</td>\n</tr>\n<tr>\n<td align=\"center\">commandProperties</td>\n<td align=\"center\">命令配置，可以以数组形式设置命令的属性</td>\n</tr>\n<tr>\n<td align=\"center\">threadPoolProperties</td>\n<td align=\"center\">线程池配置，可以以数组形式设置线程池属性</td>\n</tr>\n<tr>\n<td align=\"center\">ignoreExceptions</td>\n<td align=\"center\">忽视异常，如果执行过程出现未被忽视异常Hystrix会调用fallback。</td>\n</tr>\n</tbody></table>\n<h4 id=\"FeignClient\"><a href=\"#FeignClient\" class=\"headerlink\" title=\"@FeignClient\"></a>@FeignClient</h4><p>Feign使用Hystrix，可使用此注解</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">可配置属性</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">fallback</td>\n<td align=\"center\">回退策略，通过实现接口FeignClient的方式</td>\n</tr>\n<tr>\n<td align=\"center\">value</td>\n<td align=\"center\">服务名</td>\n</tr>\n<tr>\n<td align=\"center\">fallbackFactory</td>\n<td align=\"center\">回退策略，通过实现FallbackFactory<FeignClient>生成实例的方式</td>\n</tr>\n</tbody></table>\n<h4 id=\"HystrixCommandProperties\"><a href=\"#HystrixCommandProperties\" class=\"headerlink\" title=\"HystrixCommandProperties\"></a>HystrixCommandProperties</h4><h5 id=\"线程隔离execution\"><a href=\"#线程隔离execution\" class=\"headerlink\" title=\"线程隔离execution.\"></a>线程隔离execution.</h5><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">isolation.stragy</td>\n<td align=\"center\">隔离方式：线程池THREAD信号量SEMAPHORE</td>\n</tr>\n<tr>\n<td align=\"center\">timeout.enabled</td>\n<td align=\"center\">开启超时熔断</td>\n</tr>\n<tr>\n<td align=\"center\">isolation.thread.timeoutInMilliseconds</td>\n<td align=\"center\">超时时间，单位毫秒，默认1s</td>\n</tr>\n<tr>\n<td align=\"center\">isolation.thread.interruptOnTimeout</td>\n<td align=\"center\">超时后是否中断方法，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">isolation.thread.interruptOnFutureCancel</td>\n<td align=\"center\">取消后是否中断方法，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">isolation.semaphore.maxConcurrentRequests</td>\n<td align=\"center\">使用信号量隔离方式时最大并发数，默认是10</td>\n</tr>\n</tbody></table>\n<h5 id=\"统计器metrics\"><a href=\"#统计器metrics\" class=\"headerlink\" title=\"统计器metrics.\"></a>统计器metrics.</h5><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">rollingStats.timeInmilliseconds</td>\n<td align=\"center\">Hystrix滑动窗口大小，单位ms，默认1s，即统计1s内请求总数</td>\n</tr>\n<tr>\n<td align=\"center\">healthSnapshot.intervalInMilliseconds</td>\n<td align=\"center\">Hystrix桶的大小，默认500ms，每经过500ms计算窗口的失败率</td>\n</tr>\n<tr>\n<td align=\"center\">rollingStats.numBuckets</td>\n<td align=\"center\">可视化界面时一个窗口应该拆分成多少个桶</td>\n</tr>\n<tr>\n<td align=\"center\">rollingPercentile.enabled</td>\n<td align=\"center\">是否统计方法响应时间百分比，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">rollingPercentile.timeInMilliseconds</td>\n<td align=\"center\">统计响应时间百分比时窗口大小，默认一分钟</td>\n</tr>\n<tr>\n<td align=\"center\">rollingPercentile.numBuckets</td>\n<td align=\"center\">一个窗口划分成几个桶，默认6</td>\n</tr>\n<tr>\n<td align=\"center\">rollingPercentile.bucketSize</td>\n<td align=\"center\">每个桶保留的请求数，默认100，即最近的100条</td>\n</tr>\n</tbody></table>\n<h5 id=\"熔断器circuitBreaker\"><a href=\"#熔断器circuitBreaker\" class=\"headerlink\" title=\"熔断器circuitBreaker.\"></a>熔断器circuitBreaker.</h5><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">enabled</td>\n<td align=\"center\">是否开启熔断器，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">forceOpen</td>\n<td align=\"center\">强制启用</td>\n</tr>\n<tr>\n<td align=\"center\">forceClosed</td>\n<td align=\"center\">强制关闭</td>\n</tr>\n<tr>\n<td align=\"center\">requestVolumeThreshold</td>\n<td align=\"center\">窗口最小请求数，需要根据接口的qps来设置，避免误触发</td>\n</tr>\n<tr>\n<td align=\"center\">errorThresholdPercentage</td>\n<td align=\"center\">失败率阈值，超过该百分比则触发熔断</td>\n</tr>\n<tr>\n<td align=\"center\">sleepWindowMilliseconds</td>\n<td align=\"center\">触发熔断后多久就放行请求，默认5s</td>\n</tr>\n</tbody></table>\n<h4 id=\"HystrixThreadPoolProperties\"><a href=\"#HystrixThreadPoolProperties\" class=\"headerlink\" title=\"HystrixThreadPoolProperties\"></a>HystrixThreadPoolProperties</h4><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">coreSize</td>\n<td align=\"center\">核心线程数，默认10</td>\n</tr>\n<tr>\n<td align=\"center\">allowMaximunSizeToDivergeFromCoreSize</td>\n<td align=\"center\">允许扩展到线程池最大线程数，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">maxinumSize</td>\n<td align=\"center\">最大线程数，默认10</td>\n</tr>\n<tr>\n<td align=\"center\">maxQueueSize</td>\n<td align=\"center\">任务队列大小，默认-1</td>\n</tr>\n<tr>\n<td align=\"center\">queueSizeRejectionThreshold</td>\n<td align=\"center\">任务队列到达此值就拒绝请求，默认5</td>\n</tr>\n<tr>\n<td align=\"center\">keepAliveTimeMinutes</td>\n<td align=\"center\">空闲存活时间，默认2分钟</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<p/>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在入门Spring Cloud框架时写了这篇文章，记录一下学习过程，也当是给和我一样的初学者的入门避坑。本文将通过学习相关的组件概念，并进行代码实战，从零开始搭建一个基础的Spring Cloud项目。</p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ol>\n<li>IDEA 2020.1</li>\n<li>Maven 3.5.4</li>\n<li>Spring Cloud Hoxton.SR6</li>\n<li>Spring Boot 2.3.2</li>\n<li><a href=\"https://github.com/jingshanccc/spring-cloud\" target=\"_blank\" rel=\"noopener\">项目仓库地址</a></li>\n</ol>\n<p>在IDEA中创建一个空的Maven项目，删除src目录，pom文件中修改打包方式为pom，表示项目为聚合/多模块项目。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Spring-Cloud版本号介绍\"><a href=\"#Spring-Cloud版本号介绍\" class=\"headerlink\" title=\"Spring Cloud版本号介绍\"></a>Spring Cloud版本号介绍</h3><p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200726131044.png\" alt=\"image-20200726131044766\"></p>\n<p>可以看到Spring Cloud的版本号不是常规的1.0.1这样的数字形式，原因是Spring Cloud是由众多独立的子项目组成的，子项目有自己的开发节奏，版本发行时间，为了避免冲突，因此采用伦敦地铁站来命名，按字母顺序对应发行顺序，像最开始的Angel到上图中最新的Hoxton。后面的GA、SNAPSHOT、SR对应意义如下表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">版本号</th>\n<th align=\"center\">版本</th>\n<th align=\"left\">用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">SNAPSHOT(BUILD-XXX)</td>\n<td align=\"center\">开发版</td>\n<td align=\"left\">一般是开发团队内部使用</td>\n</tr>\n<tr>\n<td align=\"center\">GA</td>\n<td align=\"center\">稳定版</td>\n<td align=\"left\">内部开发到一定阶段，没有大问题，但可能存在比较多的小bug，可以对外发布</td>\n</tr>\n<tr>\n<td align=\"center\">PRE(M1,M2)</td>\n<td align=\"center\">里程碑版</td>\n<td align=\"left\">相较于GA版，修复了大部分的bug，成为milestone版。一个GA后一般有多个里程碑版M1,M2等</td>\n</tr>\n<tr>\n<td align=\"center\">RC</td>\n<td align=\"center\">候选发布版</td>\n<td align=\"left\">在里程碑版之后，系统已经趋于稳定，进入等待发布阶段（Release Candidate），这个阶段主要修复新发现的等级较高的bug，发布RC1,RC2版</td>\n</tr>\n<tr>\n<td align=\"center\">SR</td>\n<td align=\"center\">正式发布版</td>\n<td align=\"left\">正式发布，后续会进行优化或修复bug，发布SR1,SR2版本</td>\n</tr>\n</tbody></table>\n<p>上图中还出现了2020.0这样的版本号，这是在2020年新采用的命名方式，格式是<code>YYYY.MINOR.MICRO</code> ，其中<code>YYYY</code>是发行年份，<code>MINOR</code>是一年中的从零开始递增的数字，<code>MICOR</code>对应以前是用的后缀，.0通常表示RELEASE，例如.0-M2，0-RC2等。火车站将会作为代号，但不会再用于发布到Maven仓库的版本，2020的代号是IIford。</p>\n<h3 id=\"分布式、集群、微服务\"><a href=\"#分布式、集群、微服务\" class=\"headerlink\" title=\"分布式、集群、微服务\"></a>分布式、集群、微服务</h3><ol>\n<li>分布式：将一个系统的不同模块部署在不同的服务器上，提高并发能力。</li>\n<li>集群：将一个模块部署到不同的服务器上，构成集群向外提供相同的服务，提高可用性。</li>\n<li>微服务：将传统的系统按照功能或业务，拆分成相互独立的模块，每个模块对外提供自己的服务。</li>\n</ol>\n<h2 id=\"服务治理\"><a href=\"#服务治理\" class=\"headerlink\" title=\"服务治理\"></a>服务治理</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>在微服务架构下，各服务之间需要相互通信、感知服务状态、调用其他服务，这些就通过服务注册中心来完成。顾名思义，它提供了服务注册功能，系统中所有的服务都需要注册到注册中心，并通过注册中心，获得所有可用的服务，调用指定服务名的服务。服务治理体系中有三种核心角色：服务注册中心（Eureka-Server）、服务提供者（Eureka-Client）、服务消费者（Eureka-Client）</p>\n<h3 id=\"搭建服务注册中心\"><a href=\"#搭建服务注册中心\" class=\"headerlink\" title=\"搭建服务注册中心\"></a>搭建服务注册中心</h3><p>在之前创建的Maven项目中通过<code>new -&gt; module</code>新建一个子模块，使用Spring Initializr创建一个Spring Boot项目，添加eureka-server依赖。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200726125205.png\" alt=\"image-20200726125158684\"></p>\n<p>等待maven依赖下载完成后，将eureka-server的部分依赖剪切到父项目的pom文件中，因为作为多模块项目，项目的依赖应当在父项目中统一管理。</p>\n<p>同时在父项目中添加modules节点，填入eureka-server模块，在eureka-server中添加parent节点，填入父项目信息。最终两个文件如下所示</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">父模块pom</div></div><div class=\"fold\">\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring-cloud<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Cloud<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>eureka-server<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud.version</span>&gt;</span>Hoxton.SR6<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">子模块pom</div></div><div class=\"fold\">\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>eureka-server<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Spring Cloud Eureka-Server<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n<h3 id=\"注册中心配置\"><a href=\"#注册中心配置\" class=\"headerlink\" title=\"注册中心配置\"></a>注册中心配置</h3><p>如果想要看详细全面的配置介绍，可以看本文附录<a href=\"#注册中心配置项详解\">注册中心配置项详解</a></p>\n<h4 id=\"单机\"><a href=\"#单机\" class=\"headerlink\" title=\"单机\"></a>单机</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7001</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">eureka7001.com</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span> <span class=\"comment\">#单节点不向自己注册</span></span><br><span class=\"line\">    <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span> <span class=\"comment\">#单节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#此服务名称</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">eurka-server</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7002</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">eureka7002.com</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">        <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#此服务名称</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">eurka-server</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动类\"><a href=\"#启动类\" class=\"headerlink\" title=\"启动类\"></a>启动类</h4><p>在启动类添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chan.springcloud;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EurekaServerApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaServerApplication<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过上述的操作，就搭建起了spring-cloud的注册中心，可以启动应用，访问对应端口，即可看到此时的注册中心上的所有服务。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200726132742.png\" alt=\"image-20200726132742403\"></p>\n<h3 id=\"服务提供者-消费者\"><a href=\"#服务提供者-消费者\" class=\"headerlink\" title=\"服务提供者/消费者\"></a>服务提供者/消费者</h3><p>通过<code>new-&gt;module</code>创建新的子模块eureka-client，加入依赖</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200726134547.png\" alt=\"image-20200726134547466\"></p>\n<p>之后修改pom文件并yml文件中添加配置，在启动类添加注解@EnableDiscoveryClient</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">pom文件</div></div><div class=\"fold\">\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>eureka-client<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Spring Cloud Eureka Client<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">yml文件</div></div><div class=\"fold\">\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">9003</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">eureka-client</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">       <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/</span> <span class=\"comment\">#单节点</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">eureka-client</span> <span class=\"comment\">#服务名</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span> <span class=\"comment\">#使用自己的ip地址注册而不是主机名</span></span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">启动类</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.chan.springcloud;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EurekaClientApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaClientApplication<span class=\"class\">.<span class=\"keyword\">class</span>, <span class=\"title\">args</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n<p>完成上述操作后，可在eureka-server的监控页面中看到eureka-client服务实例，可按照上述步骤，创建两个新的模块服务提供者service-provider、服务消费者service-consumer用于接下来的学习。</p>\n<h2 id=\"Ribbon客户端负载均衡\"><a href=\"#Ribbon客户端负载均衡\" class=\"headerlink\" title=\"Ribbon客户端负载均衡\"></a>Ribbon客户端负载均衡</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Ribbon是一套客户端负载均衡工具，提供客户端的负载均衡算法，在配置文件列出的同一服务的所有实例根据规则选择一个实例使用。</p>\n<h3 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h3><ol>\n<li>负载均衡策略IRule：可选的有随机选择RandomRule、轮询RoundRibbonRule、RetryRule，响应时间加权WeightedResponseTimeRule。也可以通过继承AbstractLoadBalancerRule实现自定义的负载均衡策略，将其配置到Ribbon中</li>\n<li>负载均衡器ILoadBalancer：接口实现类维护了两个list，分别是<code>upServerList</code>、<code>allServerList</code>，提供了初始化添加服务、获取所有服务、可用服务维护这两个列表，通过IRule实现chooseServer方法根据负载均衡策略选择一个服务实例</li>\n</ol>\n<h3 id=\"服务消费者整合Ribbon\"><a href=\"#服务消费者整合Ribbon\" class=\"headerlink\" title=\"服务消费者整合Ribbon\"></a>服务消费者整合Ribbon</h3><h4 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引入RestTemplate\"><a href=\"#引入RestTemplate\" class=\"headerlink\" title=\"引入RestTemplate\"></a>引入RestTemplate</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用RestTemplate调用服务\"><a href=\"#使用RestTemplate调用服务\" class=\"headerlink\" title=\"使用RestTemplate调用服务\"></a>使用RestTemplate调用服务</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RibbonController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String PREFIX = <span class=\"string\">\"http://provider/\"</span>; <span class=\"comment\">//provider是服务名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template.getForObject(PREFIX+<span class=\"string\">\"hello\"</span>,String<span class=\"class\">.<span class=\"keyword\">class</span>, (<span class=\"title\">Object</span>) <span class=\"title\">null</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note success\"><p>未在博客出现的代码可到<a href=\"https://github.com/jingshanccc/spring-cloud\" target=\"_blank\" rel=\"noopener\">项目仓库</a>获取</p></div>\n\n<h2 id=\"Hystrix服务容错\"><a href=\"#Hystrix服务容错\" class=\"headerlink\" title=\"Hystrix服务容错\"></a>Hystrix服务容错</h2><h3 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Hystrix是一套服务容错机制，提供服务降级、服务熔断、服务限流、请求缓存/合并等功能，避免因为系统部分服务不可用导致整个系统宕机无法对外提供服务，同时提高性能。</p>\n<h3 id=\"核心组件-1\"><a href=\"#核心组件-1\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h3><ol>\n<li>HystrixCommand/HystrixObservableCommand：配置fallback备用逻辑</li>\n<li>HystrixCricuitBreaker：提供了isOpen()判断断路器是否打开、allowRequest()判断每个Hystrix命令的请求是否允许被执行、markSuccess()用于关闭断路器</li>\n</ol>\n<h3 id=\"服务消费者集成Hystrix\"><a href=\"#服务消费者集成Hystrix\" class=\"headerlink\" title=\"服务消费者集成Hystrix\"></a>服务消费者集成Hystrix</h3><h4 id=\"引入依赖-1\"><a href=\"#引入依赖-1\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启动类添加-EnableCircuitBreaker注解开启断路器\"><a href=\"#启动类添加-EnableCircuitBreaker注解开启断路器\" class=\"headerlink\" title=\"启动类添加@EnableCircuitBreaker注解开启断路器\"></a>启动类添加@EnableCircuitBreaker注解开启断路器</h4><h4 id=\"调用服务时\"><a href=\"#调用服务时\" class=\"headerlink\" title=\"调用服务时\"></a>调用服务时</h4><p>通过@HystrixCommand指定fallback逻辑，当服务超时、不可用时，将通过fallback方法返回响应。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RibbonController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String PREFIX = <span class=\"string\">\"http://provider/\"</span>; <span class=\"comment\">//服务名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@HystrixCommand</span>(fallbackMethod = <span class=\"string\">\"hystrixFallback\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template.getForObject(PREFIX+<span class=\"string\">\"hello\"</span>,String<span class=\"class\">.<span class=\"keyword\">class</span>,(<span class=\"title\">Object</span>)<span class=\"title\">null</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hystrixFallback</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hystrix fallback hello\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><p>关于Hystrix的配置和注解项，由于篇幅过长，可在本文附录查看<a href=\"#Hystrix注解和配置详解\">Hystrix注解和配置详解</a></p></div>\n\n<h2 id=\"Feign\"><a href=\"#Feign\" class=\"headerlink\" title=\"Feign\"></a>Feign</h2><h3 id=\"简介-3\"><a href=\"#简介-3\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>在微服务中，服务容错和负载均衡几乎是必备的功能，因此产生了Feign。Feign是一套整合了Hystrix和Ribbon，并通过声明式进行服务调用的组件。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li><p>创建一个新的服务消费者，并引入Feign依赖</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">pom文件</div></div><div class=\"fold\">\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>consumer-feign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>consumer-feign<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Spring Cloud Consumer Feign<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</div></div>\n</li>\n<li><p>yml文件以及启动类：可配置hystrix熔断超时时间，在启动类添加@EnableFeignClients开启Feign</p>\n</li>\n<li><p>@FiegnClient：在服务调用接口service中，通过@FeignClient注解指定调用的服务以及失败回退策略</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(value = <span class=\"string\">\"provider\"</span>, fallbackFactory = ClientFallbackFactory<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> <span class=\"title\">interface</span> <span class=\"title\">ClientService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">hello</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li>Controller调用服务：注入service，调用接口方法。</li>\n</ul>\n<h3 id=\"配置详解\"><a href=\"#配置详解\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h3><h4 id=\"公用配置feign-httpclient\"><a href=\"#公用配置feign-httpclient\" class=\"headerlink\" title=\"公用配置feign.httpclient\"></a>公用配置feign.httpclient</h4><table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>connection-timeout</td>\n<td>连接超时时间，单位ms，默认2s</td>\n</tr>\n<tr>\n<td>max-connections</td>\n<td>最大连接数，默认200</td>\n</tr>\n<tr>\n<td>max-connection-per-route</td>\n<td>每个路由最大连接数，默认50</td>\n</tr>\n<tr>\n<td>disabled-ssl-validtion</td>\n<td>是否关闭ssl连接验证，默认false</td>\n</tr>\n<tr>\n<td>follow-redirect</td>\n<td>是否支持重定向，默认true</td>\n</tr>\n<tr>\n<td>time-to-live</td>\n<td>连接存活时间</td>\n</tr>\n</tbody></table>\n<h4 id=\"为某个服务接口定制配置\"><a href=\"#为某个服务接口定制配置\" class=\"headerlink\" title=\"为某个服务接口定制配置\"></a>为某个服务接口定制配置</h4><p>通过feign.client.xxx：指定service名定制配置</p>\n<h2 id=\"配置中心Config\"><a href=\"#配置中心Config\" class=\"headerlink\" title=\"配置中心Config\"></a>配置中心Config</h2><h3 id=\"简介-4\"><a href=\"#简介-4\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>存放各服务配置文件的配置中心，方便服务配置的集中管理和动态刷新，并起到分环境、分配置、通过加解密增强安全性的作用。有配置中心config-server和配置使用者config-client两种角色</p>\n<p>在整合了配置中心后，应用在运行时会通过配置的远程配置中心地址和文件名，加载指定的配置。</p>\n<h3 id=\"配置中心搭建\"><a href=\"#配置中心搭建\" class=\"headerlink\" title=\"配置中心搭建\"></a>配置中心搭建</h3><ul>\n<li><p>新建一个项目，引入配置中心依赖，修改pom文件</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200726155948.png\" alt=\"image-20200726155947916\"></p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开</div></div><div class=\"fold\">\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.chan.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>config-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>config-server<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Spring Cloud Config Server<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-config-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n</div></div>\n</li>\n<li><p>yml文件配置远程配置中心地址</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开</div></div><div class=\"fold\">\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">4001</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">config-server</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">git:</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span></span><br><span class=\"line\">          <span class=\"attr\">basedir:</span> <span class=\"string\">./repo-config/</span> <span class=\"comment\">#缓存到本地的路径 执行的是new File(\"./repo-config/\")操作</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">       <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/</span> <span class=\"comment\">#单节点</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">config-server</span> <span class=\"comment\">#服务名</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span> <span class=\"comment\">#使用自己的ip地址注册而不是主机名</span></span><br></pre></td></tr></table></figure>\n\n\n\n</div></div>\n</li>\n<li><p>启动类增加@Enable开启配置中心</p>\n</li>\n</ul>\n<h3 id=\"客户端整合配置中心\"><a href=\"#客户端整合配置中心\" class=\"headerlink\" title=\"客户端整合配置中心\"></a>客户端整合配置中心</h3><p>在需要使用远程配置的客户端（消费者/提供者）整合配置中心。</p>\n<ol>\n<li><p>pom文件引入spring-cloud-starter-config依赖</p>\n</li>\n<li><p>将<strong>application.yml</strong>改为<strong>bootstrap.yml</strong>配置文件，在其中加入远程配置中心的相关配置</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开</div></div><div class=\"fold\">\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">provider</span></span><br><span class=\"line\">      <span class=\"attr\">profile:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">      <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:4001</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">service-id:</span> <span class=\"string\">config-server</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/</span></span><br><span class=\"line\">      <span class=\"attr\">instance:</span></span><br><span class=\"line\">        <span class=\"attr\">instance-id:</span> <span class=\"string\">service-provider</span> <span class=\"comment\">#服务名</span></span><br><span class=\"line\">        <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span> <span class=\"comment\">#ip地址</span></span><br></pre></td></tr></table></figure>\n\n\n\n</div></div>\n\n</li>\n</ol>\n<p>在服务启动后，可以在日志看到服务从远程配置中心获取指定的配置文件</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200726165017.png\" alt=\"image-20200726165017386\"></p>\n<h3 id=\"配置详解-1\"><a href=\"#配置详解-1\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h3><h4 id=\"config-server配置\"><a href=\"#config-server配置\" class=\"headerlink\" title=\"config-server配置\"></a>config-server配置</h4><p>前缀为spring.cloud.config.server</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">git</td>\n<td align=\"center\">使用git仓库，默认方式</td>\n</tr>\n<tr>\n<td align=\"center\">git.uri</td>\n<td align=\"center\">仓库地址</td>\n</tr>\n<tr>\n<td align=\"center\">git.username</td>\n<td align=\"center\">用户名</td>\n</tr>\n<tr>\n<td align=\"center\">git.password</td>\n<td align=\"center\">密码</td>\n</tr>\n<tr>\n<td align=\"center\">git.basedir</td>\n<td align=\"center\">下载到本地的缓存文件夹</td>\n</tr>\n</tbody></table>\n<h4 id=\"config-client配置\"><a href=\"#config-client配置\" class=\"headerlink\" title=\"config-client配置\"></a>config-client配置</h4><p>前缀为spring.cloud.config</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">discovery.enabled</td>\n<td align=\"center\">是否从配置中心获取配置，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">discovery.service-id</td>\n<td align=\"center\">配置中心服务名</td>\n</tr>\n<tr>\n<td align=\"center\">uri</td>\n<td align=\"center\">config-server服务地址</td>\n</tr>\n<tr>\n<td align=\"center\">name</td>\n<td align=\"center\">配置文件名，application-dev.yml则name为appplication</td>\n</tr>\n<tr>\n<td align=\"center\">profile</td>\n<td align=\"center\">dev</td>\n</tr>\n</tbody></table>\n<h2 id=\"消息总线Bus\"><a href=\"#消息总线Bus\" class=\"headerlink\" title=\"消息总线Bus\"></a>消息总线Bus</h2><h3 id=\"简介-5\"><a href=\"#简介-5\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>顾名思义，消息总线用来连接分布式节点，广播消息。Spring Cloud目前支持Kafka和RabbitMq两种消息队列中间件。</p>\n<p>接下来以分布式配置的动态刷新来在项目中使用消息中线Bus</p>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在config-server和config-client上搭建</p>\n<h4 id=\"RabbitMq\"><a href=\"#RabbitMq\" class=\"headerlink\" title=\"RabbitMq\"></a>RabbitMq</h4><ol>\n<li><p>pom文件引入基于RabbitMq的bus依赖spring-cloud-starter-bus-amqp，同时需要spring-boot-starter-actuator依赖</p>\n</li>\n<li><p>yml文件增加RabbitMq相关配置，并向外暴露/bus-refresh接口用于触发更新</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开</div></div><div class=\"fold\">\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">4001</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">config-server</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">git:</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span></span><br><span class=\"line\">          <span class=\"attr\">basedir:</span> <span class=\"string\">./repo-config/</span> <span class=\"comment\">#缓存到本地的路径 执行的是new File(\"./repo-config/\")操作</span></span><br><span class=\"line\">    <span class=\"attr\">bus:</span></span><br><span class=\"line\">      <span class=\"attr\">trace:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">rabbitmq:</span></span><br><span class=\"line\">    <span class=\"attr\">addresses:</span> <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.130</span><span class=\"string\">:5672</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">guest</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">guest</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">       <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/</span> <span class=\"comment\">#单节点</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">config-server</span> <span class=\"comment\">#服务名</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span> <span class=\"comment\">#使用自己的ip地址注册而不是主机名</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">bus-refresh</span></span><br></pre></td></tr></table></figure>\n\n\n\n</div></div>\n\n</li>\n</ol>\n<h4 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><ol>\n<li><p>pom文件引入基于Kafka的bus依赖spring-cloud-starter-bus-kafka，同时需要spring-boot-starter-actuator依赖</p>\n</li>\n<li><p>yml文件增加Kafka相关配置，并向外暴露/bus-refresh接口用于触发更新</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">展开</div></div><div class=\"fold\">\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">4001</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">config-server</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">git:</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span></span><br><span class=\"line\">          <span class=\"attr\">basedir:</span> <span class=\"string\">./repo-config/</span> <span class=\"comment\">#缓存到本地的路径 执行的是new File(\"./repo-config/\")操作</span></span><br><span class=\"line\">    <span class=\"attr\">bus:</span></span><br><span class=\"line\">      <span class=\"attr\">trace:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">stream:</span></span><br><span class=\"line\">      <span class=\"attr\">kafka:</span></span><br><span class=\"line\">        <span class=\"attr\">binder:</span></span><br><span class=\"line\">          <span class=\"attr\">brokers:</span> <span class=\"number\">192.168</span><span class=\"number\">.10</span><span class=\"number\">.130</span><span class=\"string\">:9092</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">       <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/</span> <span class=\"comment\">#单节点</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">config-server</span> <span class=\"comment\">#服务名</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span> <span class=\"comment\">#使用自己的ip地址注册而不是主机名</span></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">bus-refresh</span></span><br></pre></td></tr></table></figure>\n\n\n\n</div></div>\n\n</li>\n</ol>\n<p>配置完成后，通过访问config-server的/bus-refresh接口，触发服务的配置更新，可以在控制台查看对应的日志输出。也可以通过/bus/refresh?destination=xxx:port指定实例更新</p>\n<h2 id=\"Zuul网关\"><a href=\"#Zuul网关\" class=\"headerlink\" title=\"Zuul网关\"></a>Zuul网关</h2><h3 id=\"简介-6\"><a href=\"#简介-6\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>对外暴露的API，面向用户，系统UI端所有请求都需要经过网关，因此，可在网关通过拦截过滤，实现认证鉴权、动态路由、负载均衡、静态资源统一处理等功能，从而减少代码冗余，提高系统性能</p>\n<h3 id=\"使用-2\"><a href=\"#使用-2\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li><p>创建一个新模块gateway，引入spring-cloud-starter-netflix-zuul依赖</p>\n</li>\n<li><p>yml文件中，通过zuul.routes配置代理的服务路径、公共前缀等</p>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">yml文件</div></div><div class=\"fold\">\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">5001</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">gateway</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">       <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://eureka7001.com:7001/eureka/</span> <span class=\"comment\">#单节点</span></span><br><span class=\"line\"><span class=\"comment\">#      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class=\"line\">  <span class=\"attr\">instance:</span></span><br><span class=\"line\">    <span class=\"attr\">instance-id:</span> <span class=\"string\">gateway-zuul</span> <span class=\"comment\">#服务名</span></span><br><span class=\"line\">    <span class=\"attr\">prefer-ip-address:</span> <span class=\"literal\">true</span> <span class=\"comment\">#使用自己的ip地址注册而不是主机名</span></span><br><span class=\"line\"><span class=\"attr\">zuul:</span></span><br><span class=\"line\">  <span class=\"attr\">routes:</span></span><br><span class=\"line\">    <span class=\"attr\">ribbon:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/api-ribbon/**</span>  <span class=\"comment\">#代理名称</span></span><br><span class=\"line\">      <span class=\"attr\">serviceId:</span> <span class=\"string\">service-consumer</span>  <span class=\"comment\">#代理的服务</span></span><br><span class=\"line\">    <span class=\"attr\">feign:</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">/api-feign/**</span></span><br><span class=\"line\">      <span class=\"attr\">serviceId:</span> <span class=\"string\">consumer-feign</span></span><br><span class=\"line\"><span class=\"comment\">#      prefix: /api  #公共前缀</span></span><br></pre></td></tr></table></figure>\n\n\n\n</div></div>\n</li>\n<li><p>启动类增加@EnableZuulProxy注解开启网关</p>\n</li>\n</ul>\n<p>之后可以通过localhost:5001/api-ribbon/hello调用服务提供者provider的hello接口，且由于是通过ribbon调用，因此具有负载均衡功能。</p>\n<h3 id=\"核心组件Filter\"><a href=\"#核心组件Filter\" class=\"headerlink\" title=\"核心组件Filter\"></a>核心组件Filter</h3><p>通过继承ZuulFilter实现自定义的校验逻辑，实现认证鉴权、动态路由等功能。filter提供了4个方法</p>\n<ol>\n<li>filterType()：过滤时机，pre：路由之前、routing：路由时、error：发生错误、post：在routing和error之后</li>\n<li>filterOrder()：过滤器优先级</li>\n<li>shouldFilter()：是否开启</li>\n<li>run()：校验逻辑</li>\n</ol>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">查看实例代码</div></div><div class=\"fold\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">extends</span> <span class=\"title\">ZuulFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">filterType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"pre\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">filterOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">run</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ZuulException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"filtered by my filter\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</div></div>\n\n<h3 id=\"配置详解-2\"><a href=\"#配置详解-2\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h3><h4 id=\"代理服务配置zuul-routes\"><a href=\"#代理服务配置zuul-routes\" class=\"headerlink\" title=\"代理服务配置zuul.routes\"></a>代理服务配置zuul.routes</h4><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">service-id</td>\n<td align=\"center\">代理服务名</td>\n</tr>\n<tr>\n<td align=\"center\">path</td>\n<td align=\"center\">代理名称/路径</td>\n</tr>\n</tbody></table>\n<h4 id=\"服务中配置\"><a href=\"#服务中配置\" class=\"headerlink\" title=\"服务中配置\"></a>服务中配置</h4><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">prefix</td>\n<td align=\"center\">公共前缀，默认””</td>\n</tr>\n<tr>\n<td align=\"center\">strip-prefix</td>\n<td align=\"center\">路由时是否删除前缀，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">retryable</td>\n<td align=\"center\">是否支持重试，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">addProxyHeaders</td>\n<td align=\"center\">是否添加’X-forwarded-*’请求头，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">addHostHeader</td>\n<td align=\"center\">是否添加主机头，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">ignoredServices</td>\n<td align=\"center\">不代理的服务，默认为空，即代理所有服务</td>\n</tr>\n<tr>\n<td align=\"center\">ignoredHeaders</td>\n<td align=\"center\">忽略的HTTP请求头，默认null</td>\n</tr>\n<tr>\n<td align=\"center\">sensitiveHeaders</td>\n<td align=\"center\">不传递给下游的敏感请求头信息，默认有”cookie”,”set-cookie”,”authorization”</td>\n</tr>\n<tr>\n<td align=\"center\">sslHostnameValidationEnabled</td>\n<td align=\"center\">是否验证ssl连接的主机名，默认true</td>\n</tr>\n</tbody></table>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"注册中心配置项详解\"><a href=\"#注册中心配置项详解\" class=\"headerlink\" title=\"注册中心配置项详解\"></a>注册中心配置项详解</h3><h4 id=\"eureka-client\"><a href=\"#eureka-client\" class=\"headerlink\" title=\"eureka.client\"></a>eureka.client</h4><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">enabled</td>\n<td align=\"center\">客户端是否开启的标志，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">registryFetchIntervalSeconds</td>\n<td align=\"center\">从eureka-server获取服务清单的频率，默认30s/次</td>\n</tr>\n<tr>\n<td align=\"center\">instanceInfoReplicationIntervalSeconds</td>\n<td align=\"center\">更新实例变化信息的频率，默认30s/次</td>\n</tr>\n<tr>\n<td align=\"center\">initialInstanceInfoReplicationIntervalSeconds</td>\n<td align=\"center\">初始化实例信息到eureka-server的时间，默认40s</td>\n</tr>\n<tr>\n<td align=\"center\">eurekaServiceUrlPollIntervalSeconds</td>\n<td align=\"center\">多久更新一次eureka-server信息，默认5分钟</td>\n</tr>\n<tr>\n<td align=\"center\">proxyPort</td>\n<td align=\"center\">eureka-server代理端口</td>\n</tr>\n<tr>\n<td align=\"center\">proxyHost</td>\n<td align=\"center\">eureka-server代理主机</td>\n</tr>\n<tr>\n<td align=\"center\">proxyUserName</td>\n<td align=\"center\">eureka-server代理用户名</td>\n</tr>\n<tr>\n<td align=\"center\">proxyPassword</td>\n<td align=\"center\">eureka-server代理密码</td>\n</tr>\n<tr>\n<td align=\"center\">eurekaServerReadTimeoutSeconds</td>\n<td align=\"center\">读取eureka-server信息超时时间，默认8s</td>\n</tr>\n<tr>\n<td align=\"center\">eurekaServerConnectTimeoutSeconds</td>\n<td align=\"center\">连接eureka-server超时时间，默认5s</td>\n</tr>\n<tr>\n<td align=\"center\">eurekaServerTotalConnections</td>\n<td align=\"center\">总连接数，默认200</td>\n</tr>\n<tr>\n<td align=\"center\">eurekaServerTotalConnectionsPerHost</td>\n<td align=\"center\">每个eureka-server实例连接总数</td>\n</tr>\n<tr>\n<td align=\"center\">eurekaConnectionIdleTimeoutSeconds</td>\n<td align=\"center\">HTTP连接keepalive时间，默认30s</td>\n</tr>\n<tr>\n<td align=\"center\">heartbeatExecutorThreadPoolSize</td>\n<td align=\"center\">心跳线程池线程数，默认2</td>\n</tr>\n<tr>\n<td align=\"center\">heartbeatExecutorExponentialBackOffBound</td>\n<td align=\"center\">心跳执行程序回退相关的属性，是重试延迟的最大倍数值，默认为10</td>\n</tr>\n<tr>\n<td align=\"center\">cacheRefreshExecutorThreadPoolSize</td>\n<td align=\"center\">缓存刷新线程池线程数，默认2</td>\n</tr>\n<tr>\n<td align=\"center\">cacheRefreshExecutorExponentialBackOffBound</td>\n<td align=\"center\">缓存刷新重试延迟的最大倍数值，默认10</td>\n</tr>\n<tr>\n<td align=\"center\">serverUrl</td>\n<td align=\"center\">指定注册中心地址，集群以’,’为分隔符</td>\n</tr>\n<tr>\n<td align=\"center\">gZipContent</td>\n<td align=\"center\">是否压缩注册表内容，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">useDnsForFetchingServiceUrls</td>\n<td align=\"center\">是否使用DNS来获取服务实例清单，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">registerWithEureka</td>\n<td align=\"center\">是否注册到eureka-server，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">preferSameZoneEureka</td>\n<td align=\"center\">优先选择同一个Zone空间的eureka-server，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">logDeltaDiff</td>\n<td align=\"center\">是否记录eureka-server和eureka-client在实例清单的差异</td>\n</tr>\n<tr>\n<td align=\"center\">disableDelta</td>\n<td align=\"center\">禁用记录的差异信息</td>\n</tr>\n<tr>\n<td align=\"center\">filterOnlyUpInstances</td>\n<td align=\"center\">只获取状态为UP的实例，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">fetchRegistry</td>\n<td align=\"center\">是否从eureka-server获取注册实例清单，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">dollarReplacement</td>\n<td align=\"center\">序列化/反序列化eureka-server信息时的$替换符，默认_-</td>\n</tr>\n<tr>\n<td align=\"center\">escapeCharReplacement</td>\n<td align=\"center\">序列化/反序列化eureka-server信息时的-替换符，默认__</td>\n</tr>\n<tr>\n<td align=\"center\">allowRedirects</td>\n<td align=\"center\">是否允许eureka-server将eureka-client请求转发到其他eureka-server，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">onDemandUpdateStatusChange</td>\n<td align=\"center\">本地状态更新将触发远程eureka-server注册信息更新，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">encoderName</td>\n<td align=\"center\">编码器</td>\n</tr>\n<tr>\n<td align=\"center\">decoderName</td>\n<td align=\"center\">解码器</td>\n</tr>\n<tr>\n<td align=\"center\">shouldUnregisterOnShutdown</td>\n<td align=\"center\">eureka-client关闭后是否自动从注册中心注销，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">shouldEnforceRegistrationAtInit</td>\n<td align=\"center\">eureka-client在初始化时是否必须注册，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">order</td>\n<td align=\"center\">用于 <code>CompositeDiscoveryClient</code> 发现排序</td>\n</tr>\n</tbody></table>\n<h4 id=\"eureka-instance服务实例\"><a href=\"#eureka-instance服务实例\" class=\"headerlink\" title=\"eureka.instance服务实例\"></a>eureka.instance服务实例</h4><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">instance-id</td>\n<td align=\"center\">同一服务不同实例的唯一标识</td>\n</tr>\n<tr>\n<td align=\"center\">appname</td>\n<td align=\"center\">服务名，默认UNKNOWN，如果有spring.application.name则使用该名字</td>\n</tr>\n<tr>\n<td align=\"center\">hostname</td>\n<td align=\"center\">主机名，默认使用操作系统的主机名</td>\n</tr>\n<tr>\n<td align=\"center\">nonSecurePort</td>\n<td align=\"center\">非安全通信端口，默认80</td>\n</tr>\n<tr>\n<td align=\"center\">nonSecurePortEnabled</td>\n<td align=\"center\">是否开始非安全通信端口，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">securePort</td>\n<td align=\"center\">安全通信端口，默认443</td>\n</tr>\n<tr>\n<td align=\"center\">securePortEnabled</td>\n<td align=\"center\">是否开启安全通信端口，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">leaseRenewalIntervalInSeconds</td>\n<td align=\"center\">发送心跳信息间隔，默认30s</td>\n</tr>\n<tr>\n<td align=\"center\">leaseExpirationDurationInSeconds</td>\n<td align=\"center\">过期时间，默认90s</td>\n</tr>\n<tr>\n<td align=\"center\">statusPageUrl</td>\n<td align=\"center\">状态信息Url绝对路径，默认null</td>\n</tr>\n<tr>\n<td align=\"center\">homePageUrl</td>\n<td align=\"center\">homePageUrl绝对路径，默认null</td>\n</tr>\n<tr>\n<td align=\"center\">healthCheckUrl</td>\n<td align=\"center\">健康检测Url绝对路径，默认null</td>\n</tr>\n<tr>\n<td align=\"center\">preferIpAddress</td>\n<td align=\"center\">优先使用IP地址注册，默认false</td>\n</tr>\n</tbody></table>\n<h3 id=\"Hystrix注解和配置详解\"><a href=\"#Hystrix注解和配置详解\" class=\"headerlink\" title=\"Hystrix注解和配置详解\"></a>Hystrix注解和配置详解</h3><p>更详细内容可查看<a href=\"https://github.com/Netflix/Hystrix/wiki/Configuration\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h4 id=\"HystrixCommand\"><a href=\"#HystrixCommand\" class=\"headerlink\" title=\"@HystrixCommand\"></a>@HystrixCommand</h4><table>\n<thead>\n<tr>\n<th align=\"center\">可配置属性</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">fallbackMethod</td>\n<td align=\"center\">回退方法</td>\n</tr>\n<tr>\n<td align=\"center\">commandKey</td>\n<td align=\"center\">Hystrix命令的键，默认是被注解的方法名</td>\n</tr>\n<tr>\n<td align=\"center\">groupKey</td>\n<td align=\"center\">一组命令的标识，默认是类名</td>\n</tr>\n<tr>\n<td align=\"center\">threadPoolKey</td>\n<td align=\"center\">线程池的标识，默认是groupKey，一个类的命令使用同一个线程池</td>\n</tr>\n<tr>\n<td align=\"center\">observableExecutionMode</td>\n<td align=\"center\">异步执行的命令执行模式，EAGER/LAZY</td>\n</tr>\n<tr>\n<td align=\"center\">commandProperties</td>\n<td align=\"center\">命令配置，可以以数组形式设置命令的属性</td>\n</tr>\n<tr>\n<td align=\"center\">threadPoolProperties</td>\n<td align=\"center\">线程池配置，可以以数组形式设置线程池属性</td>\n</tr>\n<tr>\n<td align=\"center\">ignoreExceptions</td>\n<td align=\"center\">忽视异常，如果执行过程出现未被忽视异常Hystrix会调用fallback。</td>\n</tr>\n</tbody></table>\n<h4 id=\"FeignClient\"><a href=\"#FeignClient\" class=\"headerlink\" title=\"@FeignClient\"></a>@FeignClient</h4><p>Feign使用Hystrix，可使用此注解</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">可配置属性</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">fallback</td>\n<td align=\"center\">回退策略，通过实现接口FeignClient的方式</td>\n</tr>\n<tr>\n<td align=\"center\">value</td>\n<td align=\"center\">服务名</td>\n</tr>\n<tr>\n<td align=\"center\">fallbackFactory</td>\n<td align=\"center\">回退策略，通过实现FallbackFactory<FeignClient>生成实例的方式</td>\n</tr>\n</tbody></table>\n<h4 id=\"HystrixCommandProperties\"><a href=\"#HystrixCommandProperties\" class=\"headerlink\" title=\"HystrixCommandProperties\"></a>HystrixCommandProperties</h4><h5 id=\"线程隔离execution\"><a href=\"#线程隔离execution\" class=\"headerlink\" title=\"线程隔离execution.\"></a>线程隔离execution.</h5><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">isolation.stragy</td>\n<td align=\"center\">隔离方式：线程池THREAD信号量SEMAPHORE</td>\n</tr>\n<tr>\n<td align=\"center\">timeout.enabled</td>\n<td align=\"center\">开启超时熔断</td>\n</tr>\n<tr>\n<td align=\"center\">isolation.thread.timeoutInMilliseconds</td>\n<td align=\"center\">超时时间，单位毫秒，默认1s</td>\n</tr>\n<tr>\n<td align=\"center\">isolation.thread.interruptOnTimeout</td>\n<td align=\"center\">超时后是否中断方法，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">isolation.thread.interruptOnFutureCancel</td>\n<td align=\"center\">取消后是否中断方法，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">isolation.semaphore.maxConcurrentRequests</td>\n<td align=\"center\">使用信号量隔离方式时最大并发数，默认是10</td>\n</tr>\n</tbody></table>\n<h5 id=\"统计器metrics\"><a href=\"#统计器metrics\" class=\"headerlink\" title=\"统计器metrics.\"></a>统计器metrics.</h5><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">rollingStats.timeInmilliseconds</td>\n<td align=\"center\">Hystrix滑动窗口大小，单位ms，默认1s，即统计1s内请求总数</td>\n</tr>\n<tr>\n<td align=\"center\">healthSnapshot.intervalInMilliseconds</td>\n<td align=\"center\">Hystrix桶的大小，默认500ms，每经过500ms计算窗口的失败率</td>\n</tr>\n<tr>\n<td align=\"center\">rollingStats.numBuckets</td>\n<td align=\"center\">可视化界面时一个窗口应该拆分成多少个桶</td>\n</tr>\n<tr>\n<td align=\"center\">rollingPercentile.enabled</td>\n<td align=\"center\">是否统计方法响应时间百分比，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">rollingPercentile.timeInMilliseconds</td>\n<td align=\"center\">统计响应时间百分比时窗口大小，默认一分钟</td>\n</tr>\n<tr>\n<td align=\"center\">rollingPercentile.numBuckets</td>\n<td align=\"center\">一个窗口划分成几个桶，默认6</td>\n</tr>\n<tr>\n<td align=\"center\">rollingPercentile.bucketSize</td>\n<td align=\"center\">每个桶保留的请求数，默认100，即最近的100条</td>\n</tr>\n</tbody></table>\n<h5 id=\"熔断器circuitBreaker\"><a href=\"#熔断器circuitBreaker\" class=\"headerlink\" title=\"熔断器circuitBreaker.\"></a>熔断器circuitBreaker.</h5><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">enabled</td>\n<td align=\"center\">是否开启熔断器，默认true</td>\n</tr>\n<tr>\n<td align=\"center\">forceOpen</td>\n<td align=\"center\">强制启用</td>\n</tr>\n<tr>\n<td align=\"center\">forceClosed</td>\n<td align=\"center\">强制关闭</td>\n</tr>\n<tr>\n<td align=\"center\">requestVolumeThreshold</td>\n<td align=\"center\">窗口最小请求数，需要根据接口的qps来设置，避免误触发</td>\n</tr>\n<tr>\n<td align=\"center\">errorThresholdPercentage</td>\n<td align=\"center\">失败率阈值，超过该百分比则触发熔断</td>\n</tr>\n<tr>\n<td align=\"center\">sleepWindowMilliseconds</td>\n<td align=\"center\">触发熔断后多久就放行请求，默认5s</td>\n</tr>\n</tbody></table>\n<h4 id=\"HystrixThreadPoolProperties\"><a href=\"#HystrixThreadPoolProperties\" class=\"headerlink\" title=\"HystrixThreadPoolProperties\"></a>HystrixThreadPoolProperties</h4><table>\n<thead>\n<tr>\n<th align=\"center\">配置项</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">coreSize</td>\n<td align=\"center\">核心线程数，默认10</td>\n</tr>\n<tr>\n<td align=\"center\">allowMaximunSizeToDivergeFromCoreSize</td>\n<td align=\"center\">允许扩展到线程池最大线程数，默认false</td>\n</tr>\n<tr>\n<td align=\"center\">maxinumSize</td>\n<td align=\"center\">最大线程数，默认10</td>\n</tr>\n<tr>\n<td align=\"center\">maxQueueSize</td>\n<td align=\"center\">任务队列大小，默认-1</td>\n</tr>\n<tr>\n<td align=\"center\">queueSizeRejectionThreshold</td>\n<td align=\"center\">任务队列到达此值就拒绝请求，默认5</td>\n</tr>\n<tr>\n<td align=\"center\">keepAliveTimeMinutes</td>\n<td align=\"center\">空闲存活时间，默认2分钟</td>\n</tr>\n</tbody></table>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200726131044.png","popularPost_tmp_gaData":{"updated":"Sun Jul 26 2020 18:43:58 GMT+0800 (中国标准时间)","title":"Spring Cloud入门","path":"posts/a49c4b2e.html","eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200726131044.png","excerpt":"<p/>","date":{"_isAMomentObject":true,"_i":"2020-07-23T14:14:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-07-23T14:14:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Spring Cloud","tags":["Spring Cloud"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":21490},{"title":"二叉树的遍历","image":"https://gitee.com/jingshanccc/image/raw/master/image/20200722003318.png","abbrlink":"ea4681d0","_content":"\n<p/>\n\n<!-- more -->\n\n## 递归版\n\n递归借用系统栈，在遍历时每个节点都会访问三次，因此只要在不同的时机打印出节点的值，即可完成三种遍历。\n\n```java\npublic void recurTraversal(TreeNode node){\n    if(node != null){\n        System.out.print(node.val);//前序\n        recurTraversal(node.left);\n        System.out.print(node.val);//中序\n        recurTraversal(node.right);\n        System.out.print(node.val);//后序\n    }\n}\n```\n\n## 非递归版\n\n1. 前序遍历：前序遍历的顺序是根-左-右，借助栈后进先出的特点，在压栈时先压右再压左，则出栈时先出左再出右。\n\n   ```java\n   public void preOrder(TreeNode node){\n       if(node != null){\n           Stack<TreeNode> stack = new Stack<>();\n           stack.push(node); //根节点\n           while(!stack,isEmpty()){\n               node = stack.pop();\n               System.out.print(node.val);\n               if(node.right != null){\n                   stack.push(node.right);\n               }\n               if(node.left != null){\n                   stack.push(node.left);\n               }\n           }\n       }\n   }\n   ```\n\n2. 中序遍历：中序遍历的顺序是左-根-右。对于整个二叉树，最左的节点第一个被打印，因此我们从根节点开始，不断入栈左节点（第一次访问），当左节点为空时，说明走到了最左节点，出栈（第二次访问），将其右节点入栈。\n\n   ```java\n   public void inOrder(TreeNode node){\n       if(node != null){\n           Stack<TreeNode> stack = new Stack<>();\n           while(!stack.isEmpty() || node != null){\n               if(node != null){//还有左节点\n                   stack.push(node);\n                   node = node.left; //向左走\n               }else{//没有左节点\n                   node = stack.pop();\n                   System.out.print(node.val);\n                   node = node.right;\n               }\n           }\n       }\n   }\n   ```\n\n3. 后序遍历：后序遍历的顺序是左-右-根。前序遍历是根左右，我们将前序遍历中压栈顺序改为先压左再压右，则出栈顺序变为根右左，其逆序就是左右根。\n\n   ```java\n   public void postOrder(TreeNode node){\n       if(node != null){\n           Stack<Node> in = new Stack<>();\n           Stack<Node> out = new Stack<>();\n           stack.push(node);\n           while(!stack.isEmpty()){\n               node = in.pop();\n               out.push(node);\n               if(node.left != null){\n                   in.push(node.left);\n               }\n               if(node.right != null){\n                   in.push(node.right);\n               }\n           }\n           while(!out.isEmpty()){\n               System.out.print(out.pop().val);\n           }\n       }\n   }\n   ```\n\n4. 层序遍历：逐层打印节点，借助队列实现。每个节点出队时将左右子节点入队，由于队列先进先出，将按入队顺序出队。\n\n   ```java\n   public void levelOrder(TreeNode node){\n       if(node != null){\n           Queue<TreeNode> queue = new LinkedList<>();\n           queue.offer(node);\n           while(!queue.isEmpty()){\n               node = queue.poll();\n               System.out.print(node.val);\n               if(node.left != null){\n                   queue.offer(node.left);\n               }\n               if(node.right != null){\n                   queue.offer(node.right);\n               }\n           }\n       }\n   }\n   ```\n\n   \n\n","source":"_posts/二叉树的遍历.md","raw":"---\ntitle: 二叉树的遍历\ntags:\n  - 二叉树遍历\ncategories:\n  - 笔记\nimage: 'https://gitee.com/jingshanccc/image/raw/master/image/20200722003318.png'\nabbrlink: ea4681d0\n---\n\n<p/>\n\n<!-- more -->\n\n## 递归版\n\n递归借用系统栈，在遍历时每个节点都会访问三次，因此只要在不同的时机打印出节点的值，即可完成三种遍历。\n\n```java\npublic void recurTraversal(TreeNode node){\n    if(node != null){\n        System.out.print(node.val);//前序\n        recurTraversal(node.left);\n        System.out.print(node.val);//中序\n        recurTraversal(node.right);\n        System.out.print(node.val);//后序\n    }\n}\n```\n\n## 非递归版\n\n1. 前序遍历：前序遍历的顺序是根-左-右，借助栈后进先出的特点，在压栈时先压右再压左，则出栈时先出左再出右。\n\n   ```java\n   public void preOrder(TreeNode node){\n       if(node != null){\n           Stack<TreeNode> stack = new Stack<>();\n           stack.push(node); //根节点\n           while(!stack,isEmpty()){\n               node = stack.pop();\n               System.out.print(node.val);\n               if(node.right != null){\n                   stack.push(node.right);\n               }\n               if(node.left != null){\n                   stack.push(node.left);\n               }\n           }\n       }\n   }\n   ```\n\n2. 中序遍历：中序遍历的顺序是左-根-右。对于整个二叉树，最左的节点第一个被打印，因此我们从根节点开始，不断入栈左节点（第一次访问），当左节点为空时，说明走到了最左节点，出栈（第二次访问），将其右节点入栈。\n\n   ```java\n   public void inOrder(TreeNode node){\n       if(node != null){\n           Stack<TreeNode> stack = new Stack<>();\n           while(!stack.isEmpty() || node != null){\n               if(node != null){//还有左节点\n                   stack.push(node);\n                   node = node.left; //向左走\n               }else{//没有左节点\n                   node = stack.pop();\n                   System.out.print(node.val);\n                   node = node.right;\n               }\n           }\n       }\n   }\n   ```\n\n3. 后序遍历：后序遍历的顺序是左-右-根。前序遍历是根左右，我们将前序遍历中压栈顺序改为先压左再压右，则出栈顺序变为根右左，其逆序就是左右根。\n\n   ```java\n   public void postOrder(TreeNode node){\n       if(node != null){\n           Stack<Node> in = new Stack<>();\n           Stack<Node> out = new Stack<>();\n           stack.push(node);\n           while(!stack.isEmpty()){\n               node = in.pop();\n               out.push(node);\n               if(node.left != null){\n                   in.push(node.left);\n               }\n               if(node.right != null){\n                   in.push(node.right);\n               }\n           }\n           while(!out.isEmpty()){\n               System.out.print(out.pop().val);\n           }\n       }\n   }\n   ```\n\n4. 层序遍历：逐层打印节点，借助队列实现。每个节点出队时将左右子节点入队，由于队列先进先出，将按入队顺序出队。\n\n   ```java\n   public void levelOrder(TreeNode node){\n       if(node != null){\n           Queue<TreeNode> queue = new LinkedList<>();\n           queue.offer(node);\n           while(!queue.isEmpty()){\n               node = queue.poll();\n               System.out.print(node.val);\n               if(node.left != null){\n                   queue.offer(node.left);\n               }\n               if(node.right != null){\n                   queue.offer(node.right);\n               }\n           }\n       }\n   }\n   ```\n\n   \n\n","slug":"二叉树的遍历","published":1,"date":"2020-05-05T01:27:31.319Z","updated":"2020-07-21T16:33:32.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2e0036z4ej9kvkfh52","content":"<p/>\n\n<a id=\"more\"></a>\n\n<h2 id=\"递归版\"><a href=\"#递归版\" class=\"headerlink\" title=\"递归版\"></a>递归版</h2><p>递归借用系统栈，在遍历时每个节点都会访问三次，因此只要在不同的时机打印出节点的值，即可完成三种遍历。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">recurTraversal</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        System.out.print(node.val);<span class=\"comment\">//前序</span></span><br><span class=\"line\">        recurTraversal(node.left);</span><br><span class=\"line\">        System.out.print(node.val);<span class=\"comment\">//中序</span></span><br><span class=\"line\">        recurTraversal(node.right);</span><br><span class=\"line\">        System.out.print(node.val);<span class=\"comment\">//后序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"非递归版\"><a href=\"#非递归版\" class=\"headerlink\" title=\"非递归版\"></a>非递归版</h2><ol>\n<li><p>前序遍历：前序遍历的顺序是根-左-右，借助栈后进先出的特点，在压栈时先压右再压左，则出栈时先出左再出右。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        stack.push(node); <span class=\"comment\">//根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stack,isEmpty())&#123;</span><br><span class=\"line\">            node = stack.pop();</span><br><span class=\"line\">            System.out.print(node.val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                stack.push(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                stack.push(node.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>中序遍历：中序遍历的顺序是左-根-右。对于整个二叉树，最左的节点第一个被打印，因此我们从根节点开始，不断入栈左节点（第一次访问），当左节点为空时，说明走到了最左节点，出栈（第二次访问），将其右节点入栈。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stack.isEmpty() || node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//还有左节点</span></span><br><span class=\"line\">                stack.push(node);</span><br><span class=\"line\">                node = node.left; <span class=\"comment\">//向左走</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//没有左节点</span></span><br><span class=\"line\">                node = stack.pop();</span><br><span class=\"line\">                System.out.print(node.val);</span><br><span class=\"line\">                node = node.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>后序遍历：后序遍历的顺序是左-右-根。前序遍历是根左右，我们将前序遍历中压栈顺序改为先压左再压右，则出栈顺序变为根右左，其逆序就是左右根。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Stack&lt;Node&gt; in = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        Stack&lt;Node&gt; out = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        stack.push(node);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stack.isEmpty())&#123;</span><br><span class=\"line\">            node = in.pop();</span><br><span class=\"line\">            out.push(node);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                in.push(node.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                in.push(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!out.isEmpty())&#123;</span><br><span class=\"line\">            System.out.print(out.pop().val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>层序遍历：逐层打印节点，借助队列实现。每个节点出队时将左右子节点入队，由于队列先进先出，将按入队顺序出队。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">levelOrder</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        queue.offer(node);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">            node = queue.poll();</span><br><span class=\"line\">            System.out.print(node.val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                queue.offer(node.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                queue.offer(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p/>","more":"<h2 id=\"递归版\"><a href=\"#递归版\" class=\"headerlink\" title=\"递归版\"></a>递归版</h2><p>递归借用系统栈，在遍历时每个节点都会访问三次，因此只要在不同的时机打印出节点的值，即可完成三种遍历。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">recurTraversal</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        System.out.print(node.val);<span class=\"comment\">//前序</span></span><br><span class=\"line\">        recurTraversal(node.left);</span><br><span class=\"line\">        System.out.print(node.val);<span class=\"comment\">//中序</span></span><br><span class=\"line\">        recurTraversal(node.right);</span><br><span class=\"line\">        System.out.print(node.val);<span class=\"comment\">//后序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"非递归版\"><a href=\"#非递归版\" class=\"headerlink\" title=\"非递归版\"></a>非递归版</h2><ol>\n<li><p>前序遍历：前序遍历的顺序是根-左-右，借助栈后进先出的特点，在压栈时先压右再压左，则出栈时先出左再出右。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        stack.push(node); <span class=\"comment\">//根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stack,isEmpty())&#123;</span><br><span class=\"line\">            node = stack.pop();</span><br><span class=\"line\">            System.out.print(node.val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                stack.push(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                stack.push(node.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>中序遍历：中序遍历的顺序是左-根-右。对于整个二叉树，最左的节点第一个被打印，因此我们从根节点开始，不断入栈左节点（第一次访问），当左节点为空时，说明走到了最左节点，出栈（第二次访问），将其右节点入栈。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stack.isEmpty() || node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//还有左节点</span></span><br><span class=\"line\">                stack.push(node);</span><br><span class=\"line\">                node = node.left; <span class=\"comment\">//向左走</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//没有左节点</span></span><br><span class=\"line\">                node = stack.pop();</span><br><span class=\"line\">                System.out.print(node.val);</span><br><span class=\"line\">                node = node.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>后序遍历：后序遍历的顺序是左-右-根。前序遍历是根左右，我们将前序遍历中压栈顺序改为先压左再压右，则出栈顺序变为根右左，其逆序就是左右根。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Stack&lt;Node&gt; in = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        Stack&lt;Node&gt; out = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        stack.push(node);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stack.isEmpty())&#123;</span><br><span class=\"line\">            node = in.pop();</span><br><span class=\"line\">            out.push(node);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                in.push(node.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                in.push(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!out.isEmpty())&#123;</span><br><span class=\"line\">            System.out.print(out.pop().val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>层序遍历：逐层打印节点，借助队列实现。每个节点出队时将左右子节点入队，由于队列先进先出，将按入队顺序出队。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">levelOrder</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        queue.offer(node);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">            node = queue.poll();</span><br><span class=\"line\">            System.out.print(node.val);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.left != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                queue.offer(node.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.right != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                queue.offer(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Jul 22 2020 00:33:32 GMT+0800 (中国标准时间)","title":"二叉树的遍历","path":"posts/ea4681d0.html","eyeCatchImage":null,"excerpt":"<p/>","date":{"_isAMomentObject":true,"_i":"2020-05-05T01:27:31.319Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-05T01:27:31.319Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"笔记","tags":["二叉树遍历"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2030},{"title":"剑指Offer-03. 数组中重复的数字","categoires":["剑指Offer"],"abbrlink":"2f50b40c","_content":"\n>找出数组中的重复数字\n>\n>在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内，其中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中的任意一个重复的数字。\n\n<!-- more -->\n\n示例 1：\n\n```java\n输入：[2, 3, 1, 0, 2, 5, 3]\n输出：2 或 3 \n```\n\n### 👊 暴力解法\n\n重复的数字在数组中出现次数会大于1。在遍历数组的过程中，使用HashSet来记录出现过的数字，当HashSet中存在该元素时，说明重复，返回该元素即可。由于数字范围在 0~n-1 范围内，因此可以使用一个数组来记录某个元素出现的次数达到优化的目的。\n\n```java\npublic int findRepeatNumber(int[] nums) {\n    int[] freq = new int[nums.length];\n    for(int i : nums){\n        if(freq[i] == 0){\n            freq[i] ++;\n        }else{\n            return i;\n        }\n    }\n    return -1;\n}\n```\n\n### ✍️ 优化\n\n暴力解法的实践和空间复杂度均达到了O(N)，本题由于数组数字范围和长度相同，因此可以将原数组作为哈希表，达到优化空间的目的，但是会**修改输入**。\n\n由于数字范围和数组长度一致，如果没有重复数字，那么每个位置上在排序后的状态下数字和位置是一一对应的，但是我们并不做排序这个工作，因为这样时间复杂度是O(nlogn)级别的。我们只是利用这一特征，遍历数组时，如果当前数字和位置不对应，则将当前数字交换到它应该在的位置上。如果应该在的位置上已经有了正确的数字，那么说明当前数字就是重复的。\n\n```java\npublic int findRepeatNumber(int[] nums) {\n    for(int i = 0; i < nums.length; i++){\n        while(nums[i] != i){\n            if(nums[nums[i]] == nums[i]){\n                return nums[i];\n            }\n            int a = nums[nums[i]];\n            nums[nums[i]] = nums[i];\n            nums[i] = a;\n        }\n    }\n    return -1;\n}\n```\n\n\n\n","source":"_posts/剑指Offer-03数组中重复的数字.md","raw":"---\ntitle: 剑指Offer-03. 数组中重复的数字\ntags:\n  - 剑指Offer\n  - 哈希\n  - 数组\ncategoires:\n  - 剑指Offer\nabbrlink: 2f50b40c\n---\n\n>找出数组中的重复数字\n>\n>在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内，其中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中的任意一个重复的数字。\n\n<!-- more -->\n\n示例 1：\n\n```java\n输入：[2, 3, 1, 0, 2, 5, 3]\n输出：2 或 3 \n```\n\n### 👊 暴力解法\n\n重复的数字在数组中出现次数会大于1。在遍历数组的过程中，使用HashSet来记录出现过的数字，当HashSet中存在该元素时，说明重复，返回该元素即可。由于数字范围在 0~n-1 范围内，因此可以使用一个数组来记录某个元素出现的次数达到优化的目的。\n\n```java\npublic int findRepeatNumber(int[] nums) {\n    int[] freq = new int[nums.length];\n    for(int i : nums){\n        if(freq[i] == 0){\n            freq[i] ++;\n        }else{\n            return i;\n        }\n    }\n    return -1;\n}\n```\n\n### ✍️ 优化\n\n暴力解法的实践和空间复杂度均达到了O(N)，本题由于数组数字范围和长度相同，因此可以将原数组作为哈希表，达到优化空间的目的，但是会**修改输入**。\n\n由于数字范围和数组长度一致，如果没有重复数字，那么每个位置上在排序后的状态下数字和位置是一一对应的，但是我们并不做排序这个工作，因为这样时间复杂度是O(nlogn)级别的。我们只是利用这一特征，遍历数组时，如果当前数字和位置不对应，则将当前数字交换到它应该在的位置上。如果应该在的位置上已经有了正确的数字，那么说明当前数字就是重复的。\n\n```java\npublic int findRepeatNumber(int[] nums) {\n    for(int i = 0; i < nums.length; i++){\n        while(nums[i] != i){\n            if(nums[nums[i]] == nums[i]){\n                return nums[i];\n            }\n            int a = nums[nums[i]];\n            nums[nums[i]] = nums[i];\n            nums[i] = a;\n        }\n    }\n    return -1;\n}\n```\n\n\n\n","slug":"剑指Offer-03数组中重复的数字","published":1,"date":"2020-05-04T12:51:58.261Z","updated":"2020-05-05T03:11:57.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2f003az4ej6j17343w","content":"<blockquote>\n<p>找出数组中的重复数字</p>\n<p>在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内，其中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中的任意一个重复的数字。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>示例 1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">输出：<span class=\"number\">2</span> 或 <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"👊-暴力解法\"><a href=\"#👊-暴力解法\" class=\"headerlink\" title=\"👊 暴力解法\"></a>👊 暴力解法</h3><p>重复的数字在数组中出现次数会大于1。在遍历数组的过程中，使用HashSet来记录出现过的数字，当HashSet中存在该元素时，说明重复，返回该元素即可。由于数字范围在 0~n-1 范围内，因此可以使用一个数组来记录某个元素出现的次数达到优化的目的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findRepeatNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] freq = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(freq[i] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            freq[i] ++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"✍️-优化\"><a href=\"#✍️-优化\" class=\"headerlink\" title=\"✍️ 优化\"></a>✍️ 优化</h3><p>暴力解法的实践和空间复杂度均达到了O(N)，本题由于数组数字范围和长度相同，因此可以将原数组作为哈希表，达到优化空间的目的，但是会<strong>修改输入</strong>。</p>\n<p>由于数字范围和数组长度一致，如果没有重复数字，那么每个位置上在排序后的状态下数字和位置是一一对应的，但是我们并不做排序这个工作，因为这样时间复杂度是O(nlogn)级别的。我们只是利用这一特征，遍历数组时，如果当前数字和位置不对应，则将当前数字交换到它应该在的位置上。如果应该在的位置上已经有了正确的数字，那么说明当前数字就是重复的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findRepeatNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(nums[i] != i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[nums[i]] == nums[i])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = nums[nums[i]];</span><br><span class=\"line\">            nums[nums[i]] = nums[i];</span><br><span class=\"line\">            nums[i] = a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>找出数组中的重复数字</p>\n<p>在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内，其中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中的任意一个重复的数字。</p>\n</blockquote>","more":"<p>示例 1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">输出：<span class=\"number\">2</span> 或 <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"👊-暴力解法\"><a href=\"#👊-暴力解法\" class=\"headerlink\" title=\"👊 暴力解法\"></a>👊 暴力解法</h3><p>重复的数字在数组中出现次数会大于1。在遍历数组的过程中，使用HashSet来记录出现过的数字，当HashSet中存在该元素时，说明重复，返回该元素即可。由于数字范围在 0~n-1 范围内，因此可以使用一个数组来记录某个元素出现的次数达到优化的目的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findRepeatNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] freq = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(freq[i] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            freq[i] ++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"✍️-优化\"><a href=\"#✍️-优化\" class=\"headerlink\" title=\"✍️ 优化\"></a>✍️ 优化</h3><p>暴力解法的实践和空间复杂度均达到了O(N)，本题由于数组数字范围和长度相同，因此可以将原数组作为哈希表，达到优化空间的目的，但是会<strong>修改输入</strong>。</p>\n<p>由于数字范围和数组长度一致，如果没有重复数字，那么每个位置上在排序后的状态下数字和位置是一一对应的，但是我们并不做排序这个工作，因为这样时间复杂度是O(nlogn)级别的。我们只是利用这一特征，遍历数组时，如果当前数字和位置不对应，则将当前数字交换到它应该在的位置上。如果应该在的位置上已经有了正确的数字，那么说明当前数字就是重复的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findRepeatNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(nums[i] != i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[nums[i]] == nums[i])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> nums[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = nums[nums[i]];</span><br><span class=\"line\">            nums[nums[i]] = nums[i];</span><br><span class=\"line\">            nums[i] = a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue May 05 2020 11:11:57 GMT+0800 (中国标准时间)","title":"剑指Offer-03. 数组中重复的数字","path":"posts/2f50b40c.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>找出数组中的重复数字</p>\n<p>在一个长度为 n 的数组 nums 里的所有数字都在 0~n-1 的范围内，其中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中的任意一个重复的数字。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-04T12:51:58.261Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-04T12:51:58.261Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["数组","哈希","剑指Offer"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":932},{"title":"面试题04. 二维数组中的查找","categoires":["剑指Offer"],"abbrlink":"dda4a850","_content":"\n>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的二维数组和一个整数，判断数组中是否含有该整数。\n\n<!-- more -->\n示例：\n\n```java\nmatrix: \n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n给定 target = 5，返回 true。\n给定 target = 20，返回 false。\n```\n\n### 👊 暴力解法\n\n遍历二维数组的每一个位置，判断是否和 ` target ` 相等。\n\n```java\npublic boolean findNumberIn2DArray(int[][] matrix, int target) {\n    //代码的鲁棒性\n    if(matrix == null || matrix.length == 0 || matrix[0].length == 0){\n        return false;\n    }\n    for(int i = 0 ; i < matrix.length; i++){\n        for(int j = 0; j < matrix[0].length ; j++){\n            if(matrix[i][j] == target){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```\n\n😂~~就这都能双一百你敢信？~~\n\n![图片](http://119.3.165.25/img/剑指Offer/04/1.png)\n\n### 📈 优化\n\n暴力解法没有利用题目提供的每行有序和每列有序的特性。查找的过程无非是判断数字之间的大小关系，并且最好通过大小关系可以帮我们减小查找的范围，就像二分查找，每次可以排除一般的查找范围。\n\n这个二维数组拥有以下特征：对于每一个元素，它所在的行，左侧的元素都比它小，右侧的元素都比它大；它所在的列，上方的元素比它小，下方的元素比它大。要确保所有位置都被考虑到，因此需要确定从四个顶点的哪一个开始。如果从左上角开始，根据target和左上角元素的大小关系，我们无法缩小范围，因为对于左上角来说，只有右侧和下侧，都是比它大的。右小角同理。而对于右上角来说，比它小的在左侧，比它大的在下方，因此如果target比它大，则会出现在下方，我们可以不再考虑当前行；如果比它小，则会出现在左侧，我们可以不必考虑当前列。达到缩小查找范围的目的。左下角同理。\n\n```java\npublic boolean findNumberIn2DArray(int[][] matrix, int target) {\n    //代码的鲁棒性\n    if(matrix == null || matrix.length == 0 || matrix[0].length == 0){\n        return false;\n    }\n    int row = matrix.length, col = matrix[0].length;\n    int curRow = 0, curCol = col-1;\n    while( curRow < row && curCol >= 0){\n        if(matrix[curRow][curCol] == target){\n            return true;\n        }else if(matrix[curRow][curCol] < target){\n            curRow ++;//下一行\n        }else{\n            curCol --;//前一列\n        }\n    }\n    return false;\n}\n```\n\n\n\n","source":"_posts/剑指Offer-04二维数组中的查找.md","raw":"---\ntitle: 面试题04. 二维数组中的查找\ntags:\n  - 剑指Offer\n  - 二维数组\ncategoires:\n  - 剑指Offer\nabbrlink: dda4a850\n---\n\n>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的二维数组和一个整数，判断数组中是否含有该整数。\n\n<!-- more -->\n示例：\n\n```java\nmatrix: \n[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n给定 target = 5，返回 true。\n给定 target = 20，返回 false。\n```\n\n### 👊 暴力解法\n\n遍历二维数组的每一个位置，判断是否和 ` target ` 相等。\n\n```java\npublic boolean findNumberIn2DArray(int[][] matrix, int target) {\n    //代码的鲁棒性\n    if(matrix == null || matrix.length == 0 || matrix[0].length == 0){\n        return false;\n    }\n    for(int i = 0 ; i < matrix.length; i++){\n        for(int j = 0; j < matrix[0].length ; j++){\n            if(matrix[i][j] == target){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```\n\n😂~~就这都能双一百你敢信？~~\n\n![图片](http://119.3.165.25/img/剑指Offer/04/1.png)\n\n### 📈 优化\n\n暴力解法没有利用题目提供的每行有序和每列有序的特性。查找的过程无非是判断数字之间的大小关系，并且最好通过大小关系可以帮我们减小查找的范围，就像二分查找，每次可以排除一般的查找范围。\n\n这个二维数组拥有以下特征：对于每一个元素，它所在的行，左侧的元素都比它小，右侧的元素都比它大；它所在的列，上方的元素比它小，下方的元素比它大。要确保所有位置都被考虑到，因此需要确定从四个顶点的哪一个开始。如果从左上角开始，根据target和左上角元素的大小关系，我们无法缩小范围，因为对于左上角来说，只有右侧和下侧，都是比它大的。右小角同理。而对于右上角来说，比它小的在左侧，比它大的在下方，因此如果target比它大，则会出现在下方，我们可以不再考虑当前行；如果比它小，则会出现在左侧，我们可以不必考虑当前列。达到缩小查找范围的目的。左下角同理。\n\n```java\npublic boolean findNumberIn2DArray(int[][] matrix, int target) {\n    //代码的鲁棒性\n    if(matrix == null || matrix.length == 0 || matrix[0].length == 0){\n        return false;\n    }\n    int row = matrix.length, col = matrix[0].length;\n    int curRow = 0, curCol = col-1;\n    while( curRow < row && curCol >= 0){\n        if(matrix[curRow][curCol] == target){\n            return true;\n        }else if(matrix[curRow][curCol] < target){\n            curRow ++;//下一行\n        }else{\n            curCol --;//前一列\n        }\n    }\n    return false;\n}\n```\n\n\n\n","slug":"剑指Offer-04二维数组中的查找","published":1,"date":"2020-05-04T13:25:12.129Z","updated":"2020-05-05T03:11:57.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2h003ez4ej73cwhkyd","content":"<blockquote>\n<p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的二维数组和一个整数，判断数组中是否含有该整数。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix: </span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">1</span>,   <span class=\"number\">4</span>,  <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>,   <span class=\"number\">5</span>,  <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">19</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>,   <span class=\"number\">6</span>,  <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">22</span>],</span><br><span class=\"line\">  [<span class=\"number\">10</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">17</span>, <span class=\"number\">24</span>],</span><br><span class=\"line\">  [<span class=\"number\">18</span>, <span class=\"number\">21</span>, <span class=\"number\">23</span>, <span class=\"number\">26</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">给定 target = <span class=\"number\">5</span>，返回 <span class=\"keyword\">true</span>。</span><br><span class=\"line\">给定 target = <span class=\"number\">20</span>，返回 <span class=\"keyword\">false</span>。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"👊-暴力解法\"><a href=\"#👊-暴力解法\" class=\"headerlink\" title=\"👊 暴力解法\"></a>👊 暴力解法</h3><p>遍历二维数组的每一个位置，判断是否和 <code>target</code> 相等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">findNumberIn2DArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码的鲁棒性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(matrix == <span class=\"keyword\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; matrix.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; matrix[<span class=\"number\">0</span>].length ; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>😂<del>就这都能双一百你敢信？</del></p>\n<p><img src=\"http://119.3.165.25/img/%E5%89%91%E6%8C%87Offer/04/1.png\" alt=\"图片\"></p>\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>暴力解法没有利用题目提供的每行有序和每列有序的特性。查找的过程无非是判断数字之间的大小关系，并且最好通过大小关系可以帮我们减小查找的范围，就像二分查找，每次可以排除一般的查找范围。</p>\n<p>这个二维数组拥有以下特征：对于每一个元素，它所在的行，左侧的元素都比它小，右侧的元素都比它大；它所在的列，上方的元素比它小，下方的元素比它大。要确保所有位置都被考虑到，因此需要确定从四个顶点的哪一个开始。如果从左上角开始，根据target和左上角元素的大小关系，我们无法缩小范围，因为对于左上角来说，只有右侧和下侧，都是比它大的。右小角同理。而对于右上角来说，比它小的在左侧，比它大的在下方，因此如果target比它大，则会出现在下方，我们可以不再考虑当前行；如果比它小，则会出现在左侧，我们可以不必考虑当前列。达到缩小查找范围的目的。左下角同理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">findNumberIn2DArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码的鲁棒性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(matrix == <span class=\"keyword\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> row = matrix.length, col = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> curRow = <span class=\"number\">0</span>, curCol = col-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( curRow &lt; row &amp;&amp; curCol &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(matrix[curRow][curCol] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(matrix[curRow][curCol] &lt; target)&#123;</span><br><span class=\"line\">            curRow ++;<span class=\"comment\">//下一行</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            curCol --;<span class=\"comment\">//前一列</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的二维数组和一个整数，判断数组中是否含有该整数。</p>\n</blockquote>","more":"<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix: </span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">1</span>,   <span class=\"number\">4</span>,  <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>,   <span class=\"number\">5</span>,  <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">19</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>,   <span class=\"number\">6</span>,  <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">22</span>],</span><br><span class=\"line\">  [<span class=\"number\">10</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">17</span>, <span class=\"number\">24</span>],</span><br><span class=\"line\">  [<span class=\"number\">18</span>, <span class=\"number\">21</span>, <span class=\"number\">23</span>, <span class=\"number\">26</span>, <span class=\"number\">30</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">给定 target = <span class=\"number\">5</span>，返回 <span class=\"keyword\">true</span>。</span><br><span class=\"line\">给定 target = <span class=\"number\">20</span>，返回 <span class=\"keyword\">false</span>。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"👊-暴力解法\"><a href=\"#👊-暴力解法\" class=\"headerlink\" title=\"👊 暴力解法\"></a>👊 暴力解法</h3><p>遍历二维数组的每一个位置，判断是否和 <code>target</code> 相等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">findNumberIn2DArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码的鲁棒性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(matrix == <span class=\"keyword\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; matrix.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; matrix[<span class=\"number\">0</span>].length ; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(matrix[i][j] == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>😂<del>就这都能双一百你敢信？</del></p>\n<p><img src=\"http://119.3.165.25/img/%E5%89%91%E6%8C%87Offer/04/1.png\" alt=\"图片\"></p>\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>暴力解法没有利用题目提供的每行有序和每列有序的特性。查找的过程无非是判断数字之间的大小关系，并且最好通过大小关系可以帮我们减小查找的范围，就像二分查找，每次可以排除一般的查找范围。</p>\n<p>这个二维数组拥有以下特征：对于每一个元素，它所在的行，左侧的元素都比它小，右侧的元素都比它大；它所在的列，上方的元素比它小，下方的元素比它大。要确保所有位置都被考虑到，因此需要确定从四个顶点的哪一个开始。如果从左上角开始，根据target和左上角元素的大小关系，我们无法缩小范围，因为对于左上角来说，只有右侧和下侧，都是比它大的。右小角同理。而对于右上角来说，比它小的在左侧，比它大的在下方，因此如果target比它大，则会出现在下方，我们可以不再考虑当前行；如果比它小，则会出现在左侧，我们可以不必考虑当前列。达到缩小查找范围的目的。左下角同理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">findNumberIn2DArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码的鲁棒性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(matrix == <span class=\"keyword\">null</span> || matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> row = matrix.length, col = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> curRow = <span class=\"number\">0</span>, curCol = col-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( curRow &lt; row &amp;&amp; curCol &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(matrix[curRow][curCol] == target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(matrix[curRow][curCol] &lt; target)&#123;</span><br><span class=\"line\">            curRow ++;<span class=\"comment\">//下一行</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            curCol --;<span class=\"comment\">//前一列</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"http://119.3.165.25/img/%E5%89%91%E6%8C%87Offer/04/1.png","popularPost_tmp_gaData":{"updated":"Tue May 05 2020 11:11:57 GMT+0800 (中国标准时间)","title":"面试题04. 二维数组中的查找","path":"posts/dda4a850.html","eyeCatchImage":"http://119.3.165.25/img/%E5%89%91%E6%8C%87Offer/04/1.png","excerpt":"<blockquote>\n<p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的二维数组和一个整数，判断数组中是否含有该整数。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-04T13:25:12.129Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-04T13:25:12.129Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["剑指Offer","二维数组"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1433},{"title":"面试题05. 替换空格","categoires":["剑指Offer"],"abbrlink":"48c165ca","_content":"\n> 请实现一个函数，把字符串中的每个空格替换成“%20%”。\n>\n> 示例1：\n>\n> ```java\n> 输入：s = \"we are happy\"\n> 输出：\"we%20are%happy\"\n> ```\n\n<!-- more -->\n\n### 👊 暴力解法\n\n遍历字符串，如果遇到空格就替换成%20%\n\n```java\npublic String replaceSpace(String s) {\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0 ; i < s.length(); i ++){\n        if(s.charAt(i) == ' '){\n            sb.append(\"%20\");\n        }else sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}\n```\n\n### 💡 耍赖\n\n` return s.replaceAll(\" \" , \"%20%\" ); `","source":"_posts/剑指Offer-05替换空格.md","raw":"---\ntitle: 面试题05. 替换空格\ntags:\n  - 剑指Offer\n  - 字符串\ncategoires:\n  - 剑指Offer\nabbrlink: 48c165ca\n---\n\n> 请实现一个函数，把字符串中的每个空格替换成“%20%”。\n>\n> 示例1：\n>\n> ```java\n> 输入：s = \"we are happy\"\n> 输出：\"we%20are%happy\"\n> ```\n\n<!-- more -->\n\n### 👊 暴力解法\n\n遍历字符串，如果遇到空格就替换成%20%\n\n```java\npublic String replaceSpace(String s) {\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0 ; i < s.length(); i ++){\n        if(s.charAt(i) == ' '){\n            sb.append(\"%20\");\n        }else sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}\n```\n\n### 💡 耍赖\n\n` return s.replaceAll(\" \" , \"%20%\" ); `","slug":"剑指Offer-05替换空格","published":1,"date":"2020-05-04T14:02:56.992Z","updated":"2020-05-05T03:11:57.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2h003hz4ej5decao69","content":"<blockquote>\n<p>请实现一个函数，把字符串中的每个空格替换成“%20%”。</p>\n<p>示例1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = <span class=\"string\">\"we are happy\"</span></span><br><span class=\"line\">输出：<span class=\"string\">\"we%20are%happy\"</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"👊-暴力解法\"><a href=\"#👊-暴力解法\" class=\"headerlink\" title=\"👊 暴力解法\"></a>👊 暴力解法</h3><p>遍历字符串，如果遇到空格就替换成%20%</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">replaceSpace</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; s.length(); i ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(i) == <span class=\"string\">' '</span>)&#123;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\"%20\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> sb.append(s.charAt(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"💡-耍赖\"><a href=\"#💡-耍赖\" class=\"headerlink\" title=\"💡 耍赖\"></a>💡 耍赖</h3><p><code>return s.replaceAll(&quot; &quot; , &quot;%20%&quot; );</code></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>请实现一个函数，把字符串中的每个空格替换成“%20%”。</p>\n<p>示例1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = <span class=\"string\">\"we are happy\"</span></span><br><span class=\"line\">输出：<span class=\"string\">\"we%20are%happy\"</span></span><br></pre></td></tr></table></figure>\n</blockquote>","more":"<h3 id=\"👊-暴力解法\"><a href=\"#👊-暴力解法\" class=\"headerlink\" title=\"👊 暴力解法\"></a>👊 暴力解法</h3><p>遍历字符串，如果遇到空格就替换成%20%</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">replaceSpace</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; s.length(); i ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(i) == <span class=\"string\">' '</span>)&#123;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\"%20\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> sb.append(s.charAt(i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"💡-耍赖\"><a href=\"#💡-耍赖\" class=\"headerlink\" title=\"💡 耍赖\"></a>💡 耍赖</h3><p><code>return s.replaceAll(&quot; &quot; , &quot;%20%&quot; );</code></p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue May 05 2020 11:11:57 GMT+0800 (中国标准时间)","title":"面试题05. 替换空格","path":"posts/48c165ca.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>请实现一个函数，把字符串中的每个空格替换成“%20%”。</p>\n<p>示例1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = <span class=\"string\">\"we are happy\"</span></span><br><span class=\"line\">输出：<span class=\"string\">\"we%20are%happy\"</span></span><br></pre></td></tr></table></figure>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-04T14:02:56.992Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-04T14:02:56.992Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["剑指Offer","字符串"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":377},{"title":"面试题06. 从尾到头打印链表","abbrlink":"9649f58","_content":"\n> 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。\n>\n> 示例1：\n>\n> ```java\n> 输入：head = [1,3,2]\n> 输出：[2,3,1]\n> ```\n\n<!-- more -->\n\n### 💡 思路\n\n对于链表的操作，无法方便地使用下标来获取元素，因此，必然需要从头节点开始通过next指针操作。但是需要从尾到头打印，也就是头节点最后被打印，尾节点第一个被打印。因此我们可以利用栈的后进先出的特点，帮助我们完成这道题。\n\n```java\npublic int[] reversePrint(ListNode head) {\n    ListNode cur = head;//不修改输入\n    Stack<Integer> stack = new Stack<>();\n    while(cur != null){\n        stack.push(cur.val);\n        cur = cur.next;\n    }\n    int[] res = new int[stack.size()];\n    for(int i = 0 ; i < stack.size(); i++){\n        res[i] = stack.pop();\n    }\n    return res;\n}\n```\n\n### 📈 优化\n\n使用栈需要额外的空间复杂度，我们注意到返回结果是一个数组，而数组可以方便地使用下标来存取元素。因此我们先遍历链表获得链表的长度，初始化数组，再次遍历链表，将第一个节点值放在数组的最后一个位置，第二个节点放在倒数第二个位置，...以此类推。\n\n```java\npublic int[] reversePrint(ListNode head) {\n    ListNode cur = head;\n    int size = 0;\n    while(cur != null){\n        size ++;\n        cur = cur.next;\n    }\n    int[] res = new int[size];\n    cur = head;\n    while(cur != null){\n        res[--size] = cur.val;\n        cur = cur.next;\n    }\n    return res;\n}\n```\n\n","source":"_posts/剑指Offer-06从尾到头打印链表.md","raw":"---\ntitle: 面试题06. 从尾到头打印链表\ntags:\n  - 剑指Offer\n  - 链表\n  - 栈\ncategories:\n  - 剑指Offer\nabbrlink: 9649f58\n---\n\n> 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。\n>\n> 示例1：\n>\n> ```java\n> 输入：head = [1,3,2]\n> 输出：[2,3,1]\n> ```\n\n<!-- more -->\n\n### 💡 思路\n\n对于链表的操作，无法方便地使用下标来获取元素，因此，必然需要从头节点开始通过next指针操作。但是需要从尾到头打印，也就是头节点最后被打印，尾节点第一个被打印。因此我们可以利用栈的后进先出的特点，帮助我们完成这道题。\n\n```java\npublic int[] reversePrint(ListNode head) {\n    ListNode cur = head;//不修改输入\n    Stack<Integer> stack = new Stack<>();\n    while(cur != null){\n        stack.push(cur.val);\n        cur = cur.next;\n    }\n    int[] res = new int[stack.size()];\n    for(int i = 0 ; i < stack.size(); i++){\n        res[i] = stack.pop();\n    }\n    return res;\n}\n```\n\n### 📈 优化\n\n使用栈需要额外的空间复杂度，我们注意到返回结果是一个数组，而数组可以方便地使用下标来存取元素。因此我们先遍历链表获得链表的长度，初始化数组，再次遍历链表，将第一个节点值放在数组的最后一个位置，第二个节点放在倒数第二个位置，...以此类推。\n\n```java\npublic int[] reversePrint(ListNode head) {\n    ListNode cur = head;\n    int size = 0;\n    while(cur != null){\n        size ++;\n        cur = cur.next;\n    }\n    int[] res = new int[size];\n    cur = head;\n    while(cur != null){\n        res[--size] = cur.val;\n        cur = cur.next;\n    }\n    return res;\n}\n```\n\n","slug":"剑指Offer-06从尾到头打印链表","published":1,"date":"2020-05-04T14:12:51.614Z","updated":"2020-05-05T03:11:57.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2i003lz4eje43s5qy4","content":"<blockquote>\n<p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>\n<p>示例1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出：[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>对于链表的操作，无法方便地使用下标来获取元素，因此，必然需要从头节点开始通过next指针操作。但是需要从尾到头打印，也就是头节点最后被打印，尾节点第一个被打印。因此我们可以利用栈的后进先出的特点，帮助我们完成这道题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class=\"line\">    ListNode cur = head;<span class=\"comment\">//不修改输入</span></span><br><span class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        stack.push(cur.val);</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[stack.size()];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; stack.size(); i++)&#123;</span><br><span class=\"line\">        res[i] = stack.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>使用栈需要额外的空间复杂度，我们注意到返回结果是一个数组，而数组可以方便地使用下标来存取元素。因此我们先遍历链表获得链表的长度，初始化数组，再次遍历链表，将第一个节点值放在数组的最后一个位置，第二个节点放在倒数第二个位置，…以此类推。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class=\"line\">    ListNode cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        size ++;</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size];</span><br><span class=\"line\">    cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        res[--size] = cur.val;</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>\n<p>示例1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出：[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n</blockquote>","more":"<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>对于链表的操作，无法方便地使用下标来获取元素，因此，必然需要从头节点开始通过next指针操作。但是需要从尾到头打印，也就是头节点最后被打印，尾节点第一个被打印。因此我们可以利用栈的后进先出的特点，帮助我们完成这道题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class=\"line\">    ListNode cur = head;<span class=\"comment\">//不修改输入</span></span><br><span class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        stack.push(cur.val);</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[stack.size()];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; stack.size(); i++)&#123;</span><br><span class=\"line\">        res[i] = stack.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>使用栈需要额外的空间复杂度，我们注意到返回结果是一个数组，而数组可以方便地使用下标来存取元素。因此我们先遍历链表获得链表的长度，初始化数组，再次遍历链表，将第一个节点值放在数组的最后一个位置，第二个节点放在倒数第二个位置，…以此类推。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class=\"line\">    ListNode cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        size ++;</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[size];</span><br><span class=\"line\">    cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        res[--size] = cur.val;</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue May 05 2020 11:11:57 GMT+0800 (中国标准时间)","title":"面试题06. 从尾到头打印链表","path":"posts/9649f58.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>\n<p>示例1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">输出：[<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-04T14:12:51.614Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-04T14:12:51.614Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"剑指Offer","tags":["链表","剑指Offer","栈"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":845},{"title":"面试题09. 用两个栈实现队列","abbrlink":"eaced0a1","date":"2020-03-19T16:04:02.000Z","_content":"\n> 用两个栈来实现一个队列，完成队列的Push和Pop操作。 \n\n<!-- more -->\n\n分析题目，提炼关键信息：队列的特点是**先进先出**，栈的特点是**后进先出**。\n\n我们应当关心的是-：**如何保证出的顺序是先进先出？**注意到-假如栈1入栈顺序为1,2,3,则出栈顺序为3,2,1，那么按栈1出栈顺序将元素放入栈2，则栈2入栈顺序为3,2,1,则出栈顺序为1,2,3。 两个栈一个为进一个为出，这样栈1负责入队，栈2负责出队，就满足队列先进先出的要求。\n\n算法执行过程：\n\n当栈2为空时，将栈1中元素弹出压入到栈2。\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722004551.jpg)\n\n当栈2不为空时，直接返回栈2栈顶元素即可。\n\n代码如下：\n\n    import java.util.Stack;\n    \n    public class Solution {\n        Stack<Integer> stack1 = new Stack<Integer>();\n        Stack<Integer> stack2 = new Stack<Integer>();\n        \n        public void push(int node) {\n            stack1.push(node);\n        }\n        \n        public int pop() {\n            if(stack2.isEmpty()){\n                while(!stack1.isEmpty())stack2.push(stack1.pop());\n            }\n            return stack2.isEmpty() ? -1 : stack2.pop();\n        }\n    }","source":"_posts/剑指Offer-09用两个栈实现队列.md","raw":"---\ntitle: 面试题09. 用两个栈实现队列\ntags:\n  - 剑指Offer\n  - 栈\n  - 队列\ncategories:\n  - 剑指Offer\nabbrlink: eaced0a1\ndate: 2020-03-20 00:04:02\n---\n\n> 用两个栈来实现一个队列，完成队列的Push和Pop操作。 \n\n<!-- more -->\n\n分析题目，提炼关键信息：队列的特点是**先进先出**，栈的特点是**后进先出**。\n\n我们应当关心的是-：**如何保证出的顺序是先进先出？**注意到-假如栈1入栈顺序为1,2,3,则出栈顺序为3,2,1，那么按栈1出栈顺序将元素放入栈2，则栈2入栈顺序为3,2,1,则出栈顺序为1,2,3。 两个栈一个为进一个为出，这样栈1负责入队，栈2负责出队，就满足队列先进先出的要求。\n\n算法执行过程：\n\n当栈2为空时，将栈1中元素弹出压入到栈2。\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722004551.jpg)\n\n当栈2不为空时，直接返回栈2栈顶元素即可。\n\n代码如下：\n\n    import java.util.Stack;\n    \n    public class Solution {\n        Stack<Integer> stack1 = new Stack<Integer>();\n        Stack<Integer> stack2 = new Stack<Integer>();\n        \n        public void push(int node) {\n            stack1.push(node);\n        }\n        \n        public int pop() {\n            if(stack2.isEmpty()){\n                while(!stack1.isEmpty())stack2.push(stack1.pop());\n            }\n            return stack2.isEmpty() ? -1 : stack2.pop();\n        }\n    }","slug":"剑指Offer-09用两个栈实现队列","published":1,"updated":"2020-07-21T16:45:58.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2j003oz4ej0c2gcyqc","content":"<blockquote>\n<p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>分析题目，提炼关键信息：队列的特点是<strong>先进先出</strong>，栈的特点是<strong>后进先出</strong>。</p>\n<p>我们应当关心的是-：<strong>如何保证出的顺序是先进先出？</strong>注意到-假如栈1入栈顺序为1,2,3,则出栈顺序为3,2,1，那么按栈1出栈顺序将元素放入栈2，则栈2入栈顺序为3,2,1,则出栈顺序为1,2,3。 两个栈一个为进一个为出，这样栈1负责入队，栈2负责出队，就满足队列先进先出的要求。</p>\n<p>算法执行过程：</p>\n<p>当栈2为空时，将栈1中元素弹出压入到栈2。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004551.jpg\" alt=\"图片\"></p>\n<p>当栈2不为空时，直接返回栈2栈顶元素即可。</p>\n<p>代码如下：</p>\n<pre><code>import java.util.Stack;\n\npublic class Solution {\n    Stack&lt;Integer&gt; stack1 = new Stack&lt;Integer&gt;();\n    Stack&lt;Integer&gt; stack2 = new Stack&lt;Integer&gt;();\n\n    public void push(int node) {\n        stack1.push(node);\n    }\n\n    public int pop() {\n        if(stack2.isEmpty()){\n            while(!stack1.isEmpty())stack2.push(stack1.pop());\n        }\n        return stack2.isEmpty() ? -1 : stack2.pop();\n    }\n}</code></pre>","site":{"data":{}},"excerpt":"<blockquote>\n<p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 </p>\n</blockquote>","more":"<p>分析题目，提炼关键信息：队列的特点是<strong>先进先出</strong>，栈的特点是<strong>后进先出</strong>。</p>\n<p>我们应当关心的是-：<strong>如何保证出的顺序是先进先出？</strong>注意到-假如栈1入栈顺序为1,2,3,则出栈顺序为3,2,1，那么按栈1出栈顺序将元素放入栈2，则栈2入栈顺序为3,2,1,则出栈顺序为1,2,3。 两个栈一个为进一个为出，这样栈1负责入队，栈2负责出队，就满足队列先进先出的要求。</p>\n<p>算法执行过程：</p>\n<p>当栈2为空时，将栈1中元素弹出压入到栈2。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004551.jpg\" alt=\"图片\"></p>\n<p>当栈2不为空时，直接返回栈2栈顶元素即可。</p>\n<p>代码如下：</p>\n<pre><code>import java.util.Stack;\n\npublic class Solution {\n    Stack&lt;Integer&gt; stack1 = new Stack&lt;Integer&gt;();\n    Stack&lt;Integer&gt; stack2 = new Stack&lt;Integer&gt;();\n\n    public void push(int node) {\n        stack1.push(node);\n    }\n\n    public int pop() {\n        if(stack2.isEmpty()){\n            while(!stack1.isEmpty())stack2.push(stack1.pop());\n        }\n        return stack2.isEmpty() ? -1 : stack2.pop();\n    }\n}</code></pre>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722004551.jpg","popularPost_tmp_gaData":{"updated":"Wed Jul 22 2020 00:45:58 GMT+0800 (中国标准时间)","title":"面试题09. 用两个栈实现队列","path":"posts/eaced0a1.html","eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722004551.jpg","excerpt":"<blockquote>\n<p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 </p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-03-19T16:04:02.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-03-19T16:04:02.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"剑指Offer","tags":["剑指Offer","栈","队列"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":573},{"title":"面试题10- I. 斐波那契数列","abbrlink":"18deca0d","_content":"\n> 写一个函数，输入 n ，求斐波那契数列的第 n 项。斐波那契数列定义如下：\n>\n> ```java\n> F(0) = 0, F(1) = 1, F(N) = F(N-1)+F(N-2),N>1.\n> ```\n>\n> 答案需要取模 1e9+7(1000000007)，如计算结果为1000000008，则返回1.\n\n<!-- more -->\n\n### 💡 思路\n\n这道题最直接的思路就是通过递归来求解，它的递归过程和终止条件都已经给出。因此我们可以直接写出这样的代码。\n\n```java\npublic int fib(int n) {\n    if(n < 2){//递归终止条件\n        return n;\n    }\n    return fib(n-1)%1000000007 + fib(n - 2)%1000000007;\n}\n```\n\n### 📈 优化\n\n但是简单的这样递归时间复杂度是O(ф^n)，ф是黄金分割比，是一个指数级别的时间复杂度。原因是这样的求解过程中出现了大量的重复计算。\n\n![重复计算](https://gitee.com/jingshanccc/image/raw/master/image/20200722004614.jpg)\n\n对数字n，求解fib(n-1)、**fib(n-2)**，之后对n-1，求解**f(n-2)**、**f(n-3)**，对n-2，求解**f(n-3)**、f(n-4)......因此我们可以通过先解决小问题，再求解大问题，先求解 1,2,3....直到n。这样就可以避免重复求解。\n\n```java\npublic int fib(int n) {\n    int a = 1, b = 0; //记录中间结果\n    int sum = 0;\n    for(int i = 2; i <= n; i++){\n        sum = (a + b) % 1000000007;\n        b = a;//往后移动\n        a = sum;//往后移动\n    }\n    return sum;\n}\n```","source":"_posts/剑指Offer-10- I-斐波那契数列.md","raw":"---\ntitle: 面试题10- I. 斐波那契数列\ntags:\n  - 剑指Offer\n  - 动态规划\n  - 递归\n  - 记忆化搜索\ncategories:\n  - 剑指Offer\nabbrlink: 18deca0d\n---\n\n> 写一个函数，输入 n ，求斐波那契数列的第 n 项。斐波那契数列定义如下：\n>\n> ```java\n> F(0) = 0, F(1) = 1, F(N) = F(N-1)+F(N-2),N>1.\n> ```\n>\n> 答案需要取模 1e9+7(1000000007)，如计算结果为1000000008，则返回1.\n\n<!-- more -->\n\n### 💡 思路\n\n这道题最直接的思路就是通过递归来求解，它的递归过程和终止条件都已经给出。因此我们可以直接写出这样的代码。\n\n```java\npublic int fib(int n) {\n    if(n < 2){//递归终止条件\n        return n;\n    }\n    return fib(n-1)%1000000007 + fib(n - 2)%1000000007;\n}\n```\n\n### 📈 优化\n\n但是简单的这样递归时间复杂度是O(ф^n)，ф是黄金分割比，是一个指数级别的时间复杂度。原因是这样的求解过程中出现了大量的重复计算。\n\n![重复计算](https://gitee.com/jingshanccc/image/raw/master/image/20200722004614.jpg)\n\n对数字n，求解fib(n-1)、**fib(n-2)**，之后对n-1，求解**f(n-2)**、**f(n-3)**，对n-2，求解**f(n-3)**、f(n-4)......因此我们可以通过先解决小问题，再求解大问题，先求解 1,2,3....直到n。这样就可以避免重复求解。\n\n```java\npublic int fib(int n) {\n    int a = 1, b = 0; //记录中间结果\n    int sum = 0;\n    for(int i = 2; i <= n; i++){\n        sum = (a + b) % 1000000007;\n        b = a;//往后移动\n        a = sum;//往后移动\n    }\n    return sum;\n}\n```","slug":"剑指Offer-10- I-斐波那契数列","published":1,"date":"2020-05-06T14:28:18.996Z","updated":"2020-07-21T16:46:22.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2k003tz4ej854l7gsd","content":"<blockquote>\n<p>写一个函数，输入 n ，求斐波那契数列的第 n 项。斐波那契数列定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F(<span class=\"number\">0</span>) = <span class=\"number\">0</span>, F(<span class=\"number\">1</span>) = <span class=\"number\">1</span>, F(N) = F(N-<span class=\"number\">1</span>)+F(N-<span class=\"number\">2</span>),N&gt;<span class=\"number\">1</span>.</span><br></pre></td></tr></table></figure>\n\n<p>答案需要取模 1e9+7(1000000007)，如计算结果为1000000008，则返回1.</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>这道题最直接的思路就是通过递归来求解，它的递归过程和终止条件都已经给出。因此我们可以直接写出这样的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">2</span>)&#123;<span class=\"comment\">//递归终止条件</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib(n-<span class=\"number\">1</span>)%<span class=\"number\">1000000007</span> + fib(n - <span class=\"number\">2</span>)%<span class=\"number\">1000000007</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>但是简单的这样递归时间复杂度是O(ф^n)，ф是黄金分割比，是一个指数级别的时间复杂度。原因是这样的求解过程中出现了大量的重复计算。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004614.jpg\" alt=\"重复计算\"></p>\n<p>对数字n，求解fib(n-1)、<strong>fib(n-2)</strong>，之后对n-1，求解<strong>f(n-2)</strong>、<strong>f(n-3)</strong>，对n-2，求解<strong>f(n-3)</strong>、f(n-4)……因此我们可以通过先解决小问题，再求解大问题，先求解 1,2,3….直到n。这样就可以避免重复求解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">0</span>; <span class=\"comment\">//记录中间结果</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        sum = (a + b) % <span class=\"number\">1000000007</span>;</span><br><span class=\"line\">        b = a;<span class=\"comment\">//往后移动</span></span><br><span class=\"line\">        a = sum;<span class=\"comment\">//往后移动</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>写一个函数，输入 n ，求斐波那契数列的第 n 项。斐波那契数列定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F(<span class=\"number\">0</span>) = <span class=\"number\">0</span>, F(<span class=\"number\">1</span>) = <span class=\"number\">1</span>, F(N) = F(N-<span class=\"number\">1</span>)+F(N-<span class=\"number\">2</span>),N&gt;<span class=\"number\">1</span>.</span><br></pre></td></tr></table></figure>\n\n<p>答案需要取模 1e9+7(1000000007)，如计算结果为1000000008，则返回1.</p>\n</blockquote>","more":"<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>这道题最直接的思路就是通过递归来求解，它的递归过程和终止条件都已经给出。因此我们可以直接写出这样的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">2</span>)&#123;<span class=\"comment\">//递归终止条件</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fib(n-<span class=\"number\">1</span>)%<span class=\"number\">1000000007</span> + fib(n - <span class=\"number\">2</span>)%<span class=\"number\">1000000007</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>但是简单的这样递归时间复杂度是O(ф^n)，ф是黄金分割比，是一个指数级别的时间复杂度。原因是这样的求解过程中出现了大量的重复计算。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722004614.jpg\" alt=\"重复计算\"></p>\n<p>对数字n，求解fib(n-1)、<strong>fib(n-2)</strong>，之后对n-1，求解<strong>f(n-2)</strong>、<strong>f(n-3)</strong>，对n-2，求解<strong>f(n-3)</strong>、f(n-4)……因此我们可以通过先解决小问题，再求解大问题，先求解 1,2,3….直到n。这样就可以避免重复求解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">0</span>; <span class=\"comment\">//记录中间结果</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        sum = (a + b) % <span class=\"number\">1000000007</span>;</span><br><span class=\"line\">        b = a;<span class=\"comment\">//往后移动</span></span><br><span class=\"line\">        a = sum;<span class=\"comment\">//往后移动</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722004614.jpg","popularPost_tmp_gaData":{"updated":"Wed Jul 22 2020 00:46:22 GMT+0800 (中国标准时间)","title":"面试题10- I. 斐波那契数列","path":"posts/18deca0d.html","eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722004614.jpg","excerpt":"<blockquote>\n<p>写一个函数，输入 n ，求斐波那契数列的第 n 项。斐波那契数列定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F(<span class=\"number\">0</span>) = <span class=\"number\">0</span>, F(<span class=\"number\">1</span>) = <span class=\"number\">1</span>, F(N) = F(N-<span class=\"number\">1</span>)+F(N-<span class=\"number\">2</span>),N&gt;<span class=\"number\">1</span>.</span><br></pre></td></tr></table></figure>\n\n<p>答案需要取模 1e9+7(1000000007)，如计算结果为1000000008，则返回1.</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-06T14:28:18.996Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-06T14:28:18.996Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"剑指Offer","tags":["递归","动态规划","记忆化搜索","剑指Offer"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":641},{"title":"面试题46. 把数字翻译成字符串","abbrlink":"13cdcb1b","_content":"\n> 给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。\n>\n> 示例 1:\n>\n> ```\n> 输入: 12258\n> 输出: 5\n> 解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"\n> ```\n\n<!-- more -->\n\n### 💡 思路\n\n因为只有` 26` 个小写字母，即数字范围为` [0-25] `可以翻译为一个字母，因此一个数字的翻译方式最多有两种，一种是单独翻译成一个字母，第二种是和前一个数字组合翻译。而两个数字能够组合翻译的条件是其组成的数字范围在` [10-25]`之间，因为`01`、`02`是不合法的。举个例子：\n\n- 如果只有一位数`1`，那么他只能有**壹**种翻译结果`b`；\n- 如果有两位数`12`，除了各自单独翻译这一种方法之外，由于组合的数字`12`在`[10-25]`之间满足要求，可以组合翻译，翻译种数为`1+1=2`；\n- 如果有三位数，如`121`，在两位数`12`的基础上，如果对第三位单独翻译，那么剩下的两位数`12`有**两**种不同的翻译；因为第二位`2`和第三位`1`组合得到`21∈{10, 25}`，因此他们可以组合翻译，那么剩下第一位`1`，它只有**壹**种翻译，所以三位数`121`总共有`2+1=3`种翻译；\n- 如果有四位数`1212`，在三位数的基础上，如果对第四位单独翻译，那么剩下的三位数`121`有**叁**种翻译；因为第三位`1`和第四位`2`组合的数字`12∈{10, 25}`，可以组合翻译，那么剩下两位数`12`，它有**两**种翻译；于是对于四位数`1212`，共有`3+2=5`种翻译。\n\n于是我们可以这样求解，从数字`num`的第一位（最高位）开始，遍历每一位，当前位的翻译种数至少和它前一位的种数相同（当前位单独翻译）；除此之外，如果当前位和前一位组成的数字在`[10-25]`之间，那么翻译种数需要再加上前两位的种数（当前位和前一位组合翻译）。\n\n这样的过程不断在使用之前的结果来推导出新的结果，也就是**动态规划**的思想。\n\n### 🧾 代码\n\n为了方便地从数字的高位遍历到低位，我们先将数字转换成字符串。\n\n```java\npublic int translateNum(int num) {\n    String s = String.valueOf(num);\n    int[] dp = new int[s.length()];\n    dp[0] = 1;\n    //动态规划，设dp[i]为前i个数字的翻译种数。对于i,两种情况：\n    //1.自己翻译成一个字母,这样和上一位的种数是相同的;\n    //2.如果和上一位组合的数字在10和25之间,可以组合翻译,这样种数就是前一位种数+前两位种数\n    for(int i = 1; i < s.length(); i++){\n        dp[i] = dp[i-1];\n        if(s.charAt(i-1) == '1' || (s.charAt(i)<'6' && s.charAt(i-1)=='2')){\n            dp[i] += i-2 < 0 ? 1 : dp[i-2]; \n        }\n    }\n    return dp[s.length()-1];\n}\n```\n\n### 📈 优化\n\n由于我们每次都只用到前一位和前两位的结果，因此可以对空间复杂度进行优化，这种优化方式称为滚动数组。仅仅使用两个变量保存结果。\n\n这里还有一个优化是我们将当前位`i `的结果记录在`i+1`的位置上，这样就不需要每次都进行 `i-2 < 0`的检查。\n\n```java\npublic int translateNum(int num) {\n    String s = String.valueOf(num);\n    int one = 1;//前一位种数\n    int two = 1;//前两位种数\n    int temp = 0;//中间变量-备份\n    for(int i = 2; i <= s.length(); i ++){\n        temp = one;//暂存前一位种数\n        if(s.charAt(i-2) == '1' || (s.charAt(i-2) == '2' && s.charAt(i-1) < '6')){\n            one += two;\n        }\n        two = temp;\n    }\n    return one;\n}\n```\n\n","source":"_posts/剑指Offer-46把数字翻译成字符串.md","raw":"---\ntitle: 面试题46. 把数字翻译成字符串\ntags:\n  - 剑指Offer\n  - 动态规划\ncategories:\n  - 剑指Offer\nabbrlink: 13cdcb1b\n---\n\n> 给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。\n>\n> 示例 1:\n>\n> ```\n> 输入: 12258\n> 输出: 5\n> 解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"\n> ```\n\n<!-- more -->\n\n### 💡 思路\n\n因为只有` 26` 个小写字母，即数字范围为` [0-25] `可以翻译为一个字母，因此一个数字的翻译方式最多有两种，一种是单独翻译成一个字母，第二种是和前一个数字组合翻译。而两个数字能够组合翻译的条件是其组成的数字范围在` [10-25]`之间，因为`01`、`02`是不合法的。举个例子：\n\n- 如果只有一位数`1`，那么他只能有**壹**种翻译结果`b`；\n- 如果有两位数`12`，除了各自单独翻译这一种方法之外，由于组合的数字`12`在`[10-25]`之间满足要求，可以组合翻译，翻译种数为`1+1=2`；\n- 如果有三位数，如`121`，在两位数`12`的基础上，如果对第三位单独翻译，那么剩下的两位数`12`有**两**种不同的翻译；因为第二位`2`和第三位`1`组合得到`21∈{10, 25}`，因此他们可以组合翻译，那么剩下第一位`1`，它只有**壹**种翻译，所以三位数`121`总共有`2+1=3`种翻译；\n- 如果有四位数`1212`，在三位数的基础上，如果对第四位单独翻译，那么剩下的三位数`121`有**叁**种翻译；因为第三位`1`和第四位`2`组合的数字`12∈{10, 25}`，可以组合翻译，那么剩下两位数`12`，它有**两**种翻译；于是对于四位数`1212`，共有`3+2=5`种翻译。\n\n于是我们可以这样求解，从数字`num`的第一位（最高位）开始，遍历每一位，当前位的翻译种数至少和它前一位的种数相同（当前位单独翻译）；除此之外，如果当前位和前一位组成的数字在`[10-25]`之间，那么翻译种数需要再加上前两位的种数（当前位和前一位组合翻译）。\n\n这样的过程不断在使用之前的结果来推导出新的结果，也就是**动态规划**的思想。\n\n### 🧾 代码\n\n为了方便地从数字的高位遍历到低位，我们先将数字转换成字符串。\n\n```java\npublic int translateNum(int num) {\n    String s = String.valueOf(num);\n    int[] dp = new int[s.length()];\n    dp[0] = 1;\n    //动态规划，设dp[i]为前i个数字的翻译种数。对于i,两种情况：\n    //1.自己翻译成一个字母,这样和上一位的种数是相同的;\n    //2.如果和上一位组合的数字在10和25之间,可以组合翻译,这样种数就是前一位种数+前两位种数\n    for(int i = 1; i < s.length(); i++){\n        dp[i] = dp[i-1];\n        if(s.charAt(i-1) == '1' || (s.charAt(i)<'6' && s.charAt(i-1)=='2')){\n            dp[i] += i-2 < 0 ? 1 : dp[i-2]; \n        }\n    }\n    return dp[s.length()-1];\n}\n```\n\n### 📈 优化\n\n由于我们每次都只用到前一位和前两位的结果，因此可以对空间复杂度进行优化，这种优化方式称为滚动数组。仅仅使用两个变量保存结果。\n\n这里还有一个优化是我们将当前位`i `的结果记录在`i+1`的位置上，这样就不需要每次都进行 `i-2 < 0`的检查。\n\n```java\npublic int translateNum(int num) {\n    String s = String.valueOf(num);\n    int one = 1;//前一位种数\n    int two = 1;//前两位种数\n    int temp = 0;//中间变量-备份\n    for(int i = 2; i <= s.length(); i ++){\n        temp = one;//暂存前一位种数\n        if(s.charAt(i-2) == '1' || (s.charAt(i-2) == '2' && s.charAt(i-1) < '6')){\n            one += two;\n        }\n        two = temp;\n    }\n    return one;\n}\n```\n\n","slug":"剑指Offer-46把数字翻译成字符串","published":1,"date":"2020-06-09T15:00:23.747Z","updated":"2020-06-09T15:54:58.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2l003wz4ej95ehenwm","content":"<blockquote>\n<p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>\n<p>示例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 12258</span><br><span class=\"line\">输出: 5</span><br><span class=\"line\">解释: 12258有5种不同的翻译，分别是&quot;bccfi&quot;, &quot;bwfi&quot;, &quot;bczi&quot;, &quot;mcfi&quot;和&quot;mzi&quot;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>因为只有<code>26</code> 个小写字母，即数字范围为<code>[0-25]</code>可以翻译为一个字母，因此一个数字的翻译方式最多有两种，一种是单独翻译成一个字母，第二种是和前一个数字组合翻译。而两个数字能够组合翻译的条件是其组成的数字范围在<code>[10-25]</code>之间，因为<code>01</code>、<code>02</code>是不合法的。举个例子：</p>\n<ul>\n<li>如果只有一位数<code>1</code>，那么他只能有<strong>壹</strong>种翻译结果<code>b</code>；</li>\n<li>如果有两位数<code>12</code>，除了各自单独翻译这一种方法之外，由于组合的数字<code>12</code>在<code>[10-25]</code>之间满足要求，可以组合翻译，翻译种数为<code>1+1=2</code>；</li>\n<li>如果有三位数，如<code>121</code>，在两位数<code>12</code>的基础上，如果对第三位单独翻译，那么剩下的两位数<code>12</code>有<strong>两</strong>种不同的翻译；因为第二位<code>2</code>和第三位<code>1</code>组合得到<code>21∈{10, 25}</code>，因此他们可以组合翻译，那么剩下第一位<code>1</code>，它只有<strong>壹</strong>种翻译，所以三位数<code>121</code>总共有<code>2+1=3</code>种翻译；</li>\n<li>如果有四位数<code>1212</code>，在三位数的基础上，如果对第四位单独翻译，那么剩下的三位数<code>121</code>有<strong>叁</strong>种翻译；因为第三位<code>1</code>和第四位<code>2</code>组合的数字<code>12∈{10, 25}</code>，可以组合翻译，那么剩下两位数<code>12</code>，它有<strong>两</strong>种翻译；于是对于四位数<code>1212</code>，共有<code>3+2=5</code>种翻译。</li>\n</ul>\n<p>于是我们可以这样求解，从数字<code>num</code>的第一位（最高位）开始，遍历每一位，当前位的翻译种数至少和它前一位的种数相同（当前位单独翻译）；除此之外，如果当前位和前一位组成的数字在<code>[10-25]</code>之间，那么翻译种数需要再加上前两位的种数（当前位和前一位组合翻译）。</p>\n<p>这样的过程不断在使用之前的结果来推导出新的结果，也就是<strong>动态规划</strong>的思想。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>为了方便地从数字的高位遍历到低位，我们先将数字转换成字符串。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">translateNum</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    String s = String.valueOf(num);</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[s.length()];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//动态规划，设dp[i]为前i个数字的翻译种数。对于i,两种情况：</span></span><br><span class=\"line\">    <span class=\"comment\">//1.自己翻译成一个字母,这样和上一位的种数是相同的;</span></span><br><span class=\"line\">    <span class=\"comment\">//2.如果和上一位组合的数字在10和25之间,可以组合翻译,这样种数就是前一位种数+前两位种数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">        dp[i] = dp[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(i-<span class=\"number\">1</span>) == <span class=\"string\">'1'</span> || (s.charAt(i)&lt;<span class=\"string\">'6'</span> &amp;&amp; s.charAt(i-<span class=\"number\">1</span>)==<span class=\"string\">'2'</span>))&#123;</span><br><span class=\"line\">            dp[i] += i-<span class=\"number\">2</span> &lt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> : dp[i-<span class=\"number\">2</span>]; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[s.length()-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>由于我们每次都只用到前一位和前两位的结果，因此可以对空间复杂度进行优化，这种优化方式称为滚动数组。仅仅使用两个变量保存结果。</p>\n<p>这里还有一个优化是我们将当前位<code>i</code>的结果记录在<code>i+1</code>的位置上，这样就不需要每次都进行 <code>i-2 &lt; 0</code>的检查。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">translateNum</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    String s = String.valueOf(num);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> one = <span class=\"number\">1</span>;<span class=\"comment\">//前一位种数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> two = <span class=\"number\">1</span>;<span class=\"comment\">//前两位种数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;<span class=\"comment\">//中间变量-备份</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= s.length(); i ++)&#123;</span><br><span class=\"line\">        temp = one;<span class=\"comment\">//暂存前一位种数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(i-<span class=\"number\">2</span>) == <span class=\"string\">'1'</span> || (s.charAt(i-<span class=\"number\">2</span>) == <span class=\"string\">'2'</span> &amp;&amp; s.charAt(i-<span class=\"number\">1</span>) &lt; <span class=\"string\">'6'</span>))&#123;</span><br><span class=\"line\">            one += two;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        two = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> one;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>\n<p>示例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 12258</span><br><span class=\"line\">输出: 5</span><br><span class=\"line\">解释: 12258有5种不同的翻译，分别是&quot;bccfi&quot;, &quot;bwfi&quot;, &quot;bczi&quot;, &quot;mcfi&quot;和&quot;mzi&quot;</span><br></pre></td></tr></table></figure>\n</blockquote>","more":"<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>因为只有<code>26</code> 个小写字母，即数字范围为<code>[0-25]</code>可以翻译为一个字母，因此一个数字的翻译方式最多有两种，一种是单独翻译成一个字母，第二种是和前一个数字组合翻译。而两个数字能够组合翻译的条件是其组成的数字范围在<code>[10-25]</code>之间，因为<code>01</code>、<code>02</code>是不合法的。举个例子：</p>\n<ul>\n<li>如果只有一位数<code>1</code>，那么他只能有<strong>壹</strong>种翻译结果<code>b</code>；</li>\n<li>如果有两位数<code>12</code>，除了各自单独翻译这一种方法之外，由于组合的数字<code>12</code>在<code>[10-25]</code>之间满足要求，可以组合翻译，翻译种数为<code>1+1=2</code>；</li>\n<li>如果有三位数，如<code>121</code>，在两位数<code>12</code>的基础上，如果对第三位单独翻译，那么剩下的两位数<code>12</code>有<strong>两</strong>种不同的翻译；因为第二位<code>2</code>和第三位<code>1</code>组合得到<code>21∈{10, 25}</code>，因此他们可以组合翻译，那么剩下第一位<code>1</code>，它只有<strong>壹</strong>种翻译，所以三位数<code>121</code>总共有<code>2+1=3</code>种翻译；</li>\n<li>如果有四位数<code>1212</code>，在三位数的基础上，如果对第四位单独翻译，那么剩下的三位数<code>121</code>有<strong>叁</strong>种翻译；因为第三位<code>1</code>和第四位<code>2</code>组合的数字<code>12∈{10, 25}</code>，可以组合翻译，那么剩下两位数<code>12</code>，它有<strong>两</strong>种翻译；于是对于四位数<code>1212</code>，共有<code>3+2=5</code>种翻译。</li>\n</ul>\n<p>于是我们可以这样求解，从数字<code>num</code>的第一位（最高位）开始，遍历每一位，当前位的翻译种数至少和它前一位的种数相同（当前位单独翻译）；除此之外，如果当前位和前一位组成的数字在<code>[10-25]</code>之间，那么翻译种数需要再加上前两位的种数（当前位和前一位组合翻译）。</p>\n<p>这样的过程不断在使用之前的结果来推导出新的结果，也就是<strong>动态规划</strong>的思想。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><p>为了方便地从数字的高位遍历到低位，我们先将数字转换成字符串。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">translateNum</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    String s = String.valueOf(num);</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[s.length()];</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//动态规划，设dp[i]为前i个数字的翻译种数。对于i,两种情况：</span></span><br><span class=\"line\">    <span class=\"comment\">//1.自己翻译成一个字母,这样和上一位的种数是相同的;</span></span><br><span class=\"line\">    <span class=\"comment\">//2.如果和上一位组合的数字在10和25之间,可以组合翻译,这样种数就是前一位种数+前两位种数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">        dp[i] = dp[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(i-<span class=\"number\">1</span>) == <span class=\"string\">'1'</span> || (s.charAt(i)&lt;<span class=\"string\">'6'</span> &amp;&amp; s.charAt(i-<span class=\"number\">1</span>)==<span class=\"string\">'2'</span>))&#123;</span><br><span class=\"line\">            dp[i] += i-<span class=\"number\">2</span> &lt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> : dp[i-<span class=\"number\">2</span>]; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[s.length()-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>由于我们每次都只用到前一位和前两位的结果，因此可以对空间复杂度进行优化，这种优化方式称为滚动数组。仅仅使用两个变量保存结果。</p>\n<p>这里还有一个优化是我们将当前位<code>i</code>的结果记录在<code>i+1</code>的位置上，这样就不需要每次都进行 <code>i-2 &lt; 0</code>的检查。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">translateNum</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    String s = String.valueOf(num);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> one = <span class=\"number\">1</span>;<span class=\"comment\">//前一位种数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> two = <span class=\"number\">1</span>;<span class=\"comment\">//前两位种数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;<span class=\"comment\">//中间变量-备份</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= s.length(); i ++)&#123;</span><br><span class=\"line\">        temp = one;<span class=\"comment\">//暂存前一位种数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.charAt(i-<span class=\"number\">2</span>) == <span class=\"string\">'1'</span> || (s.charAt(i-<span class=\"number\">2</span>) == <span class=\"string\">'2'</span> &amp;&amp; s.charAt(i-<span class=\"number\">1</span>) &lt; <span class=\"string\">'6'</span>))&#123;</span><br><span class=\"line\">            one += two;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        two = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> one;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Jun 09 2020 23:54:58 GMT+0800 (中国标准时间)","title":"面试题46. 把数字翻译成字符串","path":"posts/13cdcb1b.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>\n<p>示例 1:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 12258</span><br><span class=\"line\">输出: 5</span><br><span class=\"line\">解释: 12258有5种不同的翻译，分别是&quot;bccfi&quot;, &quot;bwfi&quot;, &quot;bczi&quot;, &quot;mcfi&quot;和&quot;mzi&quot;</span><br></pre></td></tr></table></figure>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-06-09T15:00:23.747Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-06-09T15:00:23.747Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"剑指Offer","tags":["动态规划","剑指Offer"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1757},{"title":"剑指Offer-数组中数字出现的次数 I","date":"2020-04-29T07:23:00.000Z","abbrlink":"1f1789a9","_content":"\n> 一个整型数组 `nums` 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。\n\n<!-- more -->\n\n#### ⛔不符合要求的两种思路\n\n1. 数组中的次数问题，我们很容易联想到使用额外的数组记录次数来解决，但这里数组中的元素没有范围，并且由于空间复杂度的要求是O(1)，因此需要考虑其他思路。\n\n2. 首先从数组的特征出发，除两个数字之外，其他每个数字都出现了两次，那么我们可以先排序，然后遍历数组找到只出现一次的两个数字。由于排序的时间复杂度为O(NlogN)，因此也无法满足要求。\n\n{% note primary%}\n\n那么这道题考察什么呢？\n\n{% endnote %}\n\n这是一道非常经典的题目，通过位运算**异或**来解决\n\n#### ☑️正确操作\n\n先来看看异或的性质\n\n{% note default no-icon %}\n\n1. 交换律：p⊕q=q⊕p \n2. 结合律：(p⊕q)⊕r = p⊕(q⊕r)\n3. 恒等率：p⊕0 = p\n4. 归零率：p⊕p = 0\n\n{% endnote %}\n\n假设数组中不相同的两个数字是p，q。对数组中的数字进行异或操作，根据交换律，我们让每两个相同的数字异或得到0，最后剩下p，q，因为两个数不同，至少存在一个位不同。异或之后得到的结果肯定存在**某个二进制位为1**。根据这个位，将数组分为两份，由于相同的数字会分到同一组，分别为p和其他相同的数字、q和其他相同的数字。再进行异或，则可以得到p，q。\n\n{% note info %}\n\n举个例子：nums=[1,2,10,4,1,4,3,3]\n\n- 异或和sum = 1⊕2⊕10⊕4⊕1⊕4⊕3⊕3 = 1⊕1⊕3⊕3⊕4⊕4⊕2⊕10 = 2⊕10 = 0010 ⊕ 1010 = 1000\n- 得到二进制为1的位index，sum每次右移一位，当最低位为1`sum & 1 == 1`，index则为右移次数也即该位在sum中的位置。1000中右移三位0001&1=1，index = 3。<u>此处理论上上使用任何一个为1的位都可以正确得到结果，但是在代码实现上求最右的1是最方便的。</u>\n- 根据index划分两组，在划分过程中同时执行异或和计算。对于数组中的所有数字，要么index位为1，要么index位为0 `( i >> index ) & 1`，如数字1在第三位为0，数字2在第三位为0，数字10在第三位为1，以此划分。\n\n{% endnote %}\n\n```java\npublic int[] singleNumbers(int[] nums) {\n\t//1.得到异或和\n    int sum = 0;\n    for(int i : nums){\n        sum ^= i;\n    }\n    //2.找到二进制位为1的位\n    int index = 0;\n    while(sum & 1 == 0){\n        index+=1;\n        sum >>= 1;\n    }\n    //3.分组\n    int p, q;\n    for(int i : nums){\n        if( (i >> index) & 1 == 0 ){\n            p ^= i;\n        }else{\n            q ^= i;\n        }\n    }\n    return new int[]{p,q};\n}\n```\n\n{% note info %}\n\n当你理解了上述的算法过程之后，如果你知道负数在机器中采用数值的**补码**来表示，那么第二步中的求异或和sum中为1的二进制位就可以使用` sum & -sum `来得到，补码是原码按位取反+1，-8 使用 8 的补码表示为 1000，那么结果将是1000，接下来第三步操作也相应的有一些小小的改动。\n\n{% endnote %}\n\n```java\npublic int[] singleNumbers(int[] nums) {\n    //1.得到异或和\n    int sum = 0;\n    for(int i : nums){\n        sum ^= i;\n    }\n    //2.找到二进制位为1的位\n    sum &= -sum;\n\t//3.分组并求和\n    int p, q;\n    for(int i : nums){\n        if((sum&i) == 0){\n            p^=i;\n        }else {\n            q^=i;\n        }\n    }\n    return new int[]{p,q};\n }\n```\n\n\n\n\n\n","source":"_posts/剑指Offer-数组中数字出现的次数 I.md","raw":"---\ntitle: 剑指Offer-数组中数字出现的次数 I\ndate: '2020-04-29 15:23'\ntags:\n  - 剑指Offer\n  - 数组\n  - 位运算\ncategories:\n  - 剑指Offer\nabbrlink: 1f1789a9\n---\n\n> 一个整型数组 `nums` 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。\n\n<!-- more -->\n\n#### ⛔不符合要求的两种思路\n\n1. 数组中的次数问题，我们很容易联想到使用额外的数组记录次数来解决，但这里数组中的元素没有范围，并且由于空间复杂度的要求是O(1)，因此需要考虑其他思路。\n\n2. 首先从数组的特征出发，除两个数字之外，其他每个数字都出现了两次，那么我们可以先排序，然后遍历数组找到只出现一次的两个数字。由于排序的时间复杂度为O(NlogN)，因此也无法满足要求。\n\n{% note primary%}\n\n那么这道题考察什么呢？\n\n{% endnote %}\n\n这是一道非常经典的题目，通过位运算**异或**来解决\n\n#### ☑️正确操作\n\n先来看看异或的性质\n\n{% note default no-icon %}\n\n1. 交换律：p⊕q=q⊕p \n2. 结合律：(p⊕q)⊕r = p⊕(q⊕r)\n3. 恒等率：p⊕0 = p\n4. 归零率：p⊕p = 0\n\n{% endnote %}\n\n假设数组中不相同的两个数字是p，q。对数组中的数字进行异或操作，根据交换律，我们让每两个相同的数字异或得到0，最后剩下p，q，因为两个数不同，至少存在一个位不同。异或之后得到的结果肯定存在**某个二进制位为1**。根据这个位，将数组分为两份，由于相同的数字会分到同一组，分别为p和其他相同的数字、q和其他相同的数字。再进行异或，则可以得到p，q。\n\n{% note info %}\n\n举个例子：nums=[1,2,10,4,1,4,3,3]\n\n- 异或和sum = 1⊕2⊕10⊕4⊕1⊕4⊕3⊕3 = 1⊕1⊕3⊕3⊕4⊕4⊕2⊕10 = 2⊕10 = 0010 ⊕ 1010 = 1000\n- 得到二进制为1的位index，sum每次右移一位，当最低位为1`sum & 1 == 1`，index则为右移次数也即该位在sum中的位置。1000中右移三位0001&1=1，index = 3。<u>此处理论上上使用任何一个为1的位都可以正确得到结果，但是在代码实现上求最右的1是最方便的。</u>\n- 根据index划分两组，在划分过程中同时执行异或和计算。对于数组中的所有数字，要么index位为1，要么index位为0 `( i >> index ) & 1`，如数字1在第三位为0，数字2在第三位为0，数字10在第三位为1，以此划分。\n\n{% endnote %}\n\n```java\npublic int[] singleNumbers(int[] nums) {\n\t//1.得到异或和\n    int sum = 0;\n    for(int i : nums){\n        sum ^= i;\n    }\n    //2.找到二进制位为1的位\n    int index = 0;\n    while(sum & 1 == 0){\n        index+=1;\n        sum >>= 1;\n    }\n    //3.分组\n    int p, q;\n    for(int i : nums){\n        if( (i >> index) & 1 == 0 ){\n            p ^= i;\n        }else{\n            q ^= i;\n        }\n    }\n    return new int[]{p,q};\n}\n```\n\n{% note info %}\n\n当你理解了上述的算法过程之后，如果你知道负数在机器中采用数值的**补码**来表示，那么第二步中的求异或和sum中为1的二进制位就可以使用` sum & -sum `来得到，补码是原码按位取反+1，-8 使用 8 的补码表示为 1000，那么结果将是1000，接下来第三步操作也相应的有一些小小的改动。\n\n{% endnote %}\n\n```java\npublic int[] singleNumbers(int[] nums) {\n    //1.得到异或和\n    int sum = 0;\n    for(int i : nums){\n        sum ^= i;\n    }\n    //2.找到二进制位为1的位\n    sum &= -sum;\n\t//3.分组并求和\n    int p, q;\n    for(int i : nums){\n        if((sum&i) == 0){\n            p^=i;\n        }else {\n            q^=i;\n        }\n    }\n    return new int[]{p,q};\n }\n```\n\n\n\n\n\n","slug":"剑指Offer-数组中数字出现的次数 I","published":1,"updated":"2020-05-05T03:11:57.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2m0040z4ejh3wu5mi1","content":"<blockquote>\n<p>一个整型数组 <code>nums</code> 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h4 id=\"⛔不符合要求的两种思路\"><a href=\"#⛔不符合要求的两种思路\" class=\"headerlink\" title=\"⛔不符合要求的两种思路\"></a>⛔不符合要求的两种思路</h4><ol>\n<li><p>数组中的次数问题，我们很容易联想到使用额外的数组记录次数来解决，但这里数组中的元素没有范围，并且由于空间复杂度的要求是O(1)，因此需要考虑其他思路。</p>\n</li>\n<li><p>首先从数组的特征出发，除两个数字之外，其他每个数字都出现了两次，那么我们可以先排序，然后遍历数组找到只出现一次的两个数字。由于排序的时间复杂度为O(NlogN)，因此也无法满足要求。</p>\n</li>\n</ol>\n<div class=\"note primary\"><p>那么这道题考察什么呢？</p></div>\n\n<p>这是一道非常经典的题目，通过位运算<strong>异或</strong>来解决</p>\n<h4 id=\"☑️正确操作\"><a href=\"#☑️正确操作\" class=\"headerlink\" title=\"☑️正确操作\"></a>☑️正确操作</h4><p>先来看看异或的性质</p>\n<div class=\"note default no-icon\"><ol>\n<li>交换律：p⊕q=q⊕p </li>\n<li>结合律：(p⊕q)⊕r = p⊕(q⊕r)</li>\n<li>恒等率：p⊕0 = p</li>\n<li>归零率：p⊕p = 0</li>\n</ol></div>\n\n<p>假设数组中不相同的两个数字是p，q。对数组中的数字进行异或操作，根据交换律，我们让每两个相同的数字异或得到0，最后剩下p，q，因为两个数不同，至少存在一个位不同。异或之后得到的结果肯定存在<strong>某个二进制位为1</strong>。根据这个位，将数组分为两份，由于相同的数字会分到同一组，分别为p和其他相同的数字、q和其他相同的数字。再进行异或，则可以得到p，q。</p>\n<div class=\"note info\"><p>举个例子：nums=[1,2,10,4,1,4,3,3]</p>\n<ul>\n<li>异或和sum = 1⊕2⊕10⊕4⊕1⊕4⊕3⊕3 = 1⊕1⊕3⊕3⊕4⊕4⊕2⊕10 = 2⊕10 = 0010 ⊕ 1010 = 1000</li>\n<li>得到二进制为1的位index，sum每次右移一位，当最低位为1<code>sum &amp; 1 == 1</code>，index则为右移次数也即该位在sum中的位置。1000中右移三位0001&amp;1=1，index = 3。<u>此处理论上上使用任何一个为1的位都可以正确得到结果，但是在代码实现上求最右的1是最方便的。</u></li>\n<li>根据index划分两组，在划分过程中同时执行异或和计算。对于数组中的所有数字，要么index位为1，要么index位为0 <code>( i &gt;&gt; index ) &amp; 1</code>，如数字1在第三位为0，数字2在第三位为0，数字10在第三位为1，以此划分。</li>\n</ul></div>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] singleNumbers(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1.得到异或和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">        sum ^= i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//2.找到二进制位为1的位</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sum &amp; <span class=\"number\">1</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        index+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        sum &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//3.分组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> p, q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( (i &gt;&gt; index) &amp; <span class=\"number\">1</span> == <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">            p ^= i;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            q ^= i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;p,q&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><p>当你理解了上述的算法过程之后，如果你知道负数在机器中采用数值的<strong>补码</strong>来表示，那么第二步中的求异或和sum中为1的二进制位就可以使用<code>sum &amp; -sum</code>来得到，补码是原码按位取反+1，-8 使用 8 的补码表示为 1000，那么结果将是1000，接下来第三步操作也相应的有一些小小的改动。</p></div>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] singleNumbers(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.得到异或和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">        sum ^= i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//2.找到二进制位为1的位</span></span><br><span class=\"line\">    sum &amp;= -sum;</span><br><span class=\"line\">\t<span class=\"comment\">//3.分组并求和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> p, q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((sum&amp;i) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            p^=i;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            q^=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;p,q&#125;;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>一个整型数组 <code>nums</code> 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。</p>\n</blockquote>","more":"<h4 id=\"⛔不符合要求的两种思路\"><a href=\"#⛔不符合要求的两种思路\" class=\"headerlink\" title=\"⛔不符合要求的两种思路\"></a>⛔不符合要求的两种思路</h4><ol>\n<li><p>数组中的次数问题，我们很容易联想到使用额外的数组记录次数来解决，但这里数组中的元素没有范围，并且由于空间复杂度的要求是O(1)，因此需要考虑其他思路。</p>\n</li>\n<li><p>首先从数组的特征出发，除两个数字之外，其他每个数字都出现了两次，那么我们可以先排序，然后遍历数组找到只出现一次的两个数字。由于排序的时间复杂度为O(NlogN)，因此也无法满足要求。</p>\n</li>\n</ol>\n<div class=\"note primary\"><p>那么这道题考察什么呢？</p></div>\n\n<p>这是一道非常经典的题目，通过位运算<strong>异或</strong>来解决</p>\n<h4 id=\"☑️正确操作\"><a href=\"#☑️正确操作\" class=\"headerlink\" title=\"☑️正确操作\"></a>☑️正确操作</h4><p>先来看看异或的性质</p>\n<div class=\"note default no-icon\"><ol>\n<li>交换律：p⊕q=q⊕p </li>\n<li>结合律：(p⊕q)⊕r = p⊕(q⊕r)</li>\n<li>恒等率：p⊕0 = p</li>\n<li>归零率：p⊕p = 0</li>\n</ol></div>\n\n<p>假设数组中不相同的两个数字是p，q。对数组中的数字进行异或操作，根据交换律，我们让每两个相同的数字异或得到0，最后剩下p，q，因为两个数不同，至少存在一个位不同。异或之后得到的结果肯定存在<strong>某个二进制位为1</strong>。根据这个位，将数组分为两份，由于相同的数字会分到同一组，分别为p和其他相同的数字、q和其他相同的数字。再进行异或，则可以得到p，q。</p>\n<div class=\"note info\"><p>举个例子：nums=[1,2,10,4,1,4,3,3]</p>\n<ul>\n<li>异或和sum = 1⊕2⊕10⊕4⊕1⊕4⊕3⊕3 = 1⊕1⊕3⊕3⊕4⊕4⊕2⊕10 = 2⊕10 = 0010 ⊕ 1010 = 1000</li>\n<li>得到二进制为1的位index，sum每次右移一位，当最低位为1<code>sum &amp; 1 == 1</code>，index则为右移次数也即该位在sum中的位置。1000中右移三位0001&amp;1=1，index = 3。<u>此处理论上上使用任何一个为1的位都可以正确得到结果，但是在代码实现上求最右的1是最方便的。</u></li>\n<li>根据index划分两组，在划分过程中同时执行异或和计算。对于数组中的所有数字，要么index位为1，要么index位为0 <code>( i &gt;&gt; index ) &amp; 1</code>，如数字1在第三位为0，数字2在第三位为0，数字10在第三位为1，以此划分。</li>\n</ul></div>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] singleNumbers(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1.得到异或和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">        sum ^= i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//2.找到二进制位为1的位</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sum &amp; <span class=\"number\">1</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        index+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        sum &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//3.分组</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> p, q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( (i &gt;&gt; index) &amp; <span class=\"number\">1</span> == <span class=\"number\">0</span> )&#123;</span><br><span class=\"line\">            p ^= i;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            q ^= i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;p,q&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\"><p>当你理解了上述的算法过程之后，如果你知道负数在机器中采用数值的<strong>补码</strong>来表示，那么第二步中的求异或和sum中为1的二进制位就可以使用<code>sum &amp; -sum</code>来得到，补码是原码按位取反+1，-8 使用 8 的补码表示为 1000，那么结果将是1000，接下来第三步操作也相应的有一些小小的改动。</p></div>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] singleNumbers(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.得到异或和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">        sum ^= i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//2.找到二进制位为1的位</span></span><br><span class=\"line\">    sum &amp;= -sum;</span><br><span class=\"line\">\t<span class=\"comment\">//3.分组并求和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> p, q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : nums)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((sum&amp;i) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            p^=i;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            q^=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;p,q&#125;;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue May 05 2020 11:11:57 GMT+0800 (中国标准时间)","title":"剑指Offer-数组中数字出现的次数 I","path":"posts/1f1789a9.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>一个整型数组 <code>nums</code> 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-04-29T07:23:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-04-29T07:23:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"剑指Offer","tags":["数组","剑指Offer","位运算"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1638},{"title":"面试题11. 旋转数组的最小数字","abbrlink":"639f1318","_content":"\n> 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序数组的一个旋转，输出旋转数组的最小元素。例如，数组` [3,4,5,1,2] ` 为 ` [1,2,3,4,5] ` 的一个旋转，该数组的最小值为1.\n\n<!-- more -->\n\n{% note info %}\n\n**示例 1：**\n\n```\n输入：[3,4,5,1,2]\n输出：1\n```\n\n**示例 2：**\n\n```\n输入：[2,2,2,0,1]\n输出：0\n```\n\n{% endnote %}\n\n### 💡 思路\n\n暴力解法就不详述了，遍历可以得到降序的元素。\n\n这题和 Leetcode第 {% post_link 153-寻找旋转排序数组中的最小值 %} 题类似，建议先阅读这一篇，解法类似，区别在于这里数组的元素可能出现**重复**，因此缩小区间的时候需要考虑重复元素的情况。\n\n本题中，中间位置元素和最右边的元素有大于小于等于三种关系：\n\n1. 当 ` nums[mid] < nums[right] `，区间 `[mid...right]`保持**升序**，因此最小值在左侧，` right = mid `\n2. 当 ` nums[mid] > nums[right] ` ，区间 ` [mid...right] ` 出现**降序**，因此最小值在右侧，` left  = mid + 1 ` \n3. 当 `nums[mid] == nums[right] `，无法确认最小值出现在哪一侧，但是我们希望可以缩小区间。由于中间元素和右边相等，因此可以将右边界左移，就算当前右边界是最小值，但是我们保留了中间元素，所以不会出现问题。\n\n### 🧾 代码\n\n```java\npublic int minArray(int[] numbers) {\n    if(nums == null || nums.length == 0){\n        return -1;\n    }\n    int l = 0 , r = numbers.length-1;\n    while( l < r){//跳出循环时 l = r，区间剩下的元素就是最小值\n        int mid = l + (r - l)/2;\n        if(numbers[r] > numbers[mid]){\n            r = mid;\n        }else if (numbers[r] < numbers[mid]){\n            l = mid+1;\n        }else r--;\n    }\n    return numbers[l];\n}\n```\n\n","source":"_posts/剑指Offer11-旋转数组的最小数字.md","raw":"---\ntitle: 面试题11. 旋转数组的最小数字\ntags:\n  - 剑指Offer\n  - 二分查找\ncategories:\n  - 剑指Offer\nabbrlink: 639f1318\n---\n\n> 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序数组的一个旋转，输出旋转数组的最小元素。例如，数组` [3,4,5,1,2] ` 为 ` [1,2,3,4,5] ` 的一个旋转，该数组的最小值为1.\n\n<!-- more -->\n\n{% note info %}\n\n**示例 1：**\n\n```\n输入：[3,4,5,1,2]\n输出：1\n```\n\n**示例 2：**\n\n```\n输入：[2,2,2,0,1]\n输出：0\n```\n\n{% endnote %}\n\n### 💡 思路\n\n暴力解法就不详述了，遍历可以得到降序的元素。\n\n这题和 Leetcode第 {% post_link 153-寻找旋转排序数组中的最小值 %} 题类似，建议先阅读这一篇，解法类似，区别在于这里数组的元素可能出现**重复**，因此缩小区间的时候需要考虑重复元素的情况。\n\n本题中，中间位置元素和最右边的元素有大于小于等于三种关系：\n\n1. 当 ` nums[mid] < nums[right] `，区间 `[mid...right]`保持**升序**，因此最小值在左侧，` right = mid `\n2. 当 ` nums[mid] > nums[right] ` ，区间 ` [mid...right] ` 出现**降序**，因此最小值在右侧，` left  = mid + 1 ` \n3. 当 `nums[mid] == nums[right] `，无法确认最小值出现在哪一侧，但是我们希望可以缩小区间。由于中间元素和右边相等，因此可以将右边界左移，就算当前右边界是最小值，但是我们保留了中间元素，所以不会出现问题。\n\n### 🧾 代码\n\n```java\npublic int minArray(int[] numbers) {\n    if(nums == null || nums.length == 0){\n        return -1;\n    }\n    int l = 0 , r = numbers.length-1;\n    while( l < r){//跳出循环时 l = r，区间剩下的元素就是最小值\n        int mid = l + (r - l)/2;\n        if(numbers[r] > numbers[mid]){\n            r = mid;\n        }else if (numbers[r] < numbers[mid]){\n            l = mid+1;\n        }else r--;\n    }\n    return numbers[l];\n}\n```\n\n","slug":"剑指Offer11-旋转数组的最小数字","published":1,"date":"2020-05-07T03:23:20.124Z","updated":"2020-05-07T06:20:26.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2n0044z4ej3ws4cm9x","content":"<blockquote>\n<p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序数组的一个旋转，输出旋转数组的最小元素。例如，数组<code>[3,4,5,1,2]</code> 为 <code>[1,2,3,4,5]</code> 的一个旋转，该数组的最小值为1.</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<div class=\"note info\"><p><strong>示例 1：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[3,4,5,1,2]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[2,2,2,0,1]</span><br><span class=\"line\">输出：0</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>暴力解法就不详述了，遍历可以得到降序的元素。</p>\n<p>这题和 Leetcode第 <a href=\"/posts/e3f3cf8a.html\" title=\"153. 寻找旋转排序数组中的最小值\">153. 寻找旋转排序数组中的最小值</a> 题类似，建议先阅读这一篇，解法类似，区别在于这里数组的元素可能出现<strong>重复</strong>，因此缩小区间的时候需要考虑重复元素的情况。</p>\n<p>本题中，中间位置元素和最右边的元素有大于小于等于三种关系：</p>\n<ol>\n<li>当 <code>nums[mid] &lt; nums[right]</code>，区间 <code>[mid...right]</code>保持<strong>升序</strong>，因此最小值在左侧，<code>right = mid</code></li>\n<li>当 <code>nums[mid] &gt; nums[right]</code> ，区间 <code>[mid...right]</code> 出现<strong>降序</strong>，因此最小值在右侧，<code>left  = mid + 1</code> </li>\n<li>当 <code>nums[mid] == nums[right]</code>，无法确认最小值出现在哪一侧，但是我们希望可以缩小区间。由于中间元素和右边相等，因此可以将右边界左移，就算当前右边界是最小值，但是我们保留了中间元素，所以不会出现问题。</li>\n</ol>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] numbers)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span> , r = numbers.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( l &lt; r)&#123;<span class=\"comment\">//跳出循环时 l = r，区间剩下的元素就是最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = l + (r - l)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numbers[r] &gt; numbers[mid])&#123;</span><br><span class=\"line\">            r = mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (numbers[r] &lt; numbers[mid])&#123;</span><br><span class=\"line\">            l = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> r--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numbers[l];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序数组的一个旋转，输出旋转数组的最小元素。例如，数组<code>[3,4,5,1,2]</code> 为 <code>[1,2,3,4,5]</code> 的一个旋转，该数组的最小值为1.</p>\n</blockquote>","more":"<div class=\"note info\"><p><strong>示例 1：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[3,4,5,1,2]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[2,2,2,0,1]</span><br><span class=\"line\">输出：0</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>暴力解法就不详述了，遍历可以得到降序的元素。</p>\n<p>这题和 Leetcode第 <a href=\"/posts/e3f3cf8a.html\" title=\"153. 寻找旋转排序数组中的最小值\">153. 寻找旋转排序数组中的最小值</a> 题类似，建议先阅读这一篇，解法类似，区别在于这里数组的元素可能出现<strong>重复</strong>，因此缩小区间的时候需要考虑重复元素的情况。</p>\n<p>本题中，中间位置元素和最右边的元素有大于小于等于三种关系：</p>\n<ol>\n<li>当 <code>nums[mid] &lt; nums[right]</code>，区间 <code>[mid...right]</code>保持<strong>升序</strong>，因此最小值在左侧，<code>right = mid</code></li>\n<li>当 <code>nums[mid] &gt; nums[right]</code> ，区间 <code>[mid...right]</code> 出现<strong>降序</strong>，因此最小值在右侧，<code>left  = mid + 1</code> </li>\n<li>当 <code>nums[mid] == nums[right]</code>，无法确认最小值出现在哪一侧，但是我们希望可以缩小区间。由于中间元素和右边相等，因此可以将右边界左移，就算当前右边界是最小值，但是我们保留了中间元素，所以不会出现问题。</li>\n</ol>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] numbers)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums == <span class=\"keyword\">null</span> || nums.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span> , r = numbers.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( l &lt; r)&#123;<span class=\"comment\">//跳出循环时 l = r，区间剩下的元素就是最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = l + (r - l)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numbers[r] &gt; numbers[mid])&#123;</span><br><span class=\"line\">            r = mid;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (numbers[r] &lt; numbers[mid])&#123;</span><br><span class=\"line\">            l = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> r--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> numbers[l];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu May 07 2020 14:20:26 GMT+0800 (中国标准时间)","title":"面试题11. 旋转数组的最小数字","path":"posts/639f1318.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序数组的一个旋转，输出旋转数组的最小元素。例如，数组<code>[3,4,5,1,2]</code> 为 <code>[1,2,3,4,5]</code> 的一个旋转，该数组的最小值为1.</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-07T03:23:20.124Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-07T03:23:20.124Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"剑指Offer","tags":["二分查找","剑指Offer"],"internalLinks":["posts/e3f3cf8a.html"],"keywords":[],"keywordsLength":0},"length":867},{"title":"本地配置Git多账户","image":"https://gitee.com/jingshanccc/image/raw/master/image/20200722002951.png","abbrlink":"372eebb7","_content":"\n<p>\n\n<!-- more -->\n\n## 1. 生成公钥和私钥\n\n{% note info %}\n\n在命令行窗口或`git bash`下输入命令，默认生成路径为当前路径，建议在系统`.ssh`文件夹（默认是`C:\\Users\\Administrator\\.ssh`）下使用命令行或`git bash`\n\n{% endnote %}\n\n```bash\nssh-keygen -t rsa -C \"a@email.com\"\n```\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003007.png)\n\n1. 进行多用户配置时需要针对不同的账号设置不同的文件名，比如`id_rsa_a`和`id_rsa_b`\n\n## 2. 配置ssh-agent\n\n{% note info %}\n\n`ssh-agent`即ssh代理，管理着本地的所有密钥。当我们进行多用户配置时，需要将多个不同的密钥添加到ssh代理中。启动ssh-agent可能报错，需要用管理员权限打开PowerSheel，执行`Set-Service -Name ssh-agent -StartupType automatic`\n\n{% endnote %}\n\n```csharp\nssh-agent bash\nssh-add id_rsa_a\n```\n\n## 3. 添加公钥到Github账户\n\n路径为`settings->SSH and GPG keys->New SSH key`[](https://github.com/settings/keys)，将`.ssh`文件夹下的`id_rsa.pub`文件内容粘贴到文本框中，完成添加\n\n## 4. config文件配置\n\n```bash\n//如果不存在，则创建config文件\ntouch config\n```\n\n1. 配置config文件内容\n\n```bash\n#该文件用于配置私钥对应的服务器\n#account1(email)\n Host git@github.com\n HostName https://github.com\n User a //这里填写username\n IdentityFile id_rsa_a\n\n#account2(email)\n Host git@gitlab.com\n HostName https://gitlab.com\n User b//这里填写username\n IdentityFile id_rsa_b\n```\n\n## 5. 测试是否可用\n\n```bash\nssh -T git@github.com\n\n//if success will return\n//Hi a! You've successfully authenticated, but GitHub does not provide shell access.\n//else return \n//some errors\n```\n\n## 6. 切换账号\n\n1. 在`.ssh`文件夹下，创建脚本文件用于切换账号，避免每次都手写切换代码\n\n   ```bash\n   //创建切换到a账户脚本\n   touch changeToA.sh\n   //填入内容\n   git config --global user.name \"a\"\n   git config --global user.email  \"a@email.com\"\n   ```\n\n2. 执行脚本以切换账号\n\n   ```bash\n   ./changeToA.sh\n   ```","source":"_posts/本地配置Git多账户.md","raw":"---\ntitle: 本地配置Git多账户\ntags: git\ncategories:\n  - 开发环境相关\nimage: 'https://gitee.com/jingshanccc/image/raw/master/image/20200722002951.png'\nabbrlink: 372eebb7\n---\n\n<p>\n\n<!-- more -->\n\n## 1. 生成公钥和私钥\n\n{% note info %}\n\n在命令行窗口或`git bash`下输入命令，默认生成路径为当前路径，建议在系统`.ssh`文件夹（默认是`C:\\Users\\Administrator\\.ssh`）下使用命令行或`git bash`\n\n{% endnote %}\n\n```bash\nssh-keygen -t rsa -C \"a@email.com\"\n```\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003007.png)\n\n1. 进行多用户配置时需要针对不同的账号设置不同的文件名，比如`id_rsa_a`和`id_rsa_b`\n\n## 2. 配置ssh-agent\n\n{% note info %}\n\n`ssh-agent`即ssh代理，管理着本地的所有密钥。当我们进行多用户配置时，需要将多个不同的密钥添加到ssh代理中。启动ssh-agent可能报错，需要用管理员权限打开PowerSheel，执行`Set-Service -Name ssh-agent -StartupType automatic`\n\n{% endnote %}\n\n```csharp\nssh-agent bash\nssh-add id_rsa_a\n```\n\n## 3. 添加公钥到Github账户\n\n路径为`settings->SSH and GPG keys->New SSH key`[](https://github.com/settings/keys)，将`.ssh`文件夹下的`id_rsa.pub`文件内容粘贴到文本框中，完成添加\n\n## 4. config文件配置\n\n```bash\n//如果不存在，则创建config文件\ntouch config\n```\n\n1. 配置config文件内容\n\n```bash\n#该文件用于配置私钥对应的服务器\n#account1(email)\n Host git@github.com\n HostName https://github.com\n User a //这里填写username\n IdentityFile id_rsa_a\n\n#account2(email)\n Host git@gitlab.com\n HostName https://gitlab.com\n User b//这里填写username\n IdentityFile id_rsa_b\n```\n\n## 5. 测试是否可用\n\n```bash\nssh -T git@github.com\n\n//if success will return\n//Hi a! You've successfully authenticated, but GitHub does not provide shell access.\n//else return \n//some errors\n```\n\n## 6. 切换账号\n\n1. 在`.ssh`文件夹下，创建脚本文件用于切换账号，避免每次都手写切换代码\n\n   ```bash\n   //创建切换到a账户脚本\n   touch changeToA.sh\n   //填入内容\n   git config --global user.name \"a\"\n   git config --global user.email  \"a@email.com\"\n   ```\n\n2. 执行脚本以切换账号\n\n   ```bash\n   ./changeToA.sh\n   ```","slug":"本地配置Git多账户","published":1,"date":"2020-07-04T16:48:56.731Z","updated":"2020-07-21T16:30:17.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2n0046z4ej8vd94uj2","content":"<p>\n\n<a id=\"more\"></a>\n\n<h2 id=\"1-生成公钥和私钥\"><a href=\"#1-生成公钥和私钥\" class=\"headerlink\" title=\"1. 生成公钥和私钥\"></a>1. 生成公钥和私钥</h2><div class=\"note info\"><p>在命令行窗口或<code>git bash</code>下输入命令，默认生成路径为当前路径，建议在系统<code>.ssh</code>文件夹（默认是<code>C:\\Users\\Administrator\\.ssh</code>）下使用命令行或<code>git bash</code></p></div>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"a@email.com\"</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003007.png\" alt=\"图片\"></p>\n<ol>\n<li>进行多用户配置时需要针对不同的账号设置不同的文件名，比如<code>id_rsa_a</code>和<code>id_rsa_b</code></li>\n</ol>\n<h2 id=\"2-配置ssh-agent\"><a href=\"#2-配置ssh-agent\" class=\"headerlink\" title=\"2. 配置ssh-agent\"></a>2. 配置ssh-agent</h2><div class=\"note info\"><p><code>ssh-agent</code>即ssh代理，管理着本地的所有密钥。当我们进行多用户配置时，需要将多个不同的密钥添加到ssh代理中。启动ssh-agent可能报错，需要用管理员权限打开PowerSheel，执行<code>Set-Service -Name ssh-agent -StartupType automatic</code></p></div>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-agent bash</span><br><span class=\"line\">ssh-<span class=\"keyword\">add</span> id_rsa_a</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-添加公钥到Github账户\"><a href=\"#3-添加公钥到Github账户\" class=\"headerlink\" title=\"3. 添加公钥到Github账户\"></a>3. 添加公钥到Github账户</h2><p>路径为<code>settings-&gt;SSH and GPG keys-&gt;New SSH key</code><a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"noopener\"></a>，将<code>.ssh</code>文件夹下的<code>id_rsa.pub</code>文件内容粘贴到文本框中，完成添加</p>\n<h2 id=\"4-config文件配置\"><a href=\"#4-config文件配置\" class=\"headerlink\" title=\"4. config文件配置\"></a>4. config文件配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果不存在，则创建config文件</span><br><span class=\"line\">touch config</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>配置config文件内容</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#该文件用于配置私钥对应的服务器</span></span><br><span class=\"line\"><span class=\"comment\">#account1(email)</span></span><br><span class=\"line\"> Host git@github.com</span><br><span class=\"line\"> HostName https://github.com</span><br><span class=\"line\"> User a //这里填写username</span><br><span class=\"line\"> IdentityFile id_rsa_a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#account2(email)</span></span><br><span class=\"line\"> Host git@gitlab.com</span><br><span class=\"line\"> HostName https://gitlab.com</span><br><span class=\"line\"> User b//这里填写username</span><br><span class=\"line\"> IdentityFile id_rsa_b</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-测试是否可用\"><a href=\"#5-测试是否可用\" class=\"headerlink\" title=\"5. 测试是否可用\"></a>5. 测试是否可用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\"></span><br><span class=\"line\">//<span class=\"keyword\">if</span> success will <span class=\"built_in\">return</span></span><br><span class=\"line\">//Hi a! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class=\"line\"><span class=\"string\">//else return </span></span><br><span class=\"line\"><span class=\"string\">//some errors</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-切换账号\"><a href=\"#6-切换账号\" class=\"headerlink\" title=\"6. 切换账号\"></a>6. 切换账号</h2><ol>\n<li><p>在<code>.ssh</code>文件夹下，创建脚本文件用于切换账号，避免每次都手写切换代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建切换到a账户脚本</span><br><span class=\"line\">touch changeToA.sh</span><br><span class=\"line\">//填入内容</span><br><span class=\"line\">git config --global user.name <span class=\"string\">\"a\"</span></span><br><span class=\"line\">git config --global user.email  <span class=\"string\">\"a@email.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行脚本以切换账号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./changeToA.sh</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>","more":"<h2 id=\"1-生成公钥和私钥\"><a href=\"#1-生成公钥和私钥\" class=\"headerlink\" title=\"1. 生成公钥和私钥\"></a>1. 生成公钥和私钥</h2><div class=\"note info\"><p>在命令行窗口或<code>git bash</code>下输入命令，默认生成路径为当前路径，建议在系统<code>.ssh</code>文件夹（默认是<code>C:\\Users\\Administrator\\.ssh</code>）下使用命令行或<code>git bash</code></p></div>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"a@email.com\"</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003007.png\" alt=\"图片\"></p>\n<ol>\n<li>进行多用户配置时需要针对不同的账号设置不同的文件名，比如<code>id_rsa_a</code>和<code>id_rsa_b</code></li>\n</ol>\n<h2 id=\"2-配置ssh-agent\"><a href=\"#2-配置ssh-agent\" class=\"headerlink\" title=\"2. 配置ssh-agent\"></a>2. 配置ssh-agent</h2><div class=\"note info\"><p><code>ssh-agent</code>即ssh代理，管理着本地的所有密钥。当我们进行多用户配置时，需要将多个不同的密钥添加到ssh代理中。启动ssh-agent可能报错，需要用管理员权限打开PowerSheel，执行<code>Set-Service -Name ssh-agent -StartupType automatic</code></p></div>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-agent bash</span><br><span class=\"line\">ssh-<span class=\"keyword\">add</span> id_rsa_a</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-添加公钥到Github账户\"><a href=\"#3-添加公钥到Github账户\" class=\"headerlink\" title=\"3. 添加公钥到Github账户\"></a>3. 添加公钥到Github账户</h2><p>路径为<code>settings-&gt;SSH and GPG keys-&gt;New SSH key</code><a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"noopener\"></a>，将<code>.ssh</code>文件夹下的<code>id_rsa.pub</code>文件内容粘贴到文本框中，完成添加</p>\n<h2 id=\"4-config文件配置\"><a href=\"#4-config文件配置\" class=\"headerlink\" title=\"4. config文件配置\"></a>4. config文件配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//如果不存在，则创建config文件</span><br><span class=\"line\">touch config</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>配置config文件内容</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#该文件用于配置私钥对应的服务器</span></span><br><span class=\"line\"><span class=\"comment\">#account1(email)</span></span><br><span class=\"line\"> Host git@github.com</span><br><span class=\"line\"> HostName https://github.com</span><br><span class=\"line\"> User a //这里填写username</span><br><span class=\"line\"> IdentityFile id_rsa_a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#account2(email)</span></span><br><span class=\"line\"> Host git@gitlab.com</span><br><span class=\"line\"> HostName https://gitlab.com</span><br><span class=\"line\"> User b//这里填写username</span><br><span class=\"line\"> IdentityFile id_rsa_b</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-测试是否可用\"><a href=\"#5-测试是否可用\" class=\"headerlink\" title=\"5. 测试是否可用\"></a>5. 测试是否可用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\"></span><br><span class=\"line\">//<span class=\"keyword\">if</span> success will <span class=\"built_in\">return</span></span><br><span class=\"line\">//Hi a! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class=\"line\"><span class=\"string\">//else return </span></span><br><span class=\"line\"><span class=\"string\">//some errors</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-切换账号\"><a href=\"#6-切换账号\" class=\"headerlink\" title=\"6. 切换账号\"></a>6. 切换账号</h2><ol>\n<li><p>在<code>.ssh</code>文件夹下，创建脚本文件用于切换账号，避免每次都手写切换代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建切换到a账户脚本</span><br><span class=\"line\">touch changeToA.sh</span><br><span class=\"line\">//填入内容</span><br><span class=\"line\">git config --global user.name <span class=\"string\">\"a\"</span></span><br><span class=\"line\">git config --global user.email  <span class=\"string\">\"a@email.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行脚本以切换账号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./changeToA.sh</span><br></pre></td></tr></table></figure></li>\n</ol>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722003007.png","popularPost_tmp_gaData":{"updated":"Wed Jul 22 2020 00:30:17 GMT+0800 (中国标准时间)","title":"本地配置Git多账户","path":"posts/372eebb7.html","eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722003007.png","excerpt":"<p>","date":{"_isAMomentObject":true,"_i":"2020-07-04T16:48:56.731Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-07-04T16:48:56.731Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"开发环境相关","tags":["git"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1066},{"title":"数据库面试问题","abbrlink":"1f02b5ce","image":"https://gitee.com/jingshanccc/image/raw/master/image/20200722004639.jpg","_content":"\n<p/>\n\n<!-- more -->\n\n## 事务的概念和特性？\n\n概念：事务是一个操作序列，不可分割的工作单位，以BEGIN TRANSACTION开始，以ROLLBACK/COMMIT结束。\n\n特性\n\n1. 原子性：事务中的所有操作，要么全部成功提交，要么全部失败回滚。逻辑上是不可分割的操作单元。事务的回滚通过回滚日志undolog实现。\n2. 一致性：事务的执行必须使数据库保持一致性的状态。在一致性状态下，所有事务对同一数据的读取结果相同。\n3. 隔离性：事务在提交之前对数据所做的修改对其他事务是不可见的。并发执行的事务互不影响。\n4. 持久性：成功提交的事务对数据所作的修改是永久的。\n\n### 如何保证原子性和持久性？\n\n通过引入undo log来实现事务的原子性。undo log记录数据被修改前的值，通常是逻辑日志，记录每一行的修改记录。当事务执行过程中出现宕机/需要回滚，则通过undo log将数据恢复。当事务结束时，undo log不会立刻清除，而是放入待清理的链表，由purge线程判断是否有其他事务正在使用undo log中记录的表的上一个事务之前的版本信息，决定是否删除。\n\n由于undo log会被删除，因此引入redo log来保证事务的持久性。\n\nredo log记录修改后的数据，通常是物理日志，记录发生修改的数据页。在事务提交之前写入磁盘，即使事务提交过程中宕机，也可以通过redo log将事务执行结果刷新到数据库。未提交/回滚的事务也会记录在redo log中。\n\n## 会发生哪些并发一致性问题？\n\n1. 丢失修改：一个事务对数据做了修改，在事务提交之前，另一个事务也对同一个数据做了修改，则第一个事务的修改丢失了。\n2. 脏读：一个事务读到另一个事务未提交/回滚的修改。\n3. 不可重复读：在同一个事务中，某个查询语句读取某行数据和之后再次读取该行数据得到不同的结果，数据已经发生修改。\n4. 幻读：当同一查询执行多次，由于其他事务在这个范围内执行了插入操作，导致每次返回不同的结果集。\n\n## 数据库的四种隔离级别？\n\n1. 读未提交：在一个事务提交之前，它的执行结果对其他事务是可见的，会出现脏读、不可重复读、幻读。\n2. 读已提交：一个事务只能看见已经提交的事务的执行结果。解决脏读，会出现不可重复读、幻读。\n3. 可重复读：可以确保同一个事务在多次读取某一数据返回相同的结果。解决脏读、不可重复读，会出现幻读。\n4. 串行化：强制事务串行执行，使事务之间不可能相互冲突，解决幻读问题。\n\n## 什么是乐观锁和悲观锁？\n\n1. 悲观锁：认为数据随时会被修改，因此每次读取数据之前都会对数据上锁，防止其他事务读取和修改数据。应用于数据更新频繁的场景\n\n2. 乐观锁：操作数据时不会上所，但是更新时会判断在此期间有没有其他事务修改了数据，若被修改过，则失败重试。适用于读多写少的场景。\n\n   {% note info %}\n\n   1. 加一个版本号或时间戳字段，在数据更新时同时更新这个字段\n   2. 先读取想要更新的字段或者所有字段，只有在字段没有变化才执行更新\n\n   {% endnote %}\n\n## 常见的封锁类型\n\n> **封锁**：是指事务对某个数据操作之前，先向系统发出请求，对其加锁。加锁之后事务就对该数据有了一定的控制。\n\n1. 排它锁：又称写锁。在事务对数据加上排它锁后，只允许该事务读取和修改数据，并且其他事务不能再对数据加任何锁\n\n2. 共享锁：又称读锁。事务对数据加上共享锁后，拥有了读取数据的权限，但是不能修改数据。其他的事务可以再对数据加共享锁不能加排它锁\n\n3. 意向锁：分为意向排它锁和意向共享锁。\n\n   {% note info %}\n\n   一个事务在获取某个数据行的共享锁之前，必须先获得整个表的意向共享锁或者更强的锁。\n\n   一个事务在获得某个数据行的排它锁之前，必须先获得整个表的意向排它锁。\n\n   优点：如果一个事务想要对整个表加排它锁，需要先检测有没有其他事务已经获取了表的排它锁，再检测每一行有没有被加上排它锁，整个过程非常耗时。有了意向锁之后，只需要检测整个表是否被加上意向排它锁即可。\n\n   {% endnote %}\n\n### 封锁粒度\n\n{% fold 查看 %}\n\nMysql提供了两种封锁粒度：行级锁和表级锁。\n\n封锁力度小表示锁定的数据单元越少，发生锁竞争的可能就越小，系统支持的并发程度越高，但是会增加系统开销，加解锁、检查锁都需要消耗资源。\n\nInnoDB在查询时如果where子句不走索引的话，就会进行全盘扫描，此时将使用表级锁，保证查询结果的正确。\n\n{% endfold %}\n\n### 什么是三级封锁协议？\n\n1. 一级封锁协议：事务在修改数据之前必须先对其加排它锁，直到事务结束才能释放。解决了丢失修改问题（如果一个数据正在被修改，那么其他事务无法修改该数据，因此原事务的执行结果不会被覆盖）\n2. 二级封锁协议：在一级的基础上，事务在读取数据之前必须先对其加共享锁，读完即可释放。可以解决脏读问题（如果一个数据正在被修改，此时其他事务无法读取该数据，所以在修改事务提交之前修改结果不可见）\n3. 三级封锁协议：在一级的基础上，事务在读取数据之前必须先对其加共享锁，直到事务结束才能释放。可以解决不可重复读问题（如果读取事务读取数据后就释放，在事务未结束时其他事务可以加排它锁来对数据进行修改，读取事务再次读取数据时，则会读到被修改的数据。三级封锁协议可以保证在整个读取事务期间数据不会被修改）\n\n### 什么是两段锁协议？\n\n> 事务必须严格分为两个阶段对数据进行加锁和解锁的操作，第一阶段加锁，第二阶段解锁。在事务释放锁之后，就不能再申请加锁。\n\n两段锁协议可以保证事务满足可串行化调度，也就是并发执行的事务结果与某个串行执行的事务结果相同。\n\n## 什么是MVCC？\n\nMVCC是指多版本并发控制，INNODB的MVCC，通过在每行记录后保存两个隐藏的列来实现，记录了创建时间和删除时间。这里并不是记录时间戳，而是记录事务版本号。每开启一个事务，系统的版本号就会递增。创建时间的列记录了创建时的事务版本号，删除时间的列记录了删除时的事务版本号。\n\n执行插入操作时，在新创建的行中记录创建版本号；删除操作时记录删除版本号；更新时先在原数据行记录删除版本号，再新增一行并记录创建版本号；在进行查询的时候，只查找创建版本号小于当前事务版本号以及未定义删除版本号和删除版本号大于当前事务版本号的行，这样可以保证已被创建和未被删除。\n\n### 如何实现读已提交和可重复读？\n\n读已提交，每次查询都会重新生成readview，readview中有尚未提交的版本号，根据查询的记录的版本号，找到可见的版本号。由于每次查询都会重新生成readview，因此在事务执行过程中，如果有其他的事务完成了提交，再次查询，就会读到不同的数据，也就出现了不可重复读。\n\n可重复读，只会在事务的第一次查询生成一个readview，沿用到事务结束，因此可以解决不可重复读。\n\n## 数据库的范式\n\n1. 第一范式：属性是不可分的。\n2. 第二范式：非主属性**完全依赖**于主属性。消除非主属性对主属性的部份依赖。B完全依赖于A表示A中的所有属性唯一确定B。\n3. 第三范式：非主属性**直接依赖**于主属性，消除传递依赖。\n4. 第四范式：在第三的基础上，每个列不允许有多值，比如移动电话列不允许该用户有两个手机号。\n5. 第五范式：#。\n6. BCNF：修正的第三范式，消除主属性之间的传递依赖。\n\n{% fold 不符合范式会出现哪些问题？ %}\n\n数据冗余：相同的数据重复出现。\n\n插入异常：无法插入一个还没有课程信息的学生\n\n修改异常：修改了一个记录中的信息，相同的信息却没有被修改\n\n删除异常：删除一个信息，丢失其他信息，删除一个课程，将课程的学生也删除了。\n\n{% endfold %}\n\n## 主键、超键、候选键、外键分别是什么？\n\n1. 超键：在关系中能唯一标识元组的属性集称为关系模式的超键\n2. 候选键：不含有多余属性的超键称为候选键，也就是候选键中不能再删除任何一个属性\n3. 主键：用户选作元组标识的候选键\n4. 外键：在关系模式R中的属性K是其他关系模式的主键，则K是R的外键\n\n> 主键是候选键的子集，候选键是超键的子集。\n\n## 列举几种表连接的方式？\n\n1. 内连接：` [inner] join ` ，只查询出两表中符合查询条件的行信息。\n\n2. 外连接\n\n   {% note info %}\n\n   左外连接：` left [outer] join `，左边的表不加限制，将所有行信息都显示，右表没有匹配的用null补上。\n\n   右外连接：和左外连接相反。\n\n   全外连接：` full [outer] join `，左右两表都不加限制，将两表所有记录都显示，不匹配的用null补上。\n\n   {% endnote %}\n\n3. 交叉连接：` cross join ` ，不带` where ` 子句时，返回笛卡尔积。带` where ` 子句先生成笛卡尔积，再在其中找满足条件的。\n\n## delete/drop/truncate的区别\n\n1. delete是DML语句，逐行的删除数据，并会记录日志，事务提交之后才真正执行。执行速度较低。\n2. truncate是DDL语句，删除整个表的数据，不会记录事务日志，隐式提交。通过释放数据页的内存来删除数据。\n3. drop是DDL语句，将删除整个表的结构和数据，隐式提交\n\n如果删除和事务有关，则要使用delete，如果和事务无关，则选择truncate，如果要删除整个表，就使用drop\n\n## 存储过程、触发器、视图、约束\n\n1. 存储过程是一段事先经过编译并存储在数据库的sql语句，类似于函数，通过调用这个函数获得输出结果。\n\n   {% note info %}\n\n   优点：\n\n   预先编译，提高了执行效率。\n\n   封装了一系列操作，对于数据交互比较多的操作，可以减少网络通信量。\n\n   可复用，安全性高。\n\n   {% endnote %}\n\n2. 触发器是由插入/删除/更新操作触发的操作，不能被直接调用，没有参数，用于保证数据的完整性。\n\n3. 视图是从数据库基本表中通过查询选出数据组成的虚拟表。对视图的修改不影响基本表。\n\n4. 约束有多种类型，主键约束、唯一约束、非空约束、外键约束\n\n## 为什么要使用索引？使用索引的好处？\n\n1. 加快数据的检索速度，避免全盘扫描。\n2. 可以显著减少查询中分组和排序的时间，因为如果order by的字段本身就是索引，那么它已经是有序的。\n3. 通过创建唯一性索引，可以保证数据表中每一行的唯一性\n4. 将随机I/O变为顺序I/O，B+树索引会把相邻的数据存储在一起\n\n**缺点**：建立和维护索引耗费空间和时间\n\n## B+树索引的优势\n\n和**B树**相比：\n\n1. m阶B+树所有非叶子节点都有m个子树指针，B树最多有m个子树指针，因此B+树的高度会更低。并且B+树的非叶子节点只存放关键字，B树还会存放数据，因此B+树I/O次数更少。\n2. 在进行范围查询时，由于B+树的所有数据都在叶子节点，并且叶子节点之间有指针，因此直接遍历叶子节点即可，而B树需要中序遍历整棵树\n3. B+树的查询效率更加稳定，每次都需要从根节点到叶子节点\n\n和**hash索引**相比：\n\n1. 哈希索引虽然可以以O(1)时间进行查找，但是只支持精确查找，并且在大量哈希值相等的情况下，查询效率会降低\n\n## 哪些情况下索引会失效？\n\n1. 以“%”开头的LIKE语句\n2. OR语句前后没有同时使用索引\n3. 数据类型出现隐式转化\n4. 对于复合索引，必须满足最左匹配原则\n5. 在数据量小的表中，Mysql可能判断全盘扫描更快。\n\n## 哪些地方适合创建索引？\n\n经常被查询、作为表连接、ORDER BY、GROUP BY的字段。数据量小的字段、非空的字段。\n\n## 索引分类\n\n1. 功能类：普通索引、唯一索引、主键索引、覆盖索引（索引包含了要返回的值因此不用回表）\n2. 按列分：单列索引、符合索引\n3. 聚集索引和非聚集索引：聚集索引的顺序决定了数据的物理顺序，因此一张表只有一个聚集索引。非聚集索引只存放数据的逻辑地址。\n\n## 存储引擎InnoDB和MyISAM的区别\n\n1. InnoDB支持事务、外键、行级锁和表级锁，MyISAM支持表级锁。\n2. MyISAM支持压缩表，需要的内存空间更小，但是压缩后只读，更新操作需要解压后执行。\n3. InnoDB支持在线热备份\n\n### 应用场景\n\nMyISAM管理非事务表，提供高速存储和检索，对于数据量小，或者只读数据，使用MyISAM效率更高。InnoDB支持事务，在并发下有更好的性能。\n\n### 热备份和冷备份\n\n热备份：在数据库运行期间完成快照备份。备份时数据库仍可提供服务\n\n冷备份：数据库关闭后，将数据文件复制到另一位置的备份方式\n\n## 如何优化数据库？\n\n1. SQL优化\n\n   {% note info %}\n\n   分析慢查询日志，查看查询时间长、IO多的SQL语句，针对性的优化\n\n   使用explain分析，查看表的读取顺序、使用了哪些索引、扫描行数。\n\n   通过写出需要的列返回必要的列，避免使用select *\n\n   通过limit限制返回的行数\n\n   将一次大的复杂的多表查询分解成简单的单表查询\n\n   {% endnote %}\n\n2. 索引优化：避免索引失效、在合适的地方创建索引\n\n3. 表结构优化：遵循三大范式来进行表设计。数据量大时可以进行表切分\n\n### 垂直切分和水平切分\n\n{% note info %}\n\n垂直切分：按业务来切分数据库，相同的业务表存放在同一个数据库节点。垂直切分减少了单节点数据库的负载，原来只有一个数据库，所有业务读写请求都在同一个节点，负载太高。但是对于那些单表数据量就巨大的表（比如商品表、订单表），即使切分到一个数据库，仍然容易造成性能降低。\n\n水平切分：按表中的字段的规则（主键求模、主键范围、日期）把数据切分到不同的数据表，达到缩表的目的。\n\n先进行水平切分，因为水平切分不需要修改整个系统架构，做业务模块的拆分，工作量小。\n\n{% endnote %}\n\n## 什么是主从复制？实现原理是什么？\n\n主从复制是指数据可以从一个Mysql数据库主服务器复制到其他的从服务器。\n\n通过三个线程来实现：\n\n1. 主服务器binary log dump 线程：将主服务器中的数据更改记录到bin log日志中\n2. 从服务器I/O线程：负责从主服务器读取bin log，并写入本地的relay log\n3. 从服务器SQL线程：负责读取relay log，解析出主服务器的数据更改，并在从服务器上重放，实现主从数据的一致性。\n\n### 为什么要主从复制？\n\n1. 读写分离：主服务器负责写，从服务器负责读。缓解锁竞争，即使主服务器的数据被加了锁，从服务器依然可以处理读请求。从服务器可以采用MyISAM提高查询性能，节省存储空间。\n2. 提高系统的可用性，当某个节点出现故障，可以进行故障切换保证服务。\n3. 数据实时备份\n","source":"_posts/数据库面试问题.md","raw":"---\ntitle: 数据库面试问题\ntags:\n  - Java后端面试\n  - 数据库\n  - Mysql\ncategories:\n  - Java后端面试\nabbrlink: 1f02b5ce\nimage: 'https://gitee.com/jingshanccc/image/raw/master/image/20200722004639.jpg'\n---\n\n<p/>\n\n<!-- more -->\n\n## 事务的概念和特性？\n\n概念：事务是一个操作序列，不可分割的工作单位，以BEGIN TRANSACTION开始，以ROLLBACK/COMMIT结束。\n\n特性\n\n1. 原子性：事务中的所有操作，要么全部成功提交，要么全部失败回滚。逻辑上是不可分割的操作单元。事务的回滚通过回滚日志undolog实现。\n2. 一致性：事务的执行必须使数据库保持一致性的状态。在一致性状态下，所有事务对同一数据的读取结果相同。\n3. 隔离性：事务在提交之前对数据所做的修改对其他事务是不可见的。并发执行的事务互不影响。\n4. 持久性：成功提交的事务对数据所作的修改是永久的。\n\n### 如何保证原子性和持久性？\n\n通过引入undo log来实现事务的原子性。undo log记录数据被修改前的值，通常是逻辑日志，记录每一行的修改记录。当事务执行过程中出现宕机/需要回滚，则通过undo log将数据恢复。当事务结束时，undo log不会立刻清除，而是放入待清理的链表，由purge线程判断是否有其他事务正在使用undo log中记录的表的上一个事务之前的版本信息，决定是否删除。\n\n由于undo log会被删除，因此引入redo log来保证事务的持久性。\n\nredo log记录修改后的数据，通常是物理日志，记录发生修改的数据页。在事务提交之前写入磁盘，即使事务提交过程中宕机，也可以通过redo log将事务执行结果刷新到数据库。未提交/回滚的事务也会记录在redo log中。\n\n## 会发生哪些并发一致性问题？\n\n1. 丢失修改：一个事务对数据做了修改，在事务提交之前，另一个事务也对同一个数据做了修改，则第一个事务的修改丢失了。\n2. 脏读：一个事务读到另一个事务未提交/回滚的修改。\n3. 不可重复读：在同一个事务中，某个查询语句读取某行数据和之后再次读取该行数据得到不同的结果，数据已经发生修改。\n4. 幻读：当同一查询执行多次，由于其他事务在这个范围内执行了插入操作，导致每次返回不同的结果集。\n\n## 数据库的四种隔离级别？\n\n1. 读未提交：在一个事务提交之前，它的执行结果对其他事务是可见的，会出现脏读、不可重复读、幻读。\n2. 读已提交：一个事务只能看见已经提交的事务的执行结果。解决脏读，会出现不可重复读、幻读。\n3. 可重复读：可以确保同一个事务在多次读取某一数据返回相同的结果。解决脏读、不可重复读，会出现幻读。\n4. 串行化：强制事务串行执行，使事务之间不可能相互冲突，解决幻读问题。\n\n## 什么是乐观锁和悲观锁？\n\n1. 悲观锁：认为数据随时会被修改，因此每次读取数据之前都会对数据上锁，防止其他事务读取和修改数据。应用于数据更新频繁的场景\n\n2. 乐观锁：操作数据时不会上所，但是更新时会判断在此期间有没有其他事务修改了数据，若被修改过，则失败重试。适用于读多写少的场景。\n\n   {% note info %}\n\n   1. 加一个版本号或时间戳字段，在数据更新时同时更新这个字段\n   2. 先读取想要更新的字段或者所有字段，只有在字段没有变化才执行更新\n\n   {% endnote %}\n\n## 常见的封锁类型\n\n> **封锁**：是指事务对某个数据操作之前，先向系统发出请求，对其加锁。加锁之后事务就对该数据有了一定的控制。\n\n1. 排它锁：又称写锁。在事务对数据加上排它锁后，只允许该事务读取和修改数据，并且其他事务不能再对数据加任何锁\n\n2. 共享锁：又称读锁。事务对数据加上共享锁后，拥有了读取数据的权限，但是不能修改数据。其他的事务可以再对数据加共享锁不能加排它锁\n\n3. 意向锁：分为意向排它锁和意向共享锁。\n\n   {% note info %}\n\n   一个事务在获取某个数据行的共享锁之前，必须先获得整个表的意向共享锁或者更强的锁。\n\n   一个事务在获得某个数据行的排它锁之前，必须先获得整个表的意向排它锁。\n\n   优点：如果一个事务想要对整个表加排它锁，需要先检测有没有其他事务已经获取了表的排它锁，再检测每一行有没有被加上排它锁，整个过程非常耗时。有了意向锁之后，只需要检测整个表是否被加上意向排它锁即可。\n\n   {% endnote %}\n\n### 封锁粒度\n\n{% fold 查看 %}\n\nMysql提供了两种封锁粒度：行级锁和表级锁。\n\n封锁力度小表示锁定的数据单元越少，发生锁竞争的可能就越小，系统支持的并发程度越高，但是会增加系统开销，加解锁、检查锁都需要消耗资源。\n\nInnoDB在查询时如果where子句不走索引的话，就会进行全盘扫描，此时将使用表级锁，保证查询结果的正确。\n\n{% endfold %}\n\n### 什么是三级封锁协议？\n\n1. 一级封锁协议：事务在修改数据之前必须先对其加排它锁，直到事务结束才能释放。解决了丢失修改问题（如果一个数据正在被修改，那么其他事务无法修改该数据，因此原事务的执行结果不会被覆盖）\n2. 二级封锁协议：在一级的基础上，事务在读取数据之前必须先对其加共享锁，读完即可释放。可以解决脏读问题（如果一个数据正在被修改，此时其他事务无法读取该数据，所以在修改事务提交之前修改结果不可见）\n3. 三级封锁协议：在一级的基础上，事务在读取数据之前必须先对其加共享锁，直到事务结束才能释放。可以解决不可重复读问题（如果读取事务读取数据后就释放，在事务未结束时其他事务可以加排它锁来对数据进行修改，读取事务再次读取数据时，则会读到被修改的数据。三级封锁协议可以保证在整个读取事务期间数据不会被修改）\n\n### 什么是两段锁协议？\n\n> 事务必须严格分为两个阶段对数据进行加锁和解锁的操作，第一阶段加锁，第二阶段解锁。在事务释放锁之后，就不能再申请加锁。\n\n两段锁协议可以保证事务满足可串行化调度，也就是并发执行的事务结果与某个串行执行的事务结果相同。\n\n## 什么是MVCC？\n\nMVCC是指多版本并发控制，INNODB的MVCC，通过在每行记录后保存两个隐藏的列来实现，记录了创建时间和删除时间。这里并不是记录时间戳，而是记录事务版本号。每开启一个事务，系统的版本号就会递增。创建时间的列记录了创建时的事务版本号，删除时间的列记录了删除时的事务版本号。\n\n执行插入操作时，在新创建的行中记录创建版本号；删除操作时记录删除版本号；更新时先在原数据行记录删除版本号，再新增一行并记录创建版本号；在进行查询的时候，只查找创建版本号小于当前事务版本号以及未定义删除版本号和删除版本号大于当前事务版本号的行，这样可以保证已被创建和未被删除。\n\n### 如何实现读已提交和可重复读？\n\n读已提交，每次查询都会重新生成readview，readview中有尚未提交的版本号，根据查询的记录的版本号，找到可见的版本号。由于每次查询都会重新生成readview，因此在事务执行过程中，如果有其他的事务完成了提交，再次查询，就会读到不同的数据，也就出现了不可重复读。\n\n可重复读，只会在事务的第一次查询生成一个readview，沿用到事务结束，因此可以解决不可重复读。\n\n## 数据库的范式\n\n1. 第一范式：属性是不可分的。\n2. 第二范式：非主属性**完全依赖**于主属性。消除非主属性对主属性的部份依赖。B完全依赖于A表示A中的所有属性唯一确定B。\n3. 第三范式：非主属性**直接依赖**于主属性，消除传递依赖。\n4. 第四范式：在第三的基础上，每个列不允许有多值，比如移动电话列不允许该用户有两个手机号。\n5. 第五范式：#。\n6. BCNF：修正的第三范式，消除主属性之间的传递依赖。\n\n{% fold 不符合范式会出现哪些问题？ %}\n\n数据冗余：相同的数据重复出现。\n\n插入异常：无法插入一个还没有课程信息的学生\n\n修改异常：修改了一个记录中的信息，相同的信息却没有被修改\n\n删除异常：删除一个信息，丢失其他信息，删除一个课程，将课程的学生也删除了。\n\n{% endfold %}\n\n## 主键、超键、候选键、外键分别是什么？\n\n1. 超键：在关系中能唯一标识元组的属性集称为关系模式的超键\n2. 候选键：不含有多余属性的超键称为候选键，也就是候选键中不能再删除任何一个属性\n3. 主键：用户选作元组标识的候选键\n4. 外键：在关系模式R中的属性K是其他关系模式的主键，则K是R的外键\n\n> 主键是候选键的子集，候选键是超键的子集。\n\n## 列举几种表连接的方式？\n\n1. 内连接：` [inner] join ` ，只查询出两表中符合查询条件的行信息。\n\n2. 外连接\n\n   {% note info %}\n\n   左外连接：` left [outer] join `，左边的表不加限制，将所有行信息都显示，右表没有匹配的用null补上。\n\n   右外连接：和左外连接相反。\n\n   全外连接：` full [outer] join `，左右两表都不加限制，将两表所有记录都显示，不匹配的用null补上。\n\n   {% endnote %}\n\n3. 交叉连接：` cross join ` ，不带` where ` 子句时，返回笛卡尔积。带` where ` 子句先生成笛卡尔积，再在其中找满足条件的。\n\n## delete/drop/truncate的区别\n\n1. delete是DML语句，逐行的删除数据，并会记录日志，事务提交之后才真正执行。执行速度较低。\n2. truncate是DDL语句，删除整个表的数据，不会记录事务日志，隐式提交。通过释放数据页的内存来删除数据。\n3. drop是DDL语句，将删除整个表的结构和数据，隐式提交\n\n如果删除和事务有关，则要使用delete，如果和事务无关，则选择truncate，如果要删除整个表，就使用drop\n\n## 存储过程、触发器、视图、约束\n\n1. 存储过程是一段事先经过编译并存储在数据库的sql语句，类似于函数，通过调用这个函数获得输出结果。\n\n   {% note info %}\n\n   优点：\n\n   预先编译，提高了执行效率。\n\n   封装了一系列操作，对于数据交互比较多的操作，可以减少网络通信量。\n\n   可复用，安全性高。\n\n   {% endnote %}\n\n2. 触发器是由插入/删除/更新操作触发的操作，不能被直接调用，没有参数，用于保证数据的完整性。\n\n3. 视图是从数据库基本表中通过查询选出数据组成的虚拟表。对视图的修改不影响基本表。\n\n4. 约束有多种类型，主键约束、唯一约束、非空约束、外键约束\n\n## 为什么要使用索引？使用索引的好处？\n\n1. 加快数据的检索速度，避免全盘扫描。\n2. 可以显著减少查询中分组和排序的时间，因为如果order by的字段本身就是索引，那么它已经是有序的。\n3. 通过创建唯一性索引，可以保证数据表中每一行的唯一性\n4. 将随机I/O变为顺序I/O，B+树索引会把相邻的数据存储在一起\n\n**缺点**：建立和维护索引耗费空间和时间\n\n## B+树索引的优势\n\n和**B树**相比：\n\n1. m阶B+树所有非叶子节点都有m个子树指针，B树最多有m个子树指针，因此B+树的高度会更低。并且B+树的非叶子节点只存放关键字，B树还会存放数据，因此B+树I/O次数更少。\n2. 在进行范围查询时，由于B+树的所有数据都在叶子节点，并且叶子节点之间有指针，因此直接遍历叶子节点即可，而B树需要中序遍历整棵树\n3. B+树的查询效率更加稳定，每次都需要从根节点到叶子节点\n\n和**hash索引**相比：\n\n1. 哈希索引虽然可以以O(1)时间进行查找，但是只支持精确查找，并且在大量哈希值相等的情况下，查询效率会降低\n\n## 哪些情况下索引会失效？\n\n1. 以“%”开头的LIKE语句\n2. OR语句前后没有同时使用索引\n3. 数据类型出现隐式转化\n4. 对于复合索引，必须满足最左匹配原则\n5. 在数据量小的表中，Mysql可能判断全盘扫描更快。\n\n## 哪些地方适合创建索引？\n\n经常被查询、作为表连接、ORDER BY、GROUP BY的字段。数据量小的字段、非空的字段。\n\n## 索引分类\n\n1. 功能类：普通索引、唯一索引、主键索引、覆盖索引（索引包含了要返回的值因此不用回表）\n2. 按列分：单列索引、符合索引\n3. 聚集索引和非聚集索引：聚集索引的顺序决定了数据的物理顺序，因此一张表只有一个聚集索引。非聚集索引只存放数据的逻辑地址。\n\n## 存储引擎InnoDB和MyISAM的区别\n\n1. InnoDB支持事务、外键、行级锁和表级锁，MyISAM支持表级锁。\n2. MyISAM支持压缩表，需要的内存空间更小，但是压缩后只读，更新操作需要解压后执行。\n3. InnoDB支持在线热备份\n\n### 应用场景\n\nMyISAM管理非事务表，提供高速存储和检索，对于数据量小，或者只读数据，使用MyISAM效率更高。InnoDB支持事务，在并发下有更好的性能。\n\n### 热备份和冷备份\n\n热备份：在数据库运行期间完成快照备份。备份时数据库仍可提供服务\n\n冷备份：数据库关闭后，将数据文件复制到另一位置的备份方式\n\n## 如何优化数据库？\n\n1. SQL优化\n\n   {% note info %}\n\n   分析慢查询日志，查看查询时间长、IO多的SQL语句，针对性的优化\n\n   使用explain分析，查看表的读取顺序、使用了哪些索引、扫描行数。\n\n   通过写出需要的列返回必要的列，避免使用select *\n\n   通过limit限制返回的行数\n\n   将一次大的复杂的多表查询分解成简单的单表查询\n\n   {% endnote %}\n\n2. 索引优化：避免索引失效、在合适的地方创建索引\n\n3. 表结构优化：遵循三大范式来进行表设计。数据量大时可以进行表切分\n\n### 垂直切分和水平切分\n\n{% note info %}\n\n垂直切分：按业务来切分数据库，相同的业务表存放在同一个数据库节点。垂直切分减少了单节点数据库的负载，原来只有一个数据库，所有业务读写请求都在同一个节点，负载太高。但是对于那些单表数据量就巨大的表（比如商品表、订单表），即使切分到一个数据库，仍然容易造成性能降低。\n\n水平切分：按表中的字段的规则（主键求模、主键范围、日期）把数据切分到不同的数据表，达到缩表的目的。\n\n先进行水平切分，因为水平切分不需要修改整个系统架构，做业务模块的拆分，工作量小。\n\n{% endnote %}\n\n## 什么是主从复制？实现原理是什么？\n\n主从复制是指数据可以从一个Mysql数据库主服务器复制到其他的从服务器。\n\n通过三个线程来实现：\n\n1. 主服务器binary log dump 线程：将主服务器中的数据更改记录到bin log日志中\n2. 从服务器I/O线程：负责从主服务器读取bin log，并写入本地的relay log\n3. 从服务器SQL线程：负责读取relay log，解析出主服务器的数据更改，并在从服务器上重放，实现主从数据的一致性。\n\n### 为什么要主从复制？\n\n1. 读写分离：主服务器负责写，从服务器负责读。缓解锁竞争，即使主服务器的数据被加了锁，从服务器依然可以处理读请求。从服务器可以采用MyISAM提高查询性能，节省存储空间。\n2. 提高系统的可用性，当某个节点出现故障，可以进行故障切换保证服务。\n3. 数据实时备份\n","slug":"数据库面试问题","published":1,"date":"2020-05-04T15:12:09.038Z","updated":"2020-08-06T01:17:07.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2p004bz4ej0clw6js6","content":"<p/>\n\n<a id=\"more\"></a>\n\n<h2 id=\"事务的概念和特性？\"><a href=\"#事务的概念和特性？\" class=\"headerlink\" title=\"事务的概念和特性？\"></a>事务的概念和特性？</h2><p>概念：事务是一个操作序列，不可分割的工作单位，以BEGIN TRANSACTION开始，以ROLLBACK/COMMIT结束。</p>\n<p>特性</p>\n<ol>\n<li>原子性：事务中的所有操作，要么全部成功提交，要么全部失败回滚。逻辑上是不可分割的操作单元。事务的回滚通过回滚日志undolog实现。</li>\n<li>一致性：事务的执行必须使数据库保持一致性的状态。在一致性状态下，所有事务对同一数据的读取结果相同。</li>\n<li>隔离性：事务在提交之前对数据所做的修改对其他事务是不可见的。并发执行的事务互不影响。</li>\n<li>持久性：成功提交的事务对数据所作的修改是永久的。</li>\n</ol>\n<h3 id=\"如何保证原子性和持久性？\"><a href=\"#如何保证原子性和持久性？\" class=\"headerlink\" title=\"如何保证原子性和持久性？\"></a>如何保证原子性和持久性？</h3><p>通过引入undo log来实现事务的原子性。undo log记录数据被修改前的值，通常是逻辑日志，记录每一行的修改记录。当事务执行过程中出现宕机/需要回滚，则通过undo log将数据恢复。当事务结束时，undo log不会立刻清除，而是放入待清理的链表，由purge线程判断是否有其他事务正在使用undo log中记录的表的上一个事务之前的版本信息，决定是否删除。</p>\n<p>由于undo log会被删除，因此引入redo log来保证事务的持久性。</p>\n<p>redo log记录修改后的数据，通常是物理日志，记录发生修改的数据页。在事务提交之前写入磁盘，即使事务提交过程中宕机，也可以通过redo log将事务执行结果刷新到数据库。未提交/回滚的事务也会记录在redo log中。</p>\n<h2 id=\"会发生哪些并发一致性问题？\"><a href=\"#会发生哪些并发一致性问题？\" class=\"headerlink\" title=\"会发生哪些并发一致性问题？\"></a>会发生哪些并发一致性问题？</h2><ol>\n<li>丢失修改：一个事务对数据做了修改，在事务提交之前，另一个事务也对同一个数据做了修改，则第一个事务的修改丢失了。</li>\n<li>脏读：一个事务读到另一个事务未提交/回滚的修改。</li>\n<li>不可重复读：在同一个事务中，某个查询语句读取某行数据和之后再次读取该行数据得到不同的结果，数据已经发生修改。</li>\n<li>幻读：当同一查询执行多次，由于其他事务在这个范围内执行了插入操作，导致每次返回不同的结果集。</li>\n</ol>\n<h2 id=\"数据库的四种隔离级别？\"><a href=\"#数据库的四种隔离级别？\" class=\"headerlink\" title=\"数据库的四种隔离级别？\"></a>数据库的四种隔离级别？</h2><ol>\n<li>读未提交：在一个事务提交之前，它的执行结果对其他事务是可见的，会出现脏读、不可重复读、幻读。</li>\n<li>读已提交：一个事务只能看见已经提交的事务的执行结果。解决脏读，会出现不可重复读、幻读。</li>\n<li>可重复读：可以确保同一个事务在多次读取某一数据返回相同的结果。解决脏读、不可重复读，会出现幻读。</li>\n<li>串行化：强制事务串行执行，使事务之间不可能相互冲突，解决幻读问题。</li>\n</ol>\n<h2 id=\"什么是乐观锁和悲观锁？\"><a href=\"#什么是乐观锁和悲观锁？\" class=\"headerlink\" title=\"什么是乐观锁和悲观锁？\"></a>什么是乐观锁和悲观锁？</h2><ol>\n<li><p>悲观锁：认为数据随时会被修改，因此每次读取数据之前都会对数据上锁，防止其他事务读取和修改数据。应用于数据更新频繁的场景</p>\n</li>\n<li><p>乐观锁：操作数据时不会上所，但是更新时会判断在此期间有没有其他事务修改了数据，若被修改过，则失败重试。适用于读多写少的场景。</p>\n<div class=\"note info\"><ol>\n<li>加一个版本号或时间戳字段，在数据更新时同时更新这个字段</li>\n<li>先读取想要更新的字段或者所有字段，只有在字段没有变化才执行更新</li>\n</ol></div>\n\n</li>\n</ol>\n<h2 id=\"常见的封锁类型\"><a href=\"#常见的封锁类型\" class=\"headerlink\" title=\"常见的封锁类型\"></a>常见的封锁类型</h2><blockquote>\n<p><strong>封锁</strong>：是指事务对某个数据操作之前，先向系统发出请求，对其加锁。加锁之后事务就对该数据有了一定的控制。</p>\n</blockquote>\n<ol>\n<li><p>排它锁：又称写锁。在事务对数据加上排它锁后，只允许该事务读取和修改数据，并且其他事务不能再对数据加任何锁</p>\n</li>\n<li><p>共享锁：又称读锁。事务对数据加上共享锁后，拥有了读取数据的权限，但是不能修改数据。其他的事务可以再对数据加共享锁不能加排它锁</p>\n</li>\n<li><p>意向锁：分为意向排它锁和意向共享锁。</p>\n<div class=\"note info\"><p>一个事务在获取某个数据行的共享锁之前，必须先获得整个表的意向共享锁或者更强的锁。</p>\n<p>一个事务在获得某个数据行的排它锁之前，必须先获得整个表的意向排它锁。</p>\n<p>优点：如果一个事务想要对整个表加排它锁，需要先检测有没有其他事务已经获取了表的排它锁，再检测每一行有没有被加上排它锁，整个过程非常耗时。有了意向锁之后，只需要检测整个表是否被加上意向排它锁即可。</p></div>\n\n</li>\n</ol>\n<h3 id=\"封锁粒度\"><a href=\"#封锁粒度\" class=\"headerlink\" title=\"封锁粒度\"></a>封锁粒度</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看</div></div><div class=\"fold\">\n<p>Mysql提供了两种封锁粒度：行级锁和表级锁。</p>\n<p>封锁力度小表示锁定的数据单元越少，发生锁竞争的可能就越小，系统支持的并发程度越高，但是会增加系统开销，加解锁、检查锁都需要消耗资源。</p>\n<p>InnoDB在查询时如果where子句不走索引的话，就会进行全盘扫描，此时将使用表级锁，保证查询结果的正确。</p>\n\n</div></div>\n\n<h3 id=\"什么是三级封锁协议？\"><a href=\"#什么是三级封锁协议？\" class=\"headerlink\" title=\"什么是三级封锁协议？\"></a>什么是三级封锁协议？</h3><ol>\n<li>一级封锁协议：事务在修改数据之前必须先对其加排它锁，直到事务结束才能释放。解决了丢失修改问题（如果一个数据正在被修改，那么其他事务无法修改该数据，因此原事务的执行结果不会被覆盖）</li>\n<li>二级封锁协议：在一级的基础上，事务在读取数据之前必须先对其加共享锁，读完即可释放。可以解决脏读问题（如果一个数据正在被修改，此时其他事务无法读取该数据，所以在修改事务提交之前修改结果不可见）</li>\n<li>三级封锁协议：在一级的基础上，事务在读取数据之前必须先对其加共享锁，直到事务结束才能释放。可以解决不可重复读问题（如果读取事务读取数据后就释放，在事务未结束时其他事务可以加排它锁来对数据进行修改，读取事务再次读取数据时，则会读到被修改的数据。三级封锁协议可以保证在整个读取事务期间数据不会被修改）</li>\n</ol>\n<h3 id=\"什么是两段锁协议？\"><a href=\"#什么是两段锁协议？\" class=\"headerlink\" title=\"什么是两段锁协议？\"></a>什么是两段锁协议？</h3><blockquote>\n<p>事务必须严格分为两个阶段对数据进行加锁和解锁的操作，第一阶段加锁，第二阶段解锁。在事务释放锁之后，就不能再申请加锁。</p>\n</blockquote>\n<p>两段锁协议可以保证事务满足可串行化调度，也就是并发执行的事务结果与某个串行执行的事务结果相同。</p>\n<h2 id=\"什么是MVCC？\"><a href=\"#什么是MVCC？\" class=\"headerlink\" title=\"什么是MVCC？\"></a>什么是MVCC？</h2><p>MVCC是指多版本并发控制，INNODB的MVCC，通过在每行记录后保存两个隐藏的列来实现，记录了创建时间和删除时间。这里并不是记录时间戳，而是记录事务版本号。每开启一个事务，系统的版本号就会递增。创建时间的列记录了创建时的事务版本号，删除时间的列记录了删除时的事务版本号。</p>\n<p>执行插入操作时，在新创建的行中记录创建版本号；删除操作时记录删除版本号；更新时先在原数据行记录删除版本号，再新增一行并记录创建版本号；在进行查询的时候，只查找创建版本号小于当前事务版本号以及未定义删除版本号和删除版本号大于当前事务版本号的行，这样可以保证已被创建和未被删除。</p>\n<h3 id=\"如何实现读已提交和可重复读？\"><a href=\"#如何实现读已提交和可重复读？\" class=\"headerlink\" title=\"如何实现读已提交和可重复读？\"></a>如何实现读已提交和可重复读？</h3><p>读已提交，每次查询都会重新生成readview，readview中有尚未提交的版本号，根据查询的记录的版本号，找到可见的版本号。由于每次查询都会重新生成readview，因此在事务执行过程中，如果有其他的事务完成了提交，再次查询，就会读到不同的数据，也就出现了不可重复读。</p>\n<p>可重复读，只会在事务的第一次查询生成一个readview，沿用到事务结束，因此可以解决不可重复读。</p>\n<h2 id=\"数据库的范式\"><a href=\"#数据库的范式\" class=\"headerlink\" title=\"数据库的范式\"></a>数据库的范式</h2><ol>\n<li>第一范式：属性是不可分的。</li>\n<li>第二范式：非主属性<strong>完全依赖</strong>于主属性。消除非主属性对主属性的部份依赖。B完全依赖于A表示A中的所有属性唯一确定B。</li>\n<li>第三范式：非主属性<strong>直接依赖</strong>于主属性，消除传递依赖。</li>\n<li>第四范式：在第三的基础上，每个列不允许有多值，比如移动电话列不允许该用户有两个手机号。</li>\n<li>第五范式：#。</li>\n<li>BCNF：修正的第三范式，消除主属性之间的传递依赖。</li>\n</ol>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">不符合范式会出现哪些问题？</div></div><div class=\"fold\">\n<p>数据冗余：相同的数据重复出现。</p>\n<p>插入异常：无法插入一个还没有课程信息的学生</p>\n<p>修改异常：修改了一个记录中的信息，相同的信息却没有被修改</p>\n<p>删除异常：删除一个信息，丢失其他信息，删除一个课程，将课程的学生也删除了。</p>\n\n</div></div>\n\n<h2 id=\"主键、超键、候选键、外键分别是什么？\"><a href=\"#主键、超键、候选键、外键分别是什么？\" class=\"headerlink\" title=\"主键、超键、候选键、外键分别是什么？\"></a>主键、超键、候选键、外键分别是什么？</h2><ol>\n<li>超键：在关系中能唯一标识元组的属性集称为关系模式的超键</li>\n<li>候选键：不含有多余属性的超键称为候选键，也就是候选键中不能再删除任何一个属性</li>\n<li>主键：用户选作元组标识的候选键</li>\n<li>外键：在关系模式R中的属性K是其他关系模式的主键，则K是R的外键</li>\n</ol>\n<blockquote>\n<p>主键是候选键的子集，候选键是超键的子集。</p>\n</blockquote>\n<h2 id=\"列举几种表连接的方式？\"><a href=\"#列举几种表连接的方式？\" class=\"headerlink\" title=\"列举几种表连接的方式？\"></a>列举几种表连接的方式？</h2><ol>\n<li><p>内连接：<code>[inner] join</code> ，只查询出两表中符合查询条件的行信息。</p>\n</li>\n<li><p>外连接</p>\n<div class=\"note info\"><p>左外连接：<code>left [outer] join</code>，左边的表不加限制，将所有行信息都显示，右表没有匹配的用null补上。</p>\n<p>右外连接：和左外连接相反。</p>\n<p>全外连接：<code>full [outer] join</code>，左右两表都不加限制，将两表所有记录都显示，不匹配的用null补上。</p></div>\n</li>\n<li><p>交叉连接：<code>cross join</code> ，不带<code>where</code> 子句时，返回笛卡尔积。带<code>where</code> 子句先生成笛卡尔积，再在其中找满足条件的。</p>\n</li>\n</ol>\n<h2 id=\"delete-drop-truncate的区别\"><a href=\"#delete-drop-truncate的区别\" class=\"headerlink\" title=\"delete/drop/truncate的区别\"></a>delete/drop/truncate的区别</h2><ol>\n<li>delete是DML语句，逐行的删除数据，并会记录日志，事务提交之后才真正执行。执行速度较低。</li>\n<li>truncate是DDL语句，删除整个表的数据，不会记录事务日志，隐式提交。通过释放数据页的内存来删除数据。</li>\n<li>drop是DDL语句，将删除整个表的结构和数据，隐式提交</li>\n</ol>\n<p>如果删除和事务有关，则要使用delete，如果和事务无关，则选择truncate，如果要删除整个表，就使用drop</p>\n<h2 id=\"存储过程、触发器、视图、约束\"><a href=\"#存储过程、触发器、视图、约束\" class=\"headerlink\" title=\"存储过程、触发器、视图、约束\"></a>存储过程、触发器、视图、约束</h2><ol>\n<li><p>存储过程是一段事先经过编译并存储在数据库的sql语句，类似于函数，通过调用这个函数获得输出结果。</p>\n<div class=\"note info\"><p>优点：</p>\n<p>预先编译，提高了执行效率。</p>\n<p>封装了一系列操作，对于数据交互比较多的操作，可以减少网络通信量。</p>\n<p>可复用，安全性高。</p></div>\n</li>\n<li><p>触发器是由插入/删除/更新操作触发的操作，不能被直接调用，没有参数，用于保证数据的完整性。</p>\n</li>\n<li><p>视图是从数据库基本表中通过查询选出数据组成的虚拟表。对视图的修改不影响基本表。</p>\n</li>\n<li><p>约束有多种类型，主键约束、唯一约束、非空约束、外键约束</p>\n</li>\n</ol>\n<h2 id=\"为什么要使用索引？使用索引的好处？\"><a href=\"#为什么要使用索引？使用索引的好处？\" class=\"headerlink\" title=\"为什么要使用索引？使用索引的好处？\"></a>为什么要使用索引？使用索引的好处？</h2><ol>\n<li>加快数据的检索速度，避免全盘扫描。</li>\n<li>可以显著减少查询中分组和排序的时间，因为如果order by的字段本身就是索引，那么它已经是有序的。</li>\n<li>通过创建唯一性索引，可以保证数据表中每一行的唯一性</li>\n<li>将随机I/O变为顺序I/O，B+树索引会把相邻的数据存储在一起</li>\n</ol>\n<p><strong>缺点</strong>：建立和维护索引耗费空间和时间</p>\n<h2 id=\"B-树索引的优势\"><a href=\"#B-树索引的优势\" class=\"headerlink\" title=\"B+树索引的优势\"></a>B+树索引的优势</h2><p>和<strong>B树</strong>相比：</p>\n<ol>\n<li>m阶B+树所有非叶子节点都有m个子树指针，B树最多有m个子树指针，因此B+树的高度会更低。并且B+树的非叶子节点只存放关键字，B树还会存放数据，因此B+树I/O次数更少。</li>\n<li>在进行范围查询时，由于B+树的所有数据都在叶子节点，并且叶子节点之间有指针，因此直接遍历叶子节点即可，而B树需要中序遍历整棵树</li>\n<li>B+树的查询效率更加稳定，每次都需要从根节点到叶子节点</li>\n</ol>\n<p>和<strong>hash索引</strong>相比：</p>\n<ol>\n<li>哈希索引虽然可以以O(1)时间进行查找，但是只支持精确查找，并且在大量哈希值相等的情况下，查询效率会降低</li>\n</ol>\n<h2 id=\"哪些情况下索引会失效？\"><a href=\"#哪些情况下索引会失效？\" class=\"headerlink\" title=\"哪些情况下索引会失效？\"></a>哪些情况下索引会失效？</h2><ol>\n<li>以“%”开头的LIKE语句</li>\n<li>OR语句前后没有同时使用索引</li>\n<li>数据类型出现隐式转化</li>\n<li>对于复合索引，必须满足最左匹配原则</li>\n<li>在数据量小的表中，Mysql可能判断全盘扫描更快。</li>\n</ol>\n<h2 id=\"哪些地方适合创建索引？\"><a href=\"#哪些地方适合创建索引？\" class=\"headerlink\" title=\"哪些地方适合创建索引？\"></a>哪些地方适合创建索引？</h2><p>经常被查询、作为表连接、ORDER BY、GROUP BY的字段。数据量小的字段、非空的字段。</p>\n<h2 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h2><ol>\n<li>功能类：普通索引、唯一索引、主键索引、覆盖索引（索引包含了要返回的值因此不用回表）</li>\n<li>按列分：单列索引、符合索引</li>\n<li>聚集索引和非聚集索引：聚集索引的顺序决定了数据的物理顺序，因此一张表只有一个聚集索引。非聚集索引只存放数据的逻辑地址。</li>\n</ol>\n<h2 id=\"存储引擎InnoDB和MyISAM的区别\"><a href=\"#存储引擎InnoDB和MyISAM的区别\" class=\"headerlink\" title=\"存储引擎InnoDB和MyISAM的区别\"></a>存储引擎InnoDB和MyISAM的区别</h2><ol>\n<li>InnoDB支持事务、外键、行级锁和表级锁，MyISAM支持表级锁。</li>\n<li>MyISAM支持压缩表，需要的内存空间更小，但是压缩后只读，更新操作需要解压后执行。</li>\n<li>InnoDB支持在线热备份</li>\n</ol>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>MyISAM管理非事务表，提供高速存储和检索，对于数据量小，或者只读数据，使用MyISAM效率更高。InnoDB支持事务，在并发下有更好的性能。</p>\n<h3 id=\"热备份和冷备份\"><a href=\"#热备份和冷备份\" class=\"headerlink\" title=\"热备份和冷备份\"></a>热备份和冷备份</h3><p>热备份：在数据库运行期间完成快照备份。备份时数据库仍可提供服务</p>\n<p>冷备份：数据库关闭后，将数据文件复制到另一位置的备份方式</p>\n<h2 id=\"如何优化数据库？\"><a href=\"#如何优化数据库？\" class=\"headerlink\" title=\"如何优化数据库？\"></a>如何优化数据库？</h2><ol>\n<li><p>SQL优化</p>\n<div class=\"note info\"><p>分析慢查询日志，查看查询时间长、IO多的SQL语句，针对性的优化</p>\n<p>使用explain分析，查看表的读取顺序、使用了哪些索引、扫描行数。</p>\n<p>通过写出需要的列返回必要的列，避免使用select *</p>\n<p>通过limit限制返回的行数</p>\n<p>将一次大的复杂的多表查询分解成简单的单表查询</p></div>\n</li>\n<li><p>索引优化：避免索引失效、在合适的地方创建索引</p>\n</li>\n<li><p>表结构优化：遵循三大范式来进行表设计。数据量大时可以进行表切分</p>\n</li>\n</ol>\n<h3 id=\"垂直切分和水平切分\"><a href=\"#垂直切分和水平切分\" class=\"headerlink\" title=\"垂直切分和水平切分\"></a>垂直切分和水平切分</h3><div class=\"note info\"><p>垂直切分：按业务来切分数据库，相同的业务表存放在同一个数据库节点。垂直切分减少了单节点数据库的负载，原来只有一个数据库，所有业务读写请求都在同一个节点，负载太高。但是对于那些单表数据量就巨大的表（比如商品表、订单表），即使切分到一个数据库，仍然容易造成性能降低。</p>\n<p>水平切分：按表中的字段的规则（主键求模、主键范围、日期）把数据切分到不同的数据表，达到缩表的目的。</p>\n<p>先进行水平切分，因为水平切分不需要修改整个系统架构，做业务模块的拆分，工作量小。</p></div>\n\n<h2 id=\"什么是主从复制？实现原理是什么？\"><a href=\"#什么是主从复制？实现原理是什么？\" class=\"headerlink\" title=\"什么是主从复制？实现原理是什么？\"></a>什么是主从复制？实现原理是什么？</h2><p>主从复制是指数据可以从一个Mysql数据库主服务器复制到其他的从服务器。</p>\n<p>通过三个线程来实现：</p>\n<ol>\n<li>主服务器binary log dump 线程：将主服务器中的数据更改记录到bin log日志中</li>\n<li>从服务器I/O线程：负责从主服务器读取bin log，并写入本地的relay log</li>\n<li>从服务器SQL线程：负责读取relay log，解析出主服务器的数据更改，并在从服务器上重放，实现主从数据的一致性。</li>\n</ol>\n<h3 id=\"为什么要主从复制？\"><a href=\"#为什么要主从复制？\" class=\"headerlink\" title=\"为什么要主从复制？\"></a>为什么要主从复制？</h3><ol>\n<li>读写分离：主服务器负责写，从服务器负责读。缓解锁竞争，即使主服务器的数据被加了锁，从服务器依然可以处理读请求。从服务器可以采用MyISAM提高查询性能，节省存储空间。</li>\n<li>提高系统的可用性，当某个节点出现故障，可以进行故障切换保证服务。</li>\n<li>数据实时备份</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p/>","more":"<h2 id=\"事务的概念和特性？\"><a href=\"#事务的概念和特性？\" class=\"headerlink\" title=\"事务的概念和特性？\"></a>事务的概念和特性？</h2><p>概念：事务是一个操作序列，不可分割的工作单位，以BEGIN TRANSACTION开始，以ROLLBACK/COMMIT结束。</p>\n<p>特性</p>\n<ol>\n<li>原子性：事务中的所有操作，要么全部成功提交，要么全部失败回滚。逻辑上是不可分割的操作单元。事务的回滚通过回滚日志undolog实现。</li>\n<li>一致性：事务的执行必须使数据库保持一致性的状态。在一致性状态下，所有事务对同一数据的读取结果相同。</li>\n<li>隔离性：事务在提交之前对数据所做的修改对其他事务是不可见的。并发执行的事务互不影响。</li>\n<li>持久性：成功提交的事务对数据所作的修改是永久的。</li>\n</ol>\n<h3 id=\"如何保证原子性和持久性？\"><a href=\"#如何保证原子性和持久性？\" class=\"headerlink\" title=\"如何保证原子性和持久性？\"></a>如何保证原子性和持久性？</h3><p>通过引入undo log来实现事务的原子性。undo log记录数据被修改前的值，通常是逻辑日志，记录每一行的修改记录。当事务执行过程中出现宕机/需要回滚，则通过undo log将数据恢复。当事务结束时，undo log不会立刻清除，而是放入待清理的链表，由purge线程判断是否有其他事务正在使用undo log中记录的表的上一个事务之前的版本信息，决定是否删除。</p>\n<p>由于undo log会被删除，因此引入redo log来保证事务的持久性。</p>\n<p>redo log记录修改后的数据，通常是物理日志，记录发生修改的数据页。在事务提交之前写入磁盘，即使事务提交过程中宕机，也可以通过redo log将事务执行结果刷新到数据库。未提交/回滚的事务也会记录在redo log中。</p>\n<h2 id=\"会发生哪些并发一致性问题？\"><a href=\"#会发生哪些并发一致性问题？\" class=\"headerlink\" title=\"会发生哪些并发一致性问题？\"></a>会发生哪些并发一致性问题？</h2><ol>\n<li>丢失修改：一个事务对数据做了修改，在事务提交之前，另一个事务也对同一个数据做了修改，则第一个事务的修改丢失了。</li>\n<li>脏读：一个事务读到另一个事务未提交/回滚的修改。</li>\n<li>不可重复读：在同一个事务中，某个查询语句读取某行数据和之后再次读取该行数据得到不同的结果，数据已经发生修改。</li>\n<li>幻读：当同一查询执行多次，由于其他事务在这个范围内执行了插入操作，导致每次返回不同的结果集。</li>\n</ol>\n<h2 id=\"数据库的四种隔离级别？\"><a href=\"#数据库的四种隔离级别？\" class=\"headerlink\" title=\"数据库的四种隔离级别？\"></a>数据库的四种隔离级别？</h2><ol>\n<li>读未提交：在一个事务提交之前，它的执行结果对其他事务是可见的，会出现脏读、不可重复读、幻读。</li>\n<li>读已提交：一个事务只能看见已经提交的事务的执行结果。解决脏读，会出现不可重复读、幻读。</li>\n<li>可重复读：可以确保同一个事务在多次读取某一数据返回相同的结果。解决脏读、不可重复读，会出现幻读。</li>\n<li>串行化：强制事务串行执行，使事务之间不可能相互冲突，解决幻读问题。</li>\n</ol>\n<h2 id=\"什么是乐观锁和悲观锁？\"><a href=\"#什么是乐观锁和悲观锁？\" class=\"headerlink\" title=\"什么是乐观锁和悲观锁？\"></a>什么是乐观锁和悲观锁？</h2><ol>\n<li><p>悲观锁：认为数据随时会被修改，因此每次读取数据之前都会对数据上锁，防止其他事务读取和修改数据。应用于数据更新频繁的场景</p>\n</li>\n<li><p>乐观锁：操作数据时不会上所，但是更新时会判断在此期间有没有其他事务修改了数据，若被修改过，则失败重试。适用于读多写少的场景。</p>\n<div class=\"note info\"><ol>\n<li>加一个版本号或时间戳字段，在数据更新时同时更新这个字段</li>\n<li>先读取想要更新的字段或者所有字段，只有在字段没有变化才执行更新</li>\n</ol></div>\n\n</li>\n</ol>\n<h2 id=\"常见的封锁类型\"><a href=\"#常见的封锁类型\" class=\"headerlink\" title=\"常见的封锁类型\"></a>常见的封锁类型</h2><blockquote>\n<p><strong>封锁</strong>：是指事务对某个数据操作之前，先向系统发出请求，对其加锁。加锁之后事务就对该数据有了一定的控制。</p>\n</blockquote>\n<ol>\n<li><p>排它锁：又称写锁。在事务对数据加上排它锁后，只允许该事务读取和修改数据，并且其他事务不能再对数据加任何锁</p>\n</li>\n<li><p>共享锁：又称读锁。事务对数据加上共享锁后，拥有了读取数据的权限，但是不能修改数据。其他的事务可以再对数据加共享锁不能加排它锁</p>\n</li>\n<li><p>意向锁：分为意向排它锁和意向共享锁。</p>\n<div class=\"note info\"><p>一个事务在获取某个数据行的共享锁之前，必须先获得整个表的意向共享锁或者更强的锁。</p>\n<p>一个事务在获得某个数据行的排它锁之前，必须先获得整个表的意向排它锁。</p>\n<p>优点：如果一个事务想要对整个表加排它锁，需要先检测有没有其他事务已经获取了表的排它锁，再检测每一行有没有被加上排它锁，整个过程非常耗时。有了意向锁之后，只需要检测整个表是否被加上意向排它锁即可。</p></div>\n\n</li>\n</ol>\n<h3 id=\"封锁粒度\"><a href=\"#封锁粒度\" class=\"headerlink\" title=\"封锁粒度\"></a>封锁粒度</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看</div></div><div class=\"fold\">\n<p>Mysql提供了两种封锁粒度：行级锁和表级锁。</p>\n<p>封锁力度小表示锁定的数据单元越少，发生锁竞争的可能就越小，系统支持的并发程度越高，但是会增加系统开销，加解锁、检查锁都需要消耗资源。</p>\n<p>InnoDB在查询时如果where子句不走索引的话，就会进行全盘扫描，此时将使用表级锁，保证查询结果的正确。</p>\n\n</div></div>\n\n<h3 id=\"什么是三级封锁协议？\"><a href=\"#什么是三级封锁协议？\" class=\"headerlink\" title=\"什么是三级封锁协议？\"></a>什么是三级封锁协议？</h3><ol>\n<li>一级封锁协议：事务在修改数据之前必须先对其加排它锁，直到事务结束才能释放。解决了丢失修改问题（如果一个数据正在被修改，那么其他事务无法修改该数据，因此原事务的执行结果不会被覆盖）</li>\n<li>二级封锁协议：在一级的基础上，事务在读取数据之前必须先对其加共享锁，读完即可释放。可以解决脏读问题（如果一个数据正在被修改，此时其他事务无法读取该数据，所以在修改事务提交之前修改结果不可见）</li>\n<li>三级封锁协议：在一级的基础上，事务在读取数据之前必须先对其加共享锁，直到事务结束才能释放。可以解决不可重复读问题（如果读取事务读取数据后就释放，在事务未结束时其他事务可以加排它锁来对数据进行修改，读取事务再次读取数据时，则会读到被修改的数据。三级封锁协议可以保证在整个读取事务期间数据不会被修改）</li>\n</ol>\n<h3 id=\"什么是两段锁协议？\"><a href=\"#什么是两段锁协议？\" class=\"headerlink\" title=\"什么是两段锁协议？\"></a>什么是两段锁协议？</h3><blockquote>\n<p>事务必须严格分为两个阶段对数据进行加锁和解锁的操作，第一阶段加锁，第二阶段解锁。在事务释放锁之后，就不能再申请加锁。</p>\n</blockquote>\n<p>两段锁协议可以保证事务满足可串行化调度，也就是并发执行的事务结果与某个串行执行的事务结果相同。</p>\n<h2 id=\"什么是MVCC？\"><a href=\"#什么是MVCC？\" class=\"headerlink\" title=\"什么是MVCC？\"></a>什么是MVCC？</h2><p>MVCC是指多版本并发控制，INNODB的MVCC，通过在每行记录后保存两个隐藏的列来实现，记录了创建时间和删除时间。这里并不是记录时间戳，而是记录事务版本号。每开启一个事务，系统的版本号就会递增。创建时间的列记录了创建时的事务版本号，删除时间的列记录了删除时的事务版本号。</p>\n<p>执行插入操作时，在新创建的行中记录创建版本号；删除操作时记录删除版本号；更新时先在原数据行记录删除版本号，再新增一行并记录创建版本号；在进行查询的时候，只查找创建版本号小于当前事务版本号以及未定义删除版本号和删除版本号大于当前事务版本号的行，这样可以保证已被创建和未被删除。</p>\n<h3 id=\"如何实现读已提交和可重复读？\"><a href=\"#如何实现读已提交和可重复读？\" class=\"headerlink\" title=\"如何实现读已提交和可重复读？\"></a>如何实现读已提交和可重复读？</h3><p>读已提交，每次查询都会重新生成readview，readview中有尚未提交的版本号，根据查询的记录的版本号，找到可见的版本号。由于每次查询都会重新生成readview，因此在事务执行过程中，如果有其他的事务完成了提交，再次查询，就会读到不同的数据，也就出现了不可重复读。</p>\n<p>可重复读，只会在事务的第一次查询生成一个readview，沿用到事务结束，因此可以解决不可重复读。</p>\n<h2 id=\"数据库的范式\"><a href=\"#数据库的范式\" class=\"headerlink\" title=\"数据库的范式\"></a>数据库的范式</h2><ol>\n<li>第一范式：属性是不可分的。</li>\n<li>第二范式：非主属性<strong>完全依赖</strong>于主属性。消除非主属性对主属性的部份依赖。B完全依赖于A表示A中的所有属性唯一确定B。</li>\n<li>第三范式：非主属性<strong>直接依赖</strong>于主属性，消除传递依赖。</li>\n<li>第四范式：在第三的基础上，每个列不允许有多值，比如移动电话列不允许该用户有两个手机号。</li>\n<li>第五范式：#。</li>\n<li>BCNF：修正的第三范式，消除主属性之间的传递依赖。</li>\n</ol>\n<div><div class=\"fold_hider\"><div class=\"close hider_title\">不符合范式会出现哪些问题？</div></div><div class=\"fold\">\n<p>数据冗余：相同的数据重复出现。</p>\n<p>插入异常：无法插入一个还没有课程信息的学生</p>\n<p>修改异常：修改了一个记录中的信息，相同的信息却没有被修改</p>\n<p>删除异常：删除一个信息，丢失其他信息，删除一个课程，将课程的学生也删除了。</p>\n\n</div></div>\n\n<h2 id=\"主键、超键、候选键、外键分别是什么？\"><a href=\"#主键、超键、候选键、外键分别是什么？\" class=\"headerlink\" title=\"主键、超键、候选键、外键分别是什么？\"></a>主键、超键、候选键、外键分别是什么？</h2><ol>\n<li>超键：在关系中能唯一标识元组的属性集称为关系模式的超键</li>\n<li>候选键：不含有多余属性的超键称为候选键，也就是候选键中不能再删除任何一个属性</li>\n<li>主键：用户选作元组标识的候选键</li>\n<li>外键：在关系模式R中的属性K是其他关系模式的主键，则K是R的外键</li>\n</ol>\n<blockquote>\n<p>主键是候选键的子集，候选键是超键的子集。</p>\n</blockquote>\n<h2 id=\"列举几种表连接的方式？\"><a href=\"#列举几种表连接的方式？\" class=\"headerlink\" title=\"列举几种表连接的方式？\"></a>列举几种表连接的方式？</h2><ol>\n<li><p>内连接：<code>[inner] join</code> ，只查询出两表中符合查询条件的行信息。</p>\n</li>\n<li><p>外连接</p>\n<div class=\"note info\"><p>左外连接：<code>left [outer] join</code>，左边的表不加限制，将所有行信息都显示，右表没有匹配的用null补上。</p>\n<p>右外连接：和左外连接相反。</p>\n<p>全外连接：<code>full [outer] join</code>，左右两表都不加限制，将两表所有记录都显示，不匹配的用null补上。</p></div>\n</li>\n<li><p>交叉连接：<code>cross join</code> ，不带<code>where</code> 子句时，返回笛卡尔积。带<code>where</code> 子句先生成笛卡尔积，再在其中找满足条件的。</p>\n</li>\n</ol>\n<h2 id=\"delete-drop-truncate的区别\"><a href=\"#delete-drop-truncate的区别\" class=\"headerlink\" title=\"delete/drop/truncate的区别\"></a>delete/drop/truncate的区别</h2><ol>\n<li>delete是DML语句，逐行的删除数据，并会记录日志，事务提交之后才真正执行。执行速度较低。</li>\n<li>truncate是DDL语句，删除整个表的数据，不会记录事务日志，隐式提交。通过释放数据页的内存来删除数据。</li>\n<li>drop是DDL语句，将删除整个表的结构和数据，隐式提交</li>\n</ol>\n<p>如果删除和事务有关，则要使用delete，如果和事务无关，则选择truncate，如果要删除整个表，就使用drop</p>\n<h2 id=\"存储过程、触发器、视图、约束\"><a href=\"#存储过程、触发器、视图、约束\" class=\"headerlink\" title=\"存储过程、触发器、视图、约束\"></a>存储过程、触发器、视图、约束</h2><ol>\n<li><p>存储过程是一段事先经过编译并存储在数据库的sql语句，类似于函数，通过调用这个函数获得输出结果。</p>\n<div class=\"note info\"><p>优点：</p>\n<p>预先编译，提高了执行效率。</p>\n<p>封装了一系列操作，对于数据交互比较多的操作，可以减少网络通信量。</p>\n<p>可复用，安全性高。</p></div>\n</li>\n<li><p>触发器是由插入/删除/更新操作触发的操作，不能被直接调用，没有参数，用于保证数据的完整性。</p>\n</li>\n<li><p>视图是从数据库基本表中通过查询选出数据组成的虚拟表。对视图的修改不影响基本表。</p>\n</li>\n<li><p>约束有多种类型，主键约束、唯一约束、非空约束、外键约束</p>\n</li>\n</ol>\n<h2 id=\"为什么要使用索引？使用索引的好处？\"><a href=\"#为什么要使用索引？使用索引的好处？\" class=\"headerlink\" title=\"为什么要使用索引？使用索引的好处？\"></a>为什么要使用索引？使用索引的好处？</h2><ol>\n<li>加快数据的检索速度，避免全盘扫描。</li>\n<li>可以显著减少查询中分组和排序的时间，因为如果order by的字段本身就是索引，那么它已经是有序的。</li>\n<li>通过创建唯一性索引，可以保证数据表中每一行的唯一性</li>\n<li>将随机I/O变为顺序I/O，B+树索引会把相邻的数据存储在一起</li>\n</ol>\n<p><strong>缺点</strong>：建立和维护索引耗费空间和时间</p>\n<h2 id=\"B-树索引的优势\"><a href=\"#B-树索引的优势\" class=\"headerlink\" title=\"B+树索引的优势\"></a>B+树索引的优势</h2><p>和<strong>B树</strong>相比：</p>\n<ol>\n<li>m阶B+树所有非叶子节点都有m个子树指针，B树最多有m个子树指针，因此B+树的高度会更低。并且B+树的非叶子节点只存放关键字，B树还会存放数据，因此B+树I/O次数更少。</li>\n<li>在进行范围查询时，由于B+树的所有数据都在叶子节点，并且叶子节点之间有指针，因此直接遍历叶子节点即可，而B树需要中序遍历整棵树</li>\n<li>B+树的查询效率更加稳定，每次都需要从根节点到叶子节点</li>\n</ol>\n<p>和<strong>hash索引</strong>相比：</p>\n<ol>\n<li>哈希索引虽然可以以O(1)时间进行查找，但是只支持精确查找，并且在大量哈希值相等的情况下，查询效率会降低</li>\n</ol>\n<h2 id=\"哪些情况下索引会失效？\"><a href=\"#哪些情况下索引会失效？\" class=\"headerlink\" title=\"哪些情况下索引会失效？\"></a>哪些情况下索引会失效？</h2><ol>\n<li>以“%”开头的LIKE语句</li>\n<li>OR语句前后没有同时使用索引</li>\n<li>数据类型出现隐式转化</li>\n<li>对于复合索引，必须满足最左匹配原则</li>\n<li>在数据量小的表中，Mysql可能判断全盘扫描更快。</li>\n</ol>\n<h2 id=\"哪些地方适合创建索引？\"><a href=\"#哪些地方适合创建索引？\" class=\"headerlink\" title=\"哪些地方适合创建索引？\"></a>哪些地方适合创建索引？</h2><p>经常被查询、作为表连接、ORDER BY、GROUP BY的字段。数据量小的字段、非空的字段。</p>\n<h2 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h2><ol>\n<li>功能类：普通索引、唯一索引、主键索引、覆盖索引（索引包含了要返回的值因此不用回表）</li>\n<li>按列分：单列索引、符合索引</li>\n<li>聚集索引和非聚集索引：聚集索引的顺序决定了数据的物理顺序，因此一张表只有一个聚集索引。非聚集索引只存放数据的逻辑地址。</li>\n</ol>\n<h2 id=\"存储引擎InnoDB和MyISAM的区别\"><a href=\"#存储引擎InnoDB和MyISAM的区别\" class=\"headerlink\" title=\"存储引擎InnoDB和MyISAM的区别\"></a>存储引擎InnoDB和MyISAM的区别</h2><ol>\n<li>InnoDB支持事务、外键、行级锁和表级锁，MyISAM支持表级锁。</li>\n<li>MyISAM支持压缩表，需要的内存空间更小，但是压缩后只读，更新操作需要解压后执行。</li>\n<li>InnoDB支持在线热备份</li>\n</ol>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>MyISAM管理非事务表，提供高速存储和检索，对于数据量小，或者只读数据，使用MyISAM效率更高。InnoDB支持事务，在并发下有更好的性能。</p>\n<h3 id=\"热备份和冷备份\"><a href=\"#热备份和冷备份\" class=\"headerlink\" title=\"热备份和冷备份\"></a>热备份和冷备份</h3><p>热备份：在数据库运行期间完成快照备份。备份时数据库仍可提供服务</p>\n<p>冷备份：数据库关闭后，将数据文件复制到另一位置的备份方式</p>\n<h2 id=\"如何优化数据库？\"><a href=\"#如何优化数据库？\" class=\"headerlink\" title=\"如何优化数据库？\"></a>如何优化数据库？</h2><ol>\n<li><p>SQL优化</p>\n<div class=\"note info\"><p>分析慢查询日志，查看查询时间长、IO多的SQL语句，针对性的优化</p>\n<p>使用explain分析，查看表的读取顺序、使用了哪些索引、扫描行数。</p>\n<p>通过写出需要的列返回必要的列，避免使用select *</p>\n<p>通过limit限制返回的行数</p>\n<p>将一次大的复杂的多表查询分解成简单的单表查询</p></div>\n</li>\n<li><p>索引优化：避免索引失效、在合适的地方创建索引</p>\n</li>\n<li><p>表结构优化：遵循三大范式来进行表设计。数据量大时可以进行表切分</p>\n</li>\n</ol>\n<h3 id=\"垂直切分和水平切分\"><a href=\"#垂直切分和水平切分\" class=\"headerlink\" title=\"垂直切分和水平切分\"></a>垂直切分和水平切分</h3><div class=\"note info\"><p>垂直切分：按业务来切分数据库，相同的业务表存放在同一个数据库节点。垂直切分减少了单节点数据库的负载，原来只有一个数据库，所有业务读写请求都在同一个节点，负载太高。但是对于那些单表数据量就巨大的表（比如商品表、订单表），即使切分到一个数据库，仍然容易造成性能降低。</p>\n<p>水平切分：按表中的字段的规则（主键求模、主键范围、日期）把数据切分到不同的数据表，达到缩表的目的。</p>\n<p>先进行水平切分，因为水平切分不需要修改整个系统架构，做业务模块的拆分，工作量小。</p></div>\n\n<h2 id=\"什么是主从复制？实现原理是什么？\"><a href=\"#什么是主从复制？实现原理是什么？\" class=\"headerlink\" title=\"什么是主从复制？实现原理是什么？\"></a>什么是主从复制？实现原理是什么？</h2><p>主从复制是指数据可以从一个Mysql数据库主服务器复制到其他的从服务器。</p>\n<p>通过三个线程来实现：</p>\n<ol>\n<li>主服务器binary log dump 线程：将主服务器中的数据更改记录到bin log日志中</li>\n<li>从服务器I/O线程：负责从主服务器读取bin log，并写入本地的relay log</li>\n<li>从服务器SQL线程：负责读取relay log，解析出主服务器的数据更改，并在从服务器上重放，实现主从数据的一致性。</li>\n</ol>\n<h3 id=\"为什么要主从复制？\"><a href=\"#为什么要主从复制？\" class=\"headerlink\" title=\"为什么要主从复制？\"></a>为什么要主从复制？</h3><ol>\n<li>读写分离：主服务器负责写，从服务器负责读。缓解锁竞争，即使主服务器的数据被加了锁，从服务器依然可以处理读请求。从服务器可以采用MyISAM提高查询性能，节省存储空间。</li>\n<li>提高系统的可用性，当某个节点出现故障，可以进行故障切换保证服务。</li>\n<li>数据实时备份</li>\n</ol>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Aug 06 2020 09:17:07 GMT+0800 (中国标准时间)","title":"数据库面试问题","path":"posts/1f02b5ce.html","eyeCatchImage":null,"excerpt":"<p/>","date":{"_isAMomentObject":true,"_i":"2020-05-04T15:12:09.038Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-04T15:12:09.038Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Java后端面试","tags":["Java后端面试","数据库","Mysql"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":5381},{"title":"面试题 04.04. 检查平衡性","abbrlink":"4ad52213","_content":"\n> 实现一个函数，检查二叉树是否平衡。在这个问题中，平衡树的定义如下：任意一个节点，其两棵子树的高度差不超过 1。\n>\n\n<!-- more -->\n\n{% note info %}\n\n示例 1:\n\n```java\n给定二叉树 [3,9,20,null,null,15,7]\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n返回 true 。\n示例 2:\n给定二叉树 [1,2,2,3,3,null,null,4,4]\n      1\n     / \\\n    2   2\n   / \\\n  3   3\n / \\\n4   4\n返回 false 。\n```\n\n{% endnote %}\n\n\n\n### 💡 思路\n\n二叉树递归问题，在递归过程中我们将到达一个节点三次，在这三次过程中，我们需要收集树的信息并判断是否符合要求的条件，具体地说，在这个问题中，判断以当前节点为根节点的树是否是平衡的，需要知道左子树是否平衡、右子树是否平衡，当左右都平衡的时候，需要知道当前节点是否平衡——左子树和右子树的高度差。因此我们需要的信息是，左子树的高度以及是否平衡、右子树的高度是否平衡。\n\n于是我们确定了递归需要返回的信息是**树的高度和是否平衡**。\n\n### 🧾 代码\n\n```java\npublic boolean isBalanced(TreeNode root) {\n    //高度差小于1 -- 需要的值有 当前树的高度,是否平衡\n    return process(root).isBalanced;\n}\nprivate Data process(TreeNode node){\n    if(node == null ){\n        return new Data(0, true);\n    }\n    Data left = process(node.left);\n    if(!left.isBalanced){\n        return new Data(0,false);\n    }\n    Data right = process(node.right);\n    if(!right .isBalanced){\n        return new Data(0, false);\n    }\n    if(Math.abs(right.h - left.h) > 1){\n        return new Data(0, false);\n    }\n    return new Data(Math.max(left.h, right.h)+1, true);\n}\nclass Data{\n    int h;\n    boolean isBalanced;\n    Data(int h , boolean isBalanced){\n        this.h = h;\n        this.isBalanced = isBalanced;\n    }\n}\n```\n\n### 📈 优化\n\n在把思路理清并写出了上面的代码之后，可以再简化代码，具体的是简化返回的内容。\n\n```java\npublic boolean isBalanced(TreeNode root) {\n    //高度差小于1 -- 需要的值有 当前树的高度,是否平衡\n    return process(root) != -1;\n}\nprivate int process(TreeNode node){\n    if(node == null ){\n        return 0;\n    }\n    int left = process(node.left);\n    if( left == -1){\n        return -1;\n    }\n    int right = process(node.right);\n    if( right == -1){\n        return -1;\n    }\n    if(Math.abs(right - left) > 1){\n        return -1;\n    }\n    return Math.max(left, right)+1;\n}\n```\n\n","source":"_posts/程序员面试经典-04-04-检查平衡性.md","raw":"---\ntitle: 面试题 04.04. 检查平衡性\ntags:\n  - 程序员面试经典\n  - 二叉树\n  - Leetcode\n  - 递归\ncategories:\n  - 程序员面试经典\n  - Leetcode\n  - 二叉树\nabbrlink: 4ad52213\n---\n\n> 实现一个函数，检查二叉树是否平衡。在这个问题中，平衡树的定义如下：任意一个节点，其两棵子树的高度差不超过 1。\n>\n\n<!-- more -->\n\n{% note info %}\n\n示例 1:\n\n```java\n给定二叉树 [3,9,20,null,null,15,7]\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n返回 true 。\n示例 2:\n给定二叉树 [1,2,2,3,3,null,null,4,4]\n      1\n     / \\\n    2   2\n   / \\\n  3   3\n / \\\n4   4\n返回 false 。\n```\n\n{% endnote %}\n\n\n\n### 💡 思路\n\n二叉树递归问题，在递归过程中我们将到达一个节点三次，在这三次过程中，我们需要收集树的信息并判断是否符合要求的条件，具体地说，在这个问题中，判断以当前节点为根节点的树是否是平衡的，需要知道左子树是否平衡、右子树是否平衡，当左右都平衡的时候，需要知道当前节点是否平衡——左子树和右子树的高度差。因此我们需要的信息是，左子树的高度以及是否平衡、右子树的高度是否平衡。\n\n于是我们确定了递归需要返回的信息是**树的高度和是否平衡**。\n\n### 🧾 代码\n\n```java\npublic boolean isBalanced(TreeNode root) {\n    //高度差小于1 -- 需要的值有 当前树的高度,是否平衡\n    return process(root).isBalanced;\n}\nprivate Data process(TreeNode node){\n    if(node == null ){\n        return new Data(0, true);\n    }\n    Data left = process(node.left);\n    if(!left.isBalanced){\n        return new Data(0,false);\n    }\n    Data right = process(node.right);\n    if(!right .isBalanced){\n        return new Data(0, false);\n    }\n    if(Math.abs(right.h - left.h) > 1){\n        return new Data(0, false);\n    }\n    return new Data(Math.max(left.h, right.h)+1, true);\n}\nclass Data{\n    int h;\n    boolean isBalanced;\n    Data(int h , boolean isBalanced){\n        this.h = h;\n        this.isBalanced = isBalanced;\n    }\n}\n```\n\n### 📈 优化\n\n在把思路理清并写出了上面的代码之后，可以再简化代码，具体的是简化返回的内容。\n\n```java\npublic boolean isBalanced(TreeNode root) {\n    //高度差小于1 -- 需要的值有 当前树的高度,是否平衡\n    return process(root) != -1;\n}\nprivate int process(TreeNode node){\n    if(node == null ){\n        return 0;\n    }\n    int left = process(node.left);\n    if( left == -1){\n        return -1;\n    }\n    int right = process(node.right);\n    if( right == -1){\n        return -1;\n    }\n    if(Math.abs(right - left) > 1){\n        return -1;\n    }\n    return Math.max(left, right)+1;\n}\n```\n\n","slug":"程序员面试经典-04-04-检查平衡性","published":1,"date":"2020-05-07T05:58:32.509Z","updated":"2020-05-07T06:20:26.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2p004ez4ej44j01uck","content":"<blockquote>\n<p>实现一个函数，检查二叉树是否平衡。在这个问题中，平衡树的定义如下：任意一个节点，其两棵子树的高度差不超过 1。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<div class=\"note info\"><p>示例 1:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定二叉树 [<span class=\"number\">3</span>,<span class=\"number\">9</span>,<span class=\"number\">20</span>,<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>,<span class=\"number\">15</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">    <span class=\"number\">3</span></span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  <span class=\"number\">9</span>  <span class=\"number\">20</span></span><br><span class=\"line\">    /  \\</span><br><span class=\"line\">   <span class=\"number\">15</span>   <span class=\"number\">7</span></span><br><span class=\"line\">返回 <span class=\"keyword\">true</span> 。</span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\">给定二叉树 [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">      <span class=\"number\">1</span></span><br><span class=\"line\">     / \\</span><br><span class=\"line\">    <span class=\"number\">2</span>   <span class=\"number\">2</span></span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  <span class=\"number\">3</span>   <span class=\"number\">3</span></span><br><span class=\"line\"> / \\</span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"number\">4</span></span><br><span class=\"line\">返回 <span class=\"keyword\">false</span> 。</span><br></pre></td></tr></table></figure></div>\n\n\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>二叉树递归问题，在递归过程中我们将到达一个节点三次，在这三次过程中，我们需要收集树的信息并判断是否符合要求的条件，具体地说，在这个问题中，判断以当前节点为根节点的树是否是平衡的，需要知道左子树是否平衡、右子树是否平衡，当左右都平衡的时候，需要知道当前节点是否平衡——左子树和右子树的高度差。因此我们需要的信息是，左子树的高度以及是否平衡、右子树的高度是否平衡。</p>\n<p>于是我们确定了递归需要返回的信息是<strong>树的高度和是否平衡</strong>。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBalanced</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//高度差小于1 -- 需要的值有 当前树的高度,是否平衡</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> process(root).isBalanced;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Data <span class=\"title\">process</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Data(<span class=\"number\">0</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Data left = process(node.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!left.isBalanced)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Data(<span class=\"number\">0</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Data right = process(node.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!right .isBalanced)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Data(<span class=\"number\">0</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Math.abs(right.h - left.h) &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Data(<span class=\"number\">0</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Data(Math.max(left.h, right.h)+<span class=\"number\">1</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isBalanced;</span><br><span class=\"line\">    Data(<span class=\"keyword\">int</span> h , <span class=\"keyword\">boolean</span> isBalanced)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.h = h;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isBalanced = isBalanced;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>在把思路理清并写出了上面的代码之后，可以再简化代码，具体的是简化返回的内容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBalanced</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//高度差小于1 -- 需要的值有 当前树的高度,是否平衡</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> process(root) != -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">process</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = process(node.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( left == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = process(node.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( right == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Math.abs(right - left) &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(left, right)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>实现一个函数，检查二叉树是否平衡。在这个问题中，平衡树的定义如下：任意一个节点，其两棵子树的高度差不超过 1。</p>\n</blockquote>","more":"<div class=\"note info\"><p>示例 1:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定二叉树 [<span class=\"number\">3</span>,<span class=\"number\">9</span>,<span class=\"number\">20</span>,<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>,<span class=\"number\">15</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">    <span class=\"number\">3</span></span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  <span class=\"number\">9</span>  <span class=\"number\">20</span></span><br><span class=\"line\">    /  \\</span><br><span class=\"line\">   <span class=\"number\">15</span>   <span class=\"number\">7</span></span><br><span class=\"line\">返回 <span class=\"keyword\">true</span> 。</span><br><span class=\"line\">示例 <span class=\"number\">2</span>:</span><br><span class=\"line\">给定二叉树 [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">      <span class=\"number\">1</span></span><br><span class=\"line\">     / \\</span><br><span class=\"line\">    <span class=\"number\">2</span>   <span class=\"number\">2</span></span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  <span class=\"number\">3</span>   <span class=\"number\">3</span></span><br><span class=\"line\"> / \\</span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"number\">4</span></span><br><span class=\"line\">返回 <span class=\"keyword\">false</span> 。</span><br></pre></td></tr></table></figure></div>\n\n\n\n<h3 id=\"💡-思路\"><a href=\"#💡-思路\" class=\"headerlink\" title=\"💡 思路\"></a>💡 思路</h3><p>二叉树递归问题，在递归过程中我们将到达一个节点三次，在这三次过程中，我们需要收集树的信息并判断是否符合要求的条件，具体地说，在这个问题中，判断以当前节点为根节点的树是否是平衡的，需要知道左子树是否平衡、右子树是否平衡，当左右都平衡的时候，需要知道当前节点是否平衡——左子树和右子树的高度差。因此我们需要的信息是，左子树的高度以及是否平衡、右子树的高度是否平衡。</p>\n<p>于是我们确定了递归需要返回的信息是<strong>树的高度和是否平衡</strong>。</p>\n<h3 id=\"🧾-代码\"><a href=\"#🧾-代码\" class=\"headerlink\" title=\"🧾 代码\"></a>🧾 代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBalanced</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//高度差小于1 -- 需要的值有 当前树的高度,是否平衡</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> process(root).isBalanced;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Data <span class=\"title\">process</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Data(<span class=\"number\">0</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Data left = process(node.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!left.isBalanced)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Data(<span class=\"number\">0</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Data right = process(node.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!right .isBalanced)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Data(<span class=\"number\">0</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Math.abs(right.h - left.h) &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Data(<span class=\"number\">0</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Data(Math.max(left.h, right.h)+<span class=\"number\">1</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isBalanced;</span><br><span class=\"line\">    Data(<span class=\"keyword\">int</span> h , <span class=\"keyword\">boolean</span> isBalanced)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.h = h;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isBalanced = isBalanced;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"📈-优化\"><a href=\"#📈-优化\" class=\"headerlink\" title=\"📈 优化\"></a>📈 优化</h3><p>在把思路理清并写出了上面的代码之后，可以再简化代码，具体的是简化返回的内容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBalanced</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//高度差小于1 -- 需要的值有 当前树的高度,是否平衡</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> process(root) != -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">process</span><span class=\"params\">(TreeNode node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = process(node.left);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( left == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = process(node.right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( right == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Math.abs(right - left) &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(left, right)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu May 07 2020 14:20:26 GMT+0800 (中国标准时间)","title":"面试题 04.04. 检查平衡性","path":"posts/4ad52213.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>实现一个函数，检查二叉树是否平衡。在这个问题中，平衡树的定义如下：任意一个节点，其两棵子树的高度差不超过 1。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-05-07T05:58:32.509Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-07T05:58:32.509Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"程序员面试经典 > Leetcode > 二叉树","tags":["Leetcode","二叉树","递归","程序员面试经典"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1503},{"title":"红黑树基础","image":"https://gitee.com/jingshanccc/image/raw/master/image/20200722003354.png","abbrlink":"75890e6e","_content":"\n<P></p>\n\n<!-- more -->\n\n## 从2-3树开始说起\n\n### 🍉简介\n\n我们知道二分搜索树在插入元素本身是有序的情况下，其将退化成一个链表，查询效率也由O(logN)退化到O(N)，为了提升效率，将二分搜索树优化为平衡二叉树，在插入删除过程中保证左右子树的高度差不超过1，让树的高度最小。但是维护平衡也需要带来更多更复杂的操作，因此引入了2-3树。\n\n2-3树是一棵绝对平衡的树，它的结点可以有2个孩子或3个孩子，这也是其名字的由来，它满足二分搜索树的基本性质，其大小关系如下图\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003409.png)\n\n### 🍓插入操作\n\n2-3树在插入结点时不能将结点插入到一个空结点上，因为要保证其绝对平衡的性质，新的结点只能通过分裂或者融合产生。\n\n下面通过对上图的2-3树的构建过程，了解2-3树的插入操作。\n\n依次插入16-15-13-12-11-10-8-6-5\n\n1. 插入16-15-13\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003432.png)\n\n   在插入13之后，形成了一个“4结点”，于是通过**分裂**将其转变为3个2结点\n\n2. 插入12-11\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003503.png)\n\n   在插入11之后，形成了一个“4结点”，于是通过**分裂**将其转变为3个2结点，但也因此出现了不平衡，所以需要通过**融合**保证树的绝对平衡。\n\n3. 插入10-8\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003554.png)\n\n   和前面的过程类似，需要通过多次的**分裂**和**融合**来保证平衡\n\n4. 插入6->5\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003606.png)\n\n   \n\n{% note info %}\n\n可以发现，在插入过程中，2-3树通过融合和分裂两个操作的多次使用，来保证树的绝对平衡。其情况可总结为以下4种\n\n①插入一个2结点，**融合**\n\n②插入一个3结点，且是根结点，先**融合**成一个4结点，再**分裂**成三个2结点\n\n③插入一个3结点，其父亲结点是2结点，先**融合**成一个4结点，再**分裂**成三个2结点，再和父亲结点**融合**成一个3结点\n\n④插入一个3结点，其父亲结点是3结点，先**融合**成一个4结点，再**分裂**成三个2结点，再和父亲结点**融合**成一个4结点，再**分裂**成三个2结点...\n\n其实只要理解了**融合**和**分裂**两个过程，遇到具体情况再具体分析即可，不需要死记情况。\n\n{% endnote %}\n\n## 与2-3树等价的红黑树\n\n### 😯从2-3树到红黑树\n\n由于2-3树的结点并不统一，也就是2-3树的结点可能有1个元素或者2个元素，在实现上会比较复杂，于是尝试保持结点仍然只有1个元素，但是保持2-3树的思想，大体的做法是：对于2结点，不需要修改；对于3结点，将2个元素拆开，成为两个2结点；并以颜色区分2结点和3结点，2结点为黑色，3结点拆分出来的左侧（较小）的结点为红色，右侧的结点为黑色；这样实现出来的树称为红黑树。\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003617.png)\n\n### 🍉基本性质\n\n在有了2-3树的基础之后，再来看《算法导论》这本书中对于红黑树的性质介绍，就比较容易理解了。\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003626.png)\n\n1. 所有的结点或者是红色，或者是黑色。这个是红黑树本身的定义\n2. 根结点是黑色的。对于2-3树，它的根结点要么是2结点，要么是3结点，对于2结点，它本身就转化为黑色结点；对于3结点，我们将右侧作为父亲结点，左侧作为孩子结点，并且右侧为黑色，左侧为红色；因此根结点一定是黑色的\n3. 所有叶子结点（**空结点**）都为黑色。此处的叶子结点是空结点，而不是左右子树为空的结点。当红黑树为空树时，由性质2，可知根结点为黑色，而此时根结点为空，因此也是性质3的体现\n4. 红色结点的左右孩子结点都是黑色的。在2-3树中，从3结点分离出来的红色结点，它的子树根结点只能是2结点或3结点，而经过转化之后，这个子树的根结点只能变为黑色结点，参考性质2。因此红色结点的孩子结点都是黑色的\n5. 从每一个结点到其叶子结点所经过的黑色结点数目是相同的。原因是2-3树是一棵绝对平衡的树，因此从一个结点到其叶子结点经过的结点数是相同的，而在转化成红黑树之后，无论是2结点还是3结点，都会转化出一个黑色结点\n\n#### 题外问：为什么红黑树能保持O（logN）的复杂度？\n\n因为红黑树的最大高度为2logN，出现在当有一条从根结点到叶子结点都是3结点的情况下，如果都是2结点，那么和平常的二叉树一样，都是logN，在全是3结点的时候，转化为红黑树时，一个3结点会成为一个红色结点和一个黑色结点，因此高度是2logN的，由于2是常数，在时间复杂度上仍然当作O（logN）级别。\n\n### 🍓插入操作\n\n红黑树也是一棵二分搜索树，因此插入操作的基本步骤是相同的，首先是查找要插入的位置，然后将新结点设置为红色，这一步的原因在于如果将新结点设置为黑色，就会导致从根到叶子的路径上多一个额外的黑色结点，难以调整，而连续的两个红色结点可以通过旋转和颜色翻转来调整。第三步是自下而上的调整树，使其仍为红黑树。\n\n具体的调整分为以下几种情况：\n\n1. 插入到黑色结点左侧：这种情况即相当于在2-3树中插入到2结点，融合形成3结点，而3结点转化成红黑树正好是左侧为红色、右侧为黑色，因此不需要调整\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003637.png)\n\n2. 插入到黑色结点右侧：在2-3树中仍然是和2结点融合形成3结点，因此我们只需要考虑如何将其调整为3结点转化为红黑树之后的形态，而这一步调整根据我们在AVL树中的经验，可以使用**左旋转**来实现。\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003646.png)\n\n   对应的代码为\n\n   ```java\n   private Node leftRotate(Node node){\n       Node x = node.right; //42\n       //左旋\n       node.right = x.left;\n       x.left = node;\n       //颜色\n       x.color = node.color; //当前子树的根结点从node变为x, 因此x的颜色需要变为node的颜色\n       node.color = RED;//在2-3树中的3结点转化后,左侧的结点为红色结点\n       \n       return x;//返回子树新的根结点\n   }\n   ```\n\n   \n\n3. 插入到左孩子为红色结点的黑色结点右侧：左孩子为红色结点的结点对应于2-3树中的3结点，在其右侧插入新结点后，融合形成一个”4结点“，经过分裂成为3个2结点，也就是黑色结点，其中子树根结点需要保持原来的颜色(（红色）。因此整个过程等同于根结点和其孩子结点交换颜色，称为**颜色翻转**\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003656.png)\n\n   ```java\n   private void flipColors(Node node){\n       node.color = RED;\n       node.left.color = BLACK;\n       node.right.color = BLACK;\n   }\n   ```\n\n   \n\n4. 插入到左孩子为红色结点的黑色结点左侧：相当于在2-3树中的3结点左侧插入一个新结点，为了构造出“4结点”分裂后的树，需要先经过一次**右旋**，由于根结点变为37，因此37需要保持原来根结点42的黑色，而42为了表示其作为“4结点”的一部分，需要变为红色。在经过右旋之后，就成为了情况3，因此之后需要经过一次**颜色翻转**\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003706.png)\n\n   ```java\n   private Node rightRotate(Node node){\n       //node -> 42\n       Node x = node.left; //37\n       //右旋\n       node.left = x.right;\n       x.right = node;\n       //颜色\n       x.color = node.color;\n       node.color = RED;\n       \n       return x;\n   }\n   ```\n\n   \n\n5. 插入到左孩子为红色结点的黑色结点中间：相当于在2-3树的3结点中间插入一个新结点，综合前面几种情况，可以比较快地构造出“4结点”分裂后的树，首先是先对37所在子树进行一次**左旋**，就得到了**情况4**，之后经过**右旋**，就得到了**情况3**，最后通过**颜色翻转**就可以调整为红黑树\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003716.png)\n\n可以发现，情况4和5可以通过旋转转换为情况3，因此上述的5种情况，其处理的方式可以在统一的流程里实现，即总是经过左旋->右旋->颜色翻转就可以完成对树的调整。\n\n{% note info %}\n\n当前结点右孩子为红色结点，左孩子为黑色结点，需要左旋——对应情况2\n\n{% endnote %}\n\n{% note success %}\n\n当前结点左右孩子都为红色结点，需要颜色翻转——对应情况3\n\n{% endnote %}\n\n{% note warning %}\n\n当前结点左孩子为红色结点，左孩子的左孩子为红色结点，需要右旋——情况4\n\n{% endnote %}\n\n于是，在对红黑树进行插入操作的代码如下：\n\n```java\npublic void add(K key, V value){\n    root = add(root, key, value);\n    root.color = BLACK; //保持根结点为黑色\n}\nprivate Node add(Node node, K key, V value){\n    if(node == null){\n        size ++; //维护结点数\n        return new Node(key, value, RED);//新结点总是红色的\n    }\n    //二分搜索树的查找并插入\n    if(key.compareTo(node.key) > 0){//插入到右子树\n        node.right = add(node.right, key, value);\n    }else if(key.compareTo(node.key) < 0){// 插入到左子树\n        node.left = add(node.left, key, value);\n    }else{\n        node.value = value;\n    }\n    //维护红黑树\n    if(isRed(node.right) && !isRed(node.left)){//右孩子为红色 左孩子为黑色\n        leftRotate(node);\n    }\n    if(isRed(node.left) && isRed(node.left.left)){//左孩子和左孙子为红色\n        rightRotate(node);\n    }\n    if(isRed(node.left) && isRed(node.right)){//左右都红\n        filpColors(node);\n    }\n    \n    return node;\n}\n```\n\n\n\n## 参考文章\n\n1. [数据结构之红黑树](http://dongxicheng.org/structure/red-black-tree/)\n2. [liuyubobobo《算法和数据结构》](https://class.imooc.com/datastructure)\n3. [算法导论](https://book.douban.com/subject/20432061/)\n\n","source":"_posts/红黑树.md","raw":"---\ntitle: 红黑树基础\ncategories:\n  - 数据结构\nimage: 'https://gitee.com/jingshanccc/image/raw/master/image/20200722003354.png'\nabbrlink: 75890e6e\n---\n\n<P></p>\n\n<!-- more -->\n\n## 从2-3树开始说起\n\n### 🍉简介\n\n我们知道二分搜索树在插入元素本身是有序的情况下，其将退化成一个链表，查询效率也由O(logN)退化到O(N)，为了提升效率，将二分搜索树优化为平衡二叉树，在插入删除过程中保证左右子树的高度差不超过1，让树的高度最小。但是维护平衡也需要带来更多更复杂的操作，因此引入了2-3树。\n\n2-3树是一棵绝对平衡的树，它的结点可以有2个孩子或3个孩子，这也是其名字的由来，它满足二分搜索树的基本性质，其大小关系如下图\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003409.png)\n\n### 🍓插入操作\n\n2-3树在插入结点时不能将结点插入到一个空结点上，因为要保证其绝对平衡的性质，新的结点只能通过分裂或者融合产生。\n\n下面通过对上图的2-3树的构建过程，了解2-3树的插入操作。\n\n依次插入16-15-13-12-11-10-8-6-5\n\n1. 插入16-15-13\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003432.png)\n\n   在插入13之后，形成了一个“4结点”，于是通过**分裂**将其转变为3个2结点\n\n2. 插入12-11\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003503.png)\n\n   在插入11之后，形成了一个“4结点”，于是通过**分裂**将其转变为3个2结点，但也因此出现了不平衡，所以需要通过**融合**保证树的绝对平衡。\n\n3. 插入10-8\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003554.png)\n\n   和前面的过程类似，需要通过多次的**分裂**和**融合**来保证平衡\n\n4. 插入6->5\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003606.png)\n\n   \n\n{% note info %}\n\n可以发现，在插入过程中，2-3树通过融合和分裂两个操作的多次使用，来保证树的绝对平衡。其情况可总结为以下4种\n\n①插入一个2结点，**融合**\n\n②插入一个3结点，且是根结点，先**融合**成一个4结点，再**分裂**成三个2结点\n\n③插入一个3结点，其父亲结点是2结点，先**融合**成一个4结点，再**分裂**成三个2结点，再和父亲结点**融合**成一个3结点\n\n④插入一个3结点，其父亲结点是3结点，先**融合**成一个4结点，再**分裂**成三个2结点，再和父亲结点**融合**成一个4结点，再**分裂**成三个2结点...\n\n其实只要理解了**融合**和**分裂**两个过程，遇到具体情况再具体分析即可，不需要死记情况。\n\n{% endnote %}\n\n## 与2-3树等价的红黑树\n\n### 😯从2-3树到红黑树\n\n由于2-3树的结点并不统一，也就是2-3树的结点可能有1个元素或者2个元素，在实现上会比较复杂，于是尝试保持结点仍然只有1个元素，但是保持2-3树的思想，大体的做法是：对于2结点，不需要修改；对于3结点，将2个元素拆开，成为两个2结点；并以颜色区分2结点和3结点，2结点为黑色，3结点拆分出来的左侧（较小）的结点为红色，右侧的结点为黑色；这样实现出来的树称为红黑树。\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003617.png)\n\n### 🍉基本性质\n\n在有了2-3树的基础之后，再来看《算法导论》这本书中对于红黑树的性质介绍，就比较容易理解了。\n\n![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003626.png)\n\n1. 所有的结点或者是红色，或者是黑色。这个是红黑树本身的定义\n2. 根结点是黑色的。对于2-3树，它的根结点要么是2结点，要么是3结点，对于2结点，它本身就转化为黑色结点；对于3结点，我们将右侧作为父亲结点，左侧作为孩子结点，并且右侧为黑色，左侧为红色；因此根结点一定是黑色的\n3. 所有叶子结点（**空结点**）都为黑色。此处的叶子结点是空结点，而不是左右子树为空的结点。当红黑树为空树时，由性质2，可知根结点为黑色，而此时根结点为空，因此也是性质3的体现\n4. 红色结点的左右孩子结点都是黑色的。在2-3树中，从3结点分离出来的红色结点，它的子树根结点只能是2结点或3结点，而经过转化之后，这个子树的根结点只能变为黑色结点，参考性质2。因此红色结点的孩子结点都是黑色的\n5. 从每一个结点到其叶子结点所经过的黑色结点数目是相同的。原因是2-3树是一棵绝对平衡的树，因此从一个结点到其叶子结点经过的结点数是相同的，而在转化成红黑树之后，无论是2结点还是3结点，都会转化出一个黑色结点\n\n#### 题外问：为什么红黑树能保持O（logN）的复杂度？\n\n因为红黑树的最大高度为2logN，出现在当有一条从根结点到叶子结点都是3结点的情况下，如果都是2结点，那么和平常的二叉树一样，都是logN，在全是3结点的时候，转化为红黑树时，一个3结点会成为一个红色结点和一个黑色结点，因此高度是2logN的，由于2是常数，在时间复杂度上仍然当作O（logN）级别。\n\n### 🍓插入操作\n\n红黑树也是一棵二分搜索树，因此插入操作的基本步骤是相同的，首先是查找要插入的位置，然后将新结点设置为红色，这一步的原因在于如果将新结点设置为黑色，就会导致从根到叶子的路径上多一个额外的黑色结点，难以调整，而连续的两个红色结点可以通过旋转和颜色翻转来调整。第三步是自下而上的调整树，使其仍为红黑树。\n\n具体的调整分为以下几种情况：\n\n1. 插入到黑色结点左侧：这种情况即相当于在2-3树中插入到2结点，融合形成3结点，而3结点转化成红黑树正好是左侧为红色、右侧为黑色，因此不需要调整\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003637.png)\n\n2. 插入到黑色结点右侧：在2-3树中仍然是和2结点融合形成3结点，因此我们只需要考虑如何将其调整为3结点转化为红黑树之后的形态，而这一步调整根据我们在AVL树中的经验，可以使用**左旋转**来实现。\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003646.png)\n\n   对应的代码为\n\n   ```java\n   private Node leftRotate(Node node){\n       Node x = node.right; //42\n       //左旋\n       node.right = x.left;\n       x.left = node;\n       //颜色\n       x.color = node.color; //当前子树的根结点从node变为x, 因此x的颜色需要变为node的颜色\n       node.color = RED;//在2-3树中的3结点转化后,左侧的结点为红色结点\n       \n       return x;//返回子树新的根结点\n   }\n   ```\n\n   \n\n3. 插入到左孩子为红色结点的黑色结点右侧：左孩子为红色结点的结点对应于2-3树中的3结点，在其右侧插入新结点后，融合形成一个”4结点“，经过分裂成为3个2结点，也就是黑色结点，其中子树根结点需要保持原来的颜色(（红色）。因此整个过程等同于根结点和其孩子结点交换颜色，称为**颜色翻转**\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003656.png)\n\n   ```java\n   private void flipColors(Node node){\n       node.color = RED;\n       node.left.color = BLACK;\n       node.right.color = BLACK;\n   }\n   ```\n\n   \n\n4. 插入到左孩子为红色结点的黑色结点左侧：相当于在2-3树中的3结点左侧插入一个新结点，为了构造出“4结点”分裂后的树，需要先经过一次**右旋**，由于根结点变为37，因此37需要保持原来根结点42的黑色，而42为了表示其作为“4结点”的一部分，需要变为红色。在经过右旋之后，就成为了情况3，因此之后需要经过一次**颜色翻转**\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003706.png)\n\n   ```java\n   private Node rightRotate(Node node){\n       //node -> 42\n       Node x = node.left; //37\n       //右旋\n       node.left = x.right;\n       x.right = node;\n       //颜色\n       x.color = node.color;\n       node.color = RED;\n       \n       return x;\n   }\n   ```\n\n   \n\n5. 插入到左孩子为红色结点的黑色结点中间：相当于在2-3树的3结点中间插入一个新结点，综合前面几种情况，可以比较快地构造出“4结点”分裂后的树，首先是先对37所在子树进行一次**左旋**，就得到了**情况4**，之后经过**右旋**，就得到了**情况3**，最后通过**颜色翻转**就可以调整为红黑树\n\n   ![图片](https://gitee.com/jingshanccc/image/raw/master/image/20200722003716.png)\n\n可以发现，情况4和5可以通过旋转转换为情况3，因此上述的5种情况，其处理的方式可以在统一的流程里实现，即总是经过左旋->右旋->颜色翻转就可以完成对树的调整。\n\n{% note info %}\n\n当前结点右孩子为红色结点，左孩子为黑色结点，需要左旋——对应情况2\n\n{% endnote %}\n\n{% note success %}\n\n当前结点左右孩子都为红色结点，需要颜色翻转——对应情况3\n\n{% endnote %}\n\n{% note warning %}\n\n当前结点左孩子为红色结点，左孩子的左孩子为红色结点，需要右旋——情况4\n\n{% endnote %}\n\n于是，在对红黑树进行插入操作的代码如下：\n\n```java\npublic void add(K key, V value){\n    root = add(root, key, value);\n    root.color = BLACK; //保持根结点为黑色\n}\nprivate Node add(Node node, K key, V value){\n    if(node == null){\n        size ++; //维护结点数\n        return new Node(key, value, RED);//新结点总是红色的\n    }\n    //二分搜索树的查找并插入\n    if(key.compareTo(node.key) > 0){//插入到右子树\n        node.right = add(node.right, key, value);\n    }else if(key.compareTo(node.key) < 0){// 插入到左子树\n        node.left = add(node.left, key, value);\n    }else{\n        node.value = value;\n    }\n    //维护红黑树\n    if(isRed(node.right) && !isRed(node.left)){//右孩子为红色 左孩子为黑色\n        leftRotate(node);\n    }\n    if(isRed(node.left) && isRed(node.left.left)){//左孩子和左孙子为红色\n        rightRotate(node);\n    }\n    if(isRed(node.left) && isRed(node.right)){//左右都红\n        filpColors(node);\n    }\n    \n    return node;\n}\n```\n\n\n\n## 参考文章\n\n1. [数据结构之红黑树](http://dongxicheng.org/structure/red-black-tree/)\n2. [liuyubobobo《算法和数据结构》](https://class.imooc.com/datastructure)\n3. [算法导论](https://book.douban.com/subject/20432061/)\n\n","slug":"红黑树","published":1,"date":"2020-07-18T07:39:30.855Z","updated":"2020-07-21T16:37:36.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2q004jz4ej03gc63r1","content":"<P></p>\n\n<a id=\"more\"></a>\n\n<h2 id=\"从2-3树开始说起\"><a href=\"#从2-3树开始说起\" class=\"headerlink\" title=\"从2-3树开始说起\"></a>从2-3树开始说起</h2><h3 id=\"🍉简介\"><a href=\"#🍉简介\" class=\"headerlink\" title=\"🍉简介\"></a>🍉简介</h3><p>我们知道二分搜索树在插入元素本身是有序的情况下，其将退化成一个链表，查询效率也由O(logN)退化到O(N)，为了提升效率，将二分搜索树优化为平衡二叉树，在插入删除过程中保证左右子树的高度差不超过1，让树的高度最小。但是维护平衡也需要带来更多更复杂的操作，因此引入了2-3树。</p>\n<p>2-3树是一棵绝对平衡的树，它的结点可以有2个孩子或3个孩子，这也是其名字的由来，它满足二分搜索树的基本性质，其大小关系如下图</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003409.png\" alt=\"图片\"></p>\n<h3 id=\"🍓插入操作\"><a href=\"#🍓插入操作\" class=\"headerlink\" title=\"🍓插入操作\"></a>🍓插入操作</h3><p>2-3树在插入结点时不能将结点插入到一个空结点上，因为要保证其绝对平衡的性质，新的结点只能通过分裂或者融合产生。</p>\n<p>下面通过对上图的2-3树的构建过程，了解2-3树的插入操作。</p>\n<p>依次插入16-15-13-12-11-10-8-6-5</p>\n<ol>\n<li><p>插入16-15-13</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003432.png\" alt=\"图片\"></p>\n<p>在插入13之后，形成了一个“4结点”，于是通过<strong>分裂</strong>将其转变为3个2结点</p>\n</li>\n<li><p>插入12-11</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003503.png\" alt=\"图片\"></p>\n<p>在插入11之后，形成了一个“4结点”，于是通过<strong>分裂</strong>将其转变为3个2结点，但也因此出现了不平衡，所以需要通过<strong>融合</strong>保证树的绝对平衡。</p>\n</li>\n<li><p>插入10-8</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003554.png\" alt=\"图片\"></p>\n<p>和前面的过程类似，需要通过多次的<strong>分裂</strong>和<strong>融合</strong>来保证平衡</p>\n</li>\n<li><p>插入6-&gt;5</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003606.png\" alt=\"图片\"></p>\n</li>\n</ol>\n<div class=\"note info\"><p>可以发现，在插入过程中，2-3树通过融合和分裂两个操作的多次使用，来保证树的绝对平衡。其情况可总结为以下4种</p>\n<p>①插入一个2结点，<strong>融合</strong></p>\n<p>②插入一个3结点，且是根结点，先<strong>融合</strong>成一个4结点，再<strong>分裂</strong>成三个2结点</p>\n<p>③插入一个3结点，其父亲结点是2结点，先<strong>融合</strong>成一个4结点，再<strong>分裂</strong>成三个2结点，再和父亲结点<strong>融合</strong>成一个3结点</p>\n<p>④插入一个3结点，其父亲结点是3结点，先<strong>融合</strong>成一个4结点，再<strong>分裂</strong>成三个2结点，再和父亲结点<strong>融合</strong>成一个4结点，再<strong>分裂</strong>成三个2结点…</p>\n<p>其实只要理解了<strong>融合</strong>和<strong>分裂</strong>两个过程，遇到具体情况再具体分析即可，不需要死记情况。</p></div>\n\n<h2 id=\"与2-3树等价的红黑树\"><a href=\"#与2-3树等价的红黑树\" class=\"headerlink\" title=\"与2-3树等价的红黑树\"></a>与2-3树等价的红黑树</h2><h3 id=\"😯从2-3树到红黑树\"><a href=\"#😯从2-3树到红黑树\" class=\"headerlink\" title=\"😯从2-3树到红黑树\"></a>😯从2-3树到红黑树</h3><p>由于2-3树的结点并不统一，也就是2-3树的结点可能有1个元素或者2个元素，在实现上会比较复杂，于是尝试保持结点仍然只有1个元素，但是保持2-3树的思想，大体的做法是：对于2结点，不需要修改；对于3结点，将2个元素拆开，成为两个2结点；并以颜色区分2结点和3结点，2结点为黑色，3结点拆分出来的左侧（较小）的结点为红色，右侧的结点为黑色；这样实现出来的树称为红黑树。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003617.png\" alt=\"图片\"></p>\n<h3 id=\"🍉基本性质\"><a href=\"#🍉基本性质\" class=\"headerlink\" title=\"🍉基本性质\"></a>🍉基本性质</h3><p>在有了2-3树的基础之后，再来看《算法导论》这本书中对于红黑树的性质介绍，就比较容易理解了。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003626.png\" alt=\"图片\"></p>\n<ol>\n<li>所有的结点或者是红色，或者是黑色。这个是红黑树本身的定义</li>\n<li>根结点是黑色的。对于2-3树，它的根结点要么是2结点，要么是3结点，对于2结点，它本身就转化为黑色结点；对于3结点，我们将右侧作为父亲结点，左侧作为孩子结点，并且右侧为黑色，左侧为红色；因此根结点一定是黑色的</li>\n<li>所有叶子结点（<strong>空结点</strong>）都为黑色。此处的叶子结点是空结点，而不是左右子树为空的结点。当红黑树为空树时，由性质2，可知根结点为黑色，而此时根结点为空，因此也是性质3的体现</li>\n<li>红色结点的左右孩子结点都是黑色的。在2-3树中，从3结点分离出来的红色结点，它的子树根结点只能是2结点或3结点，而经过转化之后，这个子树的根结点只能变为黑色结点，参考性质2。因此红色结点的孩子结点都是黑色的</li>\n<li>从每一个结点到其叶子结点所经过的黑色结点数目是相同的。原因是2-3树是一棵绝对平衡的树，因此从一个结点到其叶子结点经过的结点数是相同的，而在转化成红黑树之后，无论是2结点还是3结点，都会转化出一个黑色结点</li>\n</ol>\n<h4 id=\"题外问：为什么红黑树能保持O（logN）的复杂度？\"><a href=\"#题外问：为什么红黑树能保持O（logN）的复杂度？\" class=\"headerlink\" title=\"题外问：为什么红黑树能保持O（logN）的复杂度？\"></a>题外问：为什么红黑树能保持O（logN）的复杂度？</h4><p>因为红黑树的最大高度为2logN，出现在当有一条从根结点到叶子结点都是3结点的情况下，如果都是2结点，那么和平常的二叉树一样，都是logN，在全是3结点的时候，转化为红黑树时，一个3结点会成为一个红色结点和一个黑色结点，因此高度是2logN的，由于2是常数，在时间复杂度上仍然当作O（logN）级别。</p>\n<h3 id=\"🍓插入操作-1\"><a href=\"#🍓插入操作-1\" class=\"headerlink\" title=\"🍓插入操作\"></a>🍓插入操作</h3><p>红黑树也是一棵二分搜索树，因此插入操作的基本步骤是相同的，首先是查找要插入的位置，然后将新结点设置为红色，这一步的原因在于如果将新结点设置为黑色，就会导致从根到叶子的路径上多一个额外的黑色结点，难以调整，而连续的两个红色结点可以通过旋转和颜色翻转来调整。第三步是自下而上的调整树，使其仍为红黑树。</p>\n<p>具体的调整分为以下几种情况：</p>\n<ol>\n<li><p>插入到黑色结点左侧：这种情况即相当于在2-3树中插入到2结点，融合形成3结点，而3结点转化成红黑树正好是左侧为红色、右侧为黑色，因此不需要调整</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003637.png\" alt=\"图片\"></p>\n</li>\n<li><p>插入到黑色结点右侧：在2-3树中仍然是和2结点融合形成3结点，因此我们只需要考虑如何将其调整为3结点转化为红黑树之后的形态，而这一步调整根据我们在AVL树中的经验，可以使用<strong>左旋转</strong>来实现。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003646.png\" alt=\"图片\"></p>\n<p>对应的代码为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">leftRotate</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">    Node x = node.right; <span class=\"comment\">//42</span></span><br><span class=\"line\">    <span class=\"comment\">//左旋</span></span><br><span class=\"line\">    node.right = x.left;</span><br><span class=\"line\">    x.left = node;</span><br><span class=\"line\">    <span class=\"comment\">//颜色</span></span><br><span class=\"line\">    x.color = node.color; <span class=\"comment\">//当前子树的根结点从node变为x, 因此x的颜色需要变为node的颜色</span></span><br><span class=\"line\">    node.color = RED;<span class=\"comment\">//在2-3树中的3结点转化后,左侧的结点为红色结点</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;<span class=\"comment\">//返回子树新的根结点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>插入到左孩子为红色结点的黑色结点右侧：左孩子为红色结点的结点对应于2-3树中的3结点，在其右侧插入新结点后，融合形成一个”4结点“，经过分裂成为3个2结点，也就是黑色结点，其中子树根结点需要保持原来的颜色(（红色）。因此整个过程等同于根结点和其孩子结点交换颜色，称为<strong>颜色翻转</strong></p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003656.png\" alt=\"图片\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flipColors</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">    node.color = RED;</span><br><span class=\"line\">    node.left.color = BLACK;</span><br><span class=\"line\">    node.right.color = BLACK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>插入到左孩子为红色结点的黑色结点左侧：相当于在2-3树中的3结点左侧插入一个新结点，为了构造出“4结点”分裂后的树，需要先经过一次<strong>右旋</strong>，由于根结点变为37，因此37需要保持原来根结点42的黑色，而42为了表示其作为“4结点”的一部分，需要变为红色。在经过右旋之后，就成为了情况3，因此之后需要经过一次<strong>颜色翻转</strong></p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003706.png\" alt=\"图片\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rightRotate</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//node -&gt; 42</span></span><br><span class=\"line\">    Node x = node.left; <span class=\"comment\">//37</span></span><br><span class=\"line\">    <span class=\"comment\">//右旋</span></span><br><span class=\"line\">    node.left = x.right;</span><br><span class=\"line\">    x.right = node;</span><br><span class=\"line\">    <span class=\"comment\">//颜色</span></span><br><span class=\"line\">    x.color = node.color;</span><br><span class=\"line\">    node.color = RED;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>插入到左孩子为红色结点的黑色结点中间：相当于在2-3树的3结点中间插入一个新结点，综合前面几种情况，可以比较快地构造出“4结点”分裂后的树，首先是先对37所在子树进行一次<strong>左旋</strong>，就得到了<strong>情况4</strong>，之后经过<strong>右旋</strong>，就得到了<strong>情况3</strong>，最后通过<strong>颜色翻转</strong>就可以调整为红黑树</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003716.png\" alt=\"图片\"></p>\n</li>\n</ol>\n<p>可以发现，情况4和5可以通过旋转转换为情况3，因此上述的5种情况，其处理的方式可以在统一的流程里实现，即总是经过左旋-&gt;右旋-&gt;颜色翻转就可以完成对树的调整。</p>\n<div class=\"note info\"><p>当前结点右孩子为红色结点，左孩子为黑色结点，需要左旋——对应情况2</p></div>\n\n<div class=\"note success\"><p>当前结点左右孩子都为红色结点，需要颜色翻转——对应情况3</p></div>\n\n<div class=\"note warning\"><p>当前结点左孩子为红色结点，左孩子的左孩子为红色结点，需要右旋——情况4</p></div>\n\n<p>于是，在对红黑树进行插入操作的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(K key, V value)</span></span>&#123;</span><br><span class=\"line\">    root = add(root, key, value);</span><br><span class=\"line\">    root.color = BLACK; <span class=\"comment\">//保持根结点为黑色</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">add</span><span class=\"params\">(Node node, K key, V value)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        size ++; <span class=\"comment\">//维护结点数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, value, RED);<span class=\"comment\">//新结点总是红色的</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//二分搜索树的查找并插入</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key.compareTo(node.key) &gt; <span class=\"number\">0</span>)&#123;<span class=\"comment\">//插入到右子树</span></span><br><span class=\"line\">        node.right = add(node.right, key, value);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key.compareTo(node.key) &lt; <span class=\"number\">0</span>)&#123;<span class=\"comment\">// 插入到左子树</span></span><br><span class=\"line\">        node.left = add(node.left, key, value);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        node.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//维护红黑树</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isRed(node.right) &amp;&amp; !isRed(node.left))&#123;<span class=\"comment\">//右孩子为红色 左孩子为黑色</span></span><br><span class=\"line\">        leftRotate(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isRed(node.left) &amp;&amp; isRed(node.left.left))&#123;<span class=\"comment\">//左孩子和左孙子为红色</span></span><br><span class=\"line\">        rightRotate(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isRed(node.left) &amp;&amp; isRed(node.right))&#123;<span class=\"comment\">//左右都红</span></span><br><span class=\"line\">        filpColors(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ol>\n<li><a href=\"http://dongxicheng.org/structure/red-black-tree/\" target=\"_blank\" rel=\"noopener\">数据结构之红黑树</a></li>\n<li><a href=\"https://class.imooc.com/datastructure\" target=\"_blank\" rel=\"noopener\">liuyubobobo《算法和数据结构》</a></li>\n<li><a href=\"https://book.douban.com/subject/20432061/\" target=\"_blank\" rel=\"noopener\">算法导论</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<P></p>","more":"<h2 id=\"从2-3树开始说起\"><a href=\"#从2-3树开始说起\" class=\"headerlink\" title=\"从2-3树开始说起\"></a>从2-3树开始说起</h2><h3 id=\"🍉简介\"><a href=\"#🍉简介\" class=\"headerlink\" title=\"🍉简介\"></a>🍉简介</h3><p>我们知道二分搜索树在插入元素本身是有序的情况下，其将退化成一个链表，查询效率也由O(logN)退化到O(N)，为了提升效率，将二分搜索树优化为平衡二叉树，在插入删除过程中保证左右子树的高度差不超过1，让树的高度最小。但是维护平衡也需要带来更多更复杂的操作，因此引入了2-3树。</p>\n<p>2-3树是一棵绝对平衡的树，它的结点可以有2个孩子或3个孩子，这也是其名字的由来，它满足二分搜索树的基本性质，其大小关系如下图</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003409.png\" alt=\"图片\"></p>\n<h3 id=\"🍓插入操作\"><a href=\"#🍓插入操作\" class=\"headerlink\" title=\"🍓插入操作\"></a>🍓插入操作</h3><p>2-3树在插入结点时不能将结点插入到一个空结点上，因为要保证其绝对平衡的性质，新的结点只能通过分裂或者融合产生。</p>\n<p>下面通过对上图的2-3树的构建过程，了解2-3树的插入操作。</p>\n<p>依次插入16-15-13-12-11-10-8-6-5</p>\n<ol>\n<li><p>插入16-15-13</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003432.png\" alt=\"图片\"></p>\n<p>在插入13之后，形成了一个“4结点”，于是通过<strong>分裂</strong>将其转变为3个2结点</p>\n</li>\n<li><p>插入12-11</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003503.png\" alt=\"图片\"></p>\n<p>在插入11之后，形成了一个“4结点”，于是通过<strong>分裂</strong>将其转变为3个2结点，但也因此出现了不平衡，所以需要通过<strong>融合</strong>保证树的绝对平衡。</p>\n</li>\n<li><p>插入10-8</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003554.png\" alt=\"图片\"></p>\n<p>和前面的过程类似，需要通过多次的<strong>分裂</strong>和<strong>融合</strong>来保证平衡</p>\n</li>\n<li><p>插入6-&gt;5</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003606.png\" alt=\"图片\"></p>\n</li>\n</ol>\n<div class=\"note info\"><p>可以发现，在插入过程中，2-3树通过融合和分裂两个操作的多次使用，来保证树的绝对平衡。其情况可总结为以下4种</p>\n<p>①插入一个2结点，<strong>融合</strong></p>\n<p>②插入一个3结点，且是根结点，先<strong>融合</strong>成一个4结点，再<strong>分裂</strong>成三个2结点</p>\n<p>③插入一个3结点，其父亲结点是2结点，先<strong>融合</strong>成一个4结点，再<strong>分裂</strong>成三个2结点，再和父亲结点<strong>融合</strong>成一个3结点</p>\n<p>④插入一个3结点，其父亲结点是3结点，先<strong>融合</strong>成一个4结点，再<strong>分裂</strong>成三个2结点，再和父亲结点<strong>融合</strong>成一个4结点，再<strong>分裂</strong>成三个2结点…</p>\n<p>其实只要理解了<strong>融合</strong>和<strong>分裂</strong>两个过程，遇到具体情况再具体分析即可，不需要死记情况。</p></div>\n\n<h2 id=\"与2-3树等价的红黑树\"><a href=\"#与2-3树等价的红黑树\" class=\"headerlink\" title=\"与2-3树等价的红黑树\"></a>与2-3树等价的红黑树</h2><h3 id=\"😯从2-3树到红黑树\"><a href=\"#😯从2-3树到红黑树\" class=\"headerlink\" title=\"😯从2-3树到红黑树\"></a>😯从2-3树到红黑树</h3><p>由于2-3树的结点并不统一，也就是2-3树的结点可能有1个元素或者2个元素，在实现上会比较复杂，于是尝试保持结点仍然只有1个元素，但是保持2-3树的思想，大体的做法是：对于2结点，不需要修改；对于3结点，将2个元素拆开，成为两个2结点；并以颜色区分2结点和3结点，2结点为黑色，3结点拆分出来的左侧（较小）的结点为红色，右侧的结点为黑色；这样实现出来的树称为红黑树。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003617.png\" alt=\"图片\"></p>\n<h3 id=\"🍉基本性质\"><a href=\"#🍉基本性质\" class=\"headerlink\" title=\"🍉基本性质\"></a>🍉基本性质</h3><p>在有了2-3树的基础之后，再来看《算法导论》这本书中对于红黑树的性质介绍，就比较容易理解了。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003626.png\" alt=\"图片\"></p>\n<ol>\n<li>所有的结点或者是红色，或者是黑色。这个是红黑树本身的定义</li>\n<li>根结点是黑色的。对于2-3树，它的根结点要么是2结点，要么是3结点，对于2结点，它本身就转化为黑色结点；对于3结点，我们将右侧作为父亲结点，左侧作为孩子结点，并且右侧为黑色，左侧为红色；因此根结点一定是黑色的</li>\n<li>所有叶子结点（<strong>空结点</strong>）都为黑色。此处的叶子结点是空结点，而不是左右子树为空的结点。当红黑树为空树时，由性质2，可知根结点为黑色，而此时根结点为空，因此也是性质3的体现</li>\n<li>红色结点的左右孩子结点都是黑色的。在2-3树中，从3结点分离出来的红色结点，它的子树根结点只能是2结点或3结点，而经过转化之后，这个子树的根结点只能变为黑色结点，参考性质2。因此红色结点的孩子结点都是黑色的</li>\n<li>从每一个结点到其叶子结点所经过的黑色结点数目是相同的。原因是2-3树是一棵绝对平衡的树，因此从一个结点到其叶子结点经过的结点数是相同的，而在转化成红黑树之后，无论是2结点还是3结点，都会转化出一个黑色结点</li>\n</ol>\n<h4 id=\"题外问：为什么红黑树能保持O（logN）的复杂度？\"><a href=\"#题外问：为什么红黑树能保持O（logN）的复杂度？\" class=\"headerlink\" title=\"题外问：为什么红黑树能保持O（logN）的复杂度？\"></a>题外问：为什么红黑树能保持O（logN）的复杂度？</h4><p>因为红黑树的最大高度为2logN，出现在当有一条从根结点到叶子结点都是3结点的情况下，如果都是2结点，那么和平常的二叉树一样，都是logN，在全是3结点的时候，转化为红黑树时，一个3结点会成为一个红色结点和一个黑色结点，因此高度是2logN的，由于2是常数，在时间复杂度上仍然当作O（logN）级别。</p>\n<h3 id=\"🍓插入操作-1\"><a href=\"#🍓插入操作-1\" class=\"headerlink\" title=\"🍓插入操作\"></a>🍓插入操作</h3><p>红黑树也是一棵二分搜索树，因此插入操作的基本步骤是相同的，首先是查找要插入的位置，然后将新结点设置为红色，这一步的原因在于如果将新结点设置为黑色，就会导致从根到叶子的路径上多一个额外的黑色结点，难以调整，而连续的两个红色结点可以通过旋转和颜色翻转来调整。第三步是自下而上的调整树，使其仍为红黑树。</p>\n<p>具体的调整分为以下几种情况：</p>\n<ol>\n<li><p>插入到黑色结点左侧：这种情况即相当于在2-3树中插入到2结点，融合形成3结点，而3结点转化成红黑树正好是左侧为红色、右侧为黑色，因此不需要调整</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003637.png\" alt=\"图片\"></p>\n</li>\n<li><p>插入到黑色结点右侧：在2-3树中仍然是和2结点融合形成3结点，因此我们只需要考虑如何将其调整为3结点转化为红黑树之后的形态，而这一步调整根据我们在AVL树中的经验，可以使用<strong>左旋转</strong>来实现。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003646.png\" alt=\"图片\"></p>\n<p>对应的代码为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">leftRotate</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">    Node x = node.right; <span class=\"comment\">//42</span></span><br><span class=\"line\">    <span class=\"comment\">//左旋</span></span><br><span class=\"line\">    node.right = x.left;</span><br><span class=\"line\">    x.left = node;</span><br><span class=\"line\">    <span class=\"comment\">//颜色</span></span><br><span class=\"line\">    x.color = node.color; <span class=\"comment\">//当前子树的根结点从node变为x, 因此x的颜色需要变为node的颜色</span></span><br><span class=\"line\">    node.color = RED;<span class=\"comment\">//在2-3树中的3结点转化后,左侧的结点为红色结点</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;<span class=\"comment\">//返回子树新的根结点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>插入到左孩子为红色结点的黑色结点右侧：左孩子为红色结点的结点对应于2-3树中的3结点，在其右侧插入新结点后，融合形成一个”4结点“，经过分裂成为3个2结点，也就是黑色结点，其中子树根结点需要保持原来的颜色(（红色）。因此整个过程等同于根结点和其孩子结点交换颜色，称为<strong>颜色翻转</strong></p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003656.png\" alt=\"图片\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flipColors</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">    node.color = RED;</span><br><span class=\"line\">    node.left.color = BLACK;</span><br><span class=\"line\">    node.right.color = BLACK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>插入到左孩子为红色结点的黑色结点左侧：相当于在2-3树中的3结点左侧插入一个新结点，为了构造出“4结点”分裂后的树，需要先经过一次<strong>右旋</strong>，由于根结点变为37，因此37需要保持原来根结点42的黑色，而42为了表示其作为“4结点”的一部分，需要变为红色。在经过右旋之后，就成为了情况3，因此之后需要经过一次<strong>颜色翻转</strong></p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003706.png\" alt=\"图片\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rightRotate</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//node -&gt; 42</span></span><br><span class=\"line\">    Node x = node.left; <span class=\"comment\">//37</span></span><br><span class=\"line\">    <span class=\"comment\">//右旋</span></span><br><span class=\"line\">    node.left = x.right;</span><br><span class=\"line\">    x.right = node;</span><br><span class=\"line\">    <span class=\"comment\">//颜色</span></span><br><span class=\"line\">    x.color = node.color;</span><br><span class=\"line\">    node.color = RED;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>插入到左孩子为红色结点的黑色结点中间：相当于在2-3树的3结点中间插入一个新结点，综合前面几种情况，可以比较快地构造出“4结点”分裂后的树，首先是先对37所在子树进行一次<strong>左旋</strong>，就得到了<strong>情况4</strong>，之后经过<strong>右旋</strong>，就得到了<strong>情况3</strong>，最后通过<strong>颜色翻转</strong>就可以调整为红黑树</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003716.png\" alt=\"图片\"></p>\n</li>\n</ol>\n<p>可以发现，情况4和5可以通过旋转转换为情况3，因此上述的5种情况，其处理的方式可以在统一的流程里实现，即总是经过左旋-&gt;右旋-&gt;颜色翻转就可以完成对树的调整。</p>\n<div class=\"note info\"><p>当前结点右孩子为红色结点，左孩子为黑色结点，需要左旋——对应情况2</p></div>\n\n<div class=\"note success\"><p>当前结点左右孩子都为红色结点，需要颜色翻转——对应情况3</p></div>\n\n<div class=\"note warning\"><p>当前结点左孩子为红色结点，左孩子的左孩子为红色结点，需要右旋——情况4</p></div>\n\n<p>于是，在对红黑树进行插入操作的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(K key, V value)</span></span>&#123;</span><br><span class=\"line\">    root = add(root, key, value);</span><br><span class=\"line\">    root.color = BLACK; <span class=\"comment\">//保持根结点为黑色</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">add</span><span class=\"params\">(Node node, K key, V value)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        size ++; <span class=\"comment\">//维护结点数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Node(key, value, RED);<span class=\"comment\">//新结点总是红色的</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//二分搜索树的查找并插入</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key.compareTo(node.key) &gt; <span class=\"number\">0</span>)&#123;<span class=\"comment\">//插入到右子树</span></span><br><span class=\"line\">        node.right = add(node.right, key, value);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key.compareTo(node.key) &lt; <span class=\"number\">0</span>)&#123;<span class=\"comment\">// 插入到左子树</span></span><br><span class=\"line\">        node.left = add(node.left, key, value);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        node.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//维护红黑树</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isRed(node.right) &amp;&amp; !isRed(node.left))&#123;<span class=\"comment\">//右孩子为红色 左孩子为黑色</span></span><br><span class=\"line\">        leftRotate(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isRed(node.left) &amp;&amp; isRed(node.left.left))&#123;<span class=\"comment\">//左孩子和左孙子为红色</span></span><br><span class=\"line\">        rightRotate(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isRed(node.left) &amp;&amp; isRed(node.right))&#123;<span class=\"comment\">//左右都红</span></span><br><span class=\"line\">        filpColors(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ol>\n<li><a href=\"http://dongxicheng.org/structure/red-black-tree/\" target=\"_blank\" rel=\"noopener\">数据结构之红黑树</a></li>\n<li><a href=\"https://class.imooc.com/datastructure\" target=\"_blank\" rel=\"noopener\">liuyubobobo《算法和数据结构》</a></li>\n<li><a href=\"https://book.douban.com/subject/20432061/\" target=\"_blank\" rel=\"noopener\">算法导论</a></li>\n</ol>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722003409.png","popularPost_tmp_gaData":{"updated":"Wed Jul 22 2020 00:37:36 GMT+0800 (中国标准时间)","title":"红黑树基础","path":"posts/75890e6e.html","eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722003409.png","excerpt":"<P></p>","date":{"_isAMomentObject":true,"_i":"2020-07-18T07:39:30.855Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-07-18T07:39:30.855Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"数据结构","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3880},{"title":"计算机网络面试问题","image":"https://gitee.com/jingshanccc/image/raw/master/image/20200722003754.jpg","abbrlink":"f4828e27","_content":"\n<p>\n\n<!-- more -->\n\n## 计算机网络体系结构\n\n{% note info %}\n\nOSI标准是七层模型，TCP/IP中是四层模型\n\n​    **物理层**：完成数模转换和模数转换。网卡\n\n​    **数据链路层**：有错误检测和纠正机制。交换机，ARP协议\n\n​    **网络层**：解决不同子网的通信问题。路由器，RIP协议\n\n​    **传输层**：保证数据段有效到达对端。TCP,UDP协议\n\n​    **会话层**：不同实体建立和使用连接（会话）。全双工、半双工、单工\n\n​    **表示层**：数据的表示方式。编解码、加解密、压缩\n\n​    **应用层**：为用户直接提供服务。FTP(21)、SSH(22)、SMTP和POP3、HTTP(80)、DNS(53)\n\n{% endnote %}\n\n### 什么是RIP协议？\n\nRIP是距离矢量路由协议，每个路由器维护一张表，记录自己和其他路由器之间的距离，在进行路由的时候优先选择距离短的。通过和相邻路由器交换信息更新表。\n\n### IP地址的分类\n\nIP地址由网络号和主机号组成，共四个字节。根据网络号所占的字节数划分为ABCDE五类网。A类网网络号占一个字节，B类占两个字节，以此类推。\n\n<details>\n    <summary>子网划分</summary>\n    从主机号借用若干位成为子网号，数据报仍根据网络号找到目的网络，由路由器根据网络号和子网号找到目的子网，通过子网掩码和目的地址逐位与操作，得到子网地址。\n</details>\n\n\n### 什么是ARP协议\n\nARP是地址解析协议，完成了IP地址到物理地址的映射。每一个主机都有一张高速缓存映射表，里面记录了所在局域网内的其他主机和路由器的IP地址和物理地址。当主机需要发送数据包时，将查找自己的ARP缓存，如果能找到目的主机的记录，则直接发送，否则将向所在局域网广播一个ARP请求包，包含自己和目的主机的IP和MAC地址。收到请求的主机将检查自己是不是目的主机，如果是则保存源主机的IP和MAC地址，然后向源主机发送ARP响应，包含自己的IP和MAC地址。如果源主机请求的目的地址不在当前网络，将通过路由器转发到其他局域网进行查找。\n\n### 什么是NAT？\n\nNAT是网络地址转换，由NAT路由器将内网中的本地主机IP转换为全球IP地址，让内网中的主机和因特网中的主机进行通信。\n\n## 什么是三次握手？\n\n{% note info %}\n\n三次握手是遵循TCP协议的通信双方建立连接的过程。\n\n第一次握手：客户端发起连接请求，发送SYN=1，初始化序列号为x的数据包给服务端，进入SYN_SENT状态。\n\n第二次握手：服务端接收请求连接报文，并发送确认包，确认序列号为x+1，同时将SYN位置1，并初始化自己的序列号为y发送给客户端，进入SYN_RECV状态。\n\n第三次握手：客户端接收到确认和请求连接报文，检查确认标志位ACK是否为1，确认序列号是否为x+1，检查正确后，发送确认报文，确认序列号为y+1，进入established状态。服务端接收到确认报文，检查ACK和ack number正确后，进入established状态。三次握手结束，连接建立。\n\n{% endnote %}\n\n### TCP建立连接可以两次握手吗？\n\n{% fold 查看答案 %}\n\n不可以，主要有以下两个原因。\n\n- 两次握手容易造成服务端连接资源浪费的情况，当客户端发送的第一次握手消息由于网络等原因延迟了，客户端会重新发送握手消息，然后成功完成通信并释放连接。此时延迟的握手消息到达了服务端，如果只有两次握手，服务端再接收到这个消息时就会发送确认并建立连接等待接收客户端的数据，但此时客户端并没有想要建立连接，因此服务端的连接资源也就白白浪费了。采用三次握手则可以避免这种情况。\n\n- 三次握手可以确保通信双方成功互换初始序列号，这是后续通信时确认应答和超时重传的基础，保证TCP的可靠性。\n\n{% endfold %}\n\n### 初始序列号是什么？\n\n{% fold 查看答案 %}\n\n发起连接的一方会生成一个32位的序列号作为初始序列号发送给对端，对端也会发送自己的初始序列号。初始序列号作为原点，对要传输的数据进行编号。根据发送序列号和确认序列号，发送方可以知道接收方已确认接收的数据，接收方可以验证哪些数据编号是合法的。\n\n{% endfold %}\n\n### 序列号回绕如何解决？\n\n由于初始序列号是随机生成的，因此在传输过程中，可能出现序列号回到0的情况，称为回绕。因为TCP判断丢包和乱序是通过序列号大小来判断的，因此需要解决回绕问题。内核处理回绕的解决方案是` (__s32)(seq1-seq2) < 0;`，将相减结果转为有符号数，如果发生了回绕，转为的有符号数小于0。\n\n### TCP建立连接可以四次握手吗？\n\n{% fold 查看答案 %}\n\n可以，其实三次握手中的第二次握手，服务端将确认和请求连接的消息放在一个报文里，将这个过程拆分成两次握手，就是四次握手。但是这样也浪费了资源\n\n{% endfold %}\n\n### 第三次握手中，如果客户端的ACK未到达服务端，会怎样？\n\n{% fold 查看答案 %}\n\n服务端如果没有接收到客户端的确认，则会重传第二次握手消息，默认可重传5次，如果都没有接收到确认，就进入CLOSED状态；如果接收到确认，就建立连接。\n\n服务端进入CLOSED状态之后，再接收到客户端的数据，将会以RST包响应。\n\n{% endfold %}\n\n### 建立连接后，如果客户端出现故障，会怎样？\n\n{% fold 查看答案 %}\n\n服务端每接收到客户端一个报文之后，就会重置自己的计时器，通常是两小时，如果在这期间都没有接收到客户端的数据，则会发送一个探测报文，之后每隔75秒发送一次，如果发送了10次都没有响应，则判断客户端出现故障，就会关闭连接。\n\n{% endfold %}\n\n## 什么是四次挥手？\n\n{% note info %}\n\n四次挥手是遵循TCP协议的通信双方释放连接的过程\n\n第一次挥手：客户端完成了数据的传输，发起释放连接请求，FIN=1，序列号为x，进入FIN_WAIT1状态。\n\n第二次挥手：服务端接收到请求后，发送确认报文，进入CLOSE_WAIT状态。客户端接收到确认报文后，进入FIN_WAIT2状态。\n\n第三次挥手：服务端也完成了数据的发送，发送释放连接报文，进入LAST_ACK状态。\n\n第四次挥手：客户端接收到释放连接请求，发送确认报文，进入TIME_WAIT状态，等待2MSL时间后，释放连接，进入CLOSED状态。服务端接收到确认报文后，释放连接，进入CLOSED状态。\n\n{% endnote %}\n\n### 为什么不能三次挥手？服务端的CLOSE_WAIT状态有什么意义？\n\n{% fold 查看答案 %}\n\n客户端发起释放连接的请求只能确认客户端没有数据要进行传输了，但此时服务端可能还有未发送的数据，CLOSE_WAIT状态用来等待服务端数据也发送完毕再释放连接。\n\n{% endfold %}\n\n### TIME_WAIT状态的意义？\n\n{% fold 查看答案 %}\n\n第四次挥手，客户端的ACK可能会丢失，TIME_WAIT状态用来重发可能丢失的ACK。如果服务端没有接收到ACK，则会重发FIN报文。TIME_WAIT的时长是2MSL，MSL就是报文段在网络中的最长存活时间。客户端的ACK在一个MSL内没到达服务端，服务端就会重发FIN，这个重发的FIN最长存活时间也是MSL，那么在2MSL时间内都没有接收到服务端重发的FIN，则认为ACK已经成功到达服务端。\n\n{% endfold %}\n\n### 出现大量TIME_WAIT状态？\n\n{% fold 查看答案 %}\n\n在高并发短连接的TCP服务器上，由于业务处理和数据传输的时间**远小于**TIME_WAIT超时时间，因此当服务器处理完请求后立刻主动正常关闭连接，就会出现大量TIME_WAIT状态。这是会占用这服务器的资源，因为端口是**有限**的，所以并发高时会有部分客户端无法连接到服务器\n\n{% endfold %}\n\n## TCP如何进行流量控制？\n\n{% note info %}\n\n使用滑动窗口协议来实现流量控制。接收方根据自己缓冲区的情况，动态调整接收窗口大小，并将接收窗口大小放在ACK报文中发送给发送方。发送方的发送窗口大小不能超过接收窗口，防止发送速率太快，接收方缓冲区不够导致溢出。当发送方接收到确认之后，将窗口向右滑动。\n\n{% endnote %}\n\n### 什么是”零窗口“？\n\n当接收方无法接受新数据时，就会将接收窗口大小设为0，发送方将会停止发送数据，并通过1字节大小的探测报文来检查接收窗口的变化，当接收窗口>0时，就恢复数据发送。\n\n## TCP如何进行拥塞控制？\n\n拥塞控制主要通过四个算法实现，分别是慢开始、拥塞避免、快重传、快恢复。\n\n![拥塞控制](https://gitee.com/jingshanccc/image/raw/master/image/20200722003811.jpg)\n\n{% note info %}\n\n**慢开始**：刚开始发送数据时，将拥塞窗口大小设置为1MSS，最大报文段长度，之后每收到一个确认ACK，就将窗口增大1个MSS，这样窗口大小随着传输轮次呈指数增长。\n\n**拥塞避免**：当慢开始执行到窗口大小等于慢开始门限时，将减缓窗口增大速度，每个传输轮次线性增长。\n\n**快重传**：快重传要求接收方在接收到一个失序的报文段后立即发出重复确认。当发送方连续接收到三个重复确认，就要立即重传失序的报文段而不必等待为该报文段设置的重传计时器的超时。\n\n**快恢复**：当发送方接收到三个重复确认时，就把慢开始门限减小为此时拥塞窗口的一半，然后执行拥塞避免算法。\n\n出现**重传**的两种情况：\n\n超时未接收到ACK：发送方在发送完一个报文段时，会启动一个计时器，当超时未接受到ACK时，则会重新传输该报文段。在这种情况下，发送方认为网络状况不佳，因此将慢开始门限设置为拥塞窗口的一半，拥塞窗口设置为初值，重新执行慢开始算法。\n\n接收到3个重复确认：此时由于可以接收到3个重复确认，因此网络没有出现拥塞，此时将慢开始门限减小为拥塞窗口的一半，但可以适当增大拥塞窗口，然后执行拥塞避免算法。\n\n{% endnote %}\n\n## TCP和UDP的区别？\n\n{% note info %}\n\nTCP面向连接，UDP面向无连接，即UDP传输数据前不需要建立连接\n\nTCP是可靠的，UDP是不可靠的，因为UDP接收方不需要发送确认，也就没有确认重传等机制\n\nTCP有拥塞控制，在网络拥塞时控制发送速率，UDP不会因为网络的拥塞而减小发送速率，这在实时应用中是很重要的\n\nTCP只支持点对点通信，UDP支持一对一、一对多、多对一、多对多\n\nTCP是面向字节流的，一个数据包可以以字节为单位拆分成多个组发送，UDP是面向数据报文的，一个报文只能一次发完。\n\nTCP的报文首部20字节，比UDP8字节开销更大。\n\n{% endnote %}\n\n### 什么时候使用TCP，什么时候使用UDP？\n\n在实时性要求高、可以容忍传输错误的应用中，如直播、游戏、即时通信，使用UDP。其他情况使用可靠的TCP。\n\n### HTTP可以使用UDP吗？\n\n以前来说不可以，HTTP需要可靠的传输协议，UDP不可靠。而新的HTTP/3基于QUIC协议（Quick UDP Internet Connection），不再使用TCP，在UDP的基础上增加拥塞控制和可靠性等。\n\n## TCP如何保证传输的可靠性？\n\n{% note info %}\n\n奇偶校验和：检查数据包是否出错\n\n乱序重排：正确接收数据\n\n丢弃重复包：正确接收数据\n\n确认应答机制：发送确认让发送方知道数据已被成功接收\n\n超时重传机制：未被接收的数据重新发送\n\n流量控制：控制发送速率避免接收方缓冲区发生溢出\n\n{% endnote %}\n\n## HTTP和HTTPS的区别？\n\n{% note info %}\n\nHTTP默认使用80端口，HTTPS使用443端口\n\nHTTP使用明文传输，HTTPS运行于SSL协议之上，有加密和认证机制，更加安全\n\nHTTPS加解密过程需要消耗更多的CPU和内存\n\nHTTPS需要向证书颁发机构CA购买证书\n\n{% endnote %}\n\n### HTTPS建立连接的过程？\n\n{% fold 查看答案 %}\n\n- 浏览器向服务端发送连接请求，消息内容包含自己支持的加密规则（对称加密、非对称加密、摘要算法）\n- 服务端接收到请求后，选择一套加密规则，生成非对称加密的公钥，和证书一起发送回浏览器\n- 浏览器验证证书的有效性，随机生成用于对称加密的密钥，使用服务端的公钥加密生成密文，通过摘要算法生成摘要，一起发送给服务端\n- 服务端使用私钥解密消息，通过摘要算法验证数据完整性，得到浏览器生成的密钥，然后使用密钥加密消息，并生成摘要发送给浏览器。\n- 浏览器接受后使用密钥解密消息并验证完整性，成功之后，连接建立，接下来使用密钥加密数据传输保证安全性。\n\n{% endfold %}\n\n### 直接输入 www.baidu.com , 是如何转为HTTPS的？\n\n{% fold 查看答案 %}\n\n通过重定向和HSTS机制，实现从HTTP到HTTPS的转换。\n\n打开浏览器的调试界面，可以看到直接使用 http://www.baidu.com 时，服务端会发回307响应，在响应头中的LOCATION指定重定向的地址为 https://www.baidu.com ，然后浏览器重新向该地址发起请求。服务端在响应头中携带Strict-Transport-Security字段，设置过期时间，在这段时间内，再次请求该地址，浏览器会自动转换为HTTPS。\n\n{% endfold %}\n\n## GET和POST的区别\n\n{% note info %}\n\nGET一般用于向服务端获取资源，POST可能会对服务端资源进行修改。因此GET具有幂等性，即每次请求相同的URL会获得相同的响应，POST不具有幂等性。\n\nGET的请求参数附在URL上，在请求头中，POST的请求参数放在请求体中。\n\n由于浏览器或服务器对URL长度限制，因此GET的请求参数不能过长，而POST则没有限制\n\n{% endnote %}\n\n## Cookie和Session的区别\n\n{% note info %}\n\nSession是服务端保存状态的方式，Cookie是客户端保存状态的方式\n\nCookie保存在客户端，发起请求时将cookie放在请求头一起提交；Session保存在服务端，通过sessionId检查状态。\n\nsessionId可以保存在cookie中，如果禁用了cookie，可以将sessionId放在URL中。\n\n{% endnote %}\n\n## 输入URL到看到页面的过程\n\n{% note info %}\n\n浏览器通过DNS解析域名获取服务端IP地址。\n\n三次握手建立TCP连接，之后浏览器发起HTTP请求\n\n服务端根据请求URL找到对应的请求处理器，处理之后返回响应包含处理结果和视图\n\n浏览器解析并渲染视图，可能会再次请求页面中引用的其他静态资源文件\n\n渲染完成，请求结束。\n\n{% endnote %}\n\n## HTTP常见状态码\n\n{% note info %}\n\n200：请求成功\n\n301：永久重定向，接下来的请求都应该使用新的URL. 302：临时重定向\n\n400：错误的请求，可能是请求方法错误. 401：未认证. 403：禁止访问. 404：无法找到\n\n500：内部错误. 502：错误网关. 503：由于超载或系统维护服务不可用\n\n{% endnote %}\n","source":"_posts/计算机网络面试问题.md","raw":"---\ntitle: 计算机网络面试问题\ntags:\n  - Java后端面试\n  - 计算机网络\ncategories:\n  - Java后端面试\nimage: 'https://gitee.com/jingshanccc/image/raw/master/image/20200722003754.jpg'\nabbrlink: f4828e27\n---\n\n<p>\n\n<!-- more -->\n\n## 计算机网络体系结构\n\n{% note info %}\n\nOSI标准是七层模型，TCP/IP中是四层模型\n\n​    **物理层**：完成数模转换和模数转换。网卡\n\n​    **数据链路层**：有错误检测和纠正机制。交换机，ARP协议\n\n​    **网络层**：解决不同子网的通信问题。路由器，RIP协议\n\n​    **传输层**：保证数据段有效到达对端。TCP,UDP协议\n\n​    **会话层**：不同实体建立和使用连接（会话）。全双工、半双工、单工\n\n​    **表示层**：数据的表示方式。编解码、加解密、压缩\n\n​    **应用层**：为用户直接提供服务。FTP(21)、SSH(22)、SMTP和POP3、HTTP(80)、DNS(53)\n\n{% endnote %}\n\n### 什么是RIP协议？\n\nRIP是距离矢量路由协议，每个路由器维护一张表，记录自己和其他路由器之间的距离，在进行路由的时候优先选择距离短的。通过和相邻路由器交换信息更新表。\n\n### IP地址的分类\n\nIP地址由网络号和主机号组成，共四个字节。根据网络号所占的字节数划分为ABCDE五类网。A类网网络号占一个字节，B类占两个字节，以此类推。\n\n<details>\n    <summary>子网划分</summary>\n    从主机号借用若干位成为子网号，数据报仍根据网络号找到目的网络，由路由器根据网络号和子网号找到目的子网，通过子网掩码和目的地址逐位与操作，得到子网地址。\n</details>\n\n\n### 什么是ARP协议\n\nARP是地址解析协议，完成了IP地址到物理地址的映射。每一个主机都有一张高速缓存映射表，里面记录了所在局域网内的其他主机和路由器的IP地址和物理地址。当主机需要发送数据包时，将查找自己的ARP缓存，如果能找到目的主机的记录，则直接发送，否则将向所在局域网广播一个ARP请求包，包含自己和目的主机的IP和MAC地址。收到请求的主机将检查自己是不是目的主机，如果是则保存源主机的IP和MAC地址，然后向源主机发送ARP响应，包含自己的IP和MAC地址。如果源主机请求的目的地址不在当前网络，将通过路由器转发到其他局域网进行查找。\n\n### 什么是NAT？\n\nNAT是网络地址转换，由NAT路由器将内网中的本地主机IP转换为全球IP地址，让内网中的主机和因特网中的主机进行通信。\n\n## 什么是三次握手？\n\n{% note info %}\n\n三次握手是遵循TCP协议的通信双方建立连接的过程。\n\n第一次握手：客户端发起连接请求，发送SYN=1，初始化序列号为x的数据包给服务端，进入SYN_SENT状态。\n\n第二次握手：服务端接收请求连接报文，并发送确认包，确认序列号为x+1，同时将SYN位置1，并初始化自己的序列号为y发送给客户端，进入SYN_RECV状态。\n\n第三次握手：客户端接收到确认和请求连接报文，检查确认标志位ACK是否为1，确认序列号是否为x+1，检查正确后，发送确认报文，确认序列号为y+1，进入established状态。服务端接收到确认报文，检查ACK和ack number正确后，进入established状态。三次握手结束，连接建立。\n\n{% endnote %}\n\n### TCP建立连接可以两次握手吗？\n\n{% fold 查看答案 %}\n\n不可以，主要有以下两个原因。\n\n- 两次握手容易造成服务端连接资源浪费的情况，当客户端发送的第一次握手消息由于网络等原因延迟了，客户端会重新发送握手消息，然后成功完成通信并释放连接。此时延迟的握手消息到达了服务端，如果只有两次握手，服务端再接收到这个消息时就会发送确认并建立连接等待接收客户端的数据，但此时客户端并没有想要建立连接，因此服务端的连接资源也就白白浪费了。采用三次握手则可以避免这种情况。\n\n- 三次握手可以确保通信双方成功互换初始序列号，这是后续通信时确认应答和超时重传的基础，保证TCP的可靠性。\n\n{% endfold %}\n\n### 初始序列号是什么？\n\n{% fold 查看答案 %}\n\n发起连接的一方会生成一个32位的序列号作为初始序列号发送给对端，对端也会发送自己的初始序列号。初始序列号作为原点，对要传输的数据进行编号。根据发送序列号和确认序列号，发送方可以知道接收方已确认接收的数据，接收方可以验证哪些数据编号是合法的。\n\n{% endfold %}\n\n### 序列号回绕如何解决？\n\n由于初始序列号是随机生成的，因此在传输过程中，可能出现序列号回到0的情况，称为回绕。因为TCP判断丢包和乱序是通过序列号大小来判断的，因此需要解决回绕问题。内核处理回绕的解决方案是` (__s32)(seq1-seq2) < 0;`，将相减结果转为有符号数，如果发生了回绕，转为的有符号数小于0。\n\n### TCP建立连接可以四次握手吗？\n\n{% fold 查看答案 %}\n\n可以，其实三次握手中的第二次握手，服务端将确认和请求连接的消息放在一个报文里，将这个过程拆分成两次握手，就是四次握手。但是这样也浪费了资源\n\n{% endfold %}\n\n### 第三次握手中，如果客户端的ACK未到达服务端，会怎样？\n\n{% fold 查看答案 %}\n\n服务端如果没有接收到客户端的确认，则会重传第二次握手消息，默认可重传5次，如果都没有接收到确认，就进入CLOSED状态；如果接收到确认，就建立连接。\n\n服务端进入CLOSED状态之后，再接收到客户端的数据，将会以RST包响应。\n\n{% endfold %}\n\n### 建立连接后，如果客户端出现故障，会怎样？\n\n{% fold 查看答案 %}\n\n服务端每接收到客户端一个报文之后，就会重置自己的计时器，通常是两小时，如果在这期间都没有接收到客户端的数据，则会发送一个探测报文，之后每隔75秒发送一次，如果发送了10次都没有响应，则判断客户端出现故障，就会关闭连接。\n\n{% endfold %}\n\n## 什么是四次挥手？\n\n{% note info %}\n\n四次挥手是遵循TCP协议的通信双方释放连接的过程\n\n第一次挥手：客户端完成了数据的传输，发起释放连接请求，FIN=1，序列号为x，进入FIN_WAIT1状态。\n\n第二次挥手：服务端接收到请求后，发送确认报文，进入CLOSE_WAIT状态。客户端接收到确认报文后，进入FIN_WAIT2状态。\n\n第三次挥手：服务端也完成了数据的发送，发送释放连接报文，进入LAST_ACK状态。\n\n第四次挥手：客户端接收到释放连接请求，发送确认报文，进入TIME_WAIT状态，等待2MSL时间后，释放连接，进入CLOSED状态。服务端接收到确认报文后，释放连接，进入CLOSED状态。\n\n{% endnote %}\n\n### 为什么不能三次挥手？服务端的CLOSE_WAIT状态有什么意义？\n\n{% fold 查看答案 %}\n\n客户端发起释放连接的请求只能确认客户端没有数据要进行传输了，但此时服务端可能还有未发送的数据，CLOSE_WAIT状态用来等待服务端数据也发送完毕再释放连接。\n\n{% endfold %}\n\n### TIME_WAIT状态的意义？\n\n{% fold 查看答案 %}\n\n第四次挥手，客户端的ACK可能会丢失，TIME_WAIT状态用来重发可能丢失的ACK。如果服务端没有接收到ACK，则会重发FIN报文。TIME_WAIT的时长是2MSL，MSL就是报文段在网络中的最长存活时间。客户端的ACK在一个MSL内没到达服务端，服务端就会重发FIN，这个重发的FIN最长存活时间也是MSL，那么在2MSL时间内都没有接收到服务端重发的FIN，则认为ACK已经成功到达服务端。\n\n{% endfold %}\n\n### 出现大量TIME_WAIT状态？\n\n{% fold 查看答案 %}\n\n在高并发短连接的TCP服务器上，由于业务处理和数据传输的时间**远小于**TIME_WAIT超时时间，因此当服务器处理完请求后立刻主动正常关闭连接，就会出现大量TIME_WAIT状态。这是会占用这服务器的资源，因为端口是**有限**的，所以并发高时会有部分客户端无法连接到服务器\n\n{% endfold %}\n\n## TCP如何进行流量控制？\n\n{% note info %}\n\n使用滑动窗口协议来实现流量控制。接收方根据自己缓冲区的情况，动态调整接收窗口大小，并将接收窗口大小放在ACK报文中发送给发送方。发送方的发送窗口大小不能超过接收窗口，防止发送速率太快，接收方缓冲区不够导致溢出。当发送方接收到确认之后，将窗口向右滑动。\n\n{% endnote %}\n\n### 什么是”零窗口“？\n\n当接收方无法接受新数据时，就会将接收窗口大小设为0，发送方将会停止发送数据，并通过1字节大小的探测报文来检查接收窗口的变化，当接收窗口>0时，就恢复数据发送。\n\n## TCP如何进行拥塞控制？\n\n拥塞控制主要通过四个算法实现，分别是慢开始、拥塞避免、快重传、快恢复。\n\n![拥塞控制](https://gitee.com/jingshanccc/image/raw/master/image/20200722003811.jpg)\n\n{% note info %}\n\n**慢开始**：刚开始发送数据时，将拥塞窗口大小设置为1MSS，最大报文段长度，之后每收到一个确认ACK，就将窗口增大1个MSS，这样窗口大小随着传输轮次呈指数增长。\n\n**拥塞避免**：当慢开始执行到窗口大小等于慢开始门限时，将减缓窗口增大速度，每个传输轮次线性增长。\n\n**快重传**：快重传要求接收方在接收到一个失序的报文段后立即发出重复确认。当发送方连续接收到三个重复确认，就要立即重传失序的报文段而不必等待为该报文段设置的重传计时器的超时。\n\n**快恢复**：当发送方接收到三个重复确认时，就把慢开始门限减小为此时拥塞窗口的一半，然后执行拥塞避免算法。\n\n出现**重传**的两种情况：\n\n超时未接收到ACK：发送方在发送完一个报文段时，会启动一个计时器，当超时未接受到ACK时，则会重新传输该报文段。在这种情况下，发送方认为网络状况不佳，因此将慢开始门限设置为拥塞窗口的一半，拥塞窗口设置为初值，重新执行慢开始算法。\n\n接收到3个重复确认：此时由于可以接收到3个重复确认，因此网络没有出现拥塞，此时将慢开始门限减小为拥塞窗口的一半，但可以适当增大拥塞窗口，然后执行拥塞避免算法。\n\n{% endnote %}\n\n## TCP和UDP的区别？\n\n{% note info %}\n\nTCP面向连接，UDP面向无连接，即UDP传输数据前不需要建立连接\n\nTCP是可靠的，UDP是不可靠的，因为UDP接收方不需要发送确认，也就没有确认重传等机制\n\nTCP有拥塞控制，在网络拥塞时控制发送速率，UDP不会因为网络的拥塞而减小发送速率，这在实时应用中是很重要的\n\nTCP只支持点对点通信，UDP支持一对一、一对多、多对一、多对多\n\nTCP是面向字节流的，一个数据包可以以字节为单位拆分成多个组发送，UDP是面向数据报文的，一个报文只能一次发完。\n\nTCP的报文首部20字节，比UDP8字节开销更大。\n\n{% endnote %}\n\n### 什么时候使用TCP，什么时候使用UDP？\n\n在实时性要求高、可以容忍传输错误的应用中，如直播、游戏、即时通信，使用UDP。其他情况使用可靠的TCP。\n\n### HTTP可以使用UDP吗？\n\n以前来说不可以，HTTP需要可靠的传输协议，UDP不可靠。而新的HTTP/3基于QUIC协议（Quick UDP Internet Connection），不再使用TCP，在UDP的基础上增加拥塞控制和可靠性等。\n\n## TCP如何保证传输的可靠性？\n\n{% note info %}\n\n奇偶校验和：检查数据包是否出错\n\n乱序重排：正确接收数据\n\n丢弃重复包：正确接收数据\n\n确认应答机制：发送确认让发送方知道数据已被成功接收\n\n超时重传机制：未被接收的数据重新发送\n\n流量控制：控制发送速率避免接收方缓冲区发生溢出\n\n{% endnote %}\n\n## HTTP和HTTPS的区别？\n\n{% note info %}\n\nHTTP默认使用80端口，HTTPS使用443端口\n\nHTTP使用明文传输，HTTPS运行于SSL协议之上，有加密和认证机制，更加安全\n\nHTTPS加解密过程需要消耗更多的CPU和内存\n\nHTTPS需要向证书颁发机构CA购买证书\n\n{% endnote %}\n\n### HTTPS建立连接的过程？\n\n{% fold 查看答案 %}\n\n- 浏览器向服务端发送连接请求，消息内容包含自己支持的加密规则（对称加密、非对称加密、摘要算法）\n- 服务端接收到请求后，选择一套加密规则，生成非对称加密的公钥，和证书一起发送回浏览器\n- 浏览器验证证书的有效性，随机生成用于对称加密的密钥，使用服务端的公钥加密生成密文，通过摘要算法生成摘要，一起发送给服务端\n- 服务端使用私钥解密消息，通过摘要算法验证数据完整性，得到浏览器生成的密钥，然后使用密钥加密消息，并生成摘要发送给浏览器。\n- 浏览器接受后使用密钥解密消息并验证完整性，成功之后，连接建立，接下来使用密钥加密数据传输保证安全性。\n\n{% endfold %}\n\n### 直接输入 www.baidu.com , 是如何转为HTTPS的？\n\n{% fold 查看答案 %}\n\n通过重定向和HSTS机制，实现从HTTP到HTTPS的转换。\n\n打开浏览器的调试界面，可以看到直接使用 http://www.baidu.com 时，服务端会发回307响应，在响应头中的LOCATION指定重定向的地址为 https://www.baidu.com ，然后浏览器重新向该地址发起请求。服务端在响应头中携带Strict-Transport-Security字段，设置过期时间，在这段时间内，再次请求该地址，浏览器会自动转换为HTTPS。\n\n{% endfold %}\n\n## GET和POST的区别\n\n{% note info %}\n\nGET一般用于向服务端获取资源，POST可能会对服务端资源进行修改。因此GET具有幂等性，即每次请求相同的URL会获得相同的响应，POST不具有幂等性。\n\nGET的请求参数附在URL上，在请求头中，POST的请求参数放在请求体中。\n\n由于浏览器或服务器对URL长度限制，因此GET的请求参数不能过长，而POST则没有限制\n\n{% endnote %}\n\n## Cookie和Session的区别\n\n{% note info %}\n\nSession是服务端保存状态的方式，Cookie是客户端保存状态的方式\n\nCookie保存在客户端，发起请求时将cookie放在请求头一起提交；Session保存在服务端，通过sessionId检查状态。\n\nsessionId可以保存在cookie中，如果禁用了cookie，可以将sessionId放在URL中。\n\n{% endnote %}\n\n## 输入URL到看到页面的过程\n\n{% note info %}\n\n浏览器通过DNS解析域名获取服务端IP地址。\n\n三次握手建立TCP连接，之后浏览器发起HTTP请求\n\n服务端根据请求URL找到对应的请求处理器，处理之后返回响应包含处理结果和视图\n\n浏览器解析并渲染视图，可能会再次请求页面中引用的其他静态资源文件\n\n渲染完成，请求结束。\n\n{% endnote %}\n\n## HTTP常见状态码\n\n{% note info %}\n\n200：请求成功\n\n301：永久重定向，接下来的请求都应该使用新的URL. 302：临时重定向\n\n400：错误的请求，可能是请求方法错误. 401：未认证. 403：禁止访问. 404：无法找到\n\n500：内部错误. 502：错误网关. 503：由于超载或系统维护服务不可用\n\n{% endnote %}\n","slug":"计算机网络面试问题","published":1,"date":"2020-05-01T12:14:44.096Z","updated":"2020-08-06T01:23:06.692Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdi4ck2r004mz4ej9s36dns5","content":"<p>\n\n<a id=\"more\"></a>\n\n<h2 id=\"计算机网络体系结构\"><a href=\"#计算机网络体系结构\" class=\"headerlink\" title=\"计算机网络体系结构\"></a>计算机网络体系结构</h2><div class=\"note info\"><p>OSI标准是七层模型，TCP/IP中是四层模型</p>\n<p>​    <strong>物理层</strong>：完成数模转换和模数转换。网卡</p>\n<p>​    <strong>数据链路层</strong>：有错误检测和纠正机制。交换机，ARP协议</p>\n<p>​    <strong>网络层</strong>：解决不同子网的通信问题。路由器，RIP协议</p>\n<p>​    <strong>传输层</strong>：保证数据段有效到达对端。TCP,UDP协议</p>\n<p>​    <strong>会话层</strong>：不同实体建立和使用连接（会话）。全双工、半双工、单工</p>\n<p>​    <strong>表示层</strong>：数据的表示方式。编解码、加解密、压缩</p>\n<p>​    <strong>应用层</strong>：为用户直接提供服务。FTP(21)、SSH(22)、SMTP和POP3、HTTP(80)、DNS(53)</p></div>\n\n<h3 id=\"什么是RIP协议？\"><a href=\"#什么是RIP协议？\" class=\"headerlink\" title=\"什么是RIP协议？\"></a>什么是RIP协议？</h3><p>RIP是距离矢量路由协议，每个路由器维护一张表，记录自己和其他路由器之间的距离，在进行路由的时候优先选择距离短的。通过和相邻路由器交换信息更新表。</p>\n<h3 id=\"IP地址的分类\"><a href=\"#IP地址的分类\" class=\"headerlink\" title=\"IP地址的分类\"></a>IP地址的分类</h3><p>IP地址由网络号和主机号组成，共四个字节。根据网络号所占的字节数划分为ABCDE五类网。A类网网络号占一个字节，B类占两个字节，以此类推。</p>\n<details>\n    <summary>子网划分</summary>\n    从主机号借用若干位成为子网号，数据报仍根据网络号找到目的网络，由路由器根据网络号和子网号找到目的子网，通过子网掩码和目的地址逐位与操作，得到子网地址。\n</details>\n\n\n<h3 id=\"什么是ARP协议\"><a href=\"#什么是ARP协议\" class=\"headerlink\" title=\"什么是ARP协议\"></a>什么是ARP协议</h3><p>ARP是地址解析协议，完成了IP地址到物理地址的映射。每一个主机都有一张高速缓存映射表，里面记录了所在局域网内的其他主机和路由器的IP地址和物理地址。当主机需要发送数据包时，将查找自己的ARP缓存，如果能找到目的主机的记录，则直接发送，否则将向所在局域网广播一个ARP请求包，包含自己和目的主机的IP和MAC地址。收到请求的主机将检查自己是不是目的主机，如果是则保存源主机的IP和MAC地址，然后向源主机发送ARP响应，包含自己的IP和MAC地址。如果源主机请求的目的地址不在当前网络，将通过路由器转发到其他局域网进行查找。</p>\n<h3 id=\"什么是NAT？\"><a href=\"#什么是NAT？\" class=\"headerlink\" title=\"什么是NAT？\"></a>什么是NAT？</h3><p>NAT是网络地址转换，由NAT路由器将内网中的本地主机IP转换为全球IP地址，让内网中的主机和因特网中的主机进行通信。</p>\n<h2 id=\"什么是三次握手？\"><a href=\"#什么是三次握手？\" class=\"headerlink\" title=\"什么是三次握手？\"></a>什么是三次握手？</h2><div class=\"note info\"><p>三次握手是遵循TCP协议的通信双方建立连接的过程。</p>\n<p>第一次握手：客户端发起连接请求，发送SYN=1，初始化序列号为x的数据包给服务端，进入SYN_SENT状态。</p>\n<p>第二次握手：服务端接收请求连接报文，并发送确认包，确认序列号为x+1，同时将SYN位置1，并初始化自己的序列号为y发送给客户端，进入SYN_RECV状态。</p>\n<p>第三次握手：客户端接收到确认和请求连接报文，检查确认标志位ACK是否为1，确认序列号是否为x+1，检查正确后，发送确认报文，确认序列号为y+1，进入established状态。服务端接收到确认报文，检查ACK和ack number正确后，进入established状态。三次握手结束，连接建立。</p></div>\n\n<h3 id=\"TCP建立连接可以两次握手吗？\"><a href=\"#TCP建立连接可以两次握手吗？\" class=\"headerlink\" title=\"TCP建立连接可以两次握手吗？\"></a>TCP建立连接可以两次握手吗？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>不可以，主要有以下两个原因。</p>\n<ul>\n<li><p>两次握手容易造成服务端连接资源浪费的情况，当客户端发送的第一次握手消息由于网络等原因延迟了，客户端会重新发送握手消息，然后成功完成通信并释放连接。此时延迟的握手消息到达了服务端，如果只有两次握手，服务端再接收到这个消息时就会发送确认并建立连接等待接收客户端的数据，但此时客户端并没有想要建立连接，因此服务端的连接资源也就白白浪费了。采用三次握手则可以避免这种情况。</p>\n</li>\n<li><p>三次握手可以确保通信双方成功互换初始序列号，这是后续通信时确认应答和超时重传的基础，保证TCP的可靠性。</p>\n</li>\n</ul>\n\n</div></div>\n\n<h3 id=\"初始序列号是什么？\"><a href=\"#初始序列号是什么？\" class=\"headerlink\" title=\"初始序列号是什么？\"></a>初始序列号是什么？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>发起连接的一方会生成一个32位的序列号作为初始序列号发送给对端，对端也会发送自己的初始序列号。初始序列号作为原点，对要传输的数据进行编号。根据发送序列号和确认序列号，发送方可以知道接收方已确认接收的数据，接收方可以验证哪些数据编号是合法的。</p>\n\n</div></div>\n\n<h3 id=\"序列号回绕如何解决？\"><a href=\"#序列号回绕如何解决？\" class=\"headerlink\" title=\"序列号回绕如何解决？\"></a>序列号回绕如何解决？</h3><p>由于初始序列号是随机生成的，因此在传输过程中，可能出现序列号回到0的情况，称为回绕。因为TCP判断丢包和乱序是通过序列号大小来判断的，因此需要解决回绕问题。内核处理回绕的解决方案是<code>(__s32)(seq1-seq2) &lt; 0;</code>，将相减结果转为有符号数，如果发生了回绕，转为的有符号数小于0。</p>\n<h3 id=\"TCP建立连接可以四次握手吗？\"><a href=\"#TCP建立连接可以四次握手吗？\" class=\"headerlink\" title=\"TCP建立连接可以四次握手吗？\"></a>TCP建立连接可以四次握手吗？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>可以，其实三次握手中的第二次握手，服务端将确认和请求连接的消息放在一个报文里，将这个过程拆分成两次握手，就是四次握手。但是这样也浪费了资源</p>\n\n</div></div>\n\n<h3 id=\"第三次握手中，如果客户端的ACK未到达服务端，会怎样？\"><a href=\"#第三次握手中，如果客户端的ACK未到达服务端，会怎样？\" class=\"headerlink\" title=\"第三次握手中，如果客户端的ACK未到达服务端，会怎样？\"></a>第三次握手中，如果客户端的ACK未到达服务端，会怎样？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>服务端如果没有接收到客户端的确认，则会重传第二次握手消息，默认可重传5次，如果都没有接收到确认，就进入CLOSED状态；如果接收到确认，就建立连接。</p>\n<p>服务端进入CLOSED状态之后，再接收到客户端的数据，将会以RST包响应。</p>\n\n</div></div>\n\n<h3 id=\"建立连接后，如果客户端出现故障，会怎样？\"><a href=\"#建立连接后，如果客户端出现故障，会怎样？\" class=\"headerlink\" title=\"建立连接后，如果客户端出现故障，会怎样？\"></a>建立连接后，如果客户端出现故障，会怎样？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>服务端每接收到客户端一个报文之后，就会重置自己的计时器，通常是两小时，如果在这期间都没有接收到客户端的数据，则会发送一个探测报文，之后每隔75秒发送一次，如果发送了10次都没有响应，则判断客户端出现故障，就会关闭连接。</p>\n\n</div></div>\n\n<h2 id=\"什么是四次挥手？\"><a href=\"#什么是四次挥手？\" class=\"headerlink\" title=\"什么是四次挥手？\"></a>什么是四次挥手？</h2><div class=\"note info\"><p>四次挥手是遵循TCP协议的通信双方释放连接的过程</p>\n<p>第一次挥手：客户端完成了数据的传输，发起释放连接请求，FIN=1，序列号为x，进入FIN_WAIT1状态。</p>\n<p>第二次挥手：服务端接收到请求后，发送确认报文，进入CLOSE_WAIT状态。客户端接收到确认报文后，进入FIN_WAIT2状态。</p>\n<p>第三次挥手：服务端也完成了数据的发送，发送释放连接报文，进入LAST_ACK状态。</p>\n<p>第四次挥手：客户端接收到释放连接请求，发送确认报文，进入TIME_WAIT状态，等待2MSL时间后，释放连接，进入CLOSED状态。服务端接收到确认报文后，释放连接，进入CLOSED状态。</p></div>\n\n<h3 id=\"为什么不能三次挥手？服务端的CLOSE-WAIT状态有什么意义？\"><a href=\"#为什么不能三次挥手？服务端的CLOSE-WAIT状态有什么意义？\" class=\"headerlink\" title=\"为什么不能三次挥手？服务端的CLOSE_WAIT状态有什么意义？\"></a>为什么不能三次挥手？服务端的CLOSE_WAIT状态有什么意义？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>客户端发起释放连接的请求只能确认客户端没有数据要进行传输了，但此时服务端可能还有未发送的数据，CLOSE_WAIT状态用来等待服务端数据也发送完毕再释放连接。</p>\n\n</div></div>\n\n<h3 id=\"TIME-WAIT状态的意义？\"><a href=\"#TIME-WAIT状态的意义？\" class=\"headerlink\" title=\"TIME_WAIT状态的意义？\"></a>TIME_WAIT状态的意义？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>第四次挥手，客户端的ACK可能会丢失，TIME_WAIT状态用来重发可能丢失的ACK。如果服务端没有接收到ACK，则会重发FIN报文。TIME_WAIT的时长是2MSL，MSL就是报文段在网络中的最长存活时间。客户端的ACK在一个MSL内没到达服务端，服务端就会重发FIN，这个重发的FIN最长存活时间也是MSL，那么在2MSL时间内都没有接收到服务端重发的FIN，则认为ACK已经成功到达服务端。</p>\n\n</div></div>\n\n<h3 id=\"出现大量TIME-WAIT状态？\"><a href=\"#出现大量TIME-WAIT状态？\" class=\"headerlink\" title=\"出现大量TIME_WAIT状态？\"></a>出现大量TIME_WAIT状态？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>在高并发短连接的TCP服务器上，由于业务处理和数据传输的时间<strong>远小于</strong>TIME_WAIT超时时间，因此当服务器处理完请求后立刻主动正常关闭连接，就会出现大量TIME_WAIT状态。这是会占用这服务器的资源，因为端口是<strong>有限</strong>的，所以并发高时会有部分客户端无法连接到服务器</p>\n\n</div></div>\n\n<h2 id=\"TCP如何进行流量控制？\"><a href=\"#TCP如何进行流量控制？\" class=\"headerlink\" title=\"TCP如何进行流量控制？\"></a>TCP如何进行流量控制？</h2><div class=\"note info\"><p>使用滑动窗口协议来实现流量控制。接收方根据自己缓冲区的情况，动态调整接收窗口大小，并将接收窗口大小放在ACK报文中发送给发送方。发送方的发送窗口大小不能超过接收窗口，防止发送速率太快，接收方缓冲区不够导致溢出。当发送方接收到确认之后，将窗口向右滑动。</p></div>\n\n<h3 id=\"什么是”零窗口“？\"><a href=\"#什么是”零窗口“？\" class=\"headerlink\" title=\"什么是”零窗口“？\"></a>什么是”零窗口“？</h3><p>当接收方无法接受新数据时，就会将接收窗口大小设为0，发送方将会停止发送数据，并通过1字节大小的探测报文来检查接收窗口的变化，当接收窗口&gt;0时，就恢复数据发送。</p>\n<h2 id=\"TCP如何进行拥塞控制？\"><a href=\"#TCP如何进行拥塞控制？\" class=\"headerlink\" title=\"TCP如何进行拥塞控制？\"></a>TCP如何进行拥塞控制？</h2><p>拥塞控制主要通过四个算法实现，分别是慢开始、拥塞避免、快重传、快恢复。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003811.jpg\" alt=\"拥塞控制\"></p>\n<div class=\"note info\"><p><strong>慢开始</strong>：刚开始发送数据时，将拥塞窗口大小设置为1MSS，最大报文段长度，之后每收到一个确认ACK，就将窗口增大1个MSS，这样窗口大小随着传输轮次呈指数增长。</p>\n<p><strong>拥塞避免</strong>：当慢开始执行到窗口大小等于慢开始门限时，将减缓窗口增大速度，每个传输轮次线性增长。</p>\n<p><strong>快重传</strong>：快重传要求接收方在接收到一个失序的报文段后立即发出重复确认。当发送方连续接收到三个重复确认，就要立即重传失序的报文段而不必等待为该报文段设置的重传计时器的超时。</p>\n<p><strong>快恢复</strong>：当发送方接收到三个重复确认时，就把慢开始门限减小为此时拥塞窗口的一半，然后执行拥塞避免算法。</p>\n<p>出现<strong>重传</strong>的两种情况：</p>\n<p>超时未接收到ACK：发送方在发送完一个报文段时，会启动一个计时器，当超时未接受到ACK时，则会重新传输该报文段。在这种情况下，发送方认为网络状况不佳，因此将慢开始门限设置为拥塞窗口的一半，拥塞窗口设置为初值，重新执行慢开始算法。</p>\n<p>接收到3个重复确认：此时由于可以接收到3个重复确认，因此网络没有出现拥塞，此时将慢开始门限减小为拥塞窗口的一半，但可以适当增大拥塞窗口，然后执行拥塞避免算法。</p></div>\n\n<h2 id=\"TCP和UDP的区别？\"><a href=\"#TCP和UDP的区别？\" class=\"headerlink\" title=\"TCP和UDP的区别？\"></a>TCP和UDP的区别？</h2><div class=\"note info\"><p>TCP面向连接，UDP面向无连接，即UDP传输数据前不需要建立连接</p>\n<p>TCP是可靠的，UDP是不可靠的，因为UDP接收方不需要发送确认，也就没有确认重传等机制</p>\n<p>TCP有拥塞控制，在网络拥塞时控制发送速率，UDP不会因为网络的拥塞而减小发送速率，这在实时应用中是很重要的</p>\n<p>TCP只支持点对点通信，UDP支持一对一、一对多、多对一、多对多</p>\n<p>TCP是面向字节流的，一个数据包可以以字节为单位拆分成多个组发送，UDP是面向数据报文的，一个报文只能一次发完。</p>\n<p>TCP的报文首部20字节，比UDP8字节开销更大。</p></div>\n\n<h3 id=\"什么时候使用TCP，什么时候使用UDP？\"><a href=\"#什么时候使用TCP，什么时候使用UDP？\" class=\"headerlink\" title=\"什么时候使用TCP，什么时候使用UDP？\"></a>什么时候使用TCP，什么时候使用UDP？</h3><p>在实时性要求高、可以容忍传输错误的应用中，如直播、游戏、即时通信，使用UDP。其他情况使用可靠的TCP。</p>\n<h3 id=\"HTTP可以使用UDP吗？\"><a href=\"#HTTP可以使用UDP吗？\" class=\"headerlink\" title=\"HTTP可以使用UDP吗？\"></a>HTTP可以使用UDP吗？</h3><p>以前来说不可以，HTTP需要可靠的传输协议，UDP不可靠。而新的HTTP/3基于QUIC协议（Quick UDP Internet Connection），不再使用TCP，在UDP的基础上增加拥塞控制和可靠性等。</p>\n<h2 id=\"TCP如何保证传输的可靠性？\"><a href=\"#TCP如何保证传输的可靠性？\" class=\"headerlink\" title=\"TCP如何保证传输的可靠性？\"></a>TCP如何保证传输的可靠性？</h2><div class=\"note info\"><p>奇偶校验和：检查数据包是否出错</p>\n<p>乱序重排：正确接收数据</p>\n<p>丢弃重复包：正确接收数据</p>\n<p>确认应答机制：发送确认让发送方知道数据已被成功接收</p>\n<p>超时重传机制：未被接收的数据重新发送</p>\n<p>流量控制：控制发送速率避免接收方缓冲区发生溢出</p></div>\n\n<h2 id=\"HTTP和HTTPS的区别？\"><a href=\"#HTTP和HTTPS的区别？\" class=\"headerlink\" title=\"HTTP和HTTPS的区别？\"></a>HTTP和HTTPS的区别？</h2><div class=\"note info\"><p>HTTP默认使用80端口，HTTPS使用443端口</p>\n<p>HTTP使用明文传输，HTTPS运行于SSL协议之上，有加密和认证机制，更加安全</p>\n<p>HTTPS加解密过程需要消耗更多的CPU和内存</p>\n<p>HTTPS需要向证书颁发机构CA购买证书</p></div>\n\n<h3 id=\"HTTPS建立连接的过程？\"><a href=\"#HTTPS建立连接的过程？\" class=\"headerlink\" title=\"HTTPS建立连接的过程？\"></a>HTTPS建立连接的过程？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<ul>\n<li>浏览器向服务端发送连接请求，消息内容包含自己支持的加密规则（对称加密、非对称加密、摘要算法）</li>\n<li>服务端接收到请求后，选择一套加密规则，生成非对称加密的公钥，和证书一起发送回浏览器</li>\n<li>浏览器验证证书的有效性，随机生成用于对称加密的密钥，使用服务端的公钥加密生成密文，通过摘要算法生成摘要，一起发送给服务端</li>\n<li>服务端使用私钥解密消息，通过摘要算法验证数据完整性，得到浏览器生成的密钥，然后使用密钥加密消息，并生成摘要发送给浏览器。</li>\n<li>浏览器接受后使用密钥解密消息并验证完整性，成功之后，连接建立，接下来使用密钥加密数据传输保证安全性。</li>\n</ul>\n\n</div></div>\n\n<h3 id=\"直接输入-www-baidu-com-是如何转为HTTPS的？\"><a href=\"#直接输入-www-baidu-com-是如何转为HTTPS的？\" class=\"headerlink\" title=\"直接输入 www.baidu.com , 是如何转为HTTPS的？\"></a>直接输入 <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a> , 是如何转为HTTPS的？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>通过重定向和HSTS机制，实现从HTTP到HTTPS的转换。</p>\n<p>打开浏览器的调试界面，可以看到直接使用 <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com</a> 时，服务端会发回307响应，在响应头中的LOCATION指定重定向的地址为 <a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com</a> ，然后浏览器重新向该地址发起请求。服务端在响应头中携带Strict-Transport-Security字段，设置过期时间，在这段时间内，再次请求该地址，浏览器会自动转换为HTTPS。</p>\n\n</div></div>\n\n<h2 id=\"GET和POST的区别\"><a href=\"#GET和POST的区别\" class=\"headerlink\" title=\"GET和POST的区别\"></a>GET和POST的区别</h2><div class=\"note info\"><p>GET一般用于向服务端获取资源，POST可能会对服务端资源进行修改。因此GET具有幂等性，即每次请求相同的URL会获得相同的响应，POST不具有幂等性。</p>\n<p>GET的请求参数附在URL上，在请求头中，POST的请求参数放在请求体中。</p>\n<p>由于浏览器或服务器对URL长度限制，因此GET的请求参数不能过长，而POST则没有限制</p></div>\n\n<h2 id=\"Cookie和Session的区别\"><a href=\"#Cookie和Session的区别\" class=\"headerlink\" title=\"Cookie和Session的区别\"></a>Cookie和Session的区别</h2><div class=\"note info\"><p>Session是服务端保存状态的方式，Cookie是客户端保存状态的方式</p>\n<p>Cookie保存在客户端，发起请求时将cookie放在请求头一起提交；Session保存在服务端，通过sessionId检查状态。</p>\n<p>sessionId可以保存在cookie中，如果禁用了cookie，可以将sessionId放在URL中。</p></div>\n\n<h2 id=\"输入URL到看到页面的过程\"><a href=\"#输入URL到看到页面的过程\" class=\"headerlink\" title=\"输入URL到看到页面的过程\"></a>输入URL到看到页面的过程</h2><div class=\"note info\"><p>浏览器通过DNS解析域名获取服务端IP地址。</p>\n<p>三次握手建立TCP连接，之后浏览器发起HTTP请求</p>\n<p>服务端根据请求URL找到对应的请求处理器，处理之后返回响应包含处理结果和视图</p>\n<p>浏览器解析并渲染视图，可能会再次请求页面中引用的其他静态资源文件</p>\n<p>渲染完成，请求结束。</p></div>\n\n<h2 id=\"HTTP常见状态码\"><a href=\"#HTTP常见状态码\" class=\"headerlink\" title=\"HTTP常见状态码\"></a>HTTP常见状态码</h2><div class=\"note info\"><p>200：请求成功</p>\n<p>301：永久重定向，接下来的请求都应该使用新的URL. 302：临时重定向</p>\n<p>400：错误的请求，可能是请求方法错误. 401：未认证. 403：禁止访问. 404：无法找到</p>\n<p>500：内部错误. 502：错误网关. 503：由于超载或系统维护服务不可用</p></div>\n","site":{"data":{}},"excerpt":"<p>","more":"<h2 id=\"计算机网络体系结构\"><a href=\"#计算机网络体系结构\" class=\"headerlink\" title=\"计算机网络体系结构\"></a>计算机网络体系结构</h2><div class=\"note info\"><p>OSI标准是七层模型，TCP/IP中是四层模型</p>\n<p>​    <strong>物理层</strong>：完成数模转换和模数转换。网卡</p>\n<p>​    <strong>数据链路层</strong>：有错误检测和纠正机制。交换机，ARP协议</p>\n<p>​    <strong>网络层</strong>：解决不同子网的通信问题。路由器，RIP协议</p>\n<p>​    <strong>传输层</strong>：保证数据段有效到达对端。TCP,UDP协议</p>\n<p>​    <strong>会话层</strong>：不同实体建立和使用连接（会话）。全双工、半双工、单工</p>\n<p>​    <strong>表示层</strong>：数据的表示方式。编解码、加解密、压缩</p>\n<p>​    <strong>应用层</strong>：为用户直接提供服务。FTP(21)、SSH(22)、SMTP和POP3、HTTP(80)、DNS(53)</p></div>\n\n<h3 id=\"什么是RIP协议？\"><a href=\"#什么是RIP协议？\" class=\"headerlink\" title=\"什么是RIP协议？\"></a>什么是RIP协议？</h3><p>RIP是距离矢量路由协议，每个路由器维护一张表，记录自己和其他路由器之间的距离，在进行路由的时候优先选择距离短的。通过和相邻路由器交换信息更新表。</p>\n<h3 id=\"IP地址的分类\"><a href=\"#IP地址的分类\" class=\"headerlink\" title=\"IP地址的分类\"></a>IP地址的分类</h3><p>IP地址由网络号和主机号组成，共四个字节。根据网络号所占的字节数划分为ABCDE五类网。A类网网络号占一个字节，B类占两个字节，以此类推。</p>\n<details>\n    <summary>子网划分</summary>\n    从主机号借用若干位成为子网号，数据报仍根据网络号找到目的网络，由路由器根据网络号和子网号找到目的子网，通过子网掩码和目的地址逐位与操作，得到子网地址。\n</details>\n\n\n<h3 id=\"什么是ARP协议\"><a href=\"#什么是ARP协议\" class=\"headerlink\" title=\"什么是ARP协议\"></a>什么是ARP协议</h3><p>ARP是地址解析协议，完成了IP地址到物理地址的映射。每一个主机都有一张高速缓存映射表，里面记录了所在局域网内的其他主机和路由器的IP地址和物理地址。当主机需要发送数据包时，将查找自己的ARP缓存，如果能找到目的主机的记录，则直接发送，否则将向所在局域网广播一个ARP请求包，包含自己和目的主机的IP和MAC地址。收到请求的主机将检查自己是不是目的主机，如果是则保存源主机的IP和MAC地址，然后向源主机发送ARP响应，包含自己的IP和MAC地址。如果源主机请求的目的地址不在当前网络，将通过路由器转发到其他局域网进行查找。</p>\n<h3 id=\"什么是NAT？\"><a href=\"#什么是NAT？\" class=\"headerlink\" title=\"什么是NAT？\"></a>什么是NAT？</h3><p>NAT是网络地址转换，由NAT路由器将内网中的本地主机IP转换为全球IP地址，让内网中的主机和因特网中的主机进行通信。</p>\n<h2 id=\"什么是三次握手？\"><a href=\"#什么是三次握手？\" class=\"headerlink\" title=\"什么是三次握手？\"></a>什么是三次握手？</h2><div class=\"note info\"><p>三次握手是遵循TCP协议的通信双方建立连接的过程。</p>\n<p>第一次握手：客户端发起连接请求，发送SYN=1，初始化序列号为x的数据包给服务端，进入SYN_SENT状态。</p>\n<p>第二次握手：服务端接收请求连接报文，并发送确认包，确认序列号为x+1，同时将SYN位置1，并初始化自己的序列号为y发送给客户端，进入SYN_RECV状态。</p>\n<p>第三次握手：客户端接收到确认和请求连接报文，检查确认标志位ACK是否为1，确认序列号是否为x+1，检查正确后，发送确认报文，确认序列号为y+1，进入established状态。服务端接收到确认报文，检查ACK和ack number正确后，进入established状态。三次握手结束，连接建立。</p></div>\n\n<h3 id=\"TCP建立连接可以两次握手吗？\"><a href=\"#TCP建立连接可以两次握手吗？\" class=\"headerlink\" title=\"TCP建立连接可以两次握手吗？\"></a>TCP建立连接可以两次握手吗？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>不可以，主要有以下两个原因。</p>\n<ul>\n<li><p>两次握手容易造成服务端连接资源浪费的情况，当客户端发送的第一次握手消息由于网络等原因延迟了，客户端会重新发送握手消息，然后成功完成通信并释放连接。此时延迟的握手消息到达了服务端，如果只有两次握手，服务端再接收到这个消息时就会发送确认并建立连接等待接收客户端的数据，但此时客户端并没有想要建立连接，因此服务端的连接资源也就白白浪费了。采用三次握手则可以避免这种情况。</p>\n</li>\n<li><p>三次握手可以确保通信双方成功互换初始序列号，这是后续通信时确认应答和超时重传的基础，保证TCP的可靠性。</p>\n</li>\n</ul>\n\n</div></div>\n\n<h3 id=\"初始序列号是什么？\"><a href=\"#初始序列号是什么？\" class=\"headerlink\" title=\"初始序列号是什么？\"></a>初始序列号是什么？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>发起连接的一方会生成一个32位的序列号作为初始序列号发送给对端，对端也会发送自己的初始序列号。初始序列号作为原点，对要传输的数据进行编号。根据发送序列号和确认序列号，发送方可以知道接收方已确认接收的数据，接收方可以验证哪些数据编号是合法的。</p>\n\n</div></div>\n\n<h3 id=\"序列号回绕如何解决？\"><a href=\"#序列号回绕如何解决？\" class=\"headerlink\" title=\"序列号回绕如何解决？\"></a>序列号回绕如何解决？</h3><p>由于初始序列号是随机生成的，因此在传输过程中，可能出现序列号回到0的情况，称为回绕。因为TCP判断丢包和乱序是通过序列号大小来判断的，因此需要解决回绕问题。内核处理回绕的解决方案是<code>(__s32)(seq1-seq2) &lt; 0;</code>，将相减结果转为有符号数，如果发生了回绕，转为的有符号数小于0。</p>\n<h3 id=\"TCP建立连接可以四次握手吗？\"><a href=\"#TCP建立连接可以四次握手吗？\" class=\"headerlink\" title=\"TCP建立连接可以四次握手吗？\"></a>TCP建立连接可以四次握手吗？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>可以，其实三次握手中的第二次握手，服务端将确认和请求连接的消息放在一个报文里，将这个过程拆分成两次握手，就是四次握手。但是这样也浪费了资源</p>\n\n</div></div>\n\n<h3 id=\"第三次握手中，如果客户端的ACK未到达服务端，会怎样？\"><a href=\"#第三次握手中，如果客户端的ACK未到达服务端，会怎样？\" class=\"headerlink\" title=\"第三次握手中，如果客户端的ACK未到达服务端，会怎样？\"></a>第三次握手中，如果客户端的ACK未到达服务端，会怎样？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>服务端如果没有接收到客户端的确认，则会重传第二次握手消息，默认可重传5次，如果都没有接收到确认，就进入CLOSED状态；如果接收到确认，就建立连接。</p>\n<p>服务端进入CLOSED状态之后，再接收到客户端的数据，将会以RST包响应。</p>\n\n</div></div>\n\n<h3 id=\"建立连接后，如果客户端出现故障，会怎样？\"><a href=\"#建立连接后，如果客户端出现故障，会怎样？\" class=\"headerlink\" title=\"建立连接后，如果客户端出现故障，会怎样？\"></a>建立连接后，如果客户端出现故障，会怎样？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>服务端每接收到客户端一个报文之后，就会重置自己的计时器，通常是两小时，如果在这期间都没有接收到客户端的数据，则会发送一个探测报文，之后每隔75秒发送一次，如果发送了10次都没有响应，则判断客户端出现故障，就会关闭连接。</p>\n\n</div></div>\n\n<h2 id=\"什么是四次挥手？\"><a href=\"#什么是四次挥手？\" class=\"headerlink\" title=\"什么是四次挥手？\"></a>什么是四次挥手？</h2><div class=\"note info\"><p>四次挥手是遵循TCP协议的通信双方释放连接的过程</p>\n<p>第一次挥手：客户端完成了数据的传输，发起释放连接请求，FIN=1，序列号为x，进入FIN_WAIT1状态。</p>\n<p>第二次挥手：服务端接收到请求后，发送确认报文，进入CLOSE_WAIT状态。客户端接收到确认报文后，进入FIN_WAIT2状态。</p>\n<p>第三次挥手：服务端也完成了数据的发送，发送释放连接报文，进入LAST_ACK状态。</p>\n<p>第四次挥手：客户端接收到释放连接请求，发送确认报文，进入TIME_WAIT状态，等待2MSL时间后，释放连接，进入CLOSED状态。服务端接收到确认报文后，释放连接，进入CLOSED状态。</p></div>\n\n<h3 id=\"为什么不能三次挥手？服务端的CLOSE-WAIT状态有什么意义？\"><a href=\"#为什么不能三次挥手？服务端的CLOSE-WAIT状态有什么意义？\" class=\"headerlink\" title=\"为什么不能三次挥手？服务端的CLOSE_WAIT状态有什么意义？\"></a>为什么不能三次挥手？服务端的CLOSE_WAIT状态有什么意义？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>客户端发起释放连接的请求只能确认客户端没有数据要进行传输了，但此时服务端可能还有未发送的数据，CLOSE_WAIT状态用来等待服务端数据也发送完毕再释放连接。</p>\n\n</div></div>\n\n<h3 id=\"TIME-WAIT状态的意义？\"><a href=\"#TIME-WAIT状态的意义？\" class=\"headerlink\" title=\"TIME_WAIT状态的意义？\"></a>TIME_WAIT状态的意义？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>第四次挥手，客户端的ACK可能会丢失，TIME_WAIT状态用来重发可能丢失的ACK。如果服务端没有接收到ACK，则会重发FIN报文。TIME_WAIT的时长是2MSL，MSL就是报文段在网络中的最长存活时间。客户端的ACK在一个MSL内没到达服务端，服务端就会重发FIN，这个重发的FIN最长存活时间也是MSL，那么在2MSL时间内都没有接收到服务端重发的FIN，则认为ACK已经成功到达服务端。</p>\n\n</div></div>\n\n<h3 id=\"出现大量TIME-WAIT状态？\"><a href=\"#出现大量TIME-WAIT状态？\" class=\"headerlink\" title=\"出现大量TIME_WAIT状态？\"></a>出现大量TIME_WAIT状态？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>在高并发短连接的TCP服务器上，由于业务处理和数据传输的时间<strong>远小于</strong>TIME_WAIT超时时间，因此当服务器处理完请求后立刻主动正常关闭连接，就会出现大量TIME_WAIT状态。这是会占用这服务器的资源，因为端口是<strong>有限</strong>的，所以并发高时会有部分客户端无法连接到服务器</p>\n\n</div></div>\n\n<h2 id=\"TCP如何进行流量控制？\"><a href=\"#TCP如何进行流量控制？\" class=\"headerlink\" title=\"TCP如何进行流量控制？\"></a>TCP如何进行流量控制？</h2><div class=\"note info\"><p>使用滑动窗口协议来实现流量控制。接收方根据自己缓冲区的情况，动态调整接收窗口大小，并将接收窗口大小放在ACK报文中发送给发送方。发送方的发送窗口大小不能超过接收窗口，防止发送速率太快，接收方缓冲区不够导致溢出。当发送方接收到确认之后，将窗口向右滑动。</p></div>\n\n<h3 id=\"什么是”零窗口“？\"><a href=\"#什么是”零窗口“？\" class=\"headerlink\" title=\"什么是”零窗口“？\"></a>什么是”零窗口“？</h3><p>当接收方无法接受新数据时，就会将接收窗口大小设为0，发送方将会停止发送数据，并通过1字节大小的探测报文来检查接收窗口的变化，当接收窗口&gt;0时，就恢复数据发送。</p>\n<h2 id=\"TCP如何进行拥塞控制？\"><a href=\"#TCP如何进行拥塞控制？\" class=\"headerlink\" title=\"TCP如何进行拥塞控制？\"></a>TCP如何进行拥塞控制？</h2><p>拥塞控制主要通过四个算法实现，分别是慢开始、拥塞避免、快重传、快恢复。</p>\n<p><img src=\"https://gitee.com/jingshanccc/image/raw/master/image/20200722003811.jpg\" alt=\"拥塞控制\"></p>\n<div class=\"note info\"><p><strong>慢开始</strong>：刚开始发送数据时，将拥塞窗口大小设置为1MSS，最大报文段长度，之后每收到一个确认ACK，就将窗口增大1个MSS，这样窗口大小随着传输轮次呈指数增长。</p>\n<p><strong>拥塞避免</strong>：当慢开始执行到窗口大小等于慢开始门限时，将减缓窗口增大速度，每个传输轮次线性增长。</p>\n<p><strong>快重传</strong>：快重传要求接收方在接收到一个失序的报文段后立即发出重复确认。当发送方连续接收到三个重复确认，就要立即重传失序的报文段而不必等待为该报文段设置的重传计时器的超时。</p>\n<p><strong>快恢复</strong>：当发送方接收到三个重复确认时，就把慢开始门限减小为此时拥塞窗口的一半，然后执行拥塞避免算法。</p>\n<p>出现<strong>重传</strong>的两种情况：</p>\n<p>超时未接收到ACK：发送方在发送完一个报文段时，会启动一个计时器，当超时未接受到ACK时，则会重新传输该报文段。在这种情况下，发送方认为网络状况不佳，因此将慢开始门限设置为拥塞窗口的一半，拥塞窗口设置为初值，重新执行慢开始算法。</p>\n<p>接收到3个重复确认：此时由于可以接收到3个重复确认，因此网络没有出现拥塞，此时将慢开始门限减小为拥塞窗口的一半，但可以适当增大拥塞窗口，然后执行拥塞避免算法。</p></div>\n\n<h2 id=\"TCP和UDP的区别？\"><a href=\"#TCP和UDP的区别？\" class=\"headerlink\" title=\"TCP和UDP的区别？\"></a>TCP和UDP的区别？</h2><div class=\"note info\"><p>TCP面向连接，UDP面向无连接，即UDP传输数据前不需要建立连接</p>\n<p>TCP是可靠的，UDP是不可靠的，因为UDP接收方不需要发送确认，也就没有确认重传等机制</p>\n<p>TCP有拥塞控制，在网络拥塞时控制发送速率，UDP不会因为网络的拥塞而减小发送速率，这在实时应用中是很重要的</p>\n<p>TCP只支持点对点通信，UDP支持一对一、一对多、多对一、多对多</p>\n<p>TCP是面向字节流的，一个数据包可以以字节为单位拆分成多个组发送，UDP是面向数据报文的，一个报文只能一次发完。</p>\n<p>TCP的报文首部20字节，比UDP8字节开销更大。</p></div>\n\n<h3 id=\"什么时候使用TCP，什么时候使用UDP？\"><a href=\"#什么时候使用TCP，什么时候使用UDP？\" class=\"headerlink\" title=\"什么时候使用TCP，什么时候使用UDP？\"></a>什么时候使用TCP，什么时候使用UDP？</h3><p>在实时性要求高、可以容忍传输错误的应用中，如直播、游戏、即时通信，使用UDP。其他情况使用可靠的TCP。</p>\n<h3 id=\"HTTP可以使用UDP吗？\"><a href=\"#HTTP可以使用UDP吗？\" class=\"headerlink\" title=\"HTTP可以使用UDP吗？\"></a>HTTP可以使用UDP吗？</h3><p>以前来说不可以，HTTP需要可靠的传输协议，UDP不可靠。而新的HTTP/3基于QUIC协议（Quick UDP Internet Connection），不再使用TCP，在UDP的基础上增加拥塞控制和可靠性等。</p>\n<h2 id=\"TCP如何保证传输的可靠性？\"><a href=\"#TCP如何保证传输的可靠性？\" class=\"headerlink\" title=\"TCP如何保证传输的可靠性？\"></a>TCP如何保证传输的可靠性？</h2><div class=\"note info\"><p>奇偶校验和：检查数据包是否出错</p>\n<p>乱序重排：正确接收数据</p>\n<p>丢弃重复包：正确接收数据</p>\n<p>确认应答机制：发送确认让发送方知道数据已被成功接收</p>\n<p>超时重传机制：未被接收的数据重新发送</p>\n<p>流量控制：控制发送速率避免接收方缓冲区发生溢出</p></div>\n\n<h2 id=\"HTTP和HTTPS的区别？\"><a href=\"#HTTP和HTTPS的区别？\" class=\"headerlink\" title=\"HTTP和HTTPS的区别？\"></a>HTTP和HTTPS的区别？</h2><div class=\"note info\"><p>HTTP默认使用80端口，HTTPS使用443端口</p>\n<p>HTTP使用明文传输，HTTPS运行于SSL协议之上，有加密和认证机制，更加安全</p>\n<p>HTTPS加解密过程需要消耗更多的CPU和内存</p>\n<p>HTTPS需要向证书颁发机构CA购买证书</p></div>\n\n<h3 id=\"HTTPS建立连接的过程？\"><a href=\"#HTTPS建立连接的过程？\" class=\"headerlink\" title=\"HTTPS建立连接的过程？\"></a>HTTPS建立连接的过程？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<ul>\n<li>浏览器向服务端发送连接请求，消息内容包含自己支持的加密规则（对称加密、非对称加密、摘要算法）</li>\n<li>服务端接收到请求后，选择一套加密规则，生成非对称加密的公钥，和证书一起发送回浏览器</li>\n<li>浏览器验证证书的有效性，随机生成用于对称加密的密钥，使用服务端的公钥加密生成密文，通过摘要算法生成摘要，一起发送给服务端</li>\n<li>服务端使用私钥解密消息，通过摘要算法验证数据完整性，得到浏览器生成的密钥，然后使用密钥加密消息，并生成摘要发送给浏览器。</li>\n<li>浏览器接受后使用密钥解密消息并验证完整性，成功之后，连接建立，接下来使用密钥加密数据传输保证安全性。</li>\n</ul>\n\n</div></div>\n\n<h3 id=\"直接输入-www-baidu-com-是如何转为HTTPS的？\"><a href=\"#直接输入-www-baidu-com-是如何转为HTTPS的？\" class=\"headerlink\" title=\"直接输入 www.baidu.com , 是如何转为HTTPS的？\"></a>直接输入 <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a> , 是如何转为HTTPS的？</h3><div><div class=\"fold_hider\"><div class=\"close hider_title\">查看答案</div></div><div class=\"fold\">\n<p>通过重定向和HSTS机制，实现从HTTP到HTTPS的转换。</p>\n<p>打开浏览器的调试界面，可以看到直接使用 <a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com</a> 时，服务端会发回307响应，在响应头中的LOCATION指定重定向的地址为 <a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com</a> ，然后浏览器重新向该地址发起请求。服务端在响应头中携带Strict-Transport-Security字段，设置过期时间，在这段时间内，再次请求该地址，浏览器会自动转换为HTTPS。</p>\n\n</div></div>\n\n<h2 id=\"GET和POST的区别\"><a href=\"#GET和POST的区别\" class=\"headerlink\" title=\"GET和POST的区别\"></a>GET和POST的区别</h2><div class=\"note info\"><p>GET一般用于向服务端获取资源，POST可能会对服务端资源进行修改。因此GET具有幂等性，即每次请求相同的URL会获得相同的响应，POST不具有幂等性。</p>\n<p>GET的请求参数附在URL上，在请求头中，POST的请求参数放在请求体中。</p>\n<p>由于浏览器或服务器对URL长度限制，因此GET的请求参数不能过长，而POST则没有限制</p></div>\n\n<h2 id=\"Cookie和Session的区别\"><a href=\"#Cookie和Session的区别\" class=\"headerlink\" title=\"Cookie和Session的区别\"></a>Cookie和Session的区别</h2><div class=\"note info\"><p>Session是服务端保存状态的方式，Cookie是客户端保存状态的方式</p>\n<p>Cookie保存在客户端，发起请求时将cookie放在请求头一起提交；Session保存在服务端，通过sessionId检查状态。</p>\n<p>sessionId可以保存在cookie中，如果禁用了cookie，可以将sessionId放在URL中。</p></div>\n\n<h2 id=\"输入URL到看到页面的过程\"><a href=\"#输入URL到看到页面的过程\" class=\"headerlink\" title=\"输入URL到看到页面的过程\"></a>输入URL到看到页面的过程</h2><div class=\"note info\"><p>浏览器通过DNS解析域名获取服务端IP地址。</p>\n<p>三次握手建立TCP连接，之后浏览器发起HTTP请求</p>\n<p>服务端根据请求URL找到对应的请求处理器，处理之后返回响应包含处理结果和视图</p>\n<p>浏览器解析并渲染视图，可能会再次请求页面中引用的其他静态资源文件</p>\n<p>渲染完成，请求结束。</p></div>\n\n<h2 id=\"HTTP常见状态码\"><a href=\"#HTTP常见状态码\" class=\"headerlink\" title=\"HTTP常见状态码\"></a>HTTP常见状态码</h2><div class=\"note info\"><p>200：请求成功</p>\n<p>301：永久重定向，接下来的请求都应该使用新的URL. 302：临时重定向</p>\n<p>400：错误的请求，可能是请求方法错误. 401：未认证. 403：禁止访问. 404：无法找到</p>\n<p>500：内部错误. 502：错误网关. 503：由于超载或系统维护服务不可用</p></div>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722003811.jpg","popularPost_tmp_gaData":{"updated":"Thu Aug 06 2020 09:23:06 GMT+0800 (中国标准时间)","title":"计算机网络面试问题","path":"posts/f4828e27.html","eyeCatchImage":"https://gitee.com/jingshanccc/image/raw/master/image/20200722003811.jpg","excerpt":"<p>","date":{"_isAMomentObject":true,"_i":"2020-05-01T12:14:44.096Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-05-01T12:14:44.096Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"Java后端面试","tags":["Java后端面试","计算机网络"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":5370}],"PostAsset":[],"PostCategory":[{"post_id":"ckdi4ck190002z4ej1jth0tgq","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck1l000fz4ej64s9brr8"},{"post_id":"ckdi4ck1c0004z4ejdav7ef0l","category_id":"ckdi4ck1i000bz4ej9th6g1xr","_id":"ckdi4ck1m000jz4ej3u0813q2"},{"post_id":"ckdi4ck1m000iz4ejfs222cdy","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck1p000rz4ej0r6dc9g0"},{"post_id":"ckdi4ck1n000nz4ej4zxk1coo","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck1r000xz4ejebb9c9xr"},{"post_id":"ckdi4ck1q000vz4ej5z6ihdb4","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck1t0016z4ej3op3gvt6"},{"post_id":"ckdi4ck1r0010z4ejdkoiayyu","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck1u0019z4ejernm3cgt"},{"post_id":"ckdi4ck1o000qz4ej3t1c7rho","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck1v001cz4ejb48b3ard"},{"post_id":"ckdi4ck1o000qz4ej3t1c7rho","category_id":"ckdi4ck1r000wz4ej8v0v7gml","_id":"ckdi4ck1v001ez4ej5x24b302"},{"post_id":"ckdi4ck1s0012z4ej710y9tra","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck1y001hz4eje5ltfb6d"},{"post_id":"ckdi4ck1t0015z4ej1om7e7yi","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck1y001jz4ej7je6bq1f"},{"post_id":"ckdi4ck1p000tz4ej9xdogfea","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck1z001lz4ej2sdg05zn"},{"post_id":"ckdi4ck1p000tz4ej9xdogfea","category_id":"ckdi4ck1s0013z4ejfjvt5tbm","_id":"ckdi4ck20001pz4ejhdgy3ctm"},{"post_id":"ckdi4ck1u0018z4ejcrg38w1m","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck20001sz4ej9kwq7n1s"},{"post_id":"ckdi4ck1u001bz4ej159g6fod","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck21001wz4ej4mco1fzz"},{"post_id":"ckdi4ck1v001dz4ej7p0thp9x","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck22001zz4ejbf239ule"},{"post_id":"ckdi4ck1x001gz4ej42n66pou","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck230023z4ejb3nl5kct"},{"post_id":"ckdi4ck1y001iz4ej0l212ncz","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck240026z4ej7euz5wtv"},{"post_id":"ckdi4ck1z001kz4ejf3qzfbaq","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck25002az4ej8hjg7naf"},{"post_id":"ckdi4ck1z001oz4ej8naw89mi","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck26002dz4ej8u28e7h3"},{"post_id":"ckdi4ck1z001oz4ej8naw89mi","category_id":"ckdi4ck1r000wz4ej8v0v7gml","_id":"ckdi4ck27002gz4ej1oir1mpd"},{"post_id":"ckdi4ck20001rz4ejb8s9glr2","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck28002kz4ejfbwicuxx"},{"post_id":"ckdi4ck20001rz4ejb8s9glr2","category_id":"ckdi4ck1r000wz4ej8v0v7gml","_id":"ckdi4ck29002oz4ejbp3o77dh"},{"post_id":"ckdi4ck21001vz4ej3qxk9su1","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck2b002sz4ejgdkje1nm"},{"post_id":"ckdi4ck22001yz4ejaal0ha6m","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck2c002wz4ej1w4l0g8r"},{"post_id":"ckdi4ck230022z4ej46kffne4","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck2d0030z4ej7h618pqs"},{"post_id":"ckdi4ck230025z4ej5i9jcdtl","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck2e0033z4ej1xobg861"},{"post_id":"ckdi4ck26002cz4ejchqrgadf","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck2f0037z4ej16gk5vga"},{"post_id":"ckdi4ck28002jz4ej4bdk0rfv","category_id":"ckdi4ck1e0006z4ejds1f3q3k","_id":"ckdi4ck2g003bz4ejhhpbcntr"},{"post_id":"ckdi4ck2b002rz4ej8hnzfepx","category_id":"ckdi4ck1i000bz4ej9th6g1xr","_id":"ckdi4ck2h003fz4ejbyhr3qjz"},{"post_id":"ckdi4ck27002fz4ej2ys72ee5","category_id":"ckdi4ck28002lz4ej9kws5ff7","_id":"ckdi4ck2i003iz4ej3top39rg"},{"post_id":"ckdi4ck2b002uz4ej869u676q","category_id":"ckdi4ck1i000bz4ej9th6g1xr","_id":"ckdi4ck2j003mz4ej3ndaclaw"},{"post_id":"ckdi4ck2d002zz4ejahf92kcz","category_id":"ckdi4ck1i000bz4ej9th6g1xr","_id":"ckdi4ck2j003pz4ej6jif4gz8"},{"post_id":"ckdi4ck29002nz4ej06j19prj","category_id":"ckdi4ck28002lz4ej9kws5ff7","_id":"ckdi4ck2l003uz4ejce0q3wl2"},{"post_id":"ckdi4ck2e0036z4ej9kvkfh52","category_id":"ckdi4ck28002lz4ej9kws5ff7","_id":"ckdi4ck2l003xz4ej0ay65p9w"},{"post_id":"ckdi4ck2d0032z4ejei3y6ssn","category_id":"ckdi4ck2f0038z4ejc73ve03i","_id":"ckdi4ck2m0042z4ej1fyfckwf"},{"post_id":"ckdi4ck2l003wz4ej95ehenwm","category_id":"ckdi4ck2k003rz4ejh9whancq","_id":"ckdi4ck2o0047z4ej1saed7vr"},{"post_id":"ckdi4ck2i003lz4eje43s5qy4","category_id":"ckdi4ck2k003rz4ejh9whancq","_id":"ckdi4ck2p004cz4ej16ff4ibc"},{"post_id":"ckdi4ck2m0040z4ejh3wu5mi1","category_id":"ckdi4ck2k003rz4ejh9whancq","_id":"ckdi4ck2q004fz4ej3lngfzzm"},{"post_id":"ckdi4ck2n0044z4ej3ws4cm9x","category_id":"ckdi4ck2k003rz4ejh9whancq","_id":"ckdi4ck2r004kz4ej0048c8b9"},{"post_id":"ckdi4ck2j003oz4ej0c2gcyqc","category_id":"ckdi4ck2k003rz4ejh9whancq","_id":"ckdi4ck2r004nz4ej3s59d8kw"},{"post_id":"ckdi4ck2p004bz4ej0clw6js6","category_id":"ckdi4ck1i000bz4ej9th6g1xr","_id":"ckdi4ck2s004rz4ej3nth0ya6"},{"post_id":"ckdi4ck2k003tz4ej854l7gsd","category_id":"ckdi4ck2k003rz4ejh9whancq","_id":"ckdi4ck2t004tz4ejcl17h50x"},{"post_id":"ckdi4ck2n0046z4ej8vd94uj2","category_id":"ckdi4ck2q004gz4eje9yce8ao","_id":"ckdi4ck2t004xz4ejb0nn731a"},{"post_id":"ckdi4ck2r004mz4ej9s36dns5","category_id":"ckdi4ck1i000bz4ej9th6g1xr","_id":"ckdi4ck2t004zz4ej85znawtr"},{"post_id":"ckdi4ck2q004jz4ej03gc63r1","category_id":"ckdi4ck2t004uz4ej1vfc2jqd","_id":"ckdi4ck2u0054z4ejfi4o26bn"},{"post_id":"ckdi4ck2p004ez4ej44j01uck","category_id":"ckdi4ck2s004oz4ej31e89ssx","_id":"ckdi4ck2x005fz4ej8oqwbiuq"},{"post_id":"ckdi4ck2p004ez4ej44j01uck","category_id":"ckdi4ck2t0050z4ejcjp86n7r","_id":"ckdi4ck2y005hz4ej1itu6shg"},{"post_id":"ckdi4ck2p004ez4ej44j01uck","category_id":"ckdi4ck2v0058z4ejg606cru6","_id":"ckdi4ck2y005kz4ej3nr00vaj"}],"PostTag":[{"post_id":"ckdi4ck190002z4ej1jth0tgq","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck1n000mz4ejai7g33cz"},{"post_id":"ckdi4ck190002z4ej1jth0tgq","tag_id":"ckdi4ck1j000cz4ej4ps649pn","_id":"ckdi4ck1o000oz4ejc7wpck69"},{"post_id":"ckdi4ck190002z4ej1jth0tgq","tag_id":"ckdi4ck1l000gz4ej7q6i4nf7","_id":"ckdi4ck1p000sz4ej9nqm6qsg"},{"post_id":"ckdi4ck1m000iz4ejfs222cdy","tag_id":"ckdi4ck1j000cz4ej4ps649pn","_id":"ckdi4ck1q000uz4ejh6ytgaqp"},{"post_id":"ckdi4ck1c0004z4ejdav7ef0l","tag_id":"ckdi4ck1m000kz4ej9xl5bm7l","_id":"ckdi4ck1r000zz4ejey0gehti"},{"post_id":"ckdi4ck1c0004z4ejdav7ef0l","tag_id":"ckdi4ck1o000pz4ej3vj3b7th","_id":"ckdi4ck1s0011z4ej64777oww"},{"post_id":"ckdi4ck1n000nz4ej4zxk1coo","tag_id":"ckdi4ck1r000yz4ej027k1n5j","_id":"ckdi4ck1t0017z4ejazkugjr1"},{"post_id":"ckdi4ck1o000qz4ej3t1c7rho","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck1z001nz4ejedcmamyw"},{"post_id":"ckdi4ck1o000qz4ej3t1c7rho","tag_id":"ckdi4ck1t0014z4ej0pak0ufr","_id":"ckdi4ck20001qz4ejggd9gdgz"},{"post_id":"ckdi4ck1o000qz4ej3t1c7rho","tag_id":"ckdi4ck1u001az4ej3py56f8f","_id":"ckdi4ck21001uz4ejd2fyfhpi"},{"post_id":"ckdi4ck1o000qz4ej3t1c7rho","tag_id":"ckdi4ck1w001fz4ej5bqmfplf","_id":"ckdi4ck22001xz4ej51sf7zxd"},{"post_id":"ckdi4ck1z001oz4ej8naw89mi","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck230021z4ej34r379lm"},{"post_id":"ckdi4ck1z001oz4ej8naw89mi","tag_id":"ckdi4ck1t0014z4ej0pak0ufr","_id":"ckdi4ck230024z4ej4wotfh22"},{"post_id":"ckdi4ck1z001oz4ej8naw89mi","tag_id":"ckdi4ck1u001az4ej3py56f8f","_id":"ckdi4ck240028z4ejddpw6xsq"},{"post_id":"ckdi4ck1p000tz4ej9xdogfea","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck26002bz4ej5ijfb3mh"},{"post_id":"ckdi4ck1p000tz4ej9xdogfea","tag_id":"ckdi4ck1j000cz4ej4ps649pn","_id":"ckdi4ck26002ez4ejds423hmf"},{"post_id":"ckdi4ck1p000tz4ej9xdogfea","tag_id":"ckdi4ck1z001mz4ej67ilav37","_id":"ckdi4ck28002iz4ejdzj11w2g"},{"post_id":"ckdi4ck20001rz4ejb8s9glr2","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck28002mz4ej845o6be0"},{"post_id":"ckdi4ck20001rz4ejb8s9glr2","tag_id":"ckdi4ck1t0014z4ej0pak0ufr","_id":"ckdi4ck2a002qz4ejcf7oafbz"},{"post_id":"ckdi4ck20001rz4ejb8s9glr2","tag_id":"ckdi4ck1u001az4ej3py56f8f","_id":"ckdi4ck2b002tz4ejhejo7pnn"},{"post_id":"ckdi4ck21001vz4ej3qxk9su1","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck2d002yz4ej3v1d61lq"},{"post_id":"ckdi4ck21001vz4ej3qxk9su1","tag_id":"ckdi4ck1t0014z4ej0pak0ufr","_id":"ckdi4ck2d0031z4ejdec79bgh"},{"post_id":"ckdi4ck21001vz4ej3qxk9su1","tag_id":"ckdi4ck1u001az4ej3py56f8f","_id":"ckdi4ck2e0035z4ejayfs0lli"},{"post_id":"ckdi4ck1q000vz4ej5z6ihdb4","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck2f0039z4ejgmb974w9"},{"post_id":"ckdi4ck1q000vz4ej5z6ihdb4","tag_id":"ckdi4ck1j000cz4ej4ps649pn","_id":"ckdi4ck2h003dz4ejhrzr4nte"},{"post_id":"ckdi4ck1q000vz4ej5z6ihdb4","tag_id":"ckdi4ck21001tz4ejbraogiuh","_id":"ckdi4ck2h003gz4ejdjk1fbtz"},{"post_id":"ckdi4ck22001yz4ejaal0ha6m","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck2i003kz4ej9p5g4ugb"},{"post_id":"ckdi4ck22001yz4ejaal0ha6m","tag_id":"ckdi4ck21001tz4ejbraogiuh","_id":"ckdi4ck2j003nz4ejez48ddbp"},{"post_id":"ckdi4ck1r0010z4ejdkoiayyu","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck2k003sz4ejcz8dhf4k"},{"post_id":"ckdi4ck1r0010z4ejdkoiayyu","tag_id":"ckdi4ck220020z4ej04vp6gnk","_id":"ckdi4ck2l003vz4ejabxb0wc1"},{"post_id":"ckdi4ck1r0010z4ejdkoiayyu","tag_id":"ckdi4ck240027z4ej9w5a024a","_id":"ckdi4ck2m003zz4ej6go59t0k"},{"post_id":"ckdi4ck1s0012z4ej710y9tra","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck2n0043z4ejbwswd99a"},{"post_id":"ckdi4ck1s0012z4ej710y9tra","tag_id":"ckdi4ck27002hz4ej706y2987","_id":"ckdi4ck2n0045z4ejd437arz9"},{"post_id":"ckdi4ck1t0015z4ej1om7e7yi","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck2o004az4ej05mq49y5"},{"post_id":"ckdi4ck1t0015z4ej1om7e7yi","tag_id":"ckdi4ck1z001mz4ej67ilav37","_id":"ckdi4ck2p004dz4ejdga9477p"},{"post_id":"ckdi4ck1u0018z4ejcrg38w1m","tag_id":"ckdi4ck1j000cz4ej4ps649pn","_id":"ckdi4ck2q004iz4ej7o9r9m6x"},{"post_id":"ckdi4ck1u0018z4ejcrg38w1m","tag_id":"ckdi4ck21001tz4ejbraogiuh","_id":"ckdi4ck2r004lz4ejhjare0ud"},{"post_id":"ckdi4ck1u001bz4ej159g6fod","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck2s004qz4ej2l0vbh4h"},{"post_id":"ckdi4ck1u001bz4ej159g6fod","tag_id":"ckdi4ck2e0034z4ej7wmh6nkb","_id":"ckdi4ck2t004sz4ejhymw3z8o"},{"post_id":"ckdi4ck1v001dz4ej7p0thp9x","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck2t004wz4ej204a7d13"},{"post_id":"ckdi4ck1v001dz4ej7p0thp9x","tag_id":"ckdi4ck21001tz4ejbraogiuh","_id":"ckdi4ck2t004yz4ejgx0t5qu7"},{"post_id":"ckdi4ck1x001gz4ej42n66pou","tag_id":"ckdi4ck21001tz4ejbraogiuh","_id":"ckdi4ck2u0052z4ej0j3031sb"},{"post_id":"ckdi4ck1x001gz4ej42n66pou","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck2u0053z4ejc06rge6h"},{"post_id":"ckdi4ck1x001gz4ej42n66pou","tag_id":"ckdi4ck1j000cz4ej4ps649pn","_id":"ckdi4ck2u0055z4ejhougfx3f"},{"post_id":"ckdi4ck1y001iz4ej0l212ncz","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck2v0057z4ejg053hujw"},{"post_id":"ckdi4ck1y001iz4ej0l212ncz","tag_id":"ckdi4ck2k003qz4ej7dmca607","_id":"ckdi4ck2v0059z4ej1utnahbt"},{"post_id":"ckdi4ck1z001kz4ejf3qzfbaq","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck2w005bz4ej5tn575mp"},{"post_id":"ckdi4ck1z001kz4ejf3qzfbaq","tag_id":"ckdi4ck2m003yz4ejbaop1yn5","_id":"ckdi4ck2w005cz4ej2oxu2agx"},{"post_id":"ckdi4ck1z001kz4ejf3qzfbaq","tag_id":"ckdi4ck1z001mz4ej67ilav37","_id":"ckdi4ck2x005ez4ej14e44ofx"},{"post_id":"ckdi4ck230022z4ej46kffne4","tag_id":"ckdi4ck2q004hz4ejerc3cjrh","_id":"ckdi4ck2x005gz4ej7nvk0jgl"},{"post_id":"ckdi4ck230025z4ej5i9jcdtl","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck2y005jz4ejgt504ito"},{"post_id":"ckdi4ck230025z4ej5i9jcdtl","tag_id":"ckdi4ck1z001mz4ej67ilav37","_id":"ckdi4ck2y005lz4ej8madbo1n"},{"post_id":"ckdi4ck230025z4ej5i9jcdtl","tag_id":"ckdi4ck2s004pz4ejbq7l920q","_id":"ckdi4ck2y005nz4ejgxzoht0v"},{"post_id":"ckdi4ck240029z4ej6p33gbr4","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck2y005oz4ej2uyi9igl"},{"post_id":"ckdi4ck240029z4ej6p33gbr4","tag_id":"ckdi4ck2t004vz4ej4mbthegb","_id":"ckdi4ck2y005pz4ej91gv963s"},{"post_id":"ckdi4ck240029z4ej6p33gbr4","tag_id":"ckdi4ck1u001az4ej3py56f8f","_id":"ckdi4ck2z005rz4ej84rchsdo"},{"post_id":"ckdi4ck26002cz4ejchqrgadf","tag_id":"ckdi4ck2u0051z4ejfvbtfuub","_id":"ckdi4ck2z005sz4eje81xed9u"},{"post_id":"ckdi4ck28002jz4ej4bdk0rfv","tag_id":"ckdi4ck2v0056z4ejg817ap06","_id":"ckdi4ck2z005uz4ejhhvu9eq8"},{"post_id":"ckdi4ck29002nz4ej06j19prj","tag_id":"ckdi4ck2v005az4ejfc6z14d8","_id":"ckdi4ck2z005vz4ejagyxblee"},{"post_id":"ckdi4ck2b002rz4ej8hnzfepx","tag_id":"ckdi4ck2v005az4ejfc6z14d8","_id":"ckdi4ck30005xz4ejdl4o34fx"},{"post_id":"ckdi4ck2b002uz4ej869u676q","tag_id":"ckdi4ck1o000pz4ej3vj3b7th","_id":"ckdi4ck30005yz4ej88wkhrsz"},{"post_id":"ckdi4ck2b002uz4ej869u676q","tag_id":"ckdi4ck2y005iz4ej6kzt6d2p","_id":"ckdi4ck300060z4ej3ty755dy"},{"post_id":"ckdi4ck2b002uz4ej869u676q","tag_id":"ckdi4ck2y005mz4ej2qvkhtrc","_id":"ckdi4ck300061z4eja8yabpcp"},{"post_id":"ckdi4ck2d002zz4ejahf92kcz","tag_id":"ckdi4ck1o000pz4ej3vj3b7th","_id":"ckdi4ck300063z4ejevbfd8sd"},{"post_id":"ckdi4ck2d002zz4ejahf92kcz","tag_id":"ckdi4ck2z005qz4ej4wkl4r4w","_id":"ckdi4ck310064z4ej9usvh0yd"},{"post_id":"ckdi4ck2d0032z4ejei3y6ssn","tag_id":"ckdi4ck2z005qz4ej4wkl4r4w","_id":"ckdi4ck310066z4ej21hr2lcw"},{"post_id":"ckdi4ck2e0036z4ej9kvkfh52","tag_id":"ckdi4ck2z005wz4ej53bi0nvc","_id":"ckdi4ck310067z4ejascb3ccd"},{"post_id":"ckdi4ck2f003az4ej6j17343w","tag_id":"ckdi4ck30005zz4ejel3j72fl","_id":"ckdi4ck310068z4ejhwp00t21"},{"post_id":"ckdi4ck2f003az4ej6j17343w","tag_id":"ckdi4ck1l000gz4ej7q6i4nf7","_id":"ckdi4ck31006az4ej5zg989ar"},{"post_id":"ckdi4ck2f003az4ej6j17343w","tag_id":"ckdi4ck1j000cz4ej4ps649pn","_id":"ckdi4ck31006bz4ejey3vgqfx"},{"post_id":"ckdi4ck2h003ez4ej73cwhkyd","tag_id":"ckdi4ck30005zz4ejel3j72fl","_id":"ckdi4ck32006dz4ej58o50z8q"},{"post_id":"ckdi4ck2h003ez4ej73cwhkyd","tag_id":"ckdi4ck310065z4ejddmx20kc","_id":"ckdi4ck32006ez4ej94ykcr6o"},{"post_id":"ckdi4ck2h003hz4ej5decao69","tag_id":"ckdi4ck30005zz4ejel3j72fl","_id":"ckdi4ck33006gz4ej1nhe179x"},{"post_id":"ckdi4ck2h003hz4ej5decao69","tag_id":"ckdi4ck31006cz4ej0nltf8j5","_id":"ckdi4ck33006hz4ejgcph9ut5"},{"post_id":"ckdi4ck2i003lz4eje43s5qy4","tag_id":"ckdi4ck30005zz4ejel3j72fl","_id":"ckdi4ck33006kz4ejer7m2gnr"},{"post_id":"ckdi4ck2i003lz4eje43s5qy4","tag_id":"ckdi4ck240027z4ej9w5a024a","_id":"ckdi4ck33006lz4ej0bqi621i"},{"post_id":"ckdi4ck2i003lz4eje43s5qy4","tag_id":"ckdi4ck33006iz4ej4ksl2q4h","_id":"ckdi4ck34006nz4ej4hmre3sc"},{"post_id":"ckdi4ck2j003oz4ej0c2gcyqc","tag_id":"ckdi4ck30005zz4ejel3j72fl","_id":"ckdi4ck35006qz4ej7r93fb47"},{"post_id":"ckdi4ck2j003oz4ej0c2gcyqc","tag_id":"ckdi4ck33006iz4ej4ksl2q4h","_id":"ckdi4ck35006rz4eje3w5e5tw"},{"post_id":"ckdi4ck2j003oz4ej0c2gcyqc","tag_id":"ckdi4ck34006oz4ejdmogf0e9","_id":"ckdi4ck35006tz4ej2v5m7ta1"},{"post_id":"ckdi4ck2k003tz4ej854l7gsd","tag_id":"ckdi4ck30005zz4ejel3j72fl","_id":"ckdi4ck36006vz4ej5eo2flbf"},{"post_id":"ckdi4ck2k003tz4ej854l7gsd","tag_id":"ckdi4ck1z001mz4ej67ilav37","_id":"ckdi4ck36006wz4ejg9yebm7r"},{"post_id":"ckdi4ck2k003tz4ej854l7gsd","tag_id":"ckdi4ck1u001az4ej3py56f8f","_id":"ckdi4ck37006yz4ejhifm5kq1"},{"post_id":"ckdi4ck2k003tz4ej854l7gsd","tag_id":"ckdi4ck2s004pz4ejbq7l920q","_id":"ckdi4ck37006zz4ej05spbyd2"},{"post_id":"ckdi4ck2l003wz4ej95ehenwm","tag_id":"ckdi4ck30005zz4ejel3j72fl","_id":"ckdi4ck370071z4ejezruce39"},{"post_id":"ckdi4ck2l003wz4ej95ehenwm","tag_id":"ckdi4ck1z001mz4ej67ilav37","_id":"ckdi4ck370072z4ejaqtrbxhj"},{"post_id":"ckdi4ck2m0040z4ejh3wu5mi1","tag_id":"ckdi4ck30005zz4ejel3j72fl","_id":"ckdi4ck380074z4ej0rsm8h30"},{"post_id":"ckdi4ck2m0040z4ejh3wu5mi1","tag_id":"ckdi4ck1j000cz4ej4ps649pn","_id":"ckdi4ck380075z4ejdu8u8oz3"},{"post_id":"ckdi4ck2m0040z4ejh3wu5mi1","tag_id":"ckdi4ck370070z4ej1wm0er7s","_id":"ckdi4ck380077z4ejbk6zclzj"},{"post_id":"ckdi4ck2n0044z4ej3ws4cm9x","tag_id":"ckdi4ck30005zz4ejel3j72fl","_id":"ckdi4ck380078z4ejbiap1jyb"},{"post_id":"ckdi4ck2n0044z4ej3ws4cm9x","tag_id":"ckdi4ck21001tz4ejbraogiuh","_id":"ckdi4ck38007az4ejefs51r7g"},{"post_id":"ckdi4ck2n0046z4ej8vd94uj2","tag_id":"ckdi4ck380076z4ej30pq7gsf","_id":"ckdi4ck38007bz4ejfzqic6rq"},{"post_id":"ckdi4ck2p004bz4ej0clw6js6","tag_id":"ckdi4ck1o000pz4ej3vj3b7th","_id":"ckdi4ck39007ez4ej0fnc0qwd"},{"post_id":"ckdi4ck2p004bz4ej0clw6js6","tag_id":"ckdi4ck380079z4ejbuvzhsr7","_id":"ckdi4ck39007fz4ejc75n4lfd"},{"post_id":"ckdi4ck2p004bz4ej0clw6js6","tag_id":"ckdi4ck38007cz4ej7e7s35bc","_id":"ckdi4ck39007hz4ejgmxe74ux"},{"post_id":"ckdi4ck2p004ez4ej44j01uck","tag_id":"ckdi4ck39007dz4ejf8pn7rgt","_id":"ckdi4ck3a007iz4ej8ldfhnti"},{"post_id":"ckdi4ck2p004ez4ej44j01uck","tag_id":"ckdi4ck1t0014z4ej0pak0ufr","_id":"ckdi4ck3a007jz4ej010shcju"},{"post_id":"ckdi4ck2p004ez4ej44j01uck","tag_id":"ckdi4ck1e0007z4ej60ae6v47","_id":"ckdi4ck3a007kz4ej7qks56qq"},{"post_id":"ckdi4ck2p004ez4ej44j01uck","tag_id":"ckdi4ck1u001az4ej3py56f8f","_id":"ckdi4ck3a007lz4ej2fmfbziy"},{"post_id":"ckdi4ck2r004mz4ej9s36dns5","tag_id":"ckdi4ck1o000pz4ej3vj3b7th","_id":"ckdi4ck3a007mz4ejbsx1atq4"},{"post_id":"ckdi4ck2r004mz4ej9s36dns5","tag_id":"ckdi4ck39007gz4ej2weo5uns","_id":"ckdi4ck3a007nz4ej2jh33cju"}],"Tag":[{"name":"Leetcode","_id":"ckdi4ck1e0007z4ej60ae6v47"},{"name":"数组","_id":"ckdi4ck1j000cz4ej4ps649pn"},{"name":"哈希","_id":"ckdi4ck1l000gz4ej7q6i4nf7"},{"name":"Netty","_id":"ckdi4ck1m000kz4ej9xl5bm7l"},{"name":"Java后端面试","_id":"ckdi4ck1o000pz4ej3vj3b7th"},{"name":"广度优先搜索","_id":"ckdi4ck1r000yz4ej027k1n5j"},{"name":"二叉树","_id":"ckdi4ck1t0014z4ej0pak0ufr"},{"name":"递归","_id":"ckdi4ck1u001az4ej3py56f8f"},{"name":"深度优先搜索","_id":"ckdi4ck1w001fz4ej5bqmfplf"},{"name":"动态规划","_id":"ckdi4ck1z001mz4ej67ilav37"},{"name":"二分查找","_id":"ckdi4ck21001tz4ejbraogiuh"},{"name":"归并排序","_id":"ckdi4ck220020z4ej04vp6gnk"},{"name":"链表","_id":"ckdi4ck240027z4ej9w5a024a"},{"name":"快慢指针","_id":"ckdi4ck27002hz4ej706y2987"},{"name":"滑动窗口","_id":"ckdi4ck2e0034z4ej7wmh6nkb"},{"name":"贪心算法","_id":"ckdi4ck2k003qz4ej7dmca607"},{"name":"分治算法","_id":"ckdi4ck2m003yz4ejbaop1yn5"},{"name":"单调栈","_id":"ckdi4ck2q004hz4ejerc3cjrh"},{"name":"记忆化搜索","_id":"ckdi4ck2s004pz4ejbq7l920q"},{"name":"二叉搜索树","_id":"ckdi4ck2t004vz4ej4mbthegb"},{"name":"并查集","_id":"ckdi4ck2u0051z4ejfvbtfuub"},{"name":"Leetcode周赛","_id":"ckdi4ck2v0056z4ejg817ap06"},{"name":"Java","_id":"ckdi4ck2v005az4ejfc6z14d8"},{"name":"Redis","_id":"ckdi4ck2y005iz4ej6kzt6d2p"},{"name":"分布式锁","_id":"ckdi4ck2y005mz4ej2qvkhtrc"},{"name":"Spring Cloud","_id":"ckdi4ck2z005qz4ej4wkl4r4w"},{"name":"二叉树遍历","_id":"ckdi4ck2z005wz4ej53bi0nvc"},{"name":"剑指Offer","_id":"ckdi4ck30005zz4ejel3j72fl"},{"name":"二维数组","_id":"ckdi4ck310065z4ejddmx20kc"},{"name":"字符串","_id":"ckdi4ck31006cz4ej0nltf8j5"},{"name":"栈","_id":"ckdi4ck33006iz4ej4ksl2q4h"},{"name":"队列","_id":"ckdi4ck34006oz4ejdmogf0e9"},{"name":"位运算","_id":"ckdi4ck370070z4ej1wm0er7s"},{"name":"git","_id":"ckdi4ck380076z4ej30pq7gsf"},{"name":"数据库","_id":"ckdi4ck380079z4ejbuvzhsr7"},{"name":"Mysql","_id":"ckdi4ck38007cz4ej7e7s35bc"},{"name":"程序员面试经典","_id":"ckdi4ck39007dz4ejf8pn7rgt"},{"name":"计算机网络","_id":"ckdi4ck39007gz4ej2weo5uns"}]}}